
SerialCommunicationsPrint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000795c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007ba8  08007ba8  00017ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf8  08007bf8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c00  08007c00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c00  08007c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c04  08007c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007c08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08007c14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08007c14  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d764  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001875  00000000  00000000  0002d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000960  00000000  00000000  0002f060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000739  00000000  00000000  0002f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f2c5  00000000  00000000  000300f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d34d  00000000  00000000  0005f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012b54c  00000000  00000000  0006c70b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002678  00000000  00000000  00197c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08007b90 	.word	0x08007b90

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08007b90 	.word	0x08007b90

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b0:	f000 b982 	b.w	80005b8 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d2:	460d      	mov	r5, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	460f      	mov	r7, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d146      	bne.n	800036a <__udivmoddi4+0x9e>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4694      	mov	ip, r2
 80002e0:	d95e      	bls.n	80003a0 <__udivmoddi4+0xd4>
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	b143      	cbz	r3, 80002fa <__udivmoddi4+0x2e>
 80002e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	409c      	lsls	r4, r3
 80002f4:	fa20 f202 	lsr.w	r2, r0, r2
 80002f8:	4317      	orrs	r7, r2
 80002fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fe:	fa1f f58c 	uxth.w	r5, ip
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fbb7 f1fe 	udiv	r1, r7, lr
 8000308:	fb0e 7711 	mls	r7, lr, r1, r7
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x5e>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 8134 	bhi.w	8000590 <__udivmoddi4+0x2c4>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	fb00 f505 	mul.w	r5, r0, r5
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	42a5      	cmp	r5, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x88>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x86>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f200 8119 	bhi.w	8000584 <__udivmoddi4+0x2b8>
 8000352:	4610      	mov	r0, r2
 8000354:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	2100      	movs	r1, #0
 800035c:	b11e      	cbz	r6, 8000366 <__udivmoddi4+0x9a>
 800035e:	40dc      	lsrs	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	e9c6 4300 	strd	r4, r3, [r6]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0xb4>
 800036e:	2e00      	cmp	r6, #0
 8000370:	f000 80fc 	beq.w	800056c <__udivmoddi4+0x2a0>
 8000374:	2100      	movs	r1, #0
 8000376:	e9c6 0500 	strd	r0, r5, [r6]
 800037a:	4608      	mov	r0, r1
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14c      	bne.n	8000422 <__udivmoddi4+0x156>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2a6>
 800038e:	4282      	cmp	r2, r0
 8000390:	f240 80ef 	bls.w	8000572 <__udivmoddi4+0x2a6>
 8000394:	4608      	mov	r0, r1
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e5      	beq.n	8000366 <__udivmoddi4+0x9a>
 800039a:	e9c6 4700 	strd	r4, r7, [r6]
 800039e:	e7e2      	b.n	8000366 <__udivmoddi4+0x9a>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xd8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f382 	clz	r3, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 809f 	bne.w	80004ec <__udivmoddi4+0x220>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f5fe 	udiv	r5, r2, lr
 80003be:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c2:	0c22      	lsrs	r2, r4, #16
 80003c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c8:	fb07 f005 	mul.w	r0, r7, r5
 80003cc:	4290      	cmp	r0, r2
 80003ce:	d90f      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003d0:	eb1c 0202 	adds.w	r2, ip, r2
 80003d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003d8:	bf2c      	ite	cs
 80003da:	f04f 0901 	movcs.w	r9, #1
 80003de:	f04f 0900 	movcc.w	r9, #0
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d903      	bls.n	80003ee <__udivmoddi4+0x122>
 80003e6:	f1b9 0f00 	cmp.w	r9, #0
 80003ea:	f000 80ce 	beq.w	800058a <__udivmoddi4+0x2be>
 80003ee:	4645      	mov	r5, r8
 80003f0:	1a12      	subs	r2, r2, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	42a7      	cmp	r7, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x14e>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x14c>
 8000412:	42a7      	cmp	r7, r4
 8000414:	f200 80b3 	bhi.w	800057e <__udivmoddi4+0x2b2>
 8000418:	4610      	mov	r0, r2
 800041a:	1be4      	subs	r4, r4, r7
 800041c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000420:	e79c      	b.n	800035c <__udivmoddi4+0x90>
 8000422:	f1c1 0420 	rsb	r4, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 fc01 	lsl.w	ip, r5, r1
 800042c:	fa22 f704 	lsr.w	r7, r2, r4
 8000430:	40e5      	lsrs	r5, r4
 8000432:	408a      	lsls	r2, r1
 8000434:	431f      	orrs	r7, r3
 8000436:	fa20 f304 	lsr.w	r3, r0, r4
 800043a:	4088      	lsls	r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea43 030c 	orr.w	r3, r3, ip
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fbb5 fef8 	udiv	lr, r5, r8
 8000450:	fb08 551e 	mls	r5, r8, lr, r5
 8000454:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a9      	cmp	r9, r5
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b2>
 8000460:	197d      	adds	r5, r7, r5
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a9      	cmp	r9, r5
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b0>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 808d 	beq.w	8000596 <__udivmoddi4+0x2ca>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba5 0509 	sub.w	r5, r5, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb5 f3f8 	udiv	r3, r5, r8
 800048a:	fb08 5513 	mls	r5, r8, r3, r5
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000496:	45ac      	cmp	ip, r5
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1dc>
 800049a:	197d      	adds	r5, r7, r5
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1da>
 80004a2:	45ac      	cmp	ip, r5
 80004a4:	d87e      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004ac:	eba5 050c 	sub.w	r5, r5, ip
 80004b0:	fba3 9802 	umull	r9, r8, r3, r2
 80004b4:	4545      	cmp	r5, r8
 80004b6:	46ce      	mov	lr, r9
 80004b8:	46c4      	mov	ip, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1f6>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x200>
 80004be:	4548      	cmp	r0, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x200>
 80004c2:	3b01      	subs	r3, #1
 80004c4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d06f      	beq.n	80005b0 <__udivmoddi4+0x2e4>
 80004d0:	ebb0 020e 	subs.w	r2, r0, lr
 80004d4:	eb65 050c 	sbc.w	r5, r5, ip
 80004d8:	40ca      	lsrs	r2, r1
 80004da:	fa05 f404 	lsl.w	r4, r5, r4
 80004de:	40cd      	lsrs	r5, r1
 80004e0:	4618      	mov	r0, r3
 80004e2:	4314      	orrs	r4, r2
 80004e4:	2100      	movs	r1, #0
 80004e6:	e9c6 4500 	strd	r4, r5, [r6]
 80004ea:	e73c      	b.n	8000366 <__udivmoddi4+0x9a>
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	f1c3 0220 	rsb	r2, r3, #32
 80004f4:	4099      	lsls	r1, r3
 80004f6:	409c      	lsls	r4, r3
 80004f8:	40d5      	lsrs	r5, r2
 80004fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000502:	fa1f f78c 	uxth.w	r7, ip
 8000506:	fbb5 f0fe 	udiv	r0, r5, lr
 800050a:	430a      	orrs	r2, r1
 800050c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f507 	mul.w	r5, r0, r7
 800051a:	428d      	cmp	r5, r1
 800051c:	d90e      	bls.n	800053c <__udivmoddi4+0x270>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	bf2c      	ite	cs
 8000528:	f04f 0901 	movcs.w	r9, #1
 800052c:	f04f 0900 	movcc.w	r9, #0
 8000530:	428d      	cmp	r5, r1
 8000532:	d902      	bls.n	800053a <__udivmoddi4+0x26e>
 8000534:	f1b9 0f00 	cmp.w	r9, #0
 8000538:	d031      	beq.n	800059e <__udivmoddi4+0x2d2>
 800053a:	4640      	mov	r0, r8
 800053c:	1b49      	subs	r1, r1, r5
 800053e:	b292      	uxth	r2, r2
 8000540:	fbb1 f5fe 	udiv	r5, r1, lr
 8000544:	fb0e 1115 	mls	r1, lr, r5, r1
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	fb05 f107 	mul.w	r1, r5, r7
 8000550:	4291      	cmp	r1, r2
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x298>
 8000554:	eb1c 0202 	adds.w	r2, ip, r2
 8000558:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800055c:	d201      	bcs.n	8000562 <__udivmoddi4+0x296>
 800055e:	4291      	cmp	r1, r2
 8000560:	d823      	bhi.n	80005aa <__udivmoddi4+0x2de>
 8000562:	4645      	mov	r5, r8
 8000564:	1a52      	subs	r2, r2, r1
 8000566:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056a:	e726      	b.n	80003ba <__udivmoddi4+0xee>
 800056c:	4631      	mov	r1, r6
 800056e:	4630      	mov	r0, r6
 8000570:	e6f9      	b.n	8000366 <__udivmoddi4+0x9a>
 8000572:	1a84      	subs	r4, r0, r2
 8000574:	eb65 0203 	sbc.w	r2, r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	4617      	mov	r7, r2
 800057c:	e70b      	b.n	8000396 <__udivmoddi4+0xca>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14e>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	e6e4      	b.n	8000354 <__udivmoddi4+0x88>
 800058a:	3d02      	subs	r5, #2
 800058c:	4462      	add	r2, ip
 800058e:	e72f      	b.n	80003f0 <__udivmoddi4+0x124>
 8000590:	3902      	subs	r1, #2
 8000592:	4462      	add	r2, ip
 8000594:	e6c9      	b.n	800032a <__udivmoddi4+0x5e>
 8000596:	f1ae 0e02 	sub.w	lr, lr, #2
 800059a:	443d      	add	r5, r7
 800059c:	e76f      	b.n	800047e <__udivmoddi4+0x1b2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7cb      	b.n	800053c <__udivmoddi4+0x270>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443d      	add	r5, r7
 80005a8:	e77e      	b.n	80004a8 <__udivmoddi4+0x1dc>
 80005aa:	3d02      	subs	r5, #2
 80005ac:	4462      	add	r2, ip
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x298>
 80005b0:	4618      	mov	r0, r3
 80005b2:	4631      	mov	r1, r6
 80005b4:	e6d7      	b.n	8000366 <__udivmoddi4+0x9a>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fa43 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f819 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8bb 	bl	8000744 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 f86d 	bl	80006ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char message[] = "Hello, world!";
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <main+0x38>)
 80005d4:	463c      	mov	r4, r7
 80005d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d8:	c407      	stmia	r4!, {r0, r1, r2}
 80005da:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), 100);
 80005dc:	463b      	mov	r3, r7
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe54 	bl	800028c <strlen>
 80005e4:	4603      	mov	r3, r0
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4639      	mov	r1, r7
 80005ea:	2364      	movs	r3, #100	; 0x64
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <main+0x3c>)
 80005ee:	f006 fcfb 	bl	8006fe8 <HAL_UART_Transmit>
 80005f2:	e7f3      	b.n	80005dc <main+0x20>
 80005f4:	08007ba8 	.word	0x08007ba8
 80005f8:	20000028 	.word	0x20000028

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b09c      	sub	sp, #112	; 0x70
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2250      	movs	r2, #80	; 0x50
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f007 fa94 	bl	8007b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 0308 	add.w	r3, r7, #8
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]
 8000620:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000622:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <SystemClock_Config+0xac>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <SystemClock_Config+0xac>)
 8000628:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800062c:	6113      	str	r3, [r2, #16]
 800062e:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <SystemClock_Config+0xac>)
 8000630:	691b      	ldr	r3, [r3, #16]
 8000632:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800063a:	bf00      	nop
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <SystemClock_Config+0xac>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	f003 0308 	and.w	r3, r3, #8
 8000644:	2b08      	cmp	r3, #8
 8000646:	d1f9      	bne.n	800063c <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000650:	2308      	movs	r3, #8
 8000652:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fca5 	bl	8000fb0 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800066c:	f000 f884 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	231f      	movs	r3, #31
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2101      	movs	r1, #1
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f8c6 	bl	8001820 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800069a:	f000 f86d 	bl	8000778 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3770      	adds	r7, #112	; 0x70
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	44020800 	.word	0x44020800

080006ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006b2:	4a23      	ldr	r2, [pc, #140]	; (8000740 <MX_USART3_UART_Init+0x94>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x90>)
 80006f6:	f006 fc27 	bl	8006f48 <HAL_UART_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f83a 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_USART3_UART_Init+0x90>)
 8000708:	f007 f94c 	bl	80079a4 <HAL_UARTEx_SetTxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f831 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x90>)
 800071a:	f007 f981 	bl	8007a20 <HAL_UARTEx_SetRxFifoThreshold>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f828 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_USART3_UART_Init+0x90>)
 800072a:	f007 f902 	bl	8007932 <HAL_UARTEx_DisableFifoMode>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f820 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	40004800 	.word	0x40004800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <MX_GPIO_Init+0x30>)
 800074c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000750:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x30>)
 8000752:	f043 0308 	orr.w	r3, r3, #8
 8000756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x30>)
 800075c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	44020c00 	.word	0x44020c00

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>

08000782 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b0cc      	sub	sp, #304	; 0x130
 8000794:	af00      	add	r7, sp, #0
 8000796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800079a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800079e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007b8:	4618      	mov	r0, r3
 80007ba:	f44f 7384 	mov.w	r3, #264	; 0x108
 80007be:	461a      	mov	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f007 f9b9 	bl	8007b38 <memset>
  if(huart->Instance==USART3)
 80007c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <HAL_UART_MspInit+0x110>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d15d      	bne.n	8000894 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80007d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007dc:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80007e0:	f04f 0204 	mov.w	r2, #4
 80007e4:	f04f 0300 	mov.w	r3, #0
 80007e8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80007f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80007f4:	2200      	movs	r2, #0
 80007f6:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fb51 	bl	8001ea4 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000808:	f7ff ffb6 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800080c:	4b25      	ldr	r3, [pc, #148]	; (80008a4 <HAL_UART_MspInit+0x114>)
 800080e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000812:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <HAL_UART_MspInit+0x114>)
 8000814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000818:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <HAL_UART_MspInit+0x114>)
 800081e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000822:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800082a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000834:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000838:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <HAL_UART_MspInit+0x114>)
 800083c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x114>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <HAL_UART_MspInit+0x114>)
 800084c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000850:	f003 0208 	and.w	r2, r3, #8
 8000854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000858:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000862:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000866:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000868:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000882:	2307      	movs	r3, #7
 8000884:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <HAL_UART_MspInit+0x118>)
 8000890:	f000 fa3c 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40004800 	.word	0x40004800
 80008a4:	44020c00 	.word	0x44020c00
 80008a8:	42020c00 	.word	0x42020c00

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <MemManage_Handler+0x4>

080008be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <UsageFault_Handler+0x4>

080008ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f8:	f000 f904 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}

08000900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000906:	4b35      	ldr	r3, [pc, #212]	; (80009dc <SystemInit+0xdc>)
 8000908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800090c:	4a33      	ldr	r2, [pc, #204]	; (80009dc <SystemInit+0xdc>)
 800090e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000912:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000916:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <SystemInit+0xe0>)
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800091c:	4b30      	ldr	r3, [pc, #192]	; (80009e0 <SystemInit+0xe0>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <SystemInit+0xe0>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <SystemInit+0xe0>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	492c      	ldr	r1, [pc, #176]	; (80009e0 <SystemInit+0xe0>)
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <SystemInit+0xe4>)
 8000930:	4013      	ands	r3, r2
 8000932:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <SystemInit+0xe0>)
 8000936:	2200      	movs	r2, #0
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <SystemInit+0xe0>)
 800093c:	2200      	movs	r2, #0
 800093e:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <SystemInit+0xe0>)
 8000942:	2200      	movs	r2, #0
 8000944:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <SystemInit+0xe0>)
 8000948:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <SystemInit+0xe8>)
 800094a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <SystemInit+0xe0>)
 800094e:	2200      	movs	r2, #0
 8000950:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <SystemInit+0xe0>)
 8000954:	4a24      	ldr	r2, [pc, #144]	; (80009e8 <SystemInit+0xe8>)
 8000956:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <SystemInit+0xe0>)
 800095a:	2200      	movs	r2, #0
 800095c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <SystemInit+0xe0>)
 8000960:	4a21      	ldr	r2, [pc, #132]	; (80009e8 <SystemInit+0xe8>)
 8000962:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemInit+0xe0>)
 8000966:	2200      	movs	r2, #0
 8000968:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <SystemInit+0xe0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <SystemInit+0xe0>)
 8000970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000974:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <SystemInit+0xe0>)
 8000978:	2200      	movs	r2, #0
 800097a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <SystemInit+0xdc>)
 800097e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000982:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000984:	4b19      	ldr	r3, [pc, #100]	; (80009ec <SystemInit+0xec>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800098c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000994:	d003      	beq.n	800099e <SystemInit+0x9e>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800099c:	d117      	bne.n	80009ce <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <SystemInit+0xec>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d005      	beq.n	80009b6 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <SystemInit+0xec>)
 80009ac:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <SystemInit+0xf0>)
 80009ae:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80009b0:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <SystemInit+0xec>)
 80009b2:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <SystemInit+0xf4>)
 80009b4:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <SystemInit+0xec>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a0c      	ldr	r2, [pc, #48]	; (80009ec <SystemInit+0xec>)
 80009bc:	f043 0302 	orr.w	r3, r3, #2
 80009c0:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <SystemInit+0xec>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <SystemInit+0xec>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	61d3      	str	r3, [r2, #28]
  }
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00
 80009e0:	44020c00 	.word	0x44020c00
 80009e4:	eae2eae3 	.word	0xeae2eae3
 80009e8:	01010280 	.word	0x01010280
 80009ec:	40022000 	.word	0x40022000
 80009f0:	08192a3b 	.word	0x08192a3b
 80009f4:	4c5d6e7f 	.word	0x4c5d6e7f

080009f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f7ff ff80 	bl	8000900 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	; (8000a34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <LoopForever+0xe>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	; (8000a44 <LoopForever+0x16>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a26:	f007 f88f 	bl	8007b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2a:	f7ff fdc7 	bl	80005bc <main>

08000a2e <LoopForever>:

LoopForever:
    b LoopForever
 8000a2e:	e7fe      	b.n	8000a2e <LoopForever>
  ldr   r0, =_estack
 8000a30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a3c:	08007c08 	.word	0x08007c08
  ldr r2, =_sbss
 8000a40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a44:	200000c0 	.word	0x200000c0

08000a48 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f929 	bl	8000ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000a56:	f001 f89b 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_Init+0x40>)
 8000a5e:	6a1b      	ldr	r3, [r3, #32]
 8000a60:	f003 030f 	and.w	r3, r3, #15
 8000a64:	490a      	ldr	r1, [pc, #40]	; (8000a90 <HAL_Init+0x44>)
 8000a66:	5ccb      	ldrb	r3, [r1, r3]
 8000a68:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6c:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <HAL_Init+0x48>)
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a70:	200f      	movs	r0, #15
 8000a72:	f000 f811 	bl	8000a98 <HAL_InitTick>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e002      	b.n	8000a86 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a80:	f7ff fe7f 	bl	8000782 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	44020c00 	.word	0x44020c00
 8000a90:	08007bb8 	.word	0x08007bb8
 8000a94:	20000000 	.word	0x20000000

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_InitTick+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d101      	bne.n	8000aac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e021      	b.n	8000af0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <HAL_InitTick+0x64>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_InitTick+0x60>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f915 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f000 f8ed 	bl	8000cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x68>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	200000bc 	.word	0x200000bc

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200000bc 	.word	0x200000bc

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	88fb      	ldrh	r3, [r7, #6]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c74:	d301      	bcc.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e00f      	b.n	8000c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <SysTick_Config+0x40>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	210f      	movs	r1, #15
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c88:	f7ff ff8e 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <SysTick_Config+0x40>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <SysTick_Config+0x40>)
 8000c94:	2207      	movs	r2, #7
 8000c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	e000e010 	.word	0xe000e010

08000ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f7ff ff47 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5e 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb2 	bl	8000c64 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d1a:	e136      	b.n	8000f8a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8128 	beq.w	8000f84 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d003      	beq.n	8000d44 <HAL_GPIO_Init+0x38>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b12      	cmp	r3, #18
 8000d42:	d125      	bne.n	8000d90 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	08da      	lsrs	r2, r3, #3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3208      	adds	r2, #8
 8000d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d50:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	f003 0307 	and.w	r3, r3, #7
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4013      	ands	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	f003 020f 	and.w	r2, r3, #15
 8000d70:	693b      	ldr	r3, [r7, #16]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	08da      	lsrs	r2, r3, #3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3208      	adds	r2, #8
 8000d8a:	6979      	ldr	r1, [r7, #20]
 8000d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	697a      	ldr	r2, [r7, #20]
 8000da4:	4013      	ands	r3, r2
 8000da6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0203 	and.w	r2, r3, #3
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	697a      	ldr	r2, [r7, #20]
 8000dc2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d00b      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d007      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	2b11      	cmp	r3, #17
 8000dda:	d003      	beq.n	8000de4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2b12      	cmp	r3, #18
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	697a      	ldr	r2, [r7, #20]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	4013      	ands	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d017      	beq.n	8000e7e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4013      	ands	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d07c      	beq.n	8000f84 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e8a:	4a47      	ldr	r2, [pc, #284]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	089b      	lsrs	r3, r3, #2
 8000e90:	3318      	adds	r3, #24
 8000e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e96:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	220f      	movs	r2, #15
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0a9a      	lsrs	r2, r3, #10
 8000eb2:	4b3e      	ldr	r3, [pc, #248]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f002 0203 	and.w	r2, r2, #3
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	4093      	lsls	r3, r2
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ec6:	4938      	ldr	r1, [pc, #224]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3318      	adds	r3, #24
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ed4:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000ef8:	4a2b      	ldr	r2, [pc, #172]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f22:	4a21      	ldr	r2, [pc, #132]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000f28:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f2e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4013      	ands	r3, r2
 8000f38:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f4e:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43db      	mvns	r3, r3
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	3301      	adds	r3, #1
 8000f88:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa22 f303 	lsr.w	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f47f aec1 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	371c      	adds	r7, #28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	44022000 	.word	0x44022000
 8000fac:	002f7f7f 	.word	0x002f7f7f

08000fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 bc28 	b.w	8001814 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc4:	4b94      	ldr	r3, [pc, #592]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8000fc6:	69db      	ldr	r3, [r3, #28]
 8000fc8:	f003 0318 	and.w	r3, r3, #24
 8000fcc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000fce:	4b92      	ldr	r3, [pc, #584]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd2:	f003 0303 	and.w	r3, r3, #3
 8000fd6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0310 	and.w	r3, r3, #16
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d05b      	beq.n	800109c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d005      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x46>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	2b18      	cmp	r3, #24
 8000fee:	d114      	bne.n	800101a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d111      	bne.n	800101a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	f000 bc08 	b.w	8001814 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001004:	4b84      	ldr	r3, [pc, #528]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	041b      	lsls	r3, r3, #16
 8001012:	4981      	ldr	r1, [pc, #516]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001014:	4313      	orrs	r3, r2
 8001016:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001018:	e040      	b.n	800109c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d023      	beq.n	800106a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001022:	4b7d      	ldr	r3, [pc, #500]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a7c      	ldr	r2, [pc, #496]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102e:	f7ff fd7d 	bl	8000b2c <HAL_GetTick>
 8001032:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001036:	f7ff fd79 	bl	8000b2c <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e3e5      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001048:	4b73      	ldr	r3, [pc, #460]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	496d      	ldr	r1, [pc, #436]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001064:	4313      	orrs	r3, r2
 8001066:	618b      	str	r3, [r1, #24]
 8001068:	e018      	b.n	800109c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800106a:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a6a      	ldr	r2, [pc, #424]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001070:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001074:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001076:	f7ff fd59 	bl	8000b2c <HAL_GetTick>
 800107a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800107e:	f7ff fd55 	bl	8000b2c <HAL_GetTick>
 8001082:	4602      	mov	r2, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e3c1      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001090:	4b61      	ldr	r3, [pc, #388]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1f0      	bne.n	800107e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f000 80a0 	beq.w	80011ea <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_OscConfig+0x10c>
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b18      	cmp	r3, #24
 80010b4:	d109      	bne.n	80010ca <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	f040 8092 	bne.w	80011ea <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e3a4      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d2:	d106      	bne.n	80010e2 <HAL_RCC_OscConfig+0x132>
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	e058      	b.n	8001194 <HAL_RCC_OscConfig+0x1e4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d112      	bne.n	8001110 <HAL_RCC_OscConfig+0x160>
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a4a      	ldr	r2, [pc, #296]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a47      	ldr	r2, [pc, #284]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80010fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a44      	ldr	r2, [pc, #272]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001108:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e041      	b.n	8001194 <HAL_RCC_OscConfig+0x1e4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001118:	d112      	bne.n	8001140 <HAL_RCC_OscConfig+0x190>
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a3e      	ldr	r2, [pc, #248]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a3b      	ldr	r2, [pc, #236]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800112c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a38      	ldr	r2, [pc, #224]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e029      	b.n	8001194 <HAL_RCC_OscConfig+0x1e4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001148:	d112      	bne.n	8001170 <HAL_RCC_OscConfig+0x1c0>
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a32      	ldr	r2, [pc, #200]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a2f      	ldr	r2, [pc, #188]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800115c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e011      	b.n	8001194 <HAL_RCC_OscConfig+0x1e4>
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a28      	ldr	r2, [pc, #160]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a25      	ldr	r2, [pc, #148]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a22      	ldr	r2, [pc, #136]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 800118e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d013      	beq.n	80011c4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fcc6 	bl	8000b2c <HAL_GetTick>
 80011a0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011a4:	f7ff fcc2 	bl	8000b2c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b64      	cmp	r3, #100	; 0x64
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e32e      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0f0      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1f4>
 80011c2:	e012      	b.n	80011ea <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c4:	f7ff fcb2 	bl	8000b2c <HAL_GetTick>
 80011c8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80011cc:	f7ff fcae 	bl	8000b2c <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b64      	cmp	r3, #100	; 0x64
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e31a      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_RCC_OscConfig+0x268>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1f0      	bne.n	80011cc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809a 	beq.w	800132c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d005      	beq.n	800120a <HAL_RCC_OscConfig+0x25a>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b18      	cmp	r3, #24
 8001202:	d149      	bne.n	8001298 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d146      	bne.n	8001298 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d104      	bne.n	800121c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e2fe      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
 8001216:	bf00      	nop
 8001218:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001222:	4b9a      	ldr	r3, [pc, #616]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0218 	and.w	r2, r3, #24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	429a      	cmp	r2, r3
 8001230:	d014      	beq.n	800125c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001232:	4b96      	ldr	r3, [pc, #600]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 0218 	bic.w	r2, r3, #24
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	4993      	ldr	r1, [pc, #588]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001244:	f000 fdd0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001248:	4b91      	ldr	r3, [pc, #580]	; (8001490 <HAL_RCC_OscConfig+0x4e0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fc23 	bl	8000a98 <HAL_InitTick>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e2db      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc66 	bl	8000b2c <HAL_GetTick>
 8001260:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc62 	bl	8000b2c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e2ce      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	041b      	lsls	r3, r3, #16
 8001290:	497e      	ldr	r1, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001296:	e049      	b.n	800132c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d02c      	beq.n	80012fa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80012a0:	4b7a      	ldr	r3, [pc, #488]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 0218 	bic.w	r2, r3, #24
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	4977      	ldr	r1, [pc, #476]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012be:	f7ff fc35 	bl	8000b2c <HAL_GetTick>
 80012c2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc31 	bl	8000b2c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e29d      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d0f0      	beq.n	80012c6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
 80012f0:	041b      	lsls	r3, r3, #16
 80012f2:	4966      	ldr	r1, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	610b      	str	r3, [r1, #16]
 80012f8:	e018      	b.n	800132c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fa:	4b64      	ldr	r3, [pc, #400]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fc11 	bl	8000b2c <HAL_GetTick>
 800130a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc0d 	bl	8000b2c <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e279      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001320:	4b5a      	ldr	r3, [pc, #360]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03c      	beq.n	80013b2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d01c      	beq.n	800137a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001340:	4b52      	ldr	r3, [pc, #328]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001342:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001346:	4a51      	ldr	r2, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001348:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800134c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fbec 	bl	8000b2c <HAL_GetTick>
 8001354:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001358:	f7ff fbe8 	bl	8000b2c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e254      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800136a:	4b48      	ldr	r3, [pc, #288]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800136c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0ef      	beq.n	8001358 <HAL_RCC_OscConfig+0x3a8>
 8001378:	e01b      	b.n	80013b2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800137c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001380:	4a42      	ldr	r2, [pc, #264]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001386:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138a:	f7ff fbcf 	bl	8000b2c <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001392:	f7ff fbcb 	bl	8000b2c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e237      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80013a4:	4b39      	ldr	r3, [pc, #228]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 80013a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ef      	bne.n	8001392 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 80d2 	beq.w	8001564 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <HAL_RCC_OscConfig+0x4e4>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d118      	bne.n	80013fe <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_RCC_OscConfig+0x4e4>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_RCC_OscConfig+0x4e4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d8:	f7ff fba8 	bl	8000b2c <HAL_GetTick>
 80013dc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013e0:	f7ff fba4 	bl	8000b2c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e210      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80013f2:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x4e4>)
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d108      	bne.n	8001418 <HAL_RCC_OscConfig+0x468>
 8001406:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800140c:	4a1f      	ldr	r2, [pc, #124]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001416:	e074      	b.n	8001502 <HAL_RCC_OscConfig+0x552>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d118      	bne.n	8001452 <HAL_RCC_OscConfig+0x4a2>
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001426:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001436:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800143c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001450:	e057      	b.n	8001502 <HAL_RCC_OscConfig+0x552>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b05      	cmp	r3, #5
 8001458:	d11e      	bne.n	8001498 <HAL_RCC_OscConfig+0x4e8>
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001460:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 800147c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001480:	4a02      	ldr	r2, [pc, #8]	; (800148c <HAL_RCC_OscConfig+0x4dc>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800148a:	e03a      	b.n	8001502 <HAL_RCC_OscConfig+0x552>
 800148c:	44020c00 	.word	0x44020c00
 8001490:	20000004 	.word	0x20000004
 8001494:	44020800 	.word	0x44020800
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	2b85      	cmp	r3, #133	; 0x85
 800149e:	d118      	bne.n	80014d2 <HAL_RCC_OscConfig+0x522>
 80014a0:	4ba2      	ldr	r3, [pc, #648]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014a6:	4aa1      	ldr	r2, [pc, #644]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014a8:	f043 0304 	orr.w	r3, r3, #4
 80014ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014b0:	4b9e      	ldr	r3, [pc, #632]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b6:	4a9d      	ldr	r2, [pc, #628]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014c0:	4b9a      	ldr	r3, [pc, #616]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014c6:	4a99      	ldr	r2, [pc, #612]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014d0:	e017      	b.n	8001502 <HAL_RCC_OscConfig+0x552>
 80014d2:	4b96      	ldr	r3, [pc, #600]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014d8:	4a94      	ldr	r2, [pc, #592]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014da:	f023 0301 	bic.w	r3, r3, #1
 80014de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014e2:	4b92      	ldr	r3, [pc, #584]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014e8:	4a90      	ldr	r2, [pc, #576]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014ea:	f023 0304 	bic.w	r3, r3, #4
 80014ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80014f2:	4b8e      	ldr	r3, [pc, #568]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f8:	4a8c      	ldr	r2, [pc, #560]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80014fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d016      	beq.n	8001538 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150a:	f7ff fb0f 	bl	8000b2c <HAL_GetTick>
 800150e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001510:	e00a      	b.n	8001528 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fb0b 	bl	8000b2c <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001520:	4293      	cmp	r3, r2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e175      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001528:	4b80      	ldr	r3, [pc, #512]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800152a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0ed      	beq.n	8001512 <HAL_RCC_OscConfig+0x562>
 8001536:	e015      	b.n	8001564 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001538:	f7ff faf8 	bl	8000b2c <HAL_GetTick>
 800153c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153e:	e00a      	b.n	8001556 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff faf4 	bl	8000b2c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f241 3288 	movw	r2, #5000	; 0x1388
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e15e      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001556:	4b75      	ldr	r3, [pc, #468]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1ed      	bne.n	8001540 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0320 	and.w	r3, r3, #32
 800156c:	2b00      	cmp	r3, #0
 800156e:	d036      	beq.n	80015de <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001574:	2b00      	cmp	r3, #0
 8001576:	d019      	beq.n	80015ac <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001578:	4b6c      	ldr	r3, [pc, #432]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6b      	ldr	r2, [pc, #428]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800157e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001582:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fad2 	bl	8000b2c <HAL_GetTick>
 8001588:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800158c:	f7ff face 	bl	8000b2c <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e13a      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x5dc>
 80015aa:	e018      	b.n	80015de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015ac:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5e      	ldr	r2, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80015b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fab8 	bl	8000b2c <HAL_GetTick>
 80015bc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80015c0:	f7ff fab4 	bl	8000b2c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e120      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80015d2:	4b56      	ldr	r3, [pc, #344]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 8115 	beq.w	8001812 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	2b18      	cmp	r3, #24
 80015ec:	f000 80af 	beq.w	800174e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	f040 8086 	bne.w	8001706 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80015fa:	4b4c      	ldr	r3, [pc, #304]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a4b      	ldr	r2, [pc, #300]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001604:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fa91 	bl	8000b2c <HAL_GetTick>
 800160a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800160e:	f7ff fa8d 	bl	8000b2c <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e0f9      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001634:	f023 0303 	bic.w	r3, r3, #3
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001640:	0212      	lsls	r2, r2, #8
 8001642:	430a      	orrs	r2, r1
 8001644:	4939      	ldr	r1, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001646:	4313      	orrs	r3, r2
 8001648:	628b      	str	r3, [r1, #40]	; 0x28
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164e:	3b01      	subs	r3, #1
 8001650:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	3b01      	subs	r3, #1
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	b29b      	uxth	r3, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001664:	3b01      	subs	r3, #1
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	3b01      	subs	r3, #1
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800167a:	492c      	ldr	r1, [pc, #176]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800167c:	4313      	orrs	r3, r2
 800167e:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001680:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	4a29      	ldr	r2, [pc, #164]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001686:	f023 0310 	bic.w	r3, r3, #16
 800168a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f023 020c 	bic.w	r2, r3, #12
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	491f      	ldr	r1, [pc, #124]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	f023 0220 	bic.w	r2, r3, #32
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c0:	491a      	ldr	r1, [pc, #104]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	4a18      	ldr	r2, [pc, #96]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a15      	ldr	r2, [pc, #84]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7ff fa25 	bl	8000b2c <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80016e6:	f7ff fa21 	bl	8000b2c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e08d      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x736>
 8001704:	e085      	b.n	8001812 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x77c>)
 800170c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fa0b 	bl	8000b2c <HAL_GetTick>
 8001716:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800171a:	f7ff fa07 	bl	8000b2c <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d903      	bls.n	8001730 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e073      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
 800172c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001730:	4b3a      	ldr	r3, [pc, #232]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800173c:	4b37      	ldr	r3, [pc, #220]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 800173e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001740:	4a36      	ldr	r2, [pc, #216]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001742:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001746:	f023 0303 	bic.w	r3, r3, #3
 800174a:	6293      	str	r3, [r2, #40]	; 0x28
 800174c:	e061      	b.n	8001812 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800174e:	4b33      	ldr	r3, [pc, #204]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001752:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001758:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	2b01      	cmp	r3, #1
 8001760:	d031      	beq.n	80017c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	f003 0203 	and.w	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d12a      	bne.n	80017c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	0a1b      	lsrs	r3, r3, #8
 8001774:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d122      	bne.n	80017c6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800178a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800178c:	429a      	cmp	r2, r3
 800178e:	d11a      	bne.n	80017c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800179e:	429a      	cmp	r2, r3
 80017a0:	d111      	bne.n	80017c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ae:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d108      	bne.n	80017c6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	0e1b      	lsrs	r3, r3, #24
 80017b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e024      	b.n	8001814 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	08db      	lsrs	r3, r3, #3
 80017d0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80017d8:	429a      	cmp	r2, r3
 80017da:	d01a      	beq.n	8001812 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 80017e2:	f023 0310 	bic.w	r3, r3, #16
 80017e6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff f9a0 	bl	8000b2c <HAL_GetTick>
 80017ec:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80017ee:	bf00      	nop
 80017f0:	f7ff f99c 	bl	8000b2c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d0f9      	beq.n	80017f0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_RCC_OscConfig+0x86c>)
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	44020c00 	.word	0x44020c00

08001820 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e19e      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b83      	ldr	r3, [pc, #524]	; (8001a44 <HAL_RCC_ClockConfig+0x224>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 030f 	and.w	r3, r3, #15
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <HAL_RCC_ClockConfig+0x224>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 020f 	bic.w	r2, r3, #15
 800184a:	497e      	ldr	r1, [pc, #504]	; (8001a44 <HAL_RCC_ClockConfig+0x224>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b7c      	ldr	r3, [pc, #496]	; (8001a44 <HAL_RCC_ClockConfig+0x224>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e186      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d012      	beq.n	8001896 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	695a      	ldr	r2, [r3, #20]
 8001874:	4b74      	ldr	r3, [pc, #464]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	0a1b      	lsrs	r3, r3, #8
 800187a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800187e:	429a      	cmp	r2, r3
 8001880:	d909      	bls.n	8001896 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001882:	4b71      	ldr	r3, [pc, #452]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	021b      	lsls	r3, r3, #8
 8001890:	496d      	ldr	r1, [pc, #436]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001892:	4313      	orrs	r3, r2
 8001894:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d012      	beq.n	80018c8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691a      	ldr	r2, [r3, #16]
 80018a6:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d909      	bls.n	80018c8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80018b4:	4b64      	ldr	r3, [pc, #400]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	4961      	ldr	r1, [pc, #388]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d010      	beq.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68da      	ldr	r2, [r3, #12]
 80018d8:	4b5b      	ldr	r3, [pc, #364]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d908      	bls.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80018e4:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	4955      	ldr	r1, [pc, #340]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	429a      	cmp	r2, r3
 8001910:	d908      	bls.n	8001924 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001912:	4b4d      	ldr	r3, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	f023 020f 	bic.w	r2, r3, #15
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	494a      	ldr	r1, [pc, #296]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001920:	4313      	orrs	r3, r2
 8001922:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8093 	beq.w	8001a58 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d107      	bne.n	800194a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800193a:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d121      	bne.n	800198a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e113      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d115      	bne.n	800198a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e107      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0fb      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197a:	4b33      	ldr	r3, [pc, #204]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0f3      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	492c      	ldr	r1, [pc, #176]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001998:	4313      	orrs	r3, r2
 800199a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800199c:	f7ff f8c6 	bl	8000b2c <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d112      	bne.n	80019d0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019aa:	e00a      	b.n	80019c2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80019ac:	f7ff f8be 	bl	8000b2c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e0d7      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c2:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80019c4:	69db      	ldr	r3, [r3, #28]
 80019c6:	f003 0318 	and.w	r3, r3, #24
 80019ca:	2b18      	cmp	r3, #24
 80019cc:	d1ee      	bne.n	80019ac <HAL_RCC_ClockConfig+0x18c>
 80019ce:	e043      	b.n	8001a58 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f8a7 	bl	8000b2c <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0c0      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f003 0318 	and.w	r3, r3, #24
 80019f8:	2b10      	cmp	r3, #16
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_ClockConfig+0x1ba>
 80019fc:	e02c      	b.n	8001a58 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d122      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001a06:	e00a      	b.n	8001a1e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a08:	f7ff f890 	bl	8000b2c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e0a9      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_RCC_ClockConfig+0x228>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	f003 0318 	and.w	r3, r3, #24
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d1ee      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x1e8>
 8001a2a:	e015      	b.n	8001a58 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2c:	f7ff f87e 	bl	8000b2c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d906      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e097      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4c:	4b4b      	ldr	r3, [pc, #300]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	f003 0318 	and.w	r3, r3, #24
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	4b44      	ldr	r3, [pc, #272]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d208      	bcs.n	8001a86 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001a74:	4b41      	ldr	r3, [pc, #260]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f023 020f 	bic.w	r2, r3, #15
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	493e      	ldr	r1, [pc, #248]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a86:	4b3e      	ldr	r3, [pc, #248]	; (8001b80 <HAL_RCC_ClockConfig+0x360>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d210      	bcs.n	8001ab6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <HAL_RCC_ClockConfig+0x360>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 020f 	bic.w	r2, r3, #15
 8001a9c:	4938      	ldr	r1, [pc, #224]	; (8001b80 <HAL_RCC_ClockConfig+0x360>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_ClockConfig+0x360>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d001      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e05d      	b.n	8001b72 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d010      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d208      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001ad2:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
 8001ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4927      	ldr	r1, [pc, #156]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d012      	beq.n	8001b16 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691a      	ldr	r2, [r3, #16]
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d209      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	011b      	lsls	r3, r3, #4
 8001b10:	491a      	ldr	r1, [pc, #104]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0310 	and.w	r3, r3, #16
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d209      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001b34:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	490e      	ldr	r1, [pc, #56]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001b48:	f000 f822 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <HAL_RCC_ClockConfig+0x35c>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	490b      	ldr	r1, [pc, #44]	; (8001b84 <HAL_RCC_ClockConfig+0x364>)
 8001b58:	5ccb      	ldrb	r3, [r1, r3]
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x368>)
 8001b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_RCC_ClockConfig+0x36c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe ff96 	bl	8000a98 <HAL_InitTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001b70:	7afb      	ldrb	r3, [r7, #11]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	44020c00 	.word	0x44020c00
 8001b80:	40022000 	.word	0x40022000
 8001b84:	08007bb8 	.word	0x08007bb8
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	20000004 	.word	0x20000004

08001b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	; 0x24
 8001b94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b96:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0318 	and.w	r3, r3, #24
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001ba2:	4b8a      	ldr	r3, [pc, #552]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x23c>)
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e107      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba8:	4b87      	ldr	r3, [pc, #540]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	f003 0318 	and.w	r3, r3, #24
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d112      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001bb4:	4b84      	ldr	r3, [pc, #528]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001bc0:	4b81      	ldr	r3, [pc, #516]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	08db      	lsrs	r3, r3, #3
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	4a81      	ldr	r2, [pc, #516]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e0f1      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001bd6:	61fb      	str	r3, [r7, #28]
 8001bd8:	e0ee      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 0318 	and.w	r3, r3, #24
 8001be2:	2b10      	cmp	r3, #16
 8001be4:	d102      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001be6:	4b7b      	ldr	r3, [pc, #492]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x244>)
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e0e5      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f003 0318 	and.w	r3, r3, #24
 8001bf4:	2b18      	cmp	r3, #24
 8001bf6:	f040 80dd 	bne.w	8001db4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001c04:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001c10:	4b6d      	ldr	r3, [pc, #436]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c34:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 80b7 	beq.w	8001dae <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d003      	beq.n	8001c4e <HAL_RCC_GetSysClockFreq+0xbe>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d056      	beq.n	8001cfa <HAL_RCC_GetSysClockFreq+0x16a>
 8001c4c:	e077      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001c4e:	4b5e      	ldr	r3, [pc, #376]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02d      	beq.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001c5a:	4b5b      	ldr	r3, [pc, #364]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	08db      	lsrs	r3, r3, #3
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001c66:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c84:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c94:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c98:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8001c9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cb0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001cb4:	e065      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cc0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ddc <HAL_RCC_GetSysClockFreq+0x24c>
 8001cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cc8:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001cd8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cdc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8001ce0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ce4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ce8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cec:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001cf8:	e043      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001de0 <HAL_RCC_GetSysClockFreq+0x250>
 8001d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d20:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8001d24:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d30:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001d3c:	e021      	b.n	8001d82 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	ee07 3a90 	vmov	s15, r3
 8001d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d48:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001de4 <HAL_RCC_GetSysClockFreq+0x254>
 8001d4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d64:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8001d68:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d74:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001d80:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d86:	0a5b      	lsrs	r3, r3, #9
 8001d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	ee07 3a90 	vmov	s15, r3
 8001d96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d9a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001da6:	ee17 3a90 	vmov	r3, s15
 8001daa:	61fb      	str	r3, [r7, #28]
 8001dac:	e004      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
 8001db2:	e001      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001db6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001db8:	69fb      	ldr	r3, [r7, #28]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	44020c00 	.word	0x44020c00
 8001dcc:	003d0900 	.word	0x003d0900
 8001dd0:	03d09000 	.word	0x03d09000
 8001dd4:	017d7840 	.word	0x017d7840
 8001dd8:	46000000 	.word	0x46000000
 8001ddc:	4c742400 	.word	0x4c742400
 8001de0:	4bbebc20 	.word	0x4bbebc20
 8001de4:	4a742400 	.word	0x4a742400

08001de8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001dec:	f7ff fed0 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001df6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001dfa:	4907      	ldr	r1, [pc, #28]	; (8001e18 <HAL_RCC_GetHCLKFreq+0x30>)
 8001dfc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001dfe:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001e02:	fa22 f303 	lsr.w	r3, r2, r3
 8001e06:	4a05      	ldr	r2, [pc, #20]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x34>)
 8001e08:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCC_GetHCLKFreq+0x34>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	44020c00 	.word	0x44020c00
 8001e18:	08007bb8 	.word	0x08007bb8
 8001e1c:	20000000 	.word	0x20000000

08001e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8001e24:	f7ff ffe0 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	44020c00 	.word	0x44020c00
 8001e48:	08007bc8 	.word	0x08007bc8

08001e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8001e50:	f7ff ffca 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e54:	4602      	mov	r2, r0
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	4904      	ldr	r1, [pc, #16]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e62:	5ccb      	ldrb	r3, [r1, r3]
 8001e64:	f003 031f 	and.w	r3, r3, #31
 8001e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	44020c00 	.word	0x44020c00
 8001e74:	08007bc8 	.word	0x08007bc8

08001e78 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8001e7c:	f7ff ffb4 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_GetPCLK3Freq+0x24>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	0b1b      	lsrs	r3, r3, #12
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4904      	ldr	r1, [pc, #16]	; (8001ea0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	f003 031f 	and.w	r3, r3, #31
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	44020c00 	.word	0x44020c00
 8001ea0:	08007bc8 	.word	0x08007bc8

08001ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8001ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea8:	b0d8      	sub	sp, #352	; 0x160
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8001ec8:	2500      	movs	r5, #0
 8001eca:	ea54 0305 	orrs.w	r3, r4, r5
 8001ece:	d00b      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8001ed0:	4bcd      	ldr	r3, [pc, #820]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8001eda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	4ac9      	ldr	r2, [pc, #804]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f002 0801 	and.w	r8, r2, #1
 8001ef4:	f04f 0900 	mov.w	r9, #0
 8001ef8:	ea58 0309 	orrs.w	r3, r8, r9
 8001efc:	d042      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8001efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	2b05      	cmp	r3, #5
 8001f06:	d823      	bhi.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001f08:	a201      	add	r2, pc, #4	; (adr r2, 8001f10 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8001f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0e:	bf00      	nop
 8001f10:	08001f59 	.word	0x08001f59
 8001f14:	08001f29 	.word	0x08001f29
 8001f18:	08001f3d 	.word	0x08001f3d
 8001f1c:	08001f59 	.word	0x08001f59
 8001f20:	08001f59 	.word	0x08001f59
 8001f24:	08001f59 	.word	0x08001f59
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8001f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f004 feda 	bl	8006ce8 <RCCEx_PLL2_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8001f3a:	e00e      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8001f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f40:	3330      	adds	r3, #48	; 0x30
 8001f42:	4618      	mov	r0, r3
 8001f44:	f004 ff68 	bl	8006e18 <RCCEx_PLL3_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8001f4e:	e004      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8001f56:	e000      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8001f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001f5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8001f62:	4ba9      	ldr	r3, [pc, #676]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f68:	f023 0107 	bic.w	r1, r3, #7
 8001f6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	4aa5      	ldr	r2, [pc, #660]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001f74:	430b      	orrs	r3, r1
 8001f76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f7a:	e003      	b.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8001f80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8c:	f002 0a02 	and.w	sl, r2, #2
 8001f90:	f04f 0b00 	mov.w	fp, #0
 8001f94:	ea5a 030b 	orrs.w	r3, sl, fp
 8001f98:	f000 8088 	beq.w	80020ac <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8001f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	2b28      	cmp	r3, #40	; 0x28
 8001fa4:	d868      	bhi.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08002081 	.word	0x08002081
 8001fb0:	08002079 	.word	0x08002079
 8001fb4:	08002079 	.word	0x08002079
 8001fb8:	08002079 	.word	0x08002079
 8001fbc:	08002079 	.word	0x08002079
 8001fc0:	08002079 	.word	0x08002079
 8001fc4:	08002079 	.word	0x08002079
 8001fc8:	08002079 	.word	0x08002079
 8001fcc:	08002051 	.word	0x08002051
 8001fd0:	08002079 	.word	0x08002079
 8001fd4:	08002079 	.word	0x08002079
 8001fd8:	08002079 	.word	0x08002079
 8001fdc:	08002079 	.word	0x08002079
 8001fe0:	08002079 	.word	0x08002079
 8001fe4:	08002079 	.word	0x08002079
 8001fe8:	08002079 	.word	0x08002079
 8001fec:	08002065 	.word	0x08002065
 8001ff0:	08002079 	.word	0x08002079
 8001ff4:	08002079 	.word	0x08002079
 8001ff8:	08002079 	.word	0x08002079
 8001ffc:	08002079 	.word	0x08002079
 8002000:	08002079 	.word	0x08002079
 8002004:	08002079 	.word	0x08002079
 8002008:	08002079 	.word	0x08002079
 800200c:	08002081 	.word	0x08002081
 8002010:	08002079 	.word	0x08002079
 8002014:	08002079 	.word	0x08002079
 8002018:	08002079 	.word	0x08002079
 800201c:	08002079 	.word	0x08002079
 8002020:	08002079 	.word	0x08002079
 8002024:	08002079 	.word	0x08002079
 8002028:	08002079 	.word	0x08002079
 800202c:	08002081 	.word	0x08002081
 8002030:	08002079 	.word	0x08002079
 8002034:	08002079 	.word	0x08002079
 8002038:	08002079 	.word	0x08002079
 800203c:	08002079 	.word	0x08002079
 8002040:	08002079 	.word	0x08002079
 8002044:	08002079 	.word	0x08002079
 8002048:	08002079 	.word	0x08002079
 800204c:	08002081 	.word	0x08002081
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002054:	3308      	adds	r3, #8
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fe46 	bl	8006ce8 <RCCEx_PLL2_Config>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002062:	e00e      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002068:	3330      	adds	r3, #48	; 0x30
 800206a:	4618      	mov	r0, r3
 800206c:	f004 fed4 	bl	8006e18 <RCCEx_PLL3_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002076:	e004      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002082:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800208a:	4b5f      	ldr	r3, [pc, #380]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800208c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002090:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002094:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800209a:	4a5b      	ldr	r2, [pc, #364]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800209c:	430b      	orrs	r3, r1
 800209e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020a2:	e003      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80020a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b4:	f002 0304 	and.w	r3, r2, #4
 80020b8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80020c2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80020c6:	460b      	mov	r3, r1
 80020c8:	4313      	orrs	r3, r2
 80020ca:	d04e      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80020cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020d6:	d02c      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80020d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020dc:	d825      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80020de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e2:	d028      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80020e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e8:	d81f      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80020ea:	2bc0      	cmp	r3, #192	; 0xc0
 80020ec:	d025      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80020ee:	2bc0      	cmp	r3, #192	; 0xc0
 80020f0:	d81b      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d00f      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80020f6:	2b80      	cmp	r3, #128	; 0x80
 80020f8:	d817      	bhi.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01f      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80020fe:	2b40      	cmp	r3, #64	; 0x40
 8002100:	d113      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002102:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002106:	3308      	adds	r3, #8
 8002108:	4618      	mov	r0, r3
 800210a:	f004 fded 	bl	8006ce8 <RCCEx_PLL2_Config>
 800210e:	4603      	mov	r3, r0
 8002110:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002114:	e014      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002116:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800211a:	3330      	adds	r3, #48	; 0x30
 800211c:	4618      	mov	r0, r3
 800211e:	f004 fe7b 	bl	8006e18 <RCCEx_PLL3_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002128:	e00a      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002130:	e006      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002132:	bf00      	nop
 8002134:	e004      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002136:	bf00      	nop
 8002138:	e002      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800213a:	bf00      	nop
 800213c:	e000      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800213e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002140:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10c      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800214a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800214e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800215a:	430b      	orrs	r3, r1
 800215c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002160:	e003      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002162:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002166:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800216a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f002 0308 	and.w	r3, r2, #8
 8002176:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002180:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002184:	460b      	mov	r3, r1
 8002186:	4313      	orrs	r3, r2
 8002188:	d056      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800218a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800218e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002190:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002194:	d031      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002196:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800219a:	d82a      	bhi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800219c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a0:	d02d      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80021a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021a6:	d824      	bhi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80021a8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021ac:	d029      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80021ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021b2:	d81e      	bhi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d011      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d818      	bhi.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80021c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c8:	d113      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80021ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021ce:	3308      	adds	r3, #8
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 fd89 	bl	8006ce8 <RCCEx_PLL2_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80021dc:	e017      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80021de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021e2:	3330      	adds	r3, #48	; 0x30
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fe17 	bl	8006e18 <RCCEx_PLL3_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80021f0:	e00d      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80021f8:	e009      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80021fa:	bf00      	nop
 80021fc:	e007      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80021fe:	bf00      	nop
 8002200:	e005      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002202:	bf00      	nop
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002206:	bf00      	nop
 8002208:	44020c00 	.word	0x44020c00
        break;
 800220c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800220e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10c      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002216:	4bbb      	ldr	r3, [pc, #748]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800221c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002220:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002226:	4ab7      	ldr	r2, [pc, #732]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002228:	430b      	orrs	r3, r1
 800222a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800222e:	e003      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002230:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002234:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f002 0310 	and.w	r3, r2, #16
 8002244:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800224e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002252:	460b      	mov	r3, r1
 8002254:	4313      	orrs	r3, r2
 8002256:	d053      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800225c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800225e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002262:	d031      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002264:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002268:	d82a      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800226a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800226e:	d02d      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002274:	d824      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002276:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800227a:	d029      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800227c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002280:	d81e      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002286:	d011      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228c:	d818      	bhi.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800228e:	2b00      	cmp	r3, #0
 8002290:	d020      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002296:	d113      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002298:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800229c:	3308      	adds	r3, #8
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 fd22 	bl	8006ce8 <RCCEx_PLL2_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80022aa:	e014      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80022ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022b0:	3330      	adds	r3, #48	; 0x30
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 fdb0 	bl	8006e18 <RCCEx_PLL3_Config>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80022be:	e00a      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80022c6:	e006      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80022c8:	bf00      	nop
 80022ca:	e004      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80022cc:	bf00      	nop
 80022ce:	e002      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80022d0:	bf00      	nop
 80022d2:	e000      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80022d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80022de:	4b89      	ldr	r3, [pc, #548]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80022e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022e4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80022e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ee:	4a85      	ldr	r2, [pc, #532]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80022f0:	430b      	orrs	r3, r1
 80022f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022f6:	e003      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f002 0320 	and.w	r3, r2, #32
 800230c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002310:	2300      	movs	r3, #0
 8002312:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002316:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800231a:	460b      	mov	r3, r1
 800231c:	4313      	orrs	r3, r2
 800231e:	d053      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002320:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800232a:	d031      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800232c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002330:	d82a      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002332:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002336:	d02d      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002338:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800233c:	d824      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800233e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002342:	d029      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002344:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002348:	d81e      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800234a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234e:	d011      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d818      	bhi.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d020      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800235a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235e:	d113      	bne.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002364:	3308      	adds	r3, #8
 8002366:	4618      	mov	r0, r3
 8002368:	f004 fcbe 	bl	8006ce8 <RCCEx_PLL2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002372:	e014      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002378:	3330      	adds	r3, #48	; 0x30
 800237a:	4618      	mov	r0, r3
 800237c:	f004 fd4c 	bl	8006e18 <RCCEx_PLL3_Config>
 8002380:	4603      	mov	r3, r0
 8002382:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002386:	e00a      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800238e:	e006      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002390:	bf00      	nop
 8002392:	e004      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002394:	bf00      	nop
 8002396:	e002      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002398:	bf00      	nop
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800239c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800239e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80023a6:	4b57      	ldr	r3, [pc, #348]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80023a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ac:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80023b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	4a53      	ldr	r2, [pc, #332]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80023b8:	430b      	orrs	r3, r1
 80023ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023be:	e003      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80023c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80023d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80023de:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80023e2:	460b      	mov	r3, r1
 80023e4:	4313      	orrs	r3, r2
 80023e6:	d053      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80023e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023f2:	d031      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80023f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80023f8:	d82a      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80023fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fe:	d02d      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002404:	d824      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002406:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800240a:	d029      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800240c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002410:	d81e      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002412:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002416:	d011      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002418:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800241c:	d818      	bhi.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800241e:	2b00      	cmp	r3, #0
 8002420:	d020      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002426:	d113      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002428:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800242c:	3308      	adds	r3, #8
 800242e:	4618      	mov	r0, r3
 8002430:	f004 fc5a 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002434:	4603      	mov	r3, r0
 8002436:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800243a:	e014      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800243c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002440:	3330      	adds	r3, #48	; 0x30
 8002442:	4618      	mov	r0, r3
 8002444:	f004 fce8 	bl	8006e18 <RCCEx_PLL3_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800244e:	e00a      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002456:	e006      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002458:	bf00      	nop
 800245a:	e004      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800245c:	bf00      	nop
 800245e:	e002      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002460:	bf00      	nop
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002464:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002466:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10c      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800246e:	4b25      	ldr	r3, [pc, #148]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002470:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002474:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002480:	430b      	orrs	r3, r1
 8002482:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002486:	e003      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800248c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800249c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80024a6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80024aa:	460b      	mov	r3, r1
 80024ac:	4313      	orrs	r3, r2
 80024ae:	d055      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80024b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024b6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80024ba:	d033      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80024bc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80024c0:	d82c      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80024c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024c6:	d02f      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80024c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024cc:	d826      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80024ce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024d2:	d02b      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80024d4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80024d8:	d820      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80024da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024de:	d013      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80024e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e4:	d81a      	bhi.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d022      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80024ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ee:	d115      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80024f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024f4:	3308      	adds	r3, #8
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 fbf6 	bl	8006ce8 <RCCEx_PLL2_Config>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002502:	e016      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002504:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800250c:	3330      	adds	r3, #48	; 0x30
 800250e:	4618      	mov	r0, r3
 8002510:	f004 fc82 	bl	8006e18 <RCCEx_PLL3_Config>
 8002514:	4603      	mov	r3, r0
 8002516:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800251a:	e00a      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002522:	e006      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002524:	bf00      	nop
 8002526:	e004      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002528:	bf00      	nop
 800252a:	e002      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800252c:	bf00      	nop
 800252e:	e000      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002532:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800253a:	4bbb      	ldr	r3, [pc, #748]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800253c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002540:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800254a:	4ab7      	ldr	r2, [pc, #732]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800254c:	430b      	orrs	r3, r1
 800254e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002552:	e003      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002554:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002558:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800255c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002568:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002572:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002576:	460b      	mov	r3, r1
 8002578:	4313      	orrs	r3, r2
 800257a:	d053      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800257c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002582:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002586:	d031      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002588:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800258c:	d82a      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800258e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002592:	d02d      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002598:	d824      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800259a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800259e:	d029      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80025a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025a4:	d81e      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80025a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025aa:	d011      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80025ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025b0:	d818      	bhi.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d020      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80025b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ba:	d113      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80025bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025c0:	3308      	adds	r3, #8
 80025c2:	4618      	mov	r0, r3
 80025c4:	f004 fb90 	bl	8006ce8 <RCCEx_PLL2_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80025ce:	e014      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80025d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025d4:	3330      	adds	r3, #48	; 0x30
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fc1e 	bl	8006e18 <RCCEx_PLL3_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80025e2:	e00a      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80025ea:	e006      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80025ec:	bf00      	nop
 80025ee:	e004      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80025f0:	bf00      	nop
 80025f2:	e002      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80025f4:	bf00      	nop
 80025f6:	e000      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80025f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002602:	4b89      	ldr	r3, [pc, #548]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002608:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800260c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002610:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002612:	4a85      	ldr	r2, [pc, #532]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002614:	430b      	orrs	r3, r1
 8002616:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800261a:	e003      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800261c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002620:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002630:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800263a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800263e:	460b      	mov	r3, r1
 8002640:	4313      	orrs	r3, r2
 8002642:	d055      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002644:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800264c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002650:	d031      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002652:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002656:	d82a      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800265c:	d02d      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x816>
 800265e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002662:	d824      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002664:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002668:	d029      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800266a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800266e:	d81e      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002670:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002674:	d011      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800267a:	d818      	bhi.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002684:	d113      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002686:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800268a:	3308      	adds	r3, #8
 800268c:	4618      	mov	r0, r3
 800268e:	f004 fb2b 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002698:	e014      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800269a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800269e:	3330      	adds	r3, #48	; 0x30
 80026a0:	4618      	mov	r0, r3
 80026a2:	f004 fbb9 	bl	8006e18 <RCCEx_PLL3_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80026ac:	e00a      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80026b4:	e006      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80026b6:	bf00      	nop
 80026b8:	e004      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80026ba:	bf00      	nop
 80026bc:	e002      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80026be:	bf00      	nop
 80026c0:	e000      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80026c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80026cc:	4b56      	ldr	r3, [pc, #344]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80026ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026d2:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80026d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026de:	4a52      	ldr	r2, [pc, #328]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80026e0:	430b      	orrs	r3, r1
 80026e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026e6:	e003      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80026f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80026fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002706:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800270a:	460b      	mov	r3, r1
 800270c:	4313      	orrs	r3, r2
 800270e:	d044      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002718:	2b05      	cmp	r3, #5
 800271a:	d823      	bhi.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800271c:	a201      	add	r2, pc, #4	; (adr r2, 8002724 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	0800276d 	.word	0x0800276d
 8002728:	0800273d 	.word	0x0800273d
 800272c:	08002751 	.word	0x08002751
 8002730:	0800276d 	.word	0x0800276d
 8002734:	0800276d 	.word	0x0800276d
 8002738:	0800276d 	.word	0x0800276d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800273c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002740:	3308      	adds	r3, #8
 8002742:	4618      	mov	r0, r3
 8002744:	f004 fad0 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800274e:	e00e      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002750:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002754:	3330      	adds	r3, #48	; 0x30
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fb5e 	bl	8006e18 <RCCEx_PLL3_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002762:	e004      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800276a:	e000      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800276c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800276e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10d      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002776:	4b2c      	ldr	r3, [pc, #176]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002778:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800277c:	f023 0107 	bic.w	r1, r3, #7
 8002780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002788:	4a27      	ldr	r2, [pc, #156]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800278a:	430b      	orrs	r3, r1
 800278c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002790:	e003      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002796:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800279a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80027a6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027aa:	2300      	movs	r3, #0
 80027ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80027b0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80027b4:	460b      	mov	r3, r1
 80027b6:	4313      	orrs	r3, r2
 80027b8:	d04f      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80027ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	2b50      	cmp	r3, #80	; 0x50
 80027c4:	d029      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80027c6:	2b50      	cmp	r3, #80	; 0x50
 80027c8:	d823      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d027      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d81f      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80027d2:	2b30      	cmp	r3, #48	; 0x30
 80027d4:	d025      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80027d6:	2b30      	cmp	r3, #48	; 0x30
 80027d8:	d81b      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d00f      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d817      	bhi.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d022      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d113      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027ee:	3308      	adds	r3, #8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fa79 	bl	8006ce8 <RCCEx_PLL2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80027fc:	e017      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80027fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002802:	3330      	adds	r3, #48	; 0x30
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fb07 	bl	8006e18 <RCCEx_PLL3_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002810:	e00d      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002818:	e009      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800281a:	bf00      	nop
 800281c:	e007      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800281e:	bf00      	nop
 8002820:	e005      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002822:	bf00      	nop
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002826:	bf00      	nop
 8002828:	44020c00 	.word	0x44020c00
        break;
 800282c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800282e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10d      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002836:	4baf      	ldr	r3, [pc, #700]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002838:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800283c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	4aaa      	ldr	r2, [pc, #680]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800284a:	430b      	orrs	r3, r1
 800284c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002852:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002856:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800285a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002866:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002870:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002874:	460b      	mov	r3, r1
 8002876:	4313      	orrs	r3, r2
 8002878:	d055      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800287a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800287e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002882:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002886:	d031      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002888:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800288c:	d82a      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800288e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002892:	d02d      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002898:	d824      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800289a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800289e:	d029      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80028a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a4:	d81e      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80028a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028aa:	d011      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80028ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028b0:	d818      	bhi.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d020      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80028b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028ba:	d113      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028c0:	3308      	adds	r3, #8
 80028c2:	4618      	mov	r0, r3
 80028c4:	f004 fa10 	bl	8006ce8 <RCCEx_PLL2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80028ce:	e014      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028d4:	3330      	adds	r3, #48	; 0x30
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fa9e 	bl	8006e18 <RCCEx_PLL3_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80028e2:	e00a      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80028ea:	e006      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80028ec:	bf00      	nop
 80028ee:	e004      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80028f0:	bf00      	nop
 80028f2:	e002      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80028f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10d      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002902:	4b7c      	ldr	r3, [pc, #496]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002908:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800290c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002914:	4a77      	ldr	r2, [pc, #476]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002916:	430b      	orrs	r3, r1
 8002918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800291c:	e003      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800291e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002922:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002932:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800293c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002940:	460b      	mov	r3, r1
 8002942:	4313      	orrs	r3, r2
 8002944:	d03d      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002946:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002952:	d01b      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8002954:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002958:	d814      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800295a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295e:	d017      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002964:	d80e      	bhi.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d014      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800296a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296e:	d109      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002970:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002974:	3330      	adds	r3, #48	; 0x30
 8002976:	4618      	mov	r0, r3
 8002978:	f004 fa4e 	bl	8006e18 <RCCEx_PLL3_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002982:	e008      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800298a:	e004      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800298c:	bf00      	nop
 800298e:	e002      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002990:	bf00      	nop
 8002992:	e000      	b.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002994:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002996:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800299e:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80029a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80029a4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80029a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	4a50      	ldr	r2, [pc, #320]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80029b2:	430b      	orrs	r3, r1
 80029b4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80029b8:	e003      	b.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80029d8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80029dc:	460b      	mov	r3, r1
 80029de:	4313      	orrs	r3, r2
 80029e0:	d03d      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80029e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029ee:	d01b      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80029f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029f4:	d814      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80029f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80029fa:	d017      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80029fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a00:	d80e      	bhi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d014      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8002a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a10:	3330      	adds	r3, #48	; 0x30
 8002a12:	4618      	mov	r0, r3
 8002a14:	f004 fa00 	bl	8006e18 <RCCEx_PLL3_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002a1e:	e008      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a26:	e004      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002a28:	bf00      	nop
 8002a2a:	e002      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002a2c:	bf00      	nop
 8002a2e:	e000      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10d      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a40:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a4c:	4a29      	ldr	r2, [pc, #164]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a4e:	430b      	orrs	r3, r1
 8002a50:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002a54:	e003      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a5a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a66:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002a6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002a74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	d040      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a8a:	d01b      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002a90:	d814      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a96:	d017      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a9c:	d80e      	bhi.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d014      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002aa8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aac:	3330      	adds	r3, #48	; 0x30
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 f9b2 	bl	8006e18 <RCCEx_PLL3_Config>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002aba:	e008      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002ac4:	bf00      	nop
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d110      	bne.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002ad8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002adc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae8:	4a02      	ldr	r2, [pc, #8]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002aea:	430b      	orrs	r3, r1
 8002aec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002af0:	e006      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8002af2:	bf00      	nop
 8002af4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002af8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002afc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	2100      	movs	r1, #0
 8002b0a:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002b16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	d03d      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8002b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b2c:	d01b      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8002b2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b32:	d814      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002b34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002b3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b3e:	d80e      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d014      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8002b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b48:	d109      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b4e:	3330      	adds	r3, #48	; 0x30
 8002b50:	4618      	mov	r0, r3
 8002b52:	f004 f961 	bl	8006e18 <RCCEx_PLL3_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8002b5c:	e008      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b64:	e004      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10d      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002b78:	4bbe      	ldr	r3, [pc, #760]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002b7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b7e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002b82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8a:	4aba      	ldr	r2, [pc, #744]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b92:	e003      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b98:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002b9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002ba8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002bb2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	d035      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bc8:	d015      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8002bca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bce:	d80e      	bhi.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8002bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bd8:	d109      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bde:	3330      	adds	r3, #48	; 0x30
 8002be0:	4618      	mov	r0, r3
 8002be2:	f004 f919 	bl	8006e18 <RCCEx_PLL3_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002bec:	e006      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002bf4:	e002      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002bf6:	bf00      	nop
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002bfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bfc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002c04:	4b9b      	ldr	r3, [pc, #620]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c0a:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c16:	4a97      	ldr	r2, [pc, #604]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c1e:	e003      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c24:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	2100      	movs	r1, #0
 8002c32:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	d00e      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002c48:	4b8a      	ldr	r3, [pc, #552]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a89      	ldr	r2, [pc, #548]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c4e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b87      	ldr	r3, [pc, #540]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c56:	69d9      	ldr	r1, [r3, #28]
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c5c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002c60:	4a84      	ldr	r2, [pc, #528]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c62:	430b      	orrs	r3, r1
 8002c64:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002c72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c7c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c80:	460b      	mov	r3, r1
 8002c82:	4313      	orrs	r3, r2
 8002c84:	d055      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002c8e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c92:	d031      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8002c94:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002c98:	d82a      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9e:	d02d      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca4:	d824      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002caa:	d029      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002cac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cb0:	d81e      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002cb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cb6:	d011      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbc:	d818      	bhi.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d020      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc6:	d113      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ccc:	3308      	adds	r3, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f004 f80a 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002cda:	e014      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ce0:	3330      	adds	r3, #48	; 0x30
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 f898 	bl	8006e18 <RCCEx_PLL3_Config>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002cee:	e00a      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cf6:	e006      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002cf8:	bf00      	nop
 8002cfa:	e004      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002cfc:	bf00      	nop
 8002cfe:	e002      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002d00:	bf00      	nop
 8002d02:	e000      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10d      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d14:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d20:	4a54      	ldr	r2, [pc, #336]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d22:	430b      	orrs	r3, r1
 8002d24:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d28:	e003      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d2e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d48:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	d055      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002d5a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d5e:	d031      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8002d60:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002d64:	d82a      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002d66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d6a:	d02d      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8002d6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d70:	d824      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d76:	d029      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8002d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d7c:	d81e      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d82:	d011      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d818      	bhi.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d020      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d113      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d98:	3308      	adds	r3, #8
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 ffa4 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002da6:	e014      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dac:	3330      	adds	r3, #48	; 0x30
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 f832 	bl	8006e18 <RCCEx_PLL3_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002dba:	e00a      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002dc2:	e006      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002dc4:	bf00      	nop
 8002dc6:	e004      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002dc8:	bf00      	nop
 8002dca:	e002      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002dcc:	bf00      	nop
 8002dce:	e000      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002ddc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002de0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002de8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002dec:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002dee:	430b      	orrs	r3, r1
 8002df0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002df4:	e003      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dfa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8002dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e06:	2100      	movs	r1, #0
 8002e08:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8002e0c:	f003 0320 	and.w	r3, r3, #32
 8002e10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	d057      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8002e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2a:	d033      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8002e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e30:	d82c      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002e32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e36:	d02f      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8002e38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e3c:	d826      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002e3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e42:	d02b      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8002e44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e48:	d820      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002e4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e4e:	d013      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e54:	d81a      	bhi.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d022      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8002e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5e:	d115      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e64:	3308      	adds	r3, #8
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 ff3e 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8002e72:	e016      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8002e74:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e7c:	3330      	adds	r3, #48	; 0x30
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 ffca 	bl	8006e18 <RCCEx_PLL3_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e92:	e006      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002e94:	bf00      	nop
 8002e96:	e004      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002e98:	bf00      	nop
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10d      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8002eaa:	4bbb      	ldr	r3, [pc, #748]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002eac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002eb0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eb8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ebc:	4ab6      	ldr	r2, [pc, #728]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ec4:	e003      	b.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002eca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8002ece:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002ee4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4313      	orrs	r3, r2
 8002eec:	d055      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8002eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ef6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002efa:	d031      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8002efc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002f00:	d82a      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d02d      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d824      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002f0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f12:	d029      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8002f14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f18:	d81e      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1e:	d011      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8002f20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f24:	d818      	bhi.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d020      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8002f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f2e:	d113      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f34:	3308      	adds	r3, #8
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 fed6 	bl	8006ce8 <RCCEx_PLL2_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8002f42:	e014      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f48:	3330      	adds	r3, #48	; 0x30
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 ff64 	bl	8006e18 <RCCEx_PLL3_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8002f56:	e00a      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f5e:	e006      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8002f60:	bf00      	nop
 8002f62:	e004      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8002f64:	bf00      	nop
 8002f66:	e002      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8002f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8002f76:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002f78:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f7c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8002f80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f88:	4a83      	ldr	r2, [pc, #524]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f90:	e003      	b.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f96:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8002f9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8002fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fb0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	d055      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8002fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fc2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fc6:	d031      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8002fc8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002fcc:	d82a      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8002fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd2:	d02d      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8002fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fd8:	d824      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8002fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fde:	d029      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8002fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fe4:	d81e      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8002fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fea:	d011      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8002fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ff0:	d818      	bhi.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d020      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8002ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ffa:	d113      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ffc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003000:	3308      	adds	r3, #8
 8003002:	4618      	mov	r0, r3
 8003004:	f003 fe70 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003008:	4603      	mov	r3, r0
 800300a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800300e:	e014      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003014:	3330      	adds	r3, #48	; 0x30
 8003016:	4618      	mov	r0, r3
 8003018:	f003 fefe 	bl	8006e18 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003022:	e00a      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800302a:	e006      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800302c:	bf00      	nop
 800302e:	e004      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003030:	bf00      	nop
 8003032:	e002      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003034:	bf00      	nop
 8003036:	e000      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003038:	bf00      	nop
    }

    if (ret == HAL_OK)
 800303a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003042:	4b55      	ldr	r3, [pc, #340]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003044:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003048:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800304c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003050:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003054:	4a50      	ldr	r2, [pc, #320]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003056:	430b      	orrs	r3, r1
 8003058:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800305c:	e003      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003062:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	2100      	movs	r1, #0
 8003070:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003078:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800307c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003080:	460b      	mov	r3, r1
 8003082:	4313      	orrs	r3, r2
 8003084:	d055      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003086:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800308a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800308e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003092:	d031      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003098:	d82a      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800309a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800309e:	d02d      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a4:	d824      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80030a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030aa:	d029      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80030ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030b0:	d81e      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80030b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b6:	d011      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80030b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030bc:	d818      	bhi.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d020      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80030c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030c6:	d113      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030cc:	3308      	adds	r3, #8
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fe0a 	bl	8006ce8 <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80030da:	e014      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030e0:	3330      	adds	r3, #48	; 0x30
 80030e2:	4618      	mov	r0, r3
 80030e4:	f003 fe98 	bl	8006e18 <RCCEx_PLL3_Config>
 80030e8:	4603      	mov	r3, r0
 80030ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80030ee:	e00a      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030f6:	e006      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80030f8:	bf00      	nop
 80030fa:	e004      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80030fc:	bf00      	nop
 80030fe:	e002      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003100:	bf00      	nop
 8003102:	e000      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003106:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10d      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003110:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003114:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800311c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003122:	430b      	orrs	r3, r1
 8003124:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800312e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800313e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003148:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800314c:	460b      	mov	r3, r1
 800314e:	4313      	orrs	r3, r2
 8003150:	d055      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003152:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003156:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800315a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800315e:	d035      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003164:	d82e      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800316a:	d031      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800316c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003170:	d828      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003176:	d01b      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800317c:	d822      	bhi.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003186:	d009      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003188:	e01c      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800318a:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	4a02      	ldr	r2, [pc, #8]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003194:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003196:	e01c      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003198:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800319c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031a0:	3308      	adds	r3, #8
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fda0 	bl	8006ce8 <RCCEx_PLL2_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031ae:	e010      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b4:	3330      	adds	r3, #48	; 0x30
 80031b6:	4618      	mov	r0, r3
 80031b8:	f003 fe2e 	bl	8006e18 <RCCEx_PLL3_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80031c2:	e006      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031ca:	e002      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80031d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80031da:	4bc3      	ldr	r3, [pc, #780]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80031e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031ec:	4abe      	ldr	r2, [pc, #760]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80031ee:	430b      	orrs	r3, r1
 80031f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80031fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800320a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003214:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d051      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800321e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003222:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d033      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800322c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003230:	d82c      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003232:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003236:	d02d      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003238:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800323c:	d826      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800323e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003242:	d019      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003248:	d820      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800324e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003252:	d007      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003254:	e01a      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003256:	4ba4      	ldr	r3, [pc, #656]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	4aa3      	ldr	r2, [pc, #652]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800325c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003260:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003262:	e018      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003264:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003268:	3308      	adds	r3, #8
 800326a:	4618      	mov	r0, r3
 800326c:	f003 fd3c 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003276:	e00e      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003278:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800327c:	3330      	adds	r3, #48	; 0x30
 800327e:	4618      	mov	r0, r3
 8003280:	f003 fdca 	bl	8006e18 <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800328a:	e004      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003296:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800329e:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80032a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a4:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80032a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032b0:	4a8d      	ldr	r2, [pc, #564]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80032b2:	430b      	orrs	r3, r1
 80032b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032b8:	e003      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80032c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80032d0:	2300      	movs	r3, #0
 80032d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80032d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80032d8:	460b      	mov	r3, r1
 80032da:	4313      	orrs	r3, r2
 80032dc:	d032      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80032de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d80f      	bhi.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d211      	bcs.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d911      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d109      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032fa:	3308      	adds	r3, #8
 80032fc:	4618      	mov	r0, r3
 80032fe:	f003 fcf3 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003302:	4603      	mov	r3, r0
 8003304:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003308:	e006      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003310:	e002      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003318:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10d      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003320:	4b71      	ldr	r3, [pc, #452]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003326:	f023 0107 	bic.w	r1, r3, #7
 800332a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800332e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003332:	4a6d      	ldr	r2, [pc, #436]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003334:	430b      	orrs	r3, r1
 8003336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800333a:	e003      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003340:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003344:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334c:	2100      	movs	r1, #0
 800334e:	6739      	str	r1, [r7, #112]	; 0x70
 8003350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003354:	677b      	str	r3, [r7, #116]	; 0x74
 8003356:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800335a:	460b      	mov	r3, r1
 800335c:	4313      	orrs	r3, r2
 800335e:	d024      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003360:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800336c:	2b08      	cmp	r3, #8
 800336e:	d005      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003376:	e002      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003378:	bf00      	nop
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800337c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003386:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800338c:	f023 0108 	bic.w	r1, r3, #8
 8003390:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003398:	4a53      	ldr	r2, [pc, #332]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800339a:	430b      	orrs	r3, r1
 800339c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b8:	2300      	movs	r3, #0
 80033ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80033c0:	460b      	mov	r3, r1
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f000 80b9 	beq.w	800353a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80033c8:	4b48      	ldr	r3, [pc, #288]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	4a47      	ldr	r2, [pc, #284]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d4:	f7fd fbaa 	bl	8000b2c <HAL_GetTick>
 80033d8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033dc:	e00b      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033de:	f7fd fba5 	bl	8000b2c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d903      	bls.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033f4:	e005      	b.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d0ed      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003402:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003406:	2b00      	cmp	r3, #0
 8003408:	f040 8093 	bne.w	8003532 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800340e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003416:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800341a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d023      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003426:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800342a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800342e:	4293      	cmp	r3, r2
 8003430:	d01b      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003432:	4b2d      	ldr	r3, [pc, #180]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003446:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003456:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003460:	4a21      	ldr	r2, [pc, #132]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003462:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003466:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800346a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d019      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fd fb59 	bl	8000b2c <HAL_GetTick>
 800347a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	e00d      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003480:	f7fd fb54 	bl	8000b2c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800348a:	1ad2      	subs	r2, r2, r3
 800348c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003490:	429a      	cmp	r2, r3
 8003492:	d903      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800349a:	e006      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800349e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ea      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80034aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d13a      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80034b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034b6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c2:	d115      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80034c4:	4b08      	ldr	r3, [pc, #32]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80034cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034d0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80034da:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80034de:	4a02      	ldr	r2, [pc, #8]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80034e0:	430b      	orrs	r3, r1
 80034e2:	61d3      	str	r3, [r2, #28]
 80034e4:	e00a      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80034e6:	bf00      	nop
 80034e8:	44020c00 	.word	0x44020c00
 80034ec:	44020800 	.word	0x44020800
 80034f0:	4b9f      	ldr	r3, [pc, #636]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80034f2:	69db      	ldr	r3, [r3, #28]
 80034f4:	4a9e      	ldr	r2, [pc, #632]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80034f6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80034fa:	61d3      	str	r3, [r2, #28]
 80034fc:	4b9c      	ldr	r3, [pc, #624]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80034fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003502:	4a9b      	ldr	r2, [pc, #620]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003508:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800350c:	4b98      	ldr	r3, [pc, #608]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800350e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003516:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800351a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351e:	4a94      	ldr	r2, [pc, #592]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003520:	430b      	orrs	r3, r1
 8003522:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003526:	e008      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003528:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800352c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003536:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800353a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003546:	663b      	str	r3, [r7, #96]	; 0x60
 8003548:	2300      	movs	r3, #0
 800354a:	667b      	str	r3, [r7, #100]	; 0x64
 800354c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003550:	460b      	mov	r3, r1
 8003552:	4313      	orrs	r3, r2
 8003554:	d035      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003556:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800355a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800355e:	2b30      	cmp	r3, #48	; 0x30
 8003560:	d014      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d80e      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003566:	2b20      	cmp	r3, #32
 8003568:	d012      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800356a:	2b20      	cmp	r3, #32
 800356c:	d80a      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003572:	2b10      	cmp	r3, #16
 8003574:	d106      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4b7e      	ldr	r3, [pc, #504]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	4a7d      	ldr	r2, [pc, #500]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003580:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003582:	e008      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800358a:	e004      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800358c:	bf00      	nop
 800358e:	e002      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003590:	bf00      	nop
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003596:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10d      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800359e:	4b74      	ldr	r3, [pc, #464]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035a4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80035a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ac:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80035b0:	4a6f      	ldr	r2, [pc, #444]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035b8:	e003      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80035c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ca:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80035ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d0:	2300      	movs	r3, #0
 80035d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035d8:	460b      	mov	r3, r1
 80035da:	4313      	orrs	r3, r2
 80035dc:	d033      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80035de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d007      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80035ee:	e010      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f0:	4b5f      	ldr	r3, [pc, #380]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	4a5e      	ldr	r2, [pc, #376]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80035fc:	e00d      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003602:	3308      	adds	r3, #8
 8003604:	4618      	mov	r0, r3
 8003606:	f003 fb6f 	bl	8006ce8 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003610:	e003      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003622:	4b53      	ldr	r3, [pc, #332]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003628:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800362c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003630:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003634:	4a4e      	ldr	r2, [pc, #312]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003636:	430b      	orrs	r3, r1
 8003638:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003642:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003652:	653b      	str	r3, [r7, #80]	; 0x50
 8003654:	2300      	movs	r3, #0
 8003656:	657b      	str	r3, [r7, #84]	; 0x54
 8003658:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800365c:	460b      	mov	r3, r1
 800365e:	4313      	orrs	r3, r2
 8003660:	d033      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003662:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003666:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800366e:	2b80      	cmp	r3, #128	; 0x80
 8003670:	d007      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003672:	e010      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b3e      	ldr	r3, [pc, #248]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	4a3d      	ldr	r2, [pc, #244]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003680:	e00d      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003682:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003686:	3308      	adds	r3, #8
 8003688:	4618      	mov	r0, r3
 800368a:	f003 fb2d 	bl	8006ce8 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003694:	e003      	b.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800369c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10d      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80036a6:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80036ac:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80036b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036ba:	430b      	orrs	r3, r1
 80036bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80036c0:	e003      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036c6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80036ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80036d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036d8:	2300      	movs	r3, #0
 80036da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80036e0:	460b      	mov	r3, r1
 80036e2:	4313      	orrs	r3, r2
 80036e4:	d04a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80036e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d827      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80036f2:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80036f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f8:	0800370d 	.word	0x0800370d
 80036fc:	0800371b 	.word	0x0800371b
 8003700:	0800372f 	.word	0x0800372f
 8003704:	0800374b 	.word	0x0800374b
 8003708:	0800374b 	.word	0x0800374b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003716:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003718:	e018      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800371a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800371e:	3308      	adds	r3, #8
 8003720:	4618      	mov	r0, r3
 8003722:	f003 fae1 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800372c:	e00e      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800372e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003732:	3330      	adds	r3, #48	; 0x30
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fb6f 	bl	8006e18 <RCCEx_PLL3_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003740:	e004      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800374a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800374c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10f      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800375a:	f023 0107 	bic.w	r1, r3, #7
 800375e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003766:	4a02      	ldr	r2, [pc, #8]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003768:	430b      	orrs	r3, r1
 800376a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800376e:	e005      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003770:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003778:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800377c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003788:	643b      	str	r3, [r7, #64]	; 0x40
 800378a:	2300      	movs	r3, #0
 800378c:	647b      	str	r3, [r7, #68]	; 0x44
 800378e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003792:	460b      	mov	r3, r1
 8003794:	4313      	orrs	r3, r2
 8003796:	f000 8081 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800379a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800379e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d85f      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	08003831 	.word	0x08003831
 80037b0:	08003867 	.word	0x08003867
 80037b4:	08003867 	.word	0x08003867
 80037b8:	08003867 	.word	0x08003867
 80037bc:	08003867 	.word	0x08003867
 80037c0:	08003867 	.word	0x08003867
 80037c4:	08003867 	.word	0x08003867
 80037c8:	08003867 	.word	0x08003867
 80037cc:	0800383f 	.word	0x0800383f
 80037d0:	08003867 	.word	0x08003867
 80037d4:	08003867 	.word	0x08003867
 80037d8:	08003867 	.word	0x08003867
 80037dc:	08003867 	.word	0x08003867
 80037e0:	08003867 	.word	0x08003867
 80037e4:	08003867 	.word	0x08003867
 80037e8:	08003867 	.word	0x08003867
 80037ec:	08003853 	.word	0x08003853
 80037f0:	08003867 	.word	0x08003867
 80037f4:	08003867 	.word	0x08003867
 80037f8:	08003867 	.word	0x08003867
 80037fc:	08003867 	.word	0x08003867
 8003800:	08003867 	.word	0x08003867
 8003804:	08003867 	.word	0x08003867
 8003808:	08003867 	.word	0x08003867
 800380c:	0800386f 	.word	0x0800386f
 8003810:	08003867 	.word	0x08003867
 8003814:	08003867 	.word	0x08003867
 8003818:	08003867 	.word	0x08003867
 800381c:	08003867 	.word	0x08003867
 8003820:	08003867 	.word	0x08003867
 8003824:	08003867 	.word	0x08003867
 8003828:	08003867 	.word	0x08003867
 800382c:	0800386f 	.word	0x0800386f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4bab      	ldr	r3, [pc, #684]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	4aaa      	ldr	r2, [pc, #680]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800383a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800383c:	e018      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800383e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003842:	3308      	adds	r3, #8
 8003844:	4618      	mov	r0, r3
 8003846:	f003 fa4f 	bl	8006ce8 <RCCEx_PLL2_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003850:	e00e      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003852:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003856:	3330      	adds	r3, #48	; 0x30
 8003858:	4618      	mov	r0, r3
 800385a:	f003 fadd 	bl	8006e18 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003864:	e004      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800386c:	e000      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800386e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003870:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10d      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003878:	4b99      	ldr	r3, [pc, #612]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003882:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003886:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800388a:	4a95      	ldr	r2, [pc, #596]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800388c:	430b      	orrs	r3, r1
 800388e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003892:	e003      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003898:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800389c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80038aa:	2300      	movs	r3, #0
 80038ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d04e      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80038b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038c4:	d02e      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d827      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80038cc:	2bc0      	cmp	r3, #192	; 0xc0
 80038ce:	d02b      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80038d0:	2bc0      	cmp	r3, #192	; 0xc0
 80038d2:	d823      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d017      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80038d8:	2b80      	cmp	r3, #128	; 0x80
 80038da:	d81f      	bhi.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80038e0:	2b40      	cmp	r3, #64	; 0x40
 80038e2:	d007      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80038e4:	e01a      	b.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e6:	4b7e      	ldr	r3, [pc, #504]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	4a7d      	ldr	r2, [pc, #500]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80038f2:	e01a      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f8:	3308      	adds	r3, #8
 80038fa:	4618      	mov	r0, r3
 80038fc:	f003 f9f4 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003906:	e010      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800390c:	3330      	adds	r3, #48	; 0x30
 800390e:	4618      	mov	r0, r3
 8003910:	f003 fa82 	bl	8006e18 <RCCEx_PLL3_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003922:	e002      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003932:	4b6b      	ldr	r3, [pc, #428]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003938:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800393c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003944:	4a66      	ldr	r2, [pc, #408]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003946:	430b      	orrs	r3, r1
 8003948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003952:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003962:	633b      	str	r3, [r7, #48]	; 0x30
 8003964:	2300      	movs	r3, #0
 8003966:	637b      	str	r3, [r7, #52]	; 0x34
 8003968:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d055      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003972:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003976:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800397a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800397e:	d031      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8003980:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003984:	d82a      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800398a:	d02d      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800398c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003990:	d824      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003992:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003996:	d029      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8003998:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800399c:	d81e      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d011      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a8:	d818      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d020      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80039ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b2:	d113      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039b8:	3308      	adds	r3, #8
 80039ba:	4618      	mov	r0, r3
 80039bc:	f003 f994 	bl	8006ce8 <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80039c6:	e014      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039cc:	3330      	adds	r3, #48	; 0x30
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 fa22 	bl	8006e18 <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80039da:	e00a      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039e2:	e006      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80039e4:	bf00      	nop
 80039e6:	e004      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80039e8:	bf00      	nop
 80039ea:	e002      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80039ec:	bf00      	nop
 80039ee:	e000      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10d      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a00:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a08:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003a0c:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8003a1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a26:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a30:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003a34:	460b      	mov	r3, r1
 8003a36:	4313      	orrs	r3, r2
 8003a38:	d058      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8003a3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a42:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a46:	d031      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8003a48:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003a4c:	d82a      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a52:	d02d      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8003a54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a58:	d824      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5e:	d029      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8003a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a64:	d81e      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d011      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	d818      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d113      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a80:	3308      	adds	r3, #8
 8003a82:	4618      	mov	r0, r3
 8003a84:	f003 f930 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003a8e:	e014      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a94:	3330      	adds	r3, #48	; 0x30
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 f9be 	bl	8006e18 <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e00a      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003aaa:	e006      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003aac:	bf00      	nop
 8003aae:	e004      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ab0:	bf00      	nop
 8003ab2:	e002      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ab4:	bf00      	nop
 8003ab6:	e000      	b.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d110      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ac8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ad4:	4902      	ldr	r1, [pc, #8]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8003ade:	bf00      	nop
 8003ae0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ae8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	2100      	movs	r1, #0
 8003af6:	6239      	str	r1, [r7, #32]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
 8003afe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b02:	460b      	mov	r3, r1
 8003b04:	4313      	orrs	r3, r2
 8003b06:	d055      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8003b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b10:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003b14:	d031      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8003b16:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003b1a:	d82a      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b20:	d02d      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8003b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b26:	d824      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003b28:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003b2c:	d029      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8003b2e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003b32:	d81e      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d011      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d818      	bhi.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8003b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b48:	d113      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b4e:	3308      	adds	r3, #8
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 f8c9 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e014      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b62:	3330      	adds	r3, #48	; 0x30
 8003b64:	4618      	mov	r0, r3
 8003b66:	f003 f957 	bl	8006e18 <RCCEx_PLL3_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b70:	e00a      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b78:	e006      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003b7a:	bf00      	nop
 8003b7c:	e004      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003b7e:	bf00      	nop
 8003b80:	e002      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003b82:	bf00      	nop
 8003b84:	e000      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b88:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10d      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8003b90:	4b88      	ldr	r3, [pc, #544]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b96:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8003b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ba2:	4984      	ldr	r1, [pc, #528]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003baa:	e003      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bb0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003bb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	61b9      	str	r1, [r7, #24]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	d03d      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d81c      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c1f 	.word	0x08003c1f
 8003be8:	08003bf5 	.word	0x08003bf5
 8003bec:	08003c03 	.word	0x08003c03
 8003bf0:	08003c1f 	.word	0x08003c1f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf4:	4b6f      	ldr	r3, [pc, #444]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfe:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003c00:	e00e      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c06:	3308      	adds	r3, #8
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f003 f86d 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003c14:	e004      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8003c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003c28:	4b62      	ldr	r3, [pc, #392]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c2e:	f023 0203 	bic.w	r2, r3, #3
 8003c32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c3a:	495e      	ldr	r1, [pc, #376]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003c42:	e003      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c54:	2100      	movs	r1, #0
 8003c56:	6139      	str	r1, [r7, #16]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c62:	460b      	mov	r3, r1
 8003c64:	4313      	orrs	r3, r2
 8003c66:	d03a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c74:	d00e      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8003c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7a:	d815      	bhi.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8003c80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c84:	d110      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c90:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003c92:	e00e      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c98:	3308      	adds	r3, #8
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f003 f824 	bl	8006ce8 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003ca6:	e004      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cae:	e000      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8003cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10d      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003cba:	4b3e      	ldr	r3, [pc, #248]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ccc:	4939      	ldr	r1, [pc, #228]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003cd4:	e003      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cda:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	d038      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cfe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d02:	2b30      	cmp	r3, #48	; 0x30
 8003d04:	d01b      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8003d06:	2b30      	cmp	r3, #48	; 0x30
 8003d08:	d815      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d002      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8003d0e:	2b20      	cmp	r3, #32
 8003d10:	d007      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8003d12:	e010      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d14:	4b27      	ldr	r3, [pc, #156]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	4a26      	ldr	r2, [pc, #152]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003d20:	e00e      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d26:	3330      	adds	r3, #48	; 0x30
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f003 f875 	bl	8006e18 <RCCEx_PLL3_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003d34:	e004      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d3c:	e000      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8003d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10d      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d56:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003d5a:	4916      	ldr	r1, [pc, #88]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003d62:	e003      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	2100      	movs	r1, #0
 8003d76:	6039      	str	r1, [r7, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	607b      	str	r3, [r7, #4]
 8003d7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d82:	460b      	mov	r3, r1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	d00c      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d96:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003d9a:	4906      	ldr	r1, [pc, #24]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8003da2:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	44020c00 	.word	0x44020c00

08003db8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b08b      	sub	sp, #44	; 0x2c
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003dc0:	4bad      	ldr	r3, [pc, #692]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003dca:	4bab      	ldr	r3, [pc, #684]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003dd4:	4ba8      	ldr	r3, [pc, #672]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	0a1b      	lsrs	r3, r3, #8
 8003dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dde:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003de0:	4ba5      	ldr	r3, [pc, #660]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003dea:	4ba3      	ldr	r3, [pc, #652]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	08db      	lsrs	r3, r3, #3
 8003df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e02:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8126 	beq.w	800405a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d053      	beq.n	8003ebc <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d86f      	bhi.n	8003efa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d003      	beq.n	8003e28 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d02b      	beq.n	8003e7e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003e26:	e068      	b.n	8003efa <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003e28:	4b93      	ldr	r3, [pc, #588]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	4a92      	ldr	r2, [pc, #584]	; (800407c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003e34:	fa22 f303 	lsr.w	r3, r2, r3
 8003e38:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	ee07 3a90 	vmov	s15, r3
 8003e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	ee07 3a90 	vmov	s15, r3
 8003e58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e60:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003e64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003e7c:	e068      	b.n	8003f50 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e88:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004084 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003e8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	ee07 3a90 	vmov	s15, r3
 8003e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e9a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003e9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eb6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003eba:	e049      	b.n	8003f50 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	ee07 3a90 	vmov	s15, r3
 8003ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ec6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004088 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	ee07 3a90 	vmov	s15, r3
 8003ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ed8:	ed97 6a04 	vldr	s12, [r7, #16]
 8003edc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003ef8:	e02a      	b.n	8003f50 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003efa:	4b5f      	ldr	r3, [pc, #380]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	08db      	lsrs	r3, r3, #3
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	4a5d      	ldr	r2, [pc, #372]	; (800407c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f06:	fa22 f303 	lsr.w	r3, r2, r3
 8003f0a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	ee07 3a90 	vmov	s15, r3
 8003f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	ee07 3a90 	vmov	s15, r3
 8003f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f2e:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f32:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004080 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003f4e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003f50:	4b49      	ldr	r3, [pc, #292]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f5c:	d121      	bne.n	8003fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8003f5e:	4b46      	ldr	r3, [pc, #280]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d017      	beq.n	8003f9a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003f6a:	4b43      	ldr	r3, [pc, #268]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6e:	0a5b      	lsrs	r3, r3, #9
 8003f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f74:	ee07 3a90 	vmov	s15, r3
 8003f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8003f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003f80:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003f84:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f90:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e006      	b.n	8003fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	e002      	b.n	8003fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003fa8:	4b33      	ldr	r3, [pc, #204]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fb4:	d121      	bne.n	8003ffa <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d017      	beq.n	8003ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc6:	0c1b      	lsrs	r3, r3, #16
 8003fc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8003fdc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8003fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fe8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	e006      	b.n	8004000 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	605a      	str	r2, [r3, #4]
 8003ff8:	e002      	b.n	8004000 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800400c:	d121      	bne.n	8004052 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d017      	beq.n	800404a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004024:	ee07 3a90 	vmov	s15, r3
 8004028:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800402c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004030:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004034:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800403c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004040:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004048:	e010      	b.n	800406c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	609a      	str	r2, [r3, #8]
}
 8004050:	e00c      	b.n	800406c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
}
 8004058:	e008      	b.n	800406c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	372c      	adds	r7, #44	; 0x2c
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	44020c00 	.word	0x44020c00
 800407c:	03d09000 	.word	0x03d09000
 8004080:	46000000 	.word	0x46000000
 8004084:	4a742400 	.word	0x4a742400
 8004088:	4bbebc20 	.word	0x4bbebc20

0800408c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800408c:	b480      	push	{r7}
 800408e:	b08b      	sub	sp, #44	; 0x2c
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004094:	4bad      	ldr	r3, [pc, #692]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800409e:	4bab      	ldr	r3, [pc, #684]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80040a8:	4ba8      	ldr	r3, [pc, #672]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040b2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80040b4:	4ba5      	ldr	r3, [pc, #660]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b8:	f003 0310 	and.w	r3, r3, #16
 80040bc:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80040be:	4ba3      	ldr	r3, [pc, #652]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	08db      	lsrs	r3, r3, #3
 80040c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	fb02 f303 	mul.w	r3, r2, r3
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 8126 	beq.w	800432e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d053      	beq.n	8004190 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d86f      	bhi.n	80041ce <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d02b      	beq.n	8004152 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80040fa:	e068      	b.n	80041ce <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80040fc:	4b93      	ldr	r3, [pc, #588]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	08db      	lsrs	r3, r3, #3
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	4a92      	ldr	r2, [pc, #584]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
 800410c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	ee07 3a90 	vmov	s15, r3
 8004114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004130:	ed97 6a04 	vldr	s12, [r7, #16]
 8004134:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004150:	e068      	b.n	8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004358 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004172:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800418e:	e049      	b.n	8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800435c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	ee07 3a90 	vmov	s15, r3
 80041a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80041b0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80041b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80041cc:	e02a      	b.n	8004224 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041ce:	4b5f      	ldr	r3, [pc, #380]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	08db      	lsrs	r3, r3, #3
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041da:	fa22 f303 	lsr.w	r3, r2, r3
 80041de:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	ee07 3a90 	vmov	s15, r3
 80041e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004202:	ed97 6a04 	vldr	s12, [r7, #16]
 8004206:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004354 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800420a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800421a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004222:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004224:	4b49      	ldr	r3, [pc, #292]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800422c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004230:	d121      	bne.n	8004276 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004232:	4b46      	ldr	r3, [pc, #280]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d017      	beq.n	800426e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800423e:	4b43      	ldr	r3, [pc, #268]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	0a5b      	lsrs	r3, r3, #9
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	ee07 3a90 	vmov	s15, r3
 800424c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004250:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004254:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004258:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800425c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004264:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e006      	b.n	800427c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e002      	b.n	800427c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800427c:	4b33      	ldr	r3, [pc, #204]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004288:	d121      	bne.n	80042ce <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800428a:	4b30      	ldr	r3, [pc, #192]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d017      	beq.n	80042c6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80042a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80042b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80042b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042bc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042d4:	4b1d      	ldr	r3, [pc, #116]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e0:	d121      	bne.n	8004326 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80042e2:	4b1a      	ldr	r3, [pc, #104]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d017      	beq.n	800431e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80042ee:	4b17      	ldr	r3, [pc, #92]	; (800434c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	0e1b      	lsrs	r3, r3, #24
 80042f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f8:	ee07 3a90 	vmov	s15, r3
 80042fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004300:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004304:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004308:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800430c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004310:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004314:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800431c:	e010      	b.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	e00c      	b.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
}
 8004340:	bf00      	nop
 8004342:	372c      	adds	r7, #44	; 0x2c
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	44020c00 	.word	0x44020c00
 8004350:	03d09000 	.word	0x03d09000
 8004354:	46000000 	.word	0x46000000
 8004358:	4a742400 	.word	0x4a742400
 800435c:	4bbebc20 	.word	0x4bbebc20

08004360 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004360:	b480      	push	{r7}
 8004362:	b08b      	sub	sp, #44	; 0x2c
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004368:	4bad      	ldr	r3, [pc, #692]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004370:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004372:	4bab      	ldr	r3, [pc, #684]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800437c:	4ba8      	ldr	r3, [pc, #672]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004386:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004388:	4ba5      	ldr	r3, [pc, #660]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004392:	4ba3      	ldr	r3, [pc, #652]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	ee07 3a90 	vmov	s15, r3
 80043a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043aa:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8126 	beq.w	8004602 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d053      	beq.n	8004464 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d86f      	bhi.n	80044a2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d02b      	beq.n	8004426 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80043ce:	e068      	b.n	80044a2 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80043d0:	4b93      	ldr	r3, [pc, #588]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	08db      	lsrs	r3, r3, #3
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	4a92      	ldr	r2, [pc, #584]	; (8004624 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80043dc:	fa22 f303 	lsr.w	r3, r2, r3
 80043e0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	ee07 3a90 	vmov	s15, r3
 80043e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	ee07 3a90 	vmov	s15, r3
 8004400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004404:	ed97 6a04 	vldr	s12, [r7, #16]
 8004408:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800440c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004414:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004418:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004420:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004424:	e068      	b.n	80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	ee07 3a90 	vmov	s15, r3
 800442c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004430:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800462c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004438:	6a3b      	ldr	r3, [r7, #32]
 800443a:	ee07 3a90 	vmov	s15, r3
 800443e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004442:	ed97 6a04 	vldr	s12, [r7, #16]
 8004446:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800444a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004462:	e049      	b.n	80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	ee07 3a90 	vmov	s15, r3
 800446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800446e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004630 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004480:	ed97 6a04 	vldr	s12, [r7, #16]
 8004484:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004488:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800448c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004490:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004494:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80044a0:	e02a      	b.n	80044f8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044a2:	4b5f      	ldr	r3, [pc, #380]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	08db      	lsrs	r3, r3, #3
 80044a8:	f003 0303 	and.w	r3, r3, #3
 80044ac:	4a5d      	ldr	r2, [pc, #372]	; (8004624 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	ee07 3a90 	vmov	s15, r3
 80044c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044d6:	ed97 6a04 	vldr	s12, [r7, #16]
 80044da:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004628 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80044de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80044f6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80044f8:	4b49      	ldr	r3, [pc, #292]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004504:	d121      	bne.n	800454a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8004506:	4b46      	ldr	r3, [pc, #280]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d017      	beq.n	8004542 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004512:	4b43      	ldr	r3, [pc, #268]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004516:	0a5b      	lsrs	r3, r3, #9
 8004518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451c:	ee07 3a90 	vmov	s15, r3
 8004520:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004528:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800452c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004530:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004538:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004550:	4b33      	ldr	r3, [pc, #204]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800455c:	d121      	bne.n	80045a2 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800455e:	4b30      	ldr	r3, [pc, #192]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800456a:	4b2d      	ldr	r3, [pc, #180]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800457c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004580:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004584:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004590:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	e002      	b.n	80045a8 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b4:	d121      	bne.n	80045fa <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d017      	beq.n	80045f2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	0e1b      	lsrs	r3, r3, #24
 80045c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045cc:	ee07 3a90 	vmov	s15, r3
 80045d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80045d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80045dc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80045e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80045f0:	e010      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	e00c      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	609a      	str	r2, [r3, #8]
}
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	372c      	adds	r7, #44	; 0x2c
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	44020c00 	.word	0x44020c00
 8004624:	03d09000 	.word	0x03d09000
 8004628:	46000000 	.word	0x46000000
 800462c:	4a742400 	.word	0x4a742400
 8004630:	4bbebc20 	.word	0x4bbebc20

08004634 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b08f      	sub	sp, #60	; 0x3c
 8004638:	af00      	add	r7, sp, #0
 800463a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800463e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004642:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8004646:	4321      	orrs	r1, r4
 8004648:	d150      	bne.n	80046ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800464c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d108      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d104      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800466c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
 8004672:	f002 bb2a 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004676:	4b1b      	ldr	r3, [pc, #108]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800467c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004684:	d108      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800468c:	d104      	bne.n	8004698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800468e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004692:	637b      	str	r3, [r7, #52]	; 0x34
 8004694:	f002 bb19 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004698:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046a4:	d119      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d115      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80046b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ba:	d30a      	bcc.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80046bc:	4b09      	ldr	r3, [pc, #36]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80046ce:	f002 bafc 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80046d6:	f002 baf8 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
 80046de:	f002 baf4 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80046e2:	bf00      	nop
 80046e4:	44020c00 	.word	0x44020c00
 80046e8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80046ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046f0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80046f4:	ea50 0104 	orrs.w	r1, r0, r4
 80046f8:	f001 8275 	beq.w	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80046fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004700:	2801      	cmp	r0, #1
 8004702:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8004706:	f082 82dd 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800470a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800470e:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8004712:	ea50 0104 	orrs.w	r1, r0, r4
 8004716:	f001 816c 	beq.w	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800471a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800471e:	2801      	cmp	r0, #1
 8004720:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8004724:	f082 82ce 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800472c:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8004730:	ea50 0104 	orrs.w	r1, r0, r4
 8004734:	f001 8602 	beq.w	800633c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8004738:	e9d7 0100 	ldrd	r0, r1, [r7]
 800473c:	2801      	cmp	r0, #1
 800473e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8004742:	f082 82bf 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004746:	e9d7 0100 	ldrd	r0, r1, [r7]
 800474a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800474e:	ea50 0104 	orrs.w	r1, r0, r4
 8004752:	f001 854c 	beq.w	80061ee <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8004756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800475a:	2801      	cmp	r0, #1
 800475c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8004760:	f082 82b0 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004768:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800476c:	ea50 0104 	orrs.w	r1, r0, r4
 8004770:	f001 849e 	beq.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8004774:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004778:	2801      	cmp	r0, #1
 800477a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800477e:	f082 82a1 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004782:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004786:	f1a1 0420 	sub.w	r4, r1, #32
 800478a:	ea50 0104 	orrs.w	r1, r0, r4
 800478e:	f001 83e8 	beq.w	8005f62 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8004792:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004796:	2801      	cmp	r0, #1
 8004798:	f171 0120 	sbcs.w	r1, r1, #32
 800479c:	f082 8292 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80047a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047a4:	f1a1 0410 	sub.w	r4, r1, #16
 80047a8:	ea50 0104 	orrs.w	r1, r0, r4
 80047ac:	f002 8256 	beq.w	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80047b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047b4:	2801      	cmp	r0, #1
 80047b6:	f171 0110 	sbcs.w	r1, r1, #16
 80047ba:	f082 8283 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80047be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047c2:	f1a1 0408 	sub.w	r4, r1, #8
 80047c6:	ea50 0104 	orrs.w	r1, r0, r4
 80047ca:	f002 81cc 	beq.w	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80047ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047d2:	2801      	cmp	r0, #1
 80047d4:	f171 0108 	sbcs.w	r1, r1, #8
 80047d8:	f082 8274 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80047dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e0:	1f0c      	subs	r4, r1, #4
 80047e2:	ea50 0104 	orrs.w	r1, r0, r4
 80047e6:	f001 8648 	beq.w	800647a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80047ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ee:	2801      	cmp	r0, #1
 80047f0:	f171 0104 	sbcs.w	r1, r1, #4
 80047f4:	f082 8266 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80047f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047fc:	1e8c      	subs	r4, r1, #2
 80047fe:	ea50 0104 	orrs.w	r1, r0, r4
 8004802:	f002 8143 	beq.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8004806:	e9d7 0100 	ldrd	r0, r1, [r7]
 800480a:	2801      	cmp	r0, #1
 800480c:	f171 0102 	sbcs.w	r1, r1, #2
 8004810:	f082 8258 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004814:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004818:	1e4c      	subs	r4, r1, #1
 800481a:	ea50 0104 	orrs.w	r1, r0, r4
 800481e:	f002 80ce 	beq.w	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8004822:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004826:	2801      	cmp	r0, #1
 8004828:	f171 0101 	sbcs.w	r1, r1, #1
 800482c:	f082 824a 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004834:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004838:	4321      	orrs	r1, r4
 800483a:	f002 8059 	beq.w	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800483e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004842:	4cd9      	ldr	r4, [pc, #868]	; (8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004844:	42a0      	cmp	r0, r4
 8004846:	f171 0100 	sbcs.w	r1, r1, #0
 800484a:	f082 823b 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800484e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004852:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8004856:	4321      	orrs	r1, r4
 8004858:	f001 87d9 	beq.w	800680e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800485c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004860:	4cd2      	ldr	r4, [pc, #840]	; (8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004862:	42a0      	cmp	r0, r4
 8004864:	f171 0100 	sbcs.w	r1, r1, #0
 8004868:	f082 822c 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800486c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004870:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8004874:	4321      	orrs	r1, r4
 8004876:	f001 8751 	beq.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800487a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800487e:	4ccc      	ldr	r4, [pc, #816]	; (8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004880:	42a0      	cmp	r0, r4
 8004882:	f171 0100 	sbcs.w	r1, r1, #0
 8004886:	f082 821d 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800488a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800488e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8004892:	4321      	orrs	r1, r4
 8004894:	f001 869a 	beq.w	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8004898:	e9d7 0100 	ldrd	r0, r1, [r7]
 800489c:	4cc5      	ldr	r4, [pc, #788]	; (8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800489e:	42a0      	cmp	r0, r4
 80048a0:	f171 0100 	sbcs.w	r1, r1, #0
 80048a4:	f082 820e 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ac:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80048b0:	4321      	orrs	r1, r4
 80048b2:	f001 8612 	beq.w	80064da <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80048b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ba:	4cbf      	ldr	r4, [pc, #764]	; (8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80048bc:	42a0      	cmp	r0, r4
 80048be:	f171 0100 	sbcs.w	r1, r1, #0
 80048c2:	f082 81ff 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ca:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80048ce:	4321      	orrs	r1, r4
 80048d0:	f002 817e 	beq.w	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80048d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048d8:	4cb8      	ldr	r4, [pc, #736]	; (8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80048da:	42a0      	cmp	r0, r4
 80048dc:	f171 0100 	sbcs.w	r1, r1, #0
 80048e0:	f082 81f0 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048e8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80048ec:	4321      	orrs	r1, r4
 80048ee:	f000 829e 	beq.w	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80048f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048f6:	4cb2      	ldr	r4, [pc, #712]	; (8004bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80048f8:	42a0      	cmp	r0, r4
 80048fa:	f171 0100 	sbcs.w	r1, r1, #0
 80048fe:	f082 81e1 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004902:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004906:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 800490a:	4321      	orrs	r1, r4
 800490c:	f000 826d 	beq.w	8004dea <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004914:	4cab      	ldr	r4, [pc, #684]	; (8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004916:	42a0      	cmp	r0, r4
 8004918:	f171 0100 	sbcs.w	r1, r1, #0
 800491c:	f082 81d2 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004924:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8004928:	4321      	orrs	r1, r4
 800492a:	f001 800d 	beq.w	8005948 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800492e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004932:	4ca5      	ldr	r4, [pc, #660]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004934:	42a0      	cmp	r0, r4
 8004936:	f171 0100 	sbcs.w	r1, r1, #0
 800493a:	f082 81c3 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800493e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004942:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8004946:	4321      	orrs	r1, r4
 8004948:	f000 81d0 	beq.w	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800494c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004950:	4c9e      	ldr	r4, [pc, #632]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004952:	42a0      	cmp	r0, r4
 8004954:	f171 0100 	sbcs.w	r1, r1, #0
 8004958:	f082 81b4 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800495c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004960:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8004964:	4321      	orrs	r1, r4
 8004966:	f000 8142 	beq.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800496a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800496e:	4c98      	ldr	r4, [pc, #608]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004970:	42a0      	cmp	r0, r4
 8004972:	f171 0100 	sbcs.w	r1, r1, #0
 8004976:	f082 81a5 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800497a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800497e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8004982:	4321      	orrs	r1, r4
 8004984:	f001 824e 	beq.w	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	4c91      	ldr	r4, [pc, #580]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800498e:	42a0      	cmp	r0, r4
 8004990:	f171 0100 	sbcs.w	r1, r1, #0
 8004994:	f082 8196 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800499c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80049a0:	4321      	orrs	r1, r4
 80049a2:	f001 8197 	beq.w	8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80049a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049aa:	4c8b      	ldr	r4, [pc, #556]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	f171 0100 	sbcs.w	r1, r1, #0
 80049b2:	f082 8187 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ba:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80049be:	4321      	orrs	r1, r4
 80049c0:	f001 8154 	beq.w	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80049c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c8:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80049cc:	f171 0100 	sbcs.w	r1, r1, #0
 80049d0:	f082 8178 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049d8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 80049dc:	4321      	orrs	r1, r4
 80049de:	f001 80b7 	beq.w	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80049e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e6:	f248 0401 	movw	r4, #32769	; 0x8001
 80049ea:	42a0      	cmp	r0, r4
 80049ec:	f171 0100 	sbcs.w	r1, r1, #0
 80049f0:	f082 8168 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049f8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 80049fc:	4321      	orrs	r1, r4
 80049fe:	f001 8064 	beq.w	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8004a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a06:	f244 0401 	movw	r4, #16385	; 0x4001
 8004a0a:	42a0      	cmp	r0, r4
 8004a0c:	f171 0100 	sbcs.w	r1, r1, #0
 8004a10:	f082 8158 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a18:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8004a1c:	4321      	orrs	r1, r4
 8004a1e:	f001 8011 	beq.w	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8004a22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a26:	f242 0401 	movw	r4, #8193	; 0x2001
 8004a2a:	42a0      	cmp	r0, r4
 8004a2c:	f171 0100 	sbcs.w	r1, r1, #0
 8004a30:	f082 8148 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a38:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8004a3c:	4321      	orrs	r1, r4
 8004a3e:	f000 871e 	beq.w	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8004a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a46:	f241 0401 	movw	r4, #4097	; 0x1001
 8004a4a:	42a0      	cmp	r0, r4
 8004a4c:	f171 0100 	sbcs.w	r1, r1, #0
 8004a50:	f082 8138 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a58:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8004a5c:	4321      	orrs	r1, r4
 8004a5e:	f000 86a8 	beq.w	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a66:	f640 0401 	movw	r4, #2049	; 0x801
 8004a6a:	42a0      	cmp	r0, r4
 8004a6c:	f171 0100 	sbcs.w	r1, r1, #0
 8004a70:	f082 8128 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a78:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8004a7c:	4321      	orrs	r1, r4
 8004a7e:	f000 8632 	beq.w	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8004a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a86:	f240 4401 	movw	r4, #1025	; 0x401
 8004a8a:	42a0      	cmp	r0, r4
 8004a8c:	f171 0100 	sbcs.w	r1, r1, #0
 8004a90:	f082 8118 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a98:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8004a9c:	4321      	orrs	r1, r4
 8004a9e:	f000 85b0 	beq.w	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8004aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aa6:	f240 2401 	movw	r4, #513	; 0x201
 8004aaa:	42a0      	cmp	r0, r4
 8004aac:	f171 0100 	sbcs.w	r1, r1, #0
 8004ab0:	f082 8108 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab8:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8004abc:	4321      	orrs	r1, r4
 8004abe:	f000 8535 	beq.w	800552c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac6:	f240 1401 	movw	r4, #257	; 0x101
 8004aca:	42a0      	cmp	r0, r4
 8004acc:	f171 0100 	sbcs.w	r1, r1, #0
 8004ad0:	f082 80f8 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8004adc:	4321      	orrs	r1, r4
 8004ade:	f000 84ba 	beq.w	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8004ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae6:	2881      	cmp	r0, #129	; 0x81
 8004ae8:	f171 0100 	sbcs.w	r1, r1, #0
 8004aec:	f082 80ea 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af4:	2821      	cmp	r0, #33	; 0x21
 8004af6:	f171 0100 	sbcs.w	r1, r1, #0
 8004afa:	d26f      	bcs.n	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004afc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b00:	4301      	orrs	r1, r0
 8004b02:	f002 80df 	beq.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b0a:	1e42      	subs	r2, r0, #1
 8004b0c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8004b10:	2a20      	cmp	r2, #32
 8004b12:	f173 0100 	sbcs.w	r1, r3, #0
 8004b16:	f082 80d5 	bcs.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b1a:	2a1f      	cmp	r2, #31
 8004b1c:	f202 80d2 	bhi.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b20:	a101      	add	r1, pc, #4	; (adr r1, 8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004b22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004b26:	bf00      	nop
 8004b28:	08004e89 	.word	0x08004e89
 8004b2c:	08004f55 	.word	0x08004f55
 8004b30:	08006cc5 	.word	0x08006cc5
 8004b34:	08005015 	.word	0x08005015
 8004b38:	08006cc5 	.word	0x08006cc5
 8004b3c:	08006cc5 	.word	0x08006cc5
 8004b40:	08006cc5 	.word	0x08006cc5
 8004b44:	080050e5 	.word	0x080050e5
 8004b48:	08006cc5 	.word	0x08006cc5
 8004b4c:	08006cc5 	.word	0x08006cc5
 8004b50:	08006cc5 	.word	0x08006cc5
 8004b54:	08006cc5 	.word	0x08006cc5
 8004b58:	08006cc5 	.word	0x08006cc5
 8004b5c:	08006cc5 	.word	0x08006cc5
 8004b60:	08006cc5 	.word	0x08006cc5
 8004b64:	080051c7 	.word	0x080051c7
 8004b68:	08006cc5 	.word	0x08006cc5
 8004b6c:	08006cc5 	.word	0x08006cc5
 8004b70:	08006cc5 	.word	0x08006cc5
 8004b74:	08006cc5 	.word	0x08006cc5
 8004b78:	08006cc5 	.word	0x08006cc5
 8004b7c:	08006cc5 	.word	0x08006cc5
 8004b80:	08006cc5 	.word	0x08006cc5
 8004b84:	08006cc5 	.word	0x08006cc5
 8004b88:	08006cc5 	.word	0x08006cc5
 8004b8c:	08006cc5 	.word	0x08006cc5
 8004b90:	08006cc5 	.word	0x08006cc5
 8004b94:	08006cc5 	.word	0x08006cc5
 8004b98:	08006cc5 	.word	0x08006cc5
 8004b9c:	08006cc5 	.word	0x08006cc5
 8004ba0:	08006cc5 	.word	0x08006cc5
 8004ba4:	0800529d 	.word	0x0800529d
 8004ba8:	80000001 	.word	0x80000001
 8004bac:	40000001 	.word	0x40000001
 8004bb0:	20000001 	.word	0x20000001
 8004bb4:	10000001 	.word	0x10000001
 8004bb8:	08000001 	.word	0x08000001
 8004bbc:	04000001 	.word	0x04000001
 8004bc0:	00800001 	.word	0x00800001
 8004bc4:	00400001 	.word	0x00400001
 8004bc8:	00200001 	.word	0x00200001
 8004bcc:	00100001 	.word	0x00100001
 8004bd0:	00080001 	.word	0x00080001
 8004bd4:	00040001 	.word	0x00040001
 8004bd8:	00020001 	.word	0x00020001
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004be4:	430b      	orrs	r3, r1
 8004be6:	f000 83c4 	beq.w	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8004bea:	f002 b86b 	b.w	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004bee:	4ba1      	ldr	r3, [pc, #644]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bf4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c00:	d036      	beq.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c08:	d86b      	bhi.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c10:	d02b      	beq.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c18:	d863      	bhi.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c20:	d01b      	beq.n	8004c5a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c28:	d85b      	bhi.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c36:	d008      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004c38:	e053      	b.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c3a:	f107 0320 	add.w	r3, r7, #32
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff f8ba 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c48:	e04e      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c4a:	f107 0314 	add.w	r3, r7, #20
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fa1c 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c58:	e046      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7ff fb7e 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c68:	e03e      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004c6a:	4b83      	ldr	r3, [pc, #524]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004c6e:	e03b      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c70:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c76:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c7c:	4b7d      	ldr	r3, [pc, #500]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d10c      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004c8e:	4b79      	ldr	r3, [pc, #484]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	08db      	lsrs	r3, r3, #3
 8004c94:	f003 0303 	and.w	r3, r3, #3
 8004c98:	4a78      	ldr	r2, [pc, #480]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca0:	e01e      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ca2:	4b74      	ldr	r3, [pc, #464]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cae:	d106      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb6:	d102      	bne.n	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004cb8:	4b71      	ldr	r3, [pc, #452]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	e010      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cbe:	4b6d      	ldr	r3, [pc, #436]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cca:	d106      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8004ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd2:	d102      	bne.n	8004cda <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004cd4:	4b6b      	ldr	r3, [pc, #428]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004cde:	e003      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8004ce0:	e002      	b.n	8004ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ce6:	bf00      	nop
          }
        }
        break;
 8004ce8:	f001 bfef 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004cec:	4b61      	ldr	r3, [pc, #388]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cf2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cfe:	d036      	beq.n	8004d6e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d06:	d86b      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d0e:	d02b      	beq.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d16:	d863      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d1e:	d01b      	beq.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d26:	d85b      	bhi.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8004d36:	e053      	b.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d38:	f107 0320 	add.w	r3, r7, #32
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff f83b 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d46:	e04e      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d48:	f107 0314 	add.w	r3, r7, #20
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f99d 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d56:	e046      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d58:	f107 0308 	add.w	r3, r7, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff faff 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d66:	e03e      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d6c:	e03b      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d74:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d7a:	4b3e      	ldr	r3, [pc, #248]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d10c      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d109      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d8c:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	08db      	lsrs	r3, r3, #3
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	4a39      	ldr	r2, [pc, #228]	; (8004e7c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	e01e      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004da0:	4b34      	ldr	r3, [pc, #208]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dac:	d106      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db4:	d102      	bne.n	8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004db6:	4b32      	ldr	r3, [pc, #200]	; (8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e010      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dbc:	4b2d      	ldr	r3, [pc, #180]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8004dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dd2:	4b2c      	ldr	r3, [pc, #176]	; (8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd6:	e002      	b.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004ddc:	e003      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8004dde:	e002      	b.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004de4:	bf00      	nop
          }
        }
        break;
 8004de6:	f001 bf70 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dfc:	f107 0320 	add.w	r3, r7, #32
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fe ffd9 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e0a:	f001 bf5e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e10:	2b40      	cmp	r3, #64	; 0x40
 8004e12:	d108      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e14:	f107 0314 	add.w	r3, r7, #20
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff f937 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e22:	f001 bf52 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e2a:	f001 bf4e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8004e2e:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d108      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e40:	f107 0320 	add.w	r3, r7, #32
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7fe ffb7 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e4e:	f001 bf3c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d108      	bne.n	8004e6a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff f915 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e66:	f001 bf30 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e6e:	f001 bf2c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004e72:	bf00      	nop
 8004e74:	44020c00 	.word	0x44020c00
 8004e78:	00bb8000 	.word	0x00bb8000
 8004e7c:	03d09000 	.word	0x03d09000
 8004e80:	003d0900 	.word	0x003d0900
 8004e84:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004e88:	4b9d      	ldr	r3, [pc, #628]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d104      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004e9a:	f7fc ffd7 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8004e9e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004ea0:	f001 bf13 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004ea4:	4b96      	ldr	r3, [pc, #600]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d107      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff f8e5 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e043      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004ec8:	4b8d      	ldr	r3, [pc, #564]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed4:	d10a      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d107      	bne.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004edc:	f107 0308 	add.w	r3, r7, #8
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fa3d 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	e031      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004eec:	4b84      	ldr	r3, [pc, #528]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d10c      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	2b03      	cmp	r3, #3
 8004efc:	d109      	bne.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004efe:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	08db      	lsrs	r3, r3, #3
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	4a7e      	ldr	r2, [pc, #504]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8004f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f10:	e01e      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8004f12:	4b7b      	ldr	r3, [pc, #492]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d102      	bne.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8004f26:	4b78      	ldr	r3, [pc, #480]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2a:	e011      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8004f2c:	4b74      	ldr	r3, [pc, #464]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d106      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b05      	cmp	r3, #5
 8004f3e:	d103      	bne.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8004f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f44:	637b      	str	r3, [r7, #52]	; 0x34
 8004f46:	e003      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f4c:	f001 bebd 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004f50:	f001 bebb 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004f54:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d104      	bne.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f66:	f7fc ff5b 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8004f6a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f6c:	f001 bead 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8004f70:	4b63      	ldr	r3, [pc, #396]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d107      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7ff f87f 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
 8004f92:	e03d      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	2b10      	cmp	r3, #16
 8004f98:	d108      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f9a:	f107 0308 	add.w	r3, r7, #8
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff f9de 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fa8:	f001 be8f 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8004fac:	4b54      	ldr	r3, [pc, #336]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d10c      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	2b18      	cmp	r3, #24
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fbe:	4b50      	ldr	r3, [pc, #320]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	08db      	lsrs	r3, r3, #3
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	4a4e      	ldr	r2, [pc, #312]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd0:	e01e      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8004fd2:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fde:	d105      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d102      	bne.n	8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8004fe6:	4b48      	ldr	r3, [pc, #288]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fea:	e011      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004fec:	4b44      	ldr	r3, [pc, #272]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d106      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2b28      	cmp	r3, #40	; 0x28
 8004ffe:	d103      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005004:	637b      	str	r3, [r7, #52]	; 0x34
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800500c:	f001 be5d 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005010:	f001 be5b 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005014:	4b3a      	ldr	r3, [pc, #232]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005016:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800501a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800501e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2b00      	cmp	r3, #0
 8005024:	d104      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005026:	f7fc fefb 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 800502a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800502c:	f001 be4d 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005030:	4b33      	ldr	r3, [pc, #204]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005038:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800503c:	d10a      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d107      	bne.n	8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff f81f 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	e045      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005054:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005060:	d10a      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d107      	bne.n	8005078 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005068:	f107 0308 	add.w	r3, r7, #8
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff f977 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	637b      	str	r3, [r7, #52]	; 0x34
 8005076:	e033      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d10c      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2bc0      	cmp	r3, #192	; 0xc0
 8005088:	d109      	bne.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
 800509c:	e020      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050aa:	d106      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b2:	d102      	bne.n	80050ba <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80050b4:	4b14      	ldr	r3, [pc, #80]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80050b6:	637b      	str	r3, [r7, #52]	; 0x34
 80050b8:	e012      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80050ba:	4b11      	ldr	r3, [pc, #68]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d107      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80050ce:	d103      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80050d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d4:	637b      	str	r3, [r7, #52]	; 0x34
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050dc:	f001 bdf5 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80050e0:	f001 bdf3 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050ea:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80050ee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10a      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80050f6:	f7fc fe93 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80050fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80050fc:	f001 bde5 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005100:	44020c00 	.word	0x44020c00
 8005104:	03d09000 	.word	0x03d09000
 8005108:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800510c:	4ba0      	ldr	r3, [pc, #640]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005118:	d10b      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800511a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d107      	bne.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005122:	f107 0314 	add.w	r3, r7, #20
 8005126:	4618      	mov	r0, r3
 8005128:	f7fe ffb0 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	637b      	str	r3, [r7, #52]	; 0x34
 8005130:	e047      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005132:	4b97      	ldr	r3, [pc, #604]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005146:	d107      	bne.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	4618      	mov	r0, r3
 800514e:	f7ff f907 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	637b      	str	r3, [r7, #52]	; 0x34
 8005156:	e034      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005158:	4b8d      	ldr	r3, [pc, #564]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b02      	cmp	r3, #2
 8005162:	d10d      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800516a:	d109      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800516c:	4b88      	ldr	r3, [pc, #544]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	08db      	lsrs	r3, r3, #3
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	4a87      	ldr	r2, [pc, #540]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	e020      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005180:	4b83      	ldr	r3, [pc, #524]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800518c:	d106      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005194:	d102      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005196:	4b80      	ldr	r3, [pc, #512]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
 800519a:	e012      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800519c:	4b7c      	ldr	r3, [pc, #496]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800519e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d107      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80051b0:	d103      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80051b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051b6:	637b      	str	r3, [r7, #52]	; 0x34
 80051b8:	e003      	b.n	80051c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051be:	f001 bd84 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80051c2:	f001 bd82 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80051c6:	4b72      	ldr	r3, [pc, #456]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051cc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7fc fe22 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80051dc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80051de:	f001 bd74 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80051e2:	4b6b      	ldr	r3, [pc, #428]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ee:	d10b      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051f6:	d107      	bne.n	8005208 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051f8:	f107 0314 	add.w	r3, r7, #20
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7fe ff45 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	637b      	str	r3, [r7, #52]	; 0x34
 8005206:	e047      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005208:	4b61      	ldr	r3, [pc, #388]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005214:	d10b      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d107      	bne.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff f89c 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
 800522c:	e034      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800522e:	4b58      	ldr	r3, [pc, #352]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b02      	cmp	r3, #2
 8005238:	d10d      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005240:	d109      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005242:	4b53      	ldr	r3, [pc, #332]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	08db      	lsrs	r3, r3, #3
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	4a51      	ldr	r2, [pc, #324]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800524e:	fa22 f303 	lsr.w	r3, r2, r3
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
 8005254:	e020      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005256:	4b4e      	ldr	r3, [pc, #312]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800525e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005262:	d106      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800526a:	d102      	bne.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800526c:	4b4a      	ldr	r3, [pc, #296]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800526e:	637b      	str	r3, [r7, #52]	; 0x34
 8005270:	e012      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005272:	4b47      	ldr	r3, [pc, #284]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d107      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005282:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005286:	d103      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	e003      	b.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005294:	f001 bd19 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005298:	f001 bd17 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800529c:	4b3c      	ldr	r3, [pc, #240]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800529e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052a2:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7fc fdb7 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80052b2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80052b4:	f001 bd09 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80052b8:	4b35      	ldr	r3, [pc, #212]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c4:	d10b      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052cc:	d107      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052ce:	f107 0314 	add.w	r3, r7, #20
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fe feda 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	637b      	str	r3, [r7, #52]	; 0x34
 80052dc:	e047      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80052de:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ea:	d10b      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f2:	d107      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052f4:	f107 0308 	add.w	r3, r7, #8
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff f831 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	637b      	str	r3, [r7, #52]	; 0x34
 8005302:	e034      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8005304:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d10d      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005316:	d109      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005318:	4b1d      	ldr	r3, [pc, #116]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	4a1c      	ldr	r2, [pc, #112]	; (8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
 800532a:	e020      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005338:	d106      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800533a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005340:	d102      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005344:	637b      	str	r3, [r7, #52]	; 0x34
 8005346:	e012      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005348:	4b11      	ldr	r3, [pc, #68]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800534a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d107      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800535c:	d103      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	e003      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005366:	2300      	movs	r3, #0
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800536a:	f001 bcae 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800536e:	f001 bcac 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005378:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800537c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005384:	f7fc fd4c 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005388:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800538a:	f001 bc9e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800538e:	bf00      	nop
 8005390:	44020c00 	.word	0x44020c00
 8005394:	03d09000 	.word	0x03d09000
 8005398:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800539c:	4ba0      	ldr	r3, [pc, #640]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a8:	d10b      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80053aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053b0:	d107      	bne.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fe fe68 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
 80053c0:	e047      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80053c2:	4b97      	ldr	r3, [pc, #604]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ce:	d10b      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053d6:	d107      	bne.n	80053e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053d8:	f107 0308 	add.w	r3, r7, #8
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe ffbf 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	637b      	str	r3, [r7, #52]	; 0x34
 80053e6:	e034      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80053e8:	4b8d      	ldr	r3, [pc, #564]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0302 	and.w	r3, r3, #2
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d10d      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053fa:	d109      	bne.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053fc:	4b88      	ldr	r3, [pc, #544]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	08db      	lsrs	r3, r3, #3
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	4a87      	ldr	r2, [pc, #540]	; (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
 800540e:	e020      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005410:	4b83      	ldr	r3, [pc, #524]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d106      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005424:	d102      	bne.n	800542c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005426:	4b80      	ldr	r3, [pc, #512]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005428:	637b      	str	r3, [r7, #52]	; 0x34
 800542a:	e012      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800542c:	4b7c      	ldr	r3, [pc, #496]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800542e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b02      	cmp	r3, #2
 8005438:	d107      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005440:	d103      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800544a:	2300      	movs	r3, #0
 800544c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800544e:	f001 bc3c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005452:	f001 bc3a 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005456:	4b72      	ldr	r3, [pc, #456]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800545c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005460:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	2b00      	cmp	r3, #0
 8005466:	d104      	bne.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005468:	f7fc fcda 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 800546c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800546e:	f001 bc2c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005472:	4b6b      	ldr	r3, [pc, #428]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800547a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800547e:	d10b      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005486:	d107      	bne.n	8005498 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4618      	mov	r0, r3
 800548e:	f7fe fdfd 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	e047      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005498:	4b61      	ldr	r3, [pc, #388]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a4:	d10b      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ac:	d107      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054ae:	f107 0308 	add.w	r3, r7, #8
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fe ff54 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	e034      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80054be:	4b58      	ldr	r3, [pc, #352]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d10d      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054d0:	d109      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054d2:	4b53      	ldr	r3, [pc, #332]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	08db      	lsrs	r3, r3, #3
 80054d8:	f003 0303 	and.w	r3, r3, #3
 80054dc:	4a51      	ldr	r2, [pc, #324]	; (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	637b      	str	r3, [r7, #52]	; 0x34
 80054e4:	e020      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80054e6:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f2:	d106      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054fa:	d102      	bne.n	8005502 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80054fc:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005500:	e012      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005504:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b02      	cmp	r3, #2
 800550e:	d107      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005512:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005516:	d103      	bne.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800551c:	637b      	str	r3, [r7, #52]	; 0x34
 800551e:	e003      	b.n	8005528 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005524:	f001 bbd1 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005528:	f001 bbcf 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800552c:	4b3c      	ldr	r3, [pc, #240]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800552e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005532:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005536:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800553e:	f7fc fc6f 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005542:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005544:	f001 bbc1 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005548:	4b35      	ldr	r3, [pc, #212]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005554:	d10b      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800555c:	d107      	bne.n	800556e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555e:	f107 0314 	add.w	r3, r7, #20
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fd92 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
 800556c:	e047      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d10b      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800557c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005582:	d107      	bne.n	8005594 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005584:	f107 0308 	add.w	r3, r7, #8
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fee9 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
 8005592:	e034      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8005594:	4b22      	ldr	r3, [pc, #136]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b02      	cmp	r3, #2
 800559e:	d10d      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055a6:	d109      	bne.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055a8:	4b1d      	ldr	r3, [pc, #116]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	08db      	lsrs	r3, r3, #3
 80055ae:	f003 0303 	and.w	r3, r3, #3
 80055b2:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80055b4:	fa22 f303 	lsr.w	r3, r2, r3
 80055b8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ba:	e020      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80055bc:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055c8:	d106      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055d0:	d102      	bne.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80055d2:	4b15      	ldr	r3, [pc, #84]	; (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	e012      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80055d8:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d107      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80055ec:	d103      	bne.n	80055f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055fa:	f001 bb66 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055fe:	f001 bb64 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8005602:	4b07      	ldr	r3, [pc, #28]	; (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005604:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005608:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 800560c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fc fc04 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005618:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800561a:	f001 bb56 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800561e:	bf00      	nop
 8005620:	44020c00 	.word	0x44020c00
 8005624:	03d09000 	.word	0x03d09000
 8005628:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800562c:	4ba1      	ldr	r3, [pc, #644]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005638:	d10b      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005640:	d107      	bne.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005642:	f107 0314 	add.w	r3, r7, #20
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe fd20 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
 8005650:	e047      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005652:	4b98      	ldr	r3, [pc, #608]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800565a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800565e:	d10b      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005666:	d107      	bne.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005668:	f107 0308 	add.w	r3, r7, #8
 800566c:	4618      	mov	r0, r3
 800566e:	f7fe fe77 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
 8005676:	e034      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005678:	4b8e      	ldr	r3, [pc, #568]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0302 	and.w	r3, r3, #2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d10d      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800568a:	d109      	bne.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800568c:	4b89      	ldr	r3, [pc, #548]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	08db      	lsrs	r3, r3, #3
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	4a88      	ldr	r2, [pc, #544]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
 800569c:	637b      	str	r3, [r7, #52]	; 0x34
 800569e:	e020      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80056a0:	4b84      	ldr	r3, [pc, #528]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ac:	d106      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b4:	d102      	bne.n	80056bc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80056b6:	4b81      	ldr	r3, [pc, #516]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	e012      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80056bc:	4b7d      	ldr	r3, [pc, #500]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80056be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d107      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80056d0:	d103      	bne.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80056d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
 80056d8:	e003      	b.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056de:	f001 baf4 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056e2:	f001 baf2 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80056e6:	4b73      	ldr	r3, [pc, #460]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80056e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d104      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80056f8:	f7fc fb92 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80056fc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80056fe:	f001 bae4 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8005702:	4b6c      	ldr	r3, [pc, #432]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800570a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800570e:	d10a      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005716:	f107 0314 	add.w	r3, r7, #20
 800571a:	4618      	mov	r0, r3
 800571c:	f7fe fcb6 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	637b      	str	r3, [r7, #52]	; 0x34
 8005724:	e043      	b.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005726:	4b63      	ldr	r3, [pc, #396]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800572e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005732:	d10a      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	2b02      	cmp	r3, #2
 8005738:	d107      	bne.n	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800573a:	f107 0308 	add.w	r3, r7, #8
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe fe0e 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	637b      	str	r3, [r7, #52]	; 0x34
 8005748:	e031      	b.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800574a:	4b5a      	ldr	r3, [pc, #360]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d10c      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	2b03      	cmp	r3, #3
 800575a:	d109      	bne.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800575c:	4b55      	ldr	r3, [pc, #340]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	08db      	lsrs	r3, r3, #3
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	4a54      	ldr	r2, [pc, #336]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
 800576e:	e01e      	b.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8005770:	4b50      	ldr	r3, [pc, #320]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577c:	d105      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	2b04      	cmp	r3, #4
 8005782:	d102      	bne.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8005784:	4b4d      	ldr	r3, [pc, #308]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
 8005788:	e011      	b.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800578a:	4b4a      	ldr	r3, [pc, #296]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800578c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b02      	cmp	r3, #2
 8005796:	d106      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	2b05      	cmp	r3, #5
 800579c:	d103      	bne.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800579e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057a2:	637b      	str	r3, [r7, #52]	; 0x34
 80057a4:	e003      	b.n	80057ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057aa:	f001 ba8e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80057ae:	f001 ba8c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80057b2:	4b40      	ldr	r3, [pc, #256]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80057b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057bc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80057c4:	f7fc fb2c 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 80057c8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80057ca:	f001 ba7e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80057ce:	4b39      	ldr	r3, [pc, #228]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057da:	d10a      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80057dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057de:	2b10      	cmp	r3, #16
 80057e0:	d107      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057e2:	f107 0314 	add.w	r3, r7, #20
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fc50 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	637b      	str	r3, [r7, #52]	; 0x34
 80057f0:	e043      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80057f2:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fe:	d10a      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b20      	cmp	r3, #32
 8005804:	d107      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005806:	f107 0308 	add.w	r3, r7, #8
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fda8 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	e031      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8005816:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b02      	cmp	r3, #2
 8005820:	d10c      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d109      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005828:	4b22      	ldr	r3, [pc, #136]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	08db      	lsrs	r3, r3, #3
 800582e:	f003 0303 	and.w	r3, r3, #3
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005834:	fa22 f303 	lsr.w	r3, r2, r3
 8005838:	637b      	str	r3, [r7, #52]	; 0x34
 800583a:	e01e      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800583c:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005848:	d105      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	2b40      	cmp	r3, #64	; 0x40
 800584e:	d102      	bne.n	8005856 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
 8005854:	e011      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8005856:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b02      	cmp	r3, #2
 8005862:	d106      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2b50      	cmp	r3, #80	; 0x50
 8005868:	d103      	bne.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800586a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
 8005870:	e003      	b.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005876:	f001 ba28 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800587a:	f001 ba26 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800587e:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005884:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005888:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	2b00      	cmp	r3, #0
 800588e:	d104      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005890:	f7fc faf2 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8005894:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005896:	f001 ba18 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058a0:	d10e      	bne.n	80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fbf0 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058b0:	f001 ba0b 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80058b4:	44020c00 	.word	0x44020c00
 80058b8:	03d09000 	.word	0x03d09000
 80058bc:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058c6:	d108      	bne.n	80058da <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c8:	f107 0308 	add.w	r3, r7, #8
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fe fd47 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80058d6:	f001 b9f8 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80058da:	4ba4      	ldr	r3, [pc, #656]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d10d      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058ec:	d109      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058ee:	4b9f      	ldr	r3, [pc, #636]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	08db      	lsrs	r3, r3, #3
 80058f4:	f003 0303 	and.w	r3, r3, #3
 80058f8:	4a9d      	ldr	r2, [pc, #628]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80058fa:	fa22 f303 	lsr.w	r3, r2, r3
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	e020      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005902:	4b9a      	ldr	r3, [pc, #616]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800590e:	d106      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005916:	d102      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8005918:	4b96      	ldr	r3, [pc, #600]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	e012      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800591e:	4b93      	ldr	r3, [pc, #588]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005932:	d103      	bne.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8005934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
 800593a:	e003      	b.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800593c:	2300      	movs	r3, #0
 800593e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005940:	f001 b9c3 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005944:	f001 b9c1 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005948:	4b88      	ldr	r3, [pc, #544]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800594a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800595a:	f7fc fa45 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 800595e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005960:	f001 b9b3 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	2b01      	cmp	r3, #1
 8005968:	d104      	bne.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800596a:	f7fc f911 	bl	8001b90 <HAL_RCC_GetSysClockFreq>
 800596e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005970:	f001 b9ab 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005976:	2b02      	cmp	r3, #2
 8005978:	d108      	bne.n	800598c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800597a:	f107 0314 	add.w	r3, r7, #20
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fb84 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005988:	f001 b99f 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800598c:	4b77      	ldr	r3, [pc, #476]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005998:	d105      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b03      	cmp	r3, #3
 800599e:	d102      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80059a0:	4b75      	ldr	r3, [pc, #468]	; (8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80059a2:	637b      	str	r3, [r7, #52]	; 0x34
 80059a4:	e023      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80059a6:	4b71      	ldr	r3, [pc, #452]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d10c      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d109      	bne.n	80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059b8:	4b6c      	ldr	r3, [pc, #432]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	08db      	lsrs	r3, r3, #3
 80059be:	f003 0303 	and.w	r3, r3, #3
 80059c2:	4a6b      	ldr	r2, [pc, #428]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	e010      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80059cc:	4b67      	ldr	r3, [pc, #412]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059d8:	d105      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	2b05      	cmp	r3, #5
 80059de:	d102      	bne.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80059e0:	4b64      	ldr	r3, [pc, #400]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80059e2:	637b      	str	r3, [r7, #52]	; 0x34
 80059e4:	e003      	b.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ea:	f001 b96e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059ee:	f001 b96c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80059f2:	4b5e      	ldr	r3, [pc, #376]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80059fe:	4b5b      	ldr	r3, [pc, #364]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d106      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d103      	bne.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8005a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a16:	637b      	str	r3, [r7, #52]	; 0x34
 8005a18:	e012      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005a1a:	4b54      	ldr	r3, [pc, #336]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a28:	d106      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	2b08      	cmp	r3, #8
 8005a2e:	d103      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8005a30:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
 8005a36:	e003      	b.n	8005a40 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8005a3c:	f001 b945 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a40:	f001 b943 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005a44:	4b49      	ldr	r3, [pc, #292]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005a56:	f7fc f9e3 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005a5a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a5c:	f001 b935 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a66:	d108      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a68:	f107 0308 	add.w	r3, r7, #8
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fe fc77 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a76:	f001 b928 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005a7a:	4b3c      	ldr	r3, [pc, #240]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d10d      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a8c:	d109      	bne.n	8005aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a8e:	4b37      	ldr	r3, [pc, #220]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	08db      	lsrs	r3, r3, #3
 8005a94:	f003 0303 	and.w	r3, r3, #3
 8005a98:	4a35      	ldr	r2, [pc, #212]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005aa0:	e011      	b.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005aa2:	4b32      	ldr	r3, [pc, #200]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aae:	d106      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab6:	d102      	bne.n	8005abe <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8005ab8:	4b2e      	ldr	r3, [pc, #184]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005aba:	637b      	str	r3, [r7, #52]	; 0x34
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ac2:	f001 b902 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ac6:	f001 b900 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005aca:	4b28      	ldr	r3, [pc, #160]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ad0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ad4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005adc:	f7fc f9a0 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005ae0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ae2:	f001 b8f2 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aec:	d108      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aee:	f107 0308 	add.w	r3, r7, #8
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fc34 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005afc:	f001 b8e5 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005b00:	4b1a      	ldr	r3, [pc, #104]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0302 	and.w	r3, r3, #2
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d10d      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005b12:	d109      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b14:	4b15      	ldr	r3, [pc, #84]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	08db      	lsrs	r3, r3, #3
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005b20:	fa22 f303 	lsr.w	r3, r2, r3
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	e011      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005b28:	4b10      	ldr	r3, [pc, #64]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b34:	d106      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b3c:	d102      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	; (8005b74 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e003      	b.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b48:	f001 b8bf 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b4c:	f001 b8bd 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b56:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005b5a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005b62:	f7fc f989 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8005b66:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b68:	f001 b8af 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b6c:	44020c00 	.word	0x44020c00
 8005b70:	03d09000 	.word	0x03d09000
 8005b74:	003d0900 	.word	0x003d0900
 8005b78:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b82:	d108      	bne.n	8005b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b84:	f107 0308 	add.w	r3, r7, #8
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fe fbe9 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b92:	f001 b89a 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005b96:	4b9f      	ldr	r3, [pc, #636]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d10d      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005baa:	4b9a      	ldr	r3, [pc, #616]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	4a98      	ldr	r2, [pc, #608]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	e011      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005bbe:	4b95      	ldr	r3, [pc, #596]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bca:	d106      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005bd2:	d102      	bne.n	8005bda <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8005bd4:	4b91      	ldr	r3, [pc, #580]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8005bd8:	e003      	b.n	8005be2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bde:	f001 b874 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005be2:	f001 b872 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005be6:	4b8b      	ldr	r3, [pc, #556]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d104      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005bf8:	f7fc f93e 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8005bfc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bfe:	f001 b864 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c08:	d108      	bne.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fba6 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c18:	f001 b857 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005c1c:	4b7d      	ldr	r3, [pc, #500]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0302 	and.w	r3, r3, #2
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d10d      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c2e:	d109      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c30:	4b78      	ldr	r3, [pc, #480]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	4a77      	ldr	r2, [pc, #476]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
 8005c42:	e011      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005c44:	4b73      	ldr	r3, [pc, #460]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c50:	d106      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c58:	d102      	bne.n	8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8005c5a:	4b70      	ldr	r3, [pc, #448]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5e:	e003      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c64:	f001 b831 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c68:	f001 b82f 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005c6c:	4b69      	ldr	r3, [pc, #420]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c72:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005c76:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d104      	bne.n	8005c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c7e:	f7fc f8cf 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005c82:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c84:	f001 b821 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c8e:	d108      	bne.n	8005ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c90:	f107 0308 	add.w	r3, r7, #8
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe fb63 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c9e:	f001 b814 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005ca2:	4b5c      	ldr	r3, [pc, #368]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d10e      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cb4:	d10a      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cb6:	4b57      	ldr	r3, [pc, #348]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	4a55      	ldr	r2, [pc, #340]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc8:	f000 bfff 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cd0:	f000 bffb 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005cd4:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005cd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005cda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cde:	633b      	str	r3, [r7, #48]	; 0x30
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005ce6:	d056      	beq.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005cee:	f200 808b 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d03e      	beq.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d00:	f200 8082 	bhi.w	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d0a:	d027      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8005d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d12:	d879      	bhi.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d1a:	d017      	beq.n	8005d4c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d22:	d871      	bhi.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d004      	beq.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d30:	d004      	beq.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8005d32:	e069      	b.n	8005e08 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005d34:	f7fc f8a0 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8005d38:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005d3a:	e068      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3c:	f107 0314 	add.w	r3, r7, #20
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7fe f9a3 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d4a:	e060      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4c:	f107 0308 	add.w	r3, r7, #8
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fb05 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d5a:	e058      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005d5c:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d103      	bne.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8005d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d6e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005d70:	e04d      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d76:	e04a      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005d78:	4b26      	ldr	r3, [pc, #152]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d86:	d103      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8005d88:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005d8e:	e03e      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005d94:	e03b      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005d96:	4b1f      	ldr	r3, [pc, #124]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d9c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d10c      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8005dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d109      	bne.n	8005dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005db4:	4b17      	ldr	r3, [pc, #92]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	08db      	lsrs	r3, r3, #3
 8005dba:	f003 0303 	and.w	r3, r3, #3
 8005dbe:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc6:	e01e      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8005dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005dde:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	e010      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df0:	d106      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8005df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df8:	d102      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8005dfe:	e002      	b.n	8005e06 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005e00:	2300      	movs	r3, #0
 8005e02:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005e04:	e003      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8005e06:	e002      	b.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e0c:	bf00      	nop
          }
        }
        break;
 8005e0e:	f000 bf5c 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005e12:	bf00      	nop
 8005e14:	44020c00 	.word	0x44020c00
 8005e18:	03d09000 	.word	0x03d09000
 8005e1c:	003d0900 	.word	0x003d0900
 8005e20:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e24:	4b9e      	ldr	r3, [pc, #632]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005e26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e2a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e36:	d056      	beq.n	8005ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005e3e:	f200 808b 	bhi.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e48:	d03e      	beq.n	8005ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e50:	f200 8082 	bhi.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e5a:	d027      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e62:	d879      	bhi.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6a:	d017      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e72:	d871      	bhi.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d004      	beq.n	8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d004      	beq.n	8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8005e82:	e069      	b.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fb ffcc 	bl	8001e20 <HAL_RCC_GetPCLK1Freq>
 8005e88:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005e8a:	e068      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e8c:	f107 0314 	add.w	r3, r7, #20
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7fe f8fb 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e9a:	e060      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e9c:	f107 0308 	add.w	r3, r7, #8
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fa5d 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005eaa:	e058      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005eac:	4b7c      	ldr	r3, [pc, #496]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d103      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ebe:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005ec0:	e04d      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ec6:	e04a      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005ec8:	4b75      	ldr	r3, [pc, #468]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005eca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ed2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed6:	d103      	bne.n	8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8005ed8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005ede:	e03e      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ee4:	e03b      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005ee6:	4b6e      	ldr	r3, [pc, #440]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ef2:	4b6b      	ldr	r3, [pc, #428]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d10c      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8005efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f04:	4b66      	ldr	r3, [pc, #408]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	08db      	lsrs	r3, r3, #3
 8005f0a:	f003 0303 	and.w	r3, r3, #3
 8005f0e:	4a65      	ldr	r2, [pc, #404]	; (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
 8005f14:	637b      	str	r3, [r7, #52]	; 0x34
 8005f16:	e01e      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f18:	4b61      	ldr	r3, [pc, #388]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f24:	d106      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2c:	d102      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f2e:	4b5e      	ldr	r3, [pc, #376]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
 8005f32:	e010      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f34:	4b5a      	ldr	r3, [pc, #360]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f40:	d106      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f48:	d102      	bne.n	8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f4a:	4b58      	ldr	r3, [pc, #352]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005f54:	e003      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8005f56:	e002      	b.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f5c:	bf00      	nop
          }
        }
        break;
 8005f5e:	f000 beb4 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005f62:	4b4f      	ldr	r3, [pc, #316]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005f68:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005f6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f74:	d056      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f7c:	f200 808b 	bhi.w	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f86:	d03e      	beq.n	8006006 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f8e:	f200 8082 	bhi.w	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f98:	d027      	beq.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa0:	d879      	bhi.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa8:	d017      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb0:	d871      	bhi.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8005fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fbe:	d004      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8005fc0:	e069      	b.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005fc2:	f7fb ff59 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8005fc6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005fc8:	e068      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fca:	f107 0314 	add.w	r3, r7, #20
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe f85c 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd8:	e060      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fda:	f107 0308 	add.w	r3, r7, #8
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe f9be 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fe8:	e058      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005fea:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d103      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8005ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005ffe:	e04d      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006004:	e04a      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006006:	4b26      	ldr	r3, [pc, #152]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800600c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006014:	d103      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006016:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800601c:	e03e      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006022:	e03b      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006024:	4b1e      	ldr	r3, [pc, #120]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800602a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800602e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d10c      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800603c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006042:	4b17      	ldr	r3, [pc, #92]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	4a15      	ldr	r2, [pc, #84]	; (80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	637b      	str	r3, [r7, #52]	; 0x34
 8006054:	e01e      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800605e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006062:	d106      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d102      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800606c:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800606e:	637b      	str	r3, [r7, #52]	; 0x34
 8006070:	e010      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800607e:	d106      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006086:	d102      	bne.n	800608e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006088:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800608a:	637b      	str	r3, [r7, #52]	; 0x34
 800608c:	e002      	b.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006092:	e003      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006094:	e002      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800609a:	bf00      	nop
          }
        }
        break;
 800609c:	f000 be15 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060a0:	44020c00 	.word	0x44020c00
 80060a4:	03d09000 	.word	0x03d09000
 80060a8:	003d0900 	.word	0x003d0900
 80060ac:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80060b0:	4b9e      	ldr	r3, [pc, #632]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80060b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80060b6:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80060ba:	633b      	str	r3, [r7, #48]	; 0x30
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80060c2:	d056      	beq.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80060ca:	f200 808b 	bhi.w	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060d4:	d03e      	beq.n	8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060dc:	f200 8082 	bhi.w	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060e6:	d027      	beq.n	8006138 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ee:	d879      	bhi.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f6:	d017      	beq.n	8006128 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060fe:	d871      	bhi.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800610c:	d004      	beq.n	8006118 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800610e:	e069      	b.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006110:	f7fb feb2 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8006114:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006116:	e068      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006118:	f107 0314 	add.w	r3, r7, #20
 800611c:	4618      	mov	r0, r3
 800611e:	f7fd ffb5 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006126:	e060      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006128:	f107 0308 	add.w	r3, r7, #8
 800612c:	4618      	mov	r0, r3
 800612e:	f7fe f917 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006136:	e058      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006138:	4b7c      	ldr	r3, [pc, #496]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800613a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d103      	bne.n	800614e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800614a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800614c:	e04d      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006152:	e04a      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006154:	4b75      	ldr	r3, [pc, #468]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800615a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800615e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006162:	d103      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006164:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800616a:	e03e      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006170:	e03b      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006172:	4b6e      	ldr	r3, [pc, #440]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006178:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800617e:	4b6b      	ldr	r3, [pc, #428]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b02      	cmp	r3, #2
 8006188:	d10c      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800618a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006190:	4b66      	ldr	r3, [pc, #408]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	08db      	lsrs	r3, r3, #3
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	4a65      	ldr	r2, [pc, #404]	; (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
 80061a2:	e01e      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061a4:	4b61      	ldr	r3, [pc, #388]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b0:	d106      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061b8:	d102      	bne.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80061ba:	4b5e      	ldr	r3, [pc, #376]	; (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
 80061be:	e010      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061c0:	4b5a      	ldr	r3, [pc, #360]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061cc:	d106      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d4:	d102      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80061d6:	4b58      	ldr	r3, [pc, #352]	; (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80061d8:	637b      	str	r3, [r7, #52]	; 0x34
 80061da:	e002      	b.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80061dc:	2300      	movs	r3, #0
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80061e0:	e003      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80061e2:	e002      	b.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80061e8:	bf00      	nop
          }
        }
        break;
 80061ea:	f000 bd6e 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80061ee:	4b4f      	ldr	r3, [pc, #316]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80061f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80061f8:	633b      	str	r3, [r7, #48]	; 0x30
 80061fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006200:	d056      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006208:	f200 808b 	bhi.w	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006212:	d03e      	beq.n	8006292 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800621a:	f200 8082 	bhi.w	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006224:	d027      	beq.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800622c:	d879      	bhi.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006234:	d017      	beq.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800623c:	d871      	bhi.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d004      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800624a:	d004      	beq.n	8006256 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800624c:	e069      	b.n	8006322 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800624e:	f7fb fe13 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8006252:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006254:	e068      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006256:	f107 0314 	add.w	r3, r7, #20
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd ff16 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006264:	e060      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	4618      	mov	r0, r3
 800626c:	f7fe f878 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006274:	e058      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006276:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800627c:	f003 0302 	and.w	r3, r3, #2
 8006280:	2b02      	cmp	r3, #2
 8006282:	d103      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006288:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800628a:	e04d      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006290:	e04a      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800629c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a0:	d103      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80062a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80062a8:	e03e      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062ae:	e03b      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062bc:	4b1b      	ldr	r3, [pc, #108]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d109      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ce:	4b17      	ldr	r3, [pc, #92]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	4a15      	ldr	r2, [pc, #84]	; (8006330 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	637b      	str	r3, [r7, #52]	; 0x34
 80062e0:	e01e      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ee:	d106      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80062f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062f6:	d102      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80062f8:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
 80062fc:	e010      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062fe:	4b0b      	ldr	r3, [pc, #44]	; (800632c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800630a:	d106      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006312:	d102      	bne.n	800631a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006314:	4b08      	ldr	r3, [pc, #32]	; (8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006320:	e002      	b.n	8006328 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006326:	bf00      	nop
          }
        }
        break;
 8006328:	f000 bccf 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800632c:	44020c00 	.word	0x44020c00
 8006330:	03d09000 	.word	0x03d09000
 8006334:	003d0900 	.word	0x003d0900
 8006338:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800633c:	4b9e      	ldr	r3, [pc, #632]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800633e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006342:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006346:	633b      	str	r3, [r7, #48]	; 0x30
 8006348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800634e:	d056      	beq.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006356:	f200 808b 	bhi.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d03e      	beq.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	f200 8082 	bhi.w	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006372:	d027      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800637a:	d879      	bhi.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006382:	d017      	beq.n	80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638a:	d871      	bhi.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006398:	d004      	beq.n	80063a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800639a:	e069      	b.n	8006470 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800639c:	f7fb fd6c 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 80063a0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80063a2:	e068      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063a4:	f107 0314 	add.w	r3, r7, #20
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fd fe6f 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063b2:	e060      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063b4:	f107 0308 	add.w	r3, r7, #8
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fd ffd1 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063c2:	e058      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063c4:	4b7c      	ldr	r3, [pc, #496]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80063c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063ca:	f003 0302 	and.w	r3, r3, #2
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d103      	bne.n	80063da <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80063d8:	e04d      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063de:	e04a      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80063e0:	4b75      	ldr	r3, [pc, #468]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80063e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ee:	d103      	bne.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80063f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80063f4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80063f6:	e03e      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80063f8:	2300      	movs	r3, #0
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063fc:	e03b      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063fe:	4b6e      	ldr	r3, [pc, #440]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006404:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006408:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800640a:	4b6b      	ldr	r3, [pc, #428]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d10c      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800641c:	4b66      	ldr	r3, [pc, #408]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	08db      	lsrs	r3, r3, #3
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	4a65      	ldr	r2, [pc, #404]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006428:	fa22 f303 	lsr.w	r3, r2, r3
 800642c:	637b      	str	r3, [r7, #52]	; 0x34
 800642e:	e01e      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006430:	4b61      	ldr	r3, [pc, #388]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	d106      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006446:	4b5e      	ldr	r3, [pc, #376]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006448:	637b      	str	r3, [r7, #52]	; 0x34
 800644a:	e010      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800644c:	4b5a      	ldr	r3, [pc, #360]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006458:	d106      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800645a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006460:	d102      	bne.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006462:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
 8006466:	e002      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800646c:	e003      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800646e:	e002      	b.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006474:	bf00      	nop
          }
        }
        break;
 8006476:	f000 bc28 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800647a:	4b4f      	ldr	r3, [pc, #316]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800647c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006484:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006486:	4b4c      	ldr	r3, [pc, #304]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800648e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006492:	d106      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8006494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800649a:	4b4a      	ldr	r3, [pc, #296]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800649e:	f000 bc14 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a8:	d108      	bne.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064aa:	f107 0320 	add.w	r3, r7, #32
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd fc82 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064b8:	f000 bc07 	b.w	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064c2:	d107      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c4:	f107 0314 	add.w	r3, r7, #20
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fd fddf 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d2:	e3fa      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80064d8:	e3f7      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80064da:	4b37      	ldr	r3, [pc, #220]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	2b04      	cmp	r3, #4
 80064ea:	d861      	bhi.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80064ec:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80064ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f2:	bf00      	nop
 80064f4:	08006509 	.word	0x08006509
 80064f8:	08006519 	.word	0x08006519
 80064fc:	08006529 	.word	0x08006529
 8006500:	08006539 	.word	0x08006539
 8006504:	0800653f 	.word	0x0800653f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006508:	f107 0320 	add.w	r3, r7, #32
 800650c:	4618      	mov	r0, r3
 800650e:	f7fd fc53 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006516:	e04e      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006518:	f107 0314 	add.w	r3, r7, #20
 800651c:	4618      	mov	r0, r3
 800651e:	f7fd fdb5 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006526:	e046      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	4618      	mov	r0, r3
 800652e:	f7fd ff17 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006536:	e03e      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006538:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800653a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800653c:	e03b      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800653e:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006544:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d10c      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	4a15      	ldr	r2, [pc, #84]	; (80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
 800656e:	e01e      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006570:	4b11      	ldr	r3, [pc, #68]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d106      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d102      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006586:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	e010      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800658c:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006594:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006598:	d106      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a0:	d102      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80065a2:	4b08      	ldr	r3, [pc, #32]	; (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	e002      	b.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80065a8:	2300      	movs	r3, #0
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80065ac:	e003      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80065ae:	e002      	b.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065b4:	bf00      	nop
          }
        }
        break;
 80065b6:	e388      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065b8:	44020c00 	.word	0x44020c00
 80065bc:	03d09000 	.word	0x03d09000
 80065c0:	003d0900 	.word	0x003d0900
 80065c4:	017d7840 	.word	0x017d7840
 80065c8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80065cc:	4ba9      	ldr	r3, [pc, #676]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80065ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	2b20      	cmp	r3, #32
 80065dc:	f200 809a 	bhi.w	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80065e0:	a201      	add	r2, pc, #4	; (adr r2, 80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800666d 	.word	0x0800666d
 80065ec:	08006715 	.word	0x08006715
 80065f0:	08006715 	.word	0x08006715
 80065f4:	08006715 	.word	0x08006715
 80065f8:	08006715 	.word	0x08006715
 80065fc:	08006715 	.word	0x08006715
 8006600:	08006715 	.word	0x08006715
 8006604:	08006715 	.word	0x08006715
 8006608:	0800667d 	.word	0x0800667d
 800660c:	08006715 	.word	0x08006715
 8006610:	08006715 	.word	0x08006715
 8006614:	08006715 	.word	0x08006715
 8006618:	08006715 	.word	0x08006715
 800661c:	08006715 	.word	0x08006715
 8006620:	08006715 	.word	0x08006715
 8006624:	08006715 	.word	0x08006715
 8006628:	0800668d 	.word	0x0800668d
 800662c:	08006715 	.word	0x08006715
 8006630:	08006715 	.word	0x08006715
 8006634:	08006715 	.word	0x08006715
 8006638:	08006715 	.word	0x08006715
 800663c:	08006715 	.word	0x08006715
 8006640:	08006715 	.word	0x08006715
 8006644:	08006715 	.word	0x08006715
 8006648:	0800669d 	.word	0x0800669d
 800664c:	08006715 	.word	0x08006715
 8006650:	08006715 	.word	0x08006715
 8006654:	08006715 	.word	0x08006715
 8006658:	08006715 	.word	0x08006715
 800665c:	08006715 	.word	0x08006715
 8006660:	08006715 	.word	0x08006715
 8006664:	08006715 	.word	0x08006715
 8006668:	080066a3 	.word	0x080066a3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800666c:	f107 0320 	add.w	r3, r7, #32
 8006670:	4618      	mov	r0, r3
 8006672:	f7fd fba1 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800667a:	e04e      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667c:	f107 0314 	add.w	r3, r7, #20
 8006680:	4618      	mov	r0, r3
 8006682:	f7fd fd03 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800668a:	e046      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800668c:	f107 0308 	add.w	r3, r7, #8
 8006690:	4618      	mov	r0, r3
 8006692:	f7fd fe65 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800669a:	e03e      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800669c:	4b76      	ldr	r3, [pc, #472]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066a0:	e03b      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066a2:	4b74      	ldr	r3, [pc, #464]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066a8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80066ac:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066ae:	4b71      	ldr	r3, [pc, #452]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0302 	and.w	r3, r3, #2
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d10c      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d109      	bne.n	80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066c0:	4b6c      	ldr	r3, [pc, #432]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	08db      	lsrs	r3, r3, #3
 80066c6:	f003 0303 	and.w	r3, r3, #3
 80066ca:	4a6c      	ldr	r2, [pc, #432]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80066cc:	fa22 f303 	lsr.w	r3, r2, r3
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
 80066d2:	e01e      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066d4:	4b67      	ldr	r3, [pc, #412]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e0:	d106      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80066e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e8:	d102      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80066ea:	4b65      	ldr	r3, [pc, #404]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
 80066ee:	e010      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066f0:	4b60      	ldr	r3, [pc, #384]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fc:	d106      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80066fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006700:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006704:	d102      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006706:	4b5f      	ldr	r3, [pc, #380]	; (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800670c:	2300      	movs	r3, #0
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006710:	e003      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8006712:	e002      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8006714:	2300      	movs	r3, #0
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006718:	bf00      	nop
          }
        }
        break;
 800671a:	e2d6      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800671c:	4b55      	ldr	r3, [pc, #340]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800671e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006722:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672e:	d031      	beq.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006736:	d866      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673a:	2bc0      	cmp	r3, #192	; 0xc0
 800673c:	d027      	beq.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800673e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006740:	2bc0      	cmp	r3, #192	; 0xc0
 8006742:	d860      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d019      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	2b80      	cmp	r3, #128	; 0x80
 800674e:	d85a      	bhi.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d008      	beq.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800675c:	e053      	b.n	8006806 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800675e:	f107 0320 	add.w	r3, r7, #32
 8006762:	4618      	mov	r0, r3
 8006764:	f7fd fb28 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800676c:	e04e      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676e:	f107 0314 	add.w	r3, r7, #20
 8006772:	4618      	mov	r0, r3
 8006774:	f7fd fc8a 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800677c:	e046      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f7fd fdec 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800678c:	e03e      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800678e:	4b3a      	ldr	r3, [pc, #232]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006792:	e03b      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006794:	4b37      	ldr	r3, [pc, #220]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800679a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067a0:	4b34      	ldr	r3, [pc, #208]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d10c      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80067ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d109      	bne.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067b2:	4b30      	ldr	r3, [pc, #192]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	08db      	lsrs	r3, r3, #3
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	4a2f      	ldr	r2, [pc, #188]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80067be:	fa22 f303 	lsr.w	r3, r2, r3
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
 80067c4:	e01e      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c6:	4b2b      	ldr	r3, [pc, #172]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d2:	d106      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d102      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80067dc:	4b28      	ldr	r3, [pc, #160]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80067de:	637b      	str	r3, [r7, #52]	; 0x34
 80067e0:	e010      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e2:	4b24      	ldr	r3, [pc, #144]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ee:	d106      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f6:	d102      	bne.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067f8:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006802:	e003      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8006804:	e002      	b.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800680a:	bf00      	nop
          }
        }
        break;
 800680c:	e25d      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800680e:	4b19      	ldr	r3, [pc, #100]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006814:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006818:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006820:	f7fb fb14 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 8006824:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006826:	e250      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006828:	4b12      	ldr	r3, [pc, #72]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006830:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006834:	d10b      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d107      	bne.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	4618      	mov	r0, r3
 8006844:	f7fd fc22 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	e04f      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800684e:	4b09      	ldr	r3, [pc, #36]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800685a:	d115      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006862:	d111      	bne.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006864:	f107 0308 	add.w	r3, r7, #8
 8006868:	4618      	mov	r0, r3
 800686a:	f7fd fd79 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
 8006872:	e03c      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8006874:	44020c00 	.word	0x44020c00
 8006878:	00bb8000 	.word	0x00bb8000
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
 8006884:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006888:	4b94      	ldr	r3, [pc, #592]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d10d      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800689a:	d109      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800689c:	4b8f      	ldr	r3, [pc, #572]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	08db      	lsrs	r3, r3, #3
 80068a2:	f003 0303 	and.w	r3, r3, #3
 80068a6:	4a8e      	ldr	r2, [pc, #568]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80068a8:	fa22 f303 	lsr.w	r3, r2, r3
 80068ac:	637b      	str	r3, [r7, #52]	; 0x34
 80068ae:	e01e      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80068b0:	4b8a      	ldr	r3, [pc, #552]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068bc:	d106      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068c4:	d102      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80068c6:	4b87      	ldr	r3, [pc, #540]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ca:	e010      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80068cc:	4b83      	ldr	r3, [pc, #524]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d8:	d106      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80068e0:	d102      	bne.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80068e2:	4b81      	ldr	r3, [pc, #516]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
 80068e6:	e002      	b.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80068e8:	2300      	movs	r3, #0
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ec:	e1ed      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068ee:	e1ec      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80068f0:	4b7a      	ldr	r3, [pc, #488]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80068f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80068fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006902:	f7fb fab9 	bl	8001e78 <HAL_RCC_GetPCLK3Freq>
 8006906:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006908:	e1df      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800690a:	4b74      	ldr	r3, [pc, #464]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006916:	d10b      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8006918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800691e:	d107      	bne.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4618      	mov	r0, r3
 8006926:	f7fd fbb1 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	637b      	str	r3, [r7, #52]	; 0x34
 800692e:	e045      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8006930:	4b6a      	ldr	r3, [pc, #424]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693c:	d10b      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800693e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006944:	d107      	bne.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	4618      	mov	r0, r3
 800694c:	f7fd fd08 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	637b      	str	r3, [r7, #52]	; 0x34
 8006954:	e032      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8006956:	4b61      	ldr	r3, [pc, #388]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b02      	cmp	r3, #2
 8006960:	d10d      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006968:	d109      	bne.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800696a:	4b5c      	ldr	r3, [pc, #368]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	08db      	lsrs	r3, r3, #3
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	4a5a      	ldr	r2, [pc, #360]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006976:	fa22 f303 	lsr.w	r3, r2, r3
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
 800697c:	e01e      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800697e:	4b57      	ldr	r3, [pc, #348]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800698a:	d106      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006992:	d102      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8006994:	4b53      	ldr	r3, [pc, #332]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
 8006998:	e010      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800699a:	4b50      	ldr	r3, [pc, #320]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80069ae:	d102      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80069b0:	4b4d      	ldr	r3, [pc, #308]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
 80069b4:	e002      	b.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ba:	e186      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069bc:	e185      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c4:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80069c8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d103      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80069d0:	f7fb fa3c 	bl	8001e4c <HAL_RCC_GetPCLK2Freq>
 80069d4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80069d6:	e178      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80069d8:	4b40      	ldr	r3, [pc, #256]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e4:	d10b      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ec:	d107      	bne.n	80069fe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069ee:	f107 0314 	add.w	r3, r7, #20
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fb4a 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	637b      	str	r3, [r7, #52]	; 0x34
 80069fc:	e045      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0a:	d10b      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a12:	d107      	bne.n	8006a24 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fd fca1 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	637b      	str	r3, [r7, #52]	; 0x34
 8006a22:	e032      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8006a24:	4b2d      	ldr	r3, [pc, #180]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d10d      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006a36:	d109      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	4a27      	ldr	r2, [pc, #156]	; (8006ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
 8006a4a:	e01e      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8006a4c:	4b23      	ldr	r3, [pc, #140]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a58:	d106      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a60:	d102      	bne.n	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8006a62:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
 8006a66:	e010      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8006a68:	4b1c      	ldr	r3, [pc, #112]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a74:	d106      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8006a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a78:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006a7c:	d102      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8006a7e:	4b1a      	ldr	r3, [pc, #104]	; (8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006a80:	637b      	str	r3, [r7, #52]	; 0x34
 8006a82:	e002      	b.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a88:	e11f      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a8a:	e11e      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a8c:	4b13      	ldr	r3, [pc, #76]	; (8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d85f      	bhi.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ab5 	.word	0x08006ab5
 8006aa8:	08006abd 	.word	0x08006abd
 8006aac:	08006acd 	.word	0x08006acd
 8006ab0:	08006aed 	.word	0x08006aed

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006ab4:	f7fb f998 	bl	8001de8 <HAL_RCC_GetHCLKFreq>
 8006ab8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006aba:	e053      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006abc:	f107 0320 	add.w	r3, r7, #32
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fd f979 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006aca:	e04b      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fd fadb 	bl	800408c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006ada:	e043      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006adc:	44020c00 	.word	0x44020c00
 8006ae0:	03d09000 	.word	0x03d09000
 8006ae4:	003d0900 	.word	0x003d0900
 8006ae8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006aec:	4b79      	ldr	r3, [pc, #484]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006aee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006af2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006af6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006af8:	4b76      	ldr	r3, [pc, #472]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0302 	and.w	r3, r3, #2
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d10c      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d109      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b0a:	4b72      	ldr	r3, [pc, #456]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	08db      	lsrs	r3, r3, #3
 8006b10:	f003 0303 	and.w	r3, r3, #3
 8006b14:	4a70      	ldr	r2, [pc, #448]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8006b16:	fa22 f303 	lsr.w	r3, r2, r3
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	e01e      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b1e:	4b6d      	ldr	r3, [pc, #436]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d102      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006b34:	4b69      	ldr	r3, [pc, #420]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	e010      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b3a:	4b66      	ldr	r3, [pc, #408]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b46:	d106      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b4e:	d102      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006b50:	4b63      	ldr	r3, [pc, #396]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8006b52:	637b      	str	r3, [r7, #52]	; 0x34
 8006b54:	e002      	b.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006b56:	2300      	movs	r3, #0
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006b5a:	e003      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006b5c:	e002      	b.n	8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b62:	bf00      	nop
          }
        }
        break;
 8006b64:	e0b1      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006b66:	4b5b      	ldr	r3, [pc, #364]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b70:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006b72:	4b58      	ldr	r3, [pc, #352]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d106      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8006b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8006b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b8c:	e01f      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8006b8e:	4b51      	ldr	r3, [pc, #324]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006b90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b9c:	d106      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d103      	bne.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8006ba4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8006baa:	e010      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8006bac:	4b49      	ldr	r3, [pc, #292]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb8:	d106      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	d103      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8006bc0:	f248 0312 	movw	r3, #32786	; 0x8012
 8006bc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc6:	e002      	b.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006bcc:	e07d      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bce:	e07c      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006bd0:	4b40      	ldr	r3, [pc, #256]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006bdc:	4b3d      	ldr	r3, [pc, #244]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be8:	d105      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8006bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d102      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8006bf0:	4b3c      	ldr	r3, [pc, #240]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf4:	e031      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c02:	d10a      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d107      	bne.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c0a:	f107 0320 	add.w	r3, r7, #32
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fd f8d2 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
 8006c18:	e01f      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006c1a:	4b2e      	ldr	r3, [pc, #184]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c20:	f003 0302 	and.w	r3, r3, #2
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d106      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8006c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d103      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8006c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	e011      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006c36:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c44:	d106      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	2b30      	cmp	r3, #48	; 0x30
 8006c4a:	d103      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8006c4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
 8006c52:	e002      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006c58:	e037      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c5a:	e036      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c66:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	2b10      	cmp	r3, #16
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c6e:	f107 0320 	add.w	r3, r7, #32
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd f8a0 	bl	8003db8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006c7c:	e025      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006c7e:	4b15      	ldr	r3, [pc, #84]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d107      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c92:	f107 0308 	add.w	r3, r7, #8
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fd fb62 	bl	8004360 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca0:	e00f      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cae:	d105      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2b30      	cmp	r3, #48	; 0x30
 8006cb4:	d102      	bne.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8006cb6:	4b0b      	ldr	r3, [pc, #44]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006cba:	e002      	b.n	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8006cc0:	e003      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cc2:	e002      	b.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cc8:	bf00      	nop
    }
  }

  return (frequency);
 8006cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	373c      	adds	r7, #60	; 0x3c
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd90      	pop	{r4, r7, pc}
 8006cd4:	44020c00 	.word	0x44020c00
 8006cd8:	03d09000 	.word	0x03d09000
 8006cdc:	003d0900 	.word	0x003d0900
 8006ce0:	017d7840 	.word	0x017d7840
 8006ce4:	02dc6c00 	.word	0x02dc6c00

08006ce8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006cf0:	4b48      	ldr	r3, [pc, #288]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a47      	ldr	r2, [pc, #284]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006cf6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cfa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cfc:	f7f9 ff16 	bl	8000b2c <HAL_GetTick>
 8006d00:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d04:	f7f9 ff12 	bl	8000b2c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e07a      	b.n	8006e0c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d16:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006d22:	4b3c      	ldr	r3, [pc, #240]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d2a:	f023 0303 	bic.w	r3, r3, #3
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6811      	ldr	r1, [r2, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6852      	ldr	r2, [r2, #4]
 8006d36:	0212      	lsls	r2, r2, #8
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	4936      	ldr	r1, [pc, #216]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	3b01      	subs	r3, #1
 8006d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	025b      	lsls	r3, r3, #9
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	041b      	lsls	r3, r3, #16
 8006d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	061b      	lsls	r3, r3, #24
 8006d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d70:	4928      	ldr	r1, [pc, #160]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006d76:	4b27      	ldr	r3, [pc, #156]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7a:	f023 020c 	bic.w	r2, r3, #12
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	4924      	ldr	r1, [pc, #144]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006d88:	4b22      	ldr	r3, [pc, #136]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	f023 0220 	bic.w	r2, r3, #32
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	491f      	ldr	r1, [pc, #124]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	491c      	ldr	r1, [pc, #112]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006da8:	4b1a      	ldr	r3, [pc, #104]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	4a19      	ldr	r2, [pc, #100]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dae:	f023 0310 	bic.w	r3, r3, #16
 8006db2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006db4:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	6a12      	ldr	r2, [r2, #32]
 8006dc4:	00d2      	lsls	r2, r2, #3
 8006dc6:	4913      	ldr	r1, [pc, #76]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	4a10      	ldr	r2, [pc, #64]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dd2:	f043 0310 	orr.w	r3, r3, #16
 8006dd6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006dd8:	4b0e      	ldr	r3, [pc, #56]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a0d      	ldr	r2, [pc, #52]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006dde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006de2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006de4:	f7f9 fea2 	bl	8000b2c <HAL_GetTick>
 8006de8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006dec:	f7f9 fe9e 	bl	8000b2c <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <RCCEx_PLL2_Config+0x12c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0

}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	44020c00 	.word	0x44020c00

08006e18 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006e20:	4b48      	ldr	r3, [pc, #288]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a47      	ldr	r2, [pc, #284]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e2c:	f7f9 fe7e 	bl	8000b2c <HAL_GetTick>
 8006e30:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e34:	f7f9 fe7a 	bl	8000b2c <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e07a      	b.n	8006f3c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e46:	4b3f      	ldr	r3, [pc, #252]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006e52:	4b3c      	ldr	r3, [pc, #240]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6811      	ldr	r1, [r2, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6852      	ldr	r2, [r2, #4]
 8006e66:	0212      	lsls	r2, r2, #8
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	4936      	ldr	r1, [pc, #216]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	630b      	str	r3, [r1, #48]	; 0x30
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	025b      	lsls	r3, r3, #9
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	041b      	lsls	r3, r3, #16
 8006e8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	3b01      	subs	r3, #1
 8006e9a:	061b      	lsls	r3, r3, #24
 8006e9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ea0:	4928      	ldr	r1, [pc, #160]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ea6:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eaa:	f023 020c 	bic.w	r2, r3, #12
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	4924      	ldr	r1, [pc, #144]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8006eb8:	4b22      	ldr	r3, [pc, #136]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	f023 0220 	bic.w	r2, r3, #32
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	491f      	ldr	r1, [pc, #124]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006eca:	4b1e      	ldr	r3, [pc, #120]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	491c      	ldr	r1, [pc, #112]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	4a19      	ldr	r2, [pc, #100]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006ee4:	4b17      	ldr	r3, [pc, #92]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6a12      	ldr	r2, [r2, #32]
 8006ef4:	00d2      	lsls	r2, r2, #3
 8006ef6:	4913      	ldr	r1, [pc, #76]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	4a10      	ldr	r2, [pc, #64]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006f02:	f043 0310 	orr.w	r3, r3, #16
 8006f06:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a0d      	ldr	r2, [pc, #52]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f14:	f7f9 fe0a 	bl	8000b2c <HAL_GetTick>
 8006f18:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f1a:	e008      	b.n	8006f2e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f1c:	f7f9 fe06 	bl	8000b2c <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d901      	bls.n	8006f2e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e006      	b.n	8006f3c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f2e:	4b05      	ldr	r3, [pc, #20]	; (8006f44 <RCCEx_PLL3_Config+0x12c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d0f0      	beq.n	8006f1c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	44020c00 	.word	0x44020c00

08006f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d101      	bne.n	8006f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e042      	b.n	8006fe0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f7f9 fc0f 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2224      	movs	r2, #36	; 0x24
 8006f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fab4 	bl	8007500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f000 f8c3 	bl	8007124 <UART_SetConfig>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e01b      	b.n	8006fe0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fb33 	bl	8007644 <UART_CheckIdleState>
 8006fde:	4603      	mov	r3, r0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	603b      	str	r3, [r7, #0]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ffe:	2b20      	cmp	r3, #32
 8007000:	f040 808b 	bne.w	800711a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_UART_Transmit+0x28>
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e083      	b.n	800711c <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d107      	bne.n	8007032 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007030:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2221      	movs	r2, #33	; 0x21
 800703e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007042:	f7f9 fd73 	bl	8000b2c <HAL_GetTick>
 8007046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007060:	d108      	bne.n	8007074 <HAL_UART_Transmit+0x8c>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d104      	bne.n	8007074 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800706a:	2300      	movs	r3, #0
 800706c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	e003      	b.n	800707c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800707c:	e030      	b.n	80070e0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	2180      	movs	r1, #128	; 0x80
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 fb85 	bl	8007798 <UART_WaitOnFlagUntilTimeout>
 800708e:	4603      	mov	r3, r0
 8007090:	2b00      	cmp	r3, #0
 8007092:	d005      	beq.n	80070a0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e03d      	b.n	800711c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10b      	bne.n	80070be <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	461a      	mov	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	3302      	adds	r3, #2
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	e007      	b.n	80070ce <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	3301      	adds	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1c8      	bne.n	800707e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2200      	movs	r2, #0
 80070f4:	2140      	movs	r1, #64	; 0x40
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fb4e 	bl	8007798 <UART_WaitOnFlagUntilTimeout>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e006      	b.n	800711c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007128:	b094      	sub	sp, #80	; 0x50
 800712a:	af00      	add	r7, sp, #0
 800712c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	4b78      	ldr	r3, [pc, #480]	; (800731c <UART_SetConfig+0x1f8>)
 800713a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713e:	689a      	ldr	r2, [r3, #8]
 8007140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	431a      	orrs	r2, r3
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	431a      	orrs	r2, r3
 800714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	4313      	orrs	r3, r2
 8007152:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4971      	ldr	r1, [pc, #452]	; (8007320 <UART_SetConfig+0x1fc>)
 800715c:	4019      	ands	r1, r3
 800715e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007164:	430b      	orrs	r3, r1
 8007166:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	68d9      	ldr	r1, [r3, #12]
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	ea40 0301 	orr.w	r3, r0, r1
 800717e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	4b64      	ldr	r3, [pc, #400]	; (800731c <UART_SetConfig+0x1f8>)
 800718c:	429a      	cmp	r2, r3
 800718e:	d009      	beq.n	80071a4 <UART_SetConfig+0x80>
 8007190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b63      	ldr	r3, [pc, #396]	; (8007324 <UART_SetConfig+0x200>)
 8007196:	429a      	cmp	r2, r3
 8007198:	d004      	beq.n	80071a4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	6a1a      	ldr	r2, [r3, #32]
 800719e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071a0:	4313      	orrs	r3, r2
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80071a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80071ae:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80071bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c2:	f023 000f 	bic.w	r0, r3, #15
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	ea40 0301 	orr.w	r3, r0, r1
 80071d2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	4b53      	ldr	r3, [pc, #332]	; (8007328 <UART_SetConfig+0x204>)
 80071da:	429a      	cmp	r2, r3
 80071dc:	d102      	bne.n	80071e4 <UART_SetConfig+0xc0>
 80071de:	2301      	movs	r3, #1
 80071e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071e2:	e066      	b.n	80072b2 <UART_SetConfig+0x18e>
 80071e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b50      	ldr	r3, [pc, #320]	; (800732c <UART_SetConfig+0x208>)
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d102      	bne.n	80071f4 <UART_SetConfig+0xd0>
 80071ee:	2302      	movs	r3, #2
 80071f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80071f2:	e05e      	b.n	80072b2 <UART_SetConfig+0x18e>
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <UART_SetConfig+0x20c>)
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d102      	bne.n	8007204 <UART_SetConfig+0xe0>
 80071fe:	2304      	movs	r3, #4
 8007200:	64bb      	str	r3, [r7, #72]	; 0x48
 8007202:	e056      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	4b4a      	ldr	r3, [pc, #296]	; (8007334 <UART_SetConfig+0x210>)
 800720a:	429a      	cmp	r2, r3
 800720c:	d102      	bne.n	8007214 <UART_SetConfig+0xf0>
 800720e:	2308      	movs	r3, #8
 8007210:	64bb      	str	r3, [r7, #72]	; 0x48
 8007212:	e04e      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b47      	ldr	r3, [pc, #284]	; (8007338 <UART_SetConfig+0x214>)
 800721a:	429a      	cmp	r2, r3
 800721c:	d102      	bne.n	8007224 <UART_SetConfig+0x100>
 800721e:	2310      	movs	r3, #16
 8007220:	64bb      	str	r3, [r7, #72]	; 0x48
 8007222:	e046      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b44      	ldr	r3, [pc, #272]	; (800733c <UART_SetConfig+0x218>)
 800722a:	429a      	cmp	r2, r3
 800722c:	d102      	bne.n	8007234 <UART_SetConfig+0x110>
 800722e:	2320      	movs	r3, #32
 8007230:	64bb      	str	r3, [r7, #72]	; 0x48
 8007232:	e03e      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4b41      	ldr	r3, [pc, #260]	; (8007340 <UART_SetConfig+0x21c>)
 800723a:	429a      	cmp	r2, r3
 800723c:	d102      	bne.n	8007244 <UART_SetConfig+0x120>
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
 8007242:	e036      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b3e      	ldr	r3, [pc, #248]	; (8007344 <UART_SetConfig+0x220>)
 800724a:	429a      	cmp	r2, r3
 800724c:	d102      	bne.n	8007254 <UART_SetConfig+0x130>
 800724e:	2380      	movs	r3, #128	; 0x80
 8007250:	64bb      	str	r3, [r7, #72]	; 0x48
 8007252:	e02e      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	4b3b      	ldr	r3, [pc, #236]	; (8007348 <UART_SetConfig+0x224>)
 800725a:	429a      	cmp	r2, r3
 800725c:	d103      	bne.n	8007266 <UART_SetConfig+0x142>
 800725e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007262:	64bb      	str	r3, [r7, #72]	; 0x48
 8007264:	e025      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b38      	ldr	r3, [pc, #224]	; (800734c <UART_SetConfig+0x228>)
 800726c:	429a      	cmp	r2, r3
 800726e:	d103      	bne.n	8007278 <UART_SetConfig+0x154>
 8007270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007274:	64bb      	str	r3, [r7, #72]	; 0x48
 8007276:	e01c      	b.n	80072b2 <UART_SetConfig+0x18e>
 8007278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4b34      	ldr	r3, [pc, #208]	; (8007350 <UART_SetConfig+0x22c>)
 800727e:	429a      	cmp	r2, r3
 8007280:	d103      	bne.n	800728a <UART_SetConfig+0x166>
 8007282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007286:	64bb      	str	r3, [r7, #72]	; 0x48
 8007288:	e013      	b.n	80072b2 <UART_SetConfig+0x18e>
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	4b31      	ldr	r3, [pc, #196]	; (8007354 <UART_SetConfig+0x230>)
 8007290:	429a      	cmp	r2, r3
 8007292:	d103      	bne.n	800729c <UART_SetConfig+0x178>
 8007294:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007298:	64bb      	str	r3, [r7, #72]	; 0x48
 800729a:	e00a      	b.n	80072b2 <UART_SetConfig+0x18e>
 800729c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <UART_SetConfig+0x1f8>)
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d103      	bne.n	80072ae <UART_SetConfig+0x18a>
 80072a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ac:	e001      	b.n	80072b2 <UART_SetConfig+0x18e>
 80072ae:	2300      	movs	r3, #0
 80072b0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b19      	ldr	r3, [pc, #100]	; (800731c <UART_SetConfig+0x1f8>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d005      	beq.n	80072c8 <UART_SetConfig+0x1a4>
 80072bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	4b18      	ldr	r3, [pc, #96]	; (8007324 <UART_SetConfig+0x200>)
 80072c2:	429a      	cmp	r2, r3
 80072c4:	f040 8094 	bne.w	80073f0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80072c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ca:	2200      	movs	r2, #0
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	627a      	str	r2, [r7, #36]	; 0x24
 80072d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80072d4:	f7fd f9ae 	bl	8004634 <HAL_RCCEx_GetPeriphCLKFreq>
 80072d8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80072da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 80f7 	beq.w	80074d0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e6:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <UART_SetConfig+0x234>)
 80072e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f8:	685a      	ldr	r2, [r3, #4]
 80072fa:	4613      	mov	r3, r2
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	4413      	add	r3, r2
 8007300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007302:	429a      	cmp	r2, r3
 8007304:	d305      	bcc.n	8007312 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800730c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800730e:	429a      	cmp	r2, r3
 8007310:	d924      	bls.n	800735c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007318:	e069      	b.n	80073ee <UART_SetConfig+0x2ca>
 800731a:	bf00      	nop
 800731c:	44002400 	.word	0x44002400
 8007320:	cfff69f3 	.word	0xcfff69f3
 8007324:	54002400 	.word	0x54002400
 8007328:	40013800 	.word	0x40013800
 800732c:	40004400 	.word	0x40004400
 8007330:	40004800 	.word	0x40004800
 8007334:	40004c00 	.word	0x40004c00
 8007338:	40005000 	.word	0x40005000
 800733c:	40006400 	.word	0x40006400
 8007340:	40007800 	.word	0x40007800
 8007344:	40007c00 	.word	0x40007c00
 8007348:	40008000 	.word	0x40008000
 800734c:	40006800 	.word	0x40006800
 8007350:	40006c00 	.word	0x40006c00
 8007354:	40008400 	.word	0x40008400
 8007358:	08007bd0 	.word	0x08007bd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800735c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800735e:	2200      	movs	r2, #0
 8007360:	61bb      	str	r3, [r7, #24]
 8007362:	61fa      	str	r2, [r7, #28]
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	4a64      	ldr	r2, [pc, #400]	; (80074fc <UART_SetConfig+0x3d8>)
 800736a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800736e:	b29b      	uxth	r3, r3
 8007370:	2200      	movs	r2, #0
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	617a      	str	r2, [r7, #20]
 8007376:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800737a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800737e:	f7f8 ff8d 	bl	800029c <__aeabi_uldivmod>
 8007382:	4602      	mov	r2, r0
 8007384:	460b      	mov	r3, r1
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	020b      	lsls	r3, r1, #8
 8007394:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007398:	0202      	lsls	r2, r0, #8
 800739a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800739c:	6849      	ldr	r1, [r1, #4]
 800739e:	0849      	lsrs	r1, r1, #1
 80073a0:	2000      	movs	r0, #0
 80073a2:	460c      	mov	r4, r1
 80073a4:	4605      	mov	r5, r0
 80073a6:	eb12 0804 	adds.w	r8, r2, r4
 80073aa:	eb43 0905 	adc.w	r9, r3, r5
 80073ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	60fa      	str	r2, [r7, #12]
 80073b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f8 ff6c 	bl	800029c <__aeabi_uldivmod>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4613      	mov	r3, r2
 80073ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d2:	d308      	bcc.n	80073e6 <UART_SetConfig+0x2c2>
 80073d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073da:	d204      	bcs.n	80073e6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073e2:	60da      	str	r2, [r3, #12]
 80073e4:	e003      	b.n	80073ee <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80073ec:	e070      	b.n	80074d0 <UART_SetConfig+0x3ac>
 80073ee:	e06f      	b.n	80074d0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	69db      	ldr	r3, [r3, #28]
 80073f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f8:	d13c      	bne.n	8007474 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073fc:	2200      	movs	r2, #0
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007406:	f7fd f915 	bl	8004634 <HAL_RCCEx_GetPeriphCLKFreq>
 800740a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800740c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800740e:	2b00      	cmp	r3, #0
 8007410:	d05e      	beq.n	80074d0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007416:	4a39      	ldr	r2, [pc, #228]	; (80074fc <UART_SetConfig+0x3d8>)
 8007418:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800741c:	461a      	mov	r2, r3
 800741e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007420:	fbb3 f3f2 	udiv	r3, r3, r2
 8007424:	005a      	lsls	r2, r3, #1
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	441a      	add	r2, r3
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	fbb2 f3f3 	udiv	r3, r2, r3
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743a:	2b0f      	cmp	r3, #15
 800743c:	d916      	bls.n	800746c <UART_SetConfig+0x348>
 800743e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d212      	bcs.n	800746c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007448:	b29b      	uxth	r3, r3
 800744a:	f023 030f 	bic.w	r3, r3, #15
 800744e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007452:	085b      	lsrs	r3, r3, #1
 8007454:	b29b      	uxth	r3, r3
 8007456:	f003 0307 	and.w	r3, r3, #7
 800745a:	b29a      	uxth	r2, r3
 800745c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800745e:	4313      	orrs	r3, r2
 8007460:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	e031      	b.n	80074d0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007472:	e02d      	b.n	80074d0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007476:	2200      	movs	r2, #0
 8007478:	469a      	mov	sl, r3
 800747a:	4693      	mov	fp, r2
 800747c:	4650      	mov	r0, sl
 800747e:	4659      	mov	r1, fp
 8007480:	f7fd f8d8 	bl	8004634 <HAL_RCCEx_GetPeriphCLKFreq>
 8007484:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d021      	beq.n	80074d0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	4a1a      	ldr	r2, [pc, #104]	; (80074fc <UART_SetConfig+0x3d8>)
 8007492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007496:	461a      	mov	r2, r3
 8007498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800749a:	fbb3 f2f2 	udiv	r2, r3, r2
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	085b      	lsrs	r3, r3, #1
 80074a4:	441a      	add	r2, r3
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	2b0f      	cmp	r3, #15
 80074b4:	d909      	bls.n	80074ca <UART_SetConfig+0x3a6>
 80074b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074bc:	d205      	bcs.n	80074ca <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60da      	str	r2, [r3, #12]
 80074c8:	e002      	b.n	80074d0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d2:	2201      	movs	r2, #1
 80074d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	2201      	movs	r2, #1
 80074dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2200      	movs	r2, #0
 80074e4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	2200      	movs	r2, #0
 80074ea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80074ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3750      	adds	r7, #80	; 0x50
 80074f4:	46bd      	mov	sp, r7
 80074f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074fa:	bf00      	nop
 80074fc:	08007bd0 	.word	0x08007bd0

08007500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f003 0308 	and.w	r3, r3, #8
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	430a      	orrs	r2, r1
 80075b0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00a      	beq.n	80075d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	430a      	orrs	r2, r1
 80075d2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075fe:	d10a      	bne.n	8007616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b098      	sub	sp, #96	; 0x60
 8007648:	af02      	add	r7, sp, #8
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007654:	f7f9 fa6a 	bl	8000b2c <HAL_GetTick>
 8007658:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b08      	cmp	r3, #8
 8007666:	d12f      	bne.n	80076c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007670:	2200      	movs	r2, #0
 8007672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f88e 	bl	8007798 <UART_WaitOnFlagUntilTimeout>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d022      	beq.n	80076c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	e853 3f00 	ldrex	r3, [r3]
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007696:	653b      	str	r3, [r7, #80]	; 0x50
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	461a      	mov	r2, r3
 800769e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a0:	647b      	str	r3, [r7, #68]	; 0x44
 80076a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a8:	e841 2300 	strex	r3, r2, [r1]
 80076ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e6      	bne.n	8007682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2220      	movs	r2, #32
 80076b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e063      	b.n	8007790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d149      	bne.n	800776a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076de:	2200      	movs	r2, #0
 80076e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f857 	bl	8007798 <UART_WaitOnFlagUntilTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d03c      	beq.n	800776a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	623b      	str	r3, [r7, #32]
   return(result);
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007704:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	633b      	str	r3, [r7, #48]	; 0x30
 8007710:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e6      	bne.n	80076f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	3308      	adds	r3, #8
 8007728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	e853 3f00 	ldrex	r3, [r3]
 8007730:	60fb      	str	r3, [r7, #12]
   return(result);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f023 0301 	bic.w	r3, r3, #1
 8007738:	64bb      	str	r3, [r7, #72]	; 0x48
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007742:	61fa      	str	r2, [r7, #28]
 8007744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007746:	69b9      	ldr	r1, [r7, #24]
 8007748:	69fa      	ldr	r2, [r7, #28]
 800774a:	e841 2300 	strex	r3, r2, [r1]
 800774e:	617b      	str	r3, [r7, #20]
   return(result);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1e5      	bne.n	8007722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e012      	b.n	8007790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2220      	movs	r2, #32
 800776e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3758      	adds	r7, #88	; 0x58
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	4613      	mov	r3, r2
 80077a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a8:	e049      	b.n	800783e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b0:	d045      	beq.n	800783e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077b2:	f7f9 f9bb 	bl	8000b2c <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e048      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0304 	and.w	r3, r3, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d031      	beq.n	800783e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	f003 0308 	and.w	r3, r3, #8
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d110      	bne.n	800780a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2208      	movs	r2, #8
 80077ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f000 f838 	bl	8007866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2208      	movs	r2, #8
 80077fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	e029      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007818:	d111      	bne.n	800783e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f81e 	bl	8007866 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2220      	movs	r2, #32
 800782e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e00f      	b.n	800785e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	69da      	ldr	r2, [r3, #28]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	4013      	ands	r3, r2
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	429a      	cmp	r2, r3
 800784c:	bf0c      	ite	eq
 800784e:	2301      	moveq	r3, #1
 8007850:	2300      	movne	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	461a      	mov	r2, r3
 8007856:	79fb      	ldrb	r3, [r7, #7]
 8007858:	429a      	cmp	r2, r3
 800785a:	d0a6      	beq.n	80077aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007866:	b480      	push	{r7}
 8007868:	b095      	sub	sp, #84	; 0x54
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007882:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800788c:	643b      	str	r3, [r7, #64]	; 0x40
 800788e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007892:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800789a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	e853 3f00 	ldrex	r3, [r3]
 80078ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b6:	f023 0301 	bic.w	r3, r3, #1
 80078ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3308      	adds	r3, #8
 80078c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078cc:	e841 2300 	strex	r3, r2, [r1]
 80078d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e3      	bne.n	80078a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d118      	bne.n	8007912 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f023 0310 	bic.w	r3, r3, #16
 80078f4:	647b      	str	r3, [r7, #68]	; 0x44
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007902:	6979      	ldr	r1, [r7, #20]
 8007904:	69ba      	ldr	r2, [r7, #24]
 8007906:	e841 2300 	strex	r3, r2, [r1]
 800790a:	613b      	str	r3, [r7, #16]
   return(result);
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1e6      	bne.n	80078e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2220      	movs	r2, #32
 8007916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007926:	bf00      	nop
 8007928:	3754      	adds	r7, #84	; 0x54
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007932:	b480      	push	{r7}
 8007934:	b085      	sub	sp, #20
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_UARTEx_DisableFifoMode+0x16>
 8007944:	2302      	movs	r3, #2
 8007946:	e027      	b.n	8007998 <HAL_UARTEx_DisableFifoMode+0x66>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2224      	movs	r2, #36	; 0x24
 8007954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0201 	bic.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007976:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2220      	movs	r2, #32
 800798a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079b8:	2302      	movs	r3, #2
 80079ba:	e02d      	b.n	8007a18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2224      	movs	r2, #36	; 0x24
 80079c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f022 0201 	bic.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f84f 	bl	8007a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e02d      	b.n	8007a94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2224      	movs	r2, #36	; 0x24
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f811 	bl	8007a9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d108      	bne.n	8007abe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007abc:	e031      	b.n	8007b22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007abe:	2308      	movs	r3, #8
 8007ac0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ac2:	2308      	movs	r3, #8
 8007ac4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	0e5b      	lsrs	r3, r3, #25
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	0f5b      	lsrs	r3, r3, #29
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	7b3a      	ldrb	r2, [r7, #12]
 8007aea:	4911      	ldr	r1, [pc, #68]	; (8007b30 <UARTEx_SetNbDataToProcess+0x94>)
 8007aec:	5c8a      	ldrb	r2, [r1, r2]
 8007aee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007af2:	7b3a      	ldrb	r2, [r7, #12]
 8007af4:	490f      	ldr	r1, [pc, #60]	; (8007b34 <UARTEx_SetNbDataToProcess+0x98>)
 8007af6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b04:	7bfb      	ldrb	r3, [r7, #15]
 8007b06:	7b7a      	ldrb	r2, [r7, #13]
 8007b08:	4909      	ldr	r1, [pc, #36]	; (8007b30 <UARTEx_SetNbDataToProcess+0x94>)
 8007b0a:	5c8a      	ldrb	r2, [r1, r2]
 8007b0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b10:	7b7a      	ldrb	r2, [r7, #13]
 8007b12:	4908      	ldr	r1, [pc, #32]	; (8007b34 <UARTEx_SetNbDataToProcess+0x98>)
 8007b14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b16:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b22:	bf00      	nop
 8007b24:	3714      	adds	r7, #20
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	08007be8 	.word	0x08007be8
 8007b34:	08007bf0 	.word	0x08007bf0

08007b38 <memset>:
 8007b38:	4402      	add	r2, r0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d100      	bne.n	8007b42 <memset+0xa>
 8007b40:	4770      	bx	lr
 8007b42:	f803 1b01 	strb.w	r1, [r3], #1
 8007b46:	e7f9      	b.n	8007b3c <memset+0x4>

08007b48 <__libc_init_array>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4d0d      	ldr	r5, [pc, #52]	; (8007b80 <__libc_init_array+0x38>)
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	4c0d      	ldr	r4, [pc, #52]	; (8007b84 <__libc_init_array+0x3c>)
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	42a6      	cmp	r6, r4
 8007b56:	d109      	bne.n	8007b6c <__libc_init_array+0x24>
 8007b58:	4d0b      	ldr	r5, [pc, #44]	; (8007b88 <__libc_init_array+0x40>)
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	4c0b      	ldr	r4, [pc, #44]	; (8007b8c <__libc_init_array+0x44>)
 8007b5e:	f000 f817 	bl	8007b90 <_init>
 8007b62:	1b64      	subs	r4, r4, r5
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	42a6      	cmp	r6, r4
 8007b68:	d105      	bne.n	8007b76 <__libc_init_array+0x2e>
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b70:	3601      	adds	r6, #1
 8007b72:	4798      	blx	r3
 8007b74:	e7ee      	b.n	8007b54 <__libc_init_array+0xc>
 8007b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	4798      	blx	r3
 8007b7e:	e7f2      	b.n	8007b66 <__libc_init_array+0x1e>
 8007b80:	08007c00 	.word	0x08007c00
 8007b84:	08007c00 	.word	0x08007c00
 8007b88:	08007c00 	.word	0x08007c00
 8007b8c:	08007c04 	.word	0x08007c04

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
