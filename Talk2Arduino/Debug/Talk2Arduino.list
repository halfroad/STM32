
Talk2Arduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080046f4  080046f4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f4  080046f4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080046fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  08004718  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08004718  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b533  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001925  00000000  00000000  0002b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  0002cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000745  00000000  00000000  0002d890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f70a  00000000  00000000  0002dfd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e99e  00000000  00000000  0005d6df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128597  00000000  00000000  0006c07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002638  00000000  00000000  00194614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00196c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000001c 	.word	0x2000001c
 8000268:	00000000 	.word	0x00000000
 800026c:	080046cc 	.word	0x080046cc

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000020 	.word	0x20000020
 8000288:	080046cc 	.word	0x080046cc

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <MX_GPIO_Init>:
     PH1-OSC_OUT(PH1)   ------> RCC_OSC_OUT
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]
 80002b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002b2:	4b2a      	ldr	r3, [pc, #168]	; (800035c <MX_GPIO_Init+0xc0>)
 80002b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002b8:	4a28      	ldr	r2, [pc, #160]	; (800035c <MX_GPIO_Init+0xc0>)
 80002ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002c2:	4b26      	ldr	r3, [pc, #152]	; (800035c <MX_GPIO_Init+0xc0>)
 80002c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <MX_GPIO_Init+0xc0>)
 80002d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002d6:	4a21      	ldr	r2, [pc, #132]	; (800035c <MX_GPIO_Init+0xc0>)
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <MX_GPIO_Init+0xc0>)
 80002e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002e6:	f003 0302 	and.w	r3, r3, #2
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002ee:	4b1b      	ldr	r3, [pc, #108]	; (800035c <MX_GPIO_Init+0xc0>)
 80002f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80002f4:	4a19      	ldr	r2, [pc, #100]	; (800035c <MX_GPIO_Init+0xc0>)
 80002f6:	f043 0308 	orr.w	r3, r3, #8
 80002fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80002fe:	4b17      	ldr	r3, [pc, #92]	; (800035c <MX_GPIO_Init+0xc0>)
 8000300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000304:	f003 0308 	and.w	r3, r3, #8
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2101      	movs	r1, #1
 8000310:	4813      	ldr	r0, [pc, #76]	; (8000360 <MX_GPIO_Init+0xc4>)
 8000312:	f000 fd53 	bl	8000dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000316:	2301      	movs	r3, #1
 8000318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	4619      	mov	r1, r3
 800032c:	480c      	ldr	r0, [pc, #48]	; (8000360 <MX_GPIO_Init+0xc4>)
 800032e:	f000 fbf3 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000336:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000338:	2302      	movs	r3, #2
 800033a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000340:	2300      	movs	r3, #0
 8000342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000344:	2307      	movs	r3, #7
 8000346:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000348:	f107 030c 	add.w	r3, r7, #12
 800034c:	4619      	mov	r1, r3
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <MX_GPIO_Init+0xc8>)
 8000350:	f000 fbe2 	bl	8000b18 <HAL_GPIO_Init>

}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	44020c00 	.word	0x44020c00
 8000360:	42020400 	.word	0x42020400
 8000364:	42020c00 	.word	0x42020c00

08000368 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <MX_I2C1_Init+0x74>)
 800036e:	4a1c      	ldr	r2, [pc, #112]	; (80003e0 <MX_I2C1_Init+0x78>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60808CD3;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <MX_I2C1_Init+0x74>)
 8000374:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <MX_I2C1_Init+0x7c>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <MX_I2C1_Init+0x74>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <MX_I2C1_Init+0x74>)
 8000380:	2201      	movs	r2, #1
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <MX_I2C1_Init+0x74>)
 8000386:	2200      	movs	r2, #0
 8000388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <MX_I2C1_Init+0x74>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <MX_I2C1_Init+0x74>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000396:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_I2C1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_I2C1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a2:	480e      	ldr	r0, [pc, #56]	; (80003dc <MX_I2C1_Init+0x74>)
 80003a4:	f000 fd3c 	bl	8000e20 <HAL_I2C_Init>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ae:	f000 f94b 	bl	8000648 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_I2C1_Init+0x74>)
 80003b6:	f001 f8d3 	bl	8001560 <HAL_I2CEx_ConfigAnalogFilter>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003c0:	f000 f942 	bl	8000648 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003c4:	2100      	movs	r1, #0
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_I2C1_Init+0x74>)
 80003c8:	f001 f915 	bl	80015f6 <HAL_I2CEx_ConfigDigitalFilter>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003d2:	f000 f939 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000038 	.word	0x20000038
 80003e0:	40005400 	.word	0x40005400
 80003e4:	60808cd3 	.word	0x60808cd3

080003e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b0cc      	sub	sp, #304	; 0x130
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80003f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80003f6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800040c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000410:	4618      	mov	r0, r3
 8000412:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000416:	461a      	mov	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f004 f92b 	bl	8004674 <memset>
  if(i2cHandle->Instance==I2C1)
 800041e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a33      	ldr	r2, [pc, #204]	; (80004f8 <HAL_I2C_MspInit+0x110>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d15e      	bne.n	80004ee <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000434:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800043c:	f04f 0300 	mov.w	r3, #0
 8000440:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000448:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800044c:	2200      	movs	r2, #0
 800044e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000452:	f107 0310 	add.w	r3, r7, #16
 8000456:	4618      	mov	r0, r3
 8000458:	f002 f852 	bl	8002500 <HAL_RCCEx_PeriphCLKConfig>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000462:	f000 f8f1 	bl	8000648 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b25      	ldr	r3, [pc, #148]	; (80004fc <HAL_I2C_MspInit+0x114>)
 8000468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800046c:	4a23      	ldr	r2, [pc, #140]	; (80004fc <HAL_I2C_MspInit+0x114>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000476:	4b21      	ldr	r3, [pc, #132]	; (80004fc <HAL_I2C_MspInit+0x114>)
 8000478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800047c:	f003 0202 	and.w	r2, r3, #2
 8000480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000484:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800048e:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000492:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000494:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000498:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800049c:	2312      	movs	r3, #18
 800049e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80004ae:	2304      	movs	r3, #4
 80004b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80004b8:	4619      	mov	r1, r3
 80004ba:	4811      	ldr	r0, [pc, #68]	; (8000500 <HAL_I2C_MspInit+0x118>)
 80004bc:	f000 fb2c 	bl	8000b18 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004c0:	4b0e      	ldr	r3, [pc, #56]	; (80004fc <HAL_I2C_MspInit+0x114>)
 80004c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80004c6:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <HAL_I2C_MspInit+0x114>)
 80004c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004cc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <HAL_I2C_MspInit+0x114>)
 80004d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80004d6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80004da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80004de:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80004e8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80004ec:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004ee:	bf00      	nop
 80004f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40005400 	.word	0x40005400
 80004fc:	44020c00 	.word	0x44020c00
 8000500:	42020400 	.word	0x42020400

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 f981 	bl	8000810 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f835 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f7ff fec3 	bl	800029c <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 8000516:	f000 f89c 	bl	8000652 <MX_MEMORYMAP_Init>
  MX_I2C1_Init();
 800051a:	f7ff ff25 	bl	8000368 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), 100);
 800051e:	4813      	ldr	r0, [pc, #76]	; (800056c <main+0x68>)
 8000520:	f7ff feb4 	bl	800028c <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	b29b      	uxth	r3, r3
 8000528:	2264      	movs	r2, #100	; 0x64
 800052a:	9200      	str	r2, [sp, #0]
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0x68>)
 800052e:	210a      	movs	r1, #10
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x6c>)
 8000532:	f000 fd11 	bl	8000f58 <HAL_I2C_Master_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <main+0x70>)
 800053c:	601a      	str	r2, [r3, #0]

	  if (ret == HAL_OK)
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <main+0x70>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d107      	bne.n	8000556 <main+0x52>
	  {
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000546:	2101      	movs	r1, #1
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x74>)
 800054a:	f000 fc4f 	bl	8000dec <HAL_GPIO_TogglePin>
		  HAL_Delay(200);
 800054e:	20c8      	movs	r0, #200	; 0xc8
 8000550:	f000 f9da 	bl	8000908 <HAL_Delay>
 8000554:	e004      	b.n	8000560 <main+0x5c>
	  }
	  else
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 8000556:	2201      	movs	r2, #1
 8000558:	2101      	movs	r1, #1
 800055a:	4807      	ldr	r0, [pc, #28]	; (8000578 <main+0x74>)
 800055c:	f000 fc2e 	bl	8000dbc <HAL_GPIO_WritePin>

	  HAL_Delay(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 f9d0 	bl	8000908 <HAL_Delay>
	  ret = HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), 100);
 8000568:	e7d9      	b.n	800051e <main+0x1a>
 800056a:	bf00      	nop
 800056c:	20000000 	.word	0x20000000
 8000570:	20000038 	.word	0x20000038
 8000574:	2000008c 	.word	0x2000008c
 8000578:	42020400 	.word	0x42020400

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09c      	sub	sp, #112	; 0x70
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2250      	movs	r2, #80	; 0x50
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f004 f872 	bl	8004674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0308 	add.w	r3, r7, #8
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
 80005a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80005a2:	4b28      	ldr	r3, [pc, #160]	; (8000644 <SystemClock_Config+0xc8>)
 80005a4:	691b      	ldr	r3, [r3, #16]
 80005a6:	4a27      	ldr	r2, [pc, #156]	; (8000644 <SystemClock_Config+0xc8>)
 80005a8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80005ac:	6113      	str	r3, [r2, #16]
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <SystemClock_Config+0xc8>)
 80005b0:	691b      	ldr	r3, [r3, #16]
 80005b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005ba:	bf00      	nop
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <SystemClock_Config+0xc8>)
 80005be:	695b      	ldr	r3, [r3, #20]
 80005c0:	f003 0308 	and.w	r3, r3, #8
 80005c4:	2b08      	cmp	r3, #8
 80005c6:	d1f9      	bne.n	80005bc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80005d6:	2303      	movs	r3, #3
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005da:	2304      	movs	r3, #4
 80005dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80005de:	23fa      	movs	r3, #250	; 0xfa
 80005e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80005ee:	2304      	movs	r3, #4
 80005f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 0320 	add.w	r3, r7, #32
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f846 	bl	8001690 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800060a:	f000 f81d 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	231f      	movs	r3, #31
 8000610:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2303      	movs	r3, #3
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2105      	movs	r1, #5
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc67 	bl	8001f00 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000638:	f000 f806 	bl	8000648 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3770      	adds	r7, #112	; 0x70
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	44020800 	.word	0x44020800

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>

08000652 <MX_MEMORYMAP_Init>:

/* USER CODE END 0 */

/* MEMORYMAP init function */
void MX_MEMORYMAP_Init(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <NMI_Handler+0x4>

08000674 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <HardFault_Handler+0x4>

0800067a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <BusFault_Handler+0x4>

08000686 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068a:	e7fe      	b.n	800068a <UsageFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ba:	f000 f905 	bl	80008c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ca:	4b35      	ldr	r3, [pc, #212]	; (80007a0 <SystemInit+0xdc>)
 80006cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d0:	4a33      	ldr	r2, [pc, #204]	; (80007a0 <SystemInit+0xdc>)
 80006d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <SystemInit+0xe0>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80006e0:	4b30      	ldr	r3, [pc, #192]	; (80007a4 <SystemInit+0xe0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <SystemInit+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <SystemInit+0xe0>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	492c      	ldr	r1, [pc, #176]	; (80007a4 <SystemInit+0xe0>)
 80006f2:	4b2d      	ldr	r3, [pc, #180]	; (80007a8 <SystemInit+0xe4>)
 80006f4:	4013      	ands	r3, r2
 80006f6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <SystemInit+0xe0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <SystemInit+0xe0>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemInit+0xe0>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemInit+0xe0>)
 800070c:	4a27      	ldr	r2, [pc, #156]	; (80007ac <SystemInit+0xe8>)
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemInit+0xe0>)
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <SystemInit+0xe0>)
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <SystemInit+0xe8>)
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <SystemInit+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <SystemInit+0xe0>)
 8000724:	4a21      	ldr	r2, [pc, #132]	; (80007ac <SystemInit+0xe8>)
 8000726:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <SystemInit+0xe0>)
 800072a:	2200      	movs	r2, #0
 800072c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <SystemInit+0xe0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <SystemInit+0xe0>)
 8000734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000738:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <SystemInit+0xe0>)
 800073c:	2200      	movs	r2, #0
 800073e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <SystemInit+0xdc>)
 8000742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000746:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <SystemInit+0xec>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000750:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000758:	d003      	beq.n	8000762 <SystemInit+0x9e>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000760:	d117      	bne.n	8000792 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0xec>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	2b00      	cmp	r3, #0
 800076c:	d005      	beq.n	800077a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <SystemInit+0xec>)
 8000770:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <SystemInit+0xf0>)
 8000772:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <SystemInit+0xec>)
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <SystemInit+0xf4>)
 8000778:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <SystemInit+0xec>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a0c      	ldr	r2, [pc, #48]	; (80007b0 <SystemInit+0xec>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <SystemInit+0xec>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	4a09      	ldr	r2, [pc, #36]	; (80007b0 <SystemInit+0xec>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	61d3      	str	r3, [r2, #28]
  }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00
 80007a4:	44020c00 	.word	0x44020c00
 80007a8:	eae2eae3 	.word	0xeae2eae3
 80007ac:	01010280 	.word	0x01010280
 80007b0:	40022000 	.word	0x40022000
 80007b4:	08192a3b 	.word	0x08192a3b
 80007b8:	4c5d6e7f 	.word	0x4c5d6e7f

080007bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007c0:	f7ff ff80 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007c4:	480c      	ldr	r0, [pc, #48]	; (80007f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007c6:	490d      	ldr	r1, [pc, #52]	; (80007fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <LoopForever+0xe>)
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007cc:	e002      	b.n	80007d4 <LoopCopyDataInit>

080007ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007d2:	3304      	adds	r3, #4

080007d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d8:	d3f9      	bcc.n	80007ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007dc:	4c0a      	ldr	r4, [pc, #40]	; (8000808 <LoopForever+0x16>)
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e0:	e001      	b.n	80007e6 <LoopFillZerobss>

080007e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007e4:	3204      	adds	r2, #4

080007e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e8:	d3fb      	bcc.n	80007e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ea:	f003 ff4b 	bl	8004684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ee:	f7ff fe89 	bl	8000504 <main>

080007f2 <LoopForever>:

LoopForever:
    b LoopForever
 80007f2:	e7fe      	b.n	80007f2 <LoopForever>
  ldr   r0, =_estack
 80007f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80007f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007fc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000800:	080046fc 	.word	0x080046fc
  ldr r2, =_sbss
 8000804:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000808:	20000094 	.word	0x20000094

0800080c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800080c:	e7fe      	b.n	800080c <ADC1_IRQHandler>
	...

08000810 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000814:	2003      	movs	r0, #3
 8000816:	f000 f94d 	bl	8000ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800081a:	f001 fd29 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800081e:	4602      	mov	r2, r0
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_Init+0x40>)
 8000822:	6a1b      	ldr	r3, [r3, #32]
 8000824:	f003 030f 	and.w	r3, r3, #15
 8000828:	490a      	ldr	r1, [pc, #40]	; (8000854 <HAL_Init+0x44>)
 800082a:	5ccb      	ldrb	r3, [r1, r3]
 800082c:	fa22 f303 	lsr.w	r3, r2, r3
 8000830:	4a09      	ldr	r2, [pc, #36]	; (8000858 <HAL_Init+0x48>)
 8000832:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000834:	200f      	movs	r0, #15
 8000836:	f000 f811 	bl	800085c <HAL_InitTick>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000840:	2301      	movs	r3, #1
 8000842:	e002      	b.n	800084a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff ff0c 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	44020c00 	.word	0x44020c00
 8000854:	080046e4 	.word	0x080046e4
 8000858:	20000010 	.word	0x20000010

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <HAL_InitTick+0x60>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
 800086e:	e021      	b.n	80008b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_InitTick+0x64>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_InitTick+0x60>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000882:	fbb2 f3f3 	udiv	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f939 	bl	8000afe <HAL_SYSTICK_Config>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	e00e      	b.n	80008b4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d80a      	bhi.n	80008b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089c:	2200      	movs	r2, #0
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	f000 f911 	bl	8000aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <HAL_InitTick+0x68>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ae:	2300      	movs	r3, #0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	20000018 	.word	0x20000018
 80008c0:	20000010 	.word	0x20000010
 80008c4:	20000014 	.word	0x20000014

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x20>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <HAL_IncTick+0x24>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a04      	ldr	r2, [pc, #16]	; (80008ec <HAL_IncTick+0x24>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	20000018 	.word	0x20000018
 80008ec:	20000090 	.word	0x20000090

080008f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_GetTick+0x14>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	20000090 	.word	0x20000090

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff ffee 	bl	80008f0 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Delay+0x44>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffde 	bl	80008f0 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000018 	.word	0x20000018

08000950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f003 0307 	and.w	r3, r3, #7
 800095e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000966:	68ba      	ldr	r2, [r7, #8]
 8000968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800096c:	4013      	ands	r3, r2
 800096e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000982:	4a04      	ldr	r2, [pc, #16]	; (8000994 <__NVIC_SetPriorityGrouping+0x44>)
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	60d3      	str	r3, [r2, #12]
}
 8000988:	bf00      	nop
 800098a:	3714      	adds	r7, #20
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099c:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <__NVIC_GetPriorityGrouping+0x18>)
 800099e:	68db      	ldr	r3, [r3, #12]
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	f003 0307 	and.w	r3, r3, #7
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	6039      	str	r1, [r7, #0]
 80009be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	db0a      	blt.n	80009de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	490c      	ldr	r1, [pc, #48]	; (8000a00 <__NVIC_SetPriority+0x4c>)
 80009ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	440b      	add	r3, r1
 80009d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009dc:	e00a      	b.n	80009f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4908      	ldr	r1, [pc, #32]	; (8000a04 <__NVIC_SetPriority+0x50>)
 80009e4:	88fb      	ldrh	r3, [r7, #6]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	3b04      	subs	r3, #4
 80009ec:	0112      	lsls	r2, r2, #4
 80009ee:	b2d2      	uxtb	r2, r2
 80009f0:	440b      	add	r3, r1
 80009f2:	761a      	strb	r2, [r3, #24]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a1c:	69fb      	ldr	r3, [r7, #28]
 8000a1e:	f1c3 0307 	rsb	r3, r3, #7
 8000a22:	2b04      	cmp	r3, #4
 8000a24:	bf28      	it	cs
 8000a26:	2304      	movcs	r3, #4
 8000a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	2b06      	cmp	r3, #6
 8000a30:	d902      	bls.n	8000a38 <NVIC_EncodePriority+0x30>
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	3b03      	subs	r3, #3
 8000a36:	e000      	b.n	8000a3a <NVIC_EncodePriority+0x32>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a40:	69bb      	ldr	r3, [r7, #24]
 8000a42:	fa02 f303 	lsl.w	r3, r2, r3
 8000a46:	43da      	mvns	r2, r3
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	fa01 f303 	lsl.w	r3, r1, r3
 8000a5a:	43d9      	mvns	r1, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a60:	4313      	orrs	r3, r2
         );
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3724      	adds	r7, #36	; 0x24
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a80:	d301      	bcc.n	8000a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00f      	b.n	8000aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <SysTick_Config+0x40>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	f7ff ff8e 	bl	80009b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <SysTick_Config+0x40>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Config+0x40>)
 8000aa0:	2207      	movs	r2, #7
 8000aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	e000e010 	.word	0xe000e010

08000ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f7ff ff47 	bl	8000950 <__NVIC_SetPriorityGrouping>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	b086      	sub	sp, #24
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	60b9      	str	r1, [r7, #8]
 8000ad4:	607a      	str	r2, [r7, #4]
 8000ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad8:	f7ff ff5e 	bl	8000998 <__NVIC_GetPriorityGrouping>
 8000adc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	68b9      	ldr	r1, [r7, #8]
 8000ae2:	6978      	ldr	r0, [r7, #20]
 8000ae4:	f7ff ff90 	bl	8000a08 <NVIC_EncodePriority>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000aee:	4611      	mov	r1, r2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ff5f 	bl	80009b4 <__NVIC_SetPriority>
}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b082      	sub	sp, #8
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f7ff ffb2 	bl	8000a70 <SysTick_Config>
 8000b0c:	4603      	mov	r3, r0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b26:	e136      	b.n	8000d96 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8128 	beq.w	8000d90 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d003      	beq.n	8000b50 <HAL_GPIO_Init+0x38>
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b12      	cmp	r3, #18
 8000b4e:	d125      	bne.n	8000b9c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	08da      	lsrs	r2, r3, #3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3208      	adds	r2, #8
 8000b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000b5e:	693b      	ldr	r3, [r7, #16]
 8000b60:	f003 0307 	and.w	r3, r3, #7
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	697a      	ldr	r2, [r7, #20]
 8000b70:	4013      	ands	r3, r2
 8000b72:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f003 020f 	and.w	r2, r3, #15
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	009b      	lsls	r3, r3, #2
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	08da      	lsrs	r2, r3, #3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	3208      	adds	r2, #8
 8000b96:	6979      	ldr	r1, [r7, #20]
 8000b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0203 	and.w	r2, r3, #3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d00b      	beq.n	8000bf0 <HAL_GPIO_Init+0xd8>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b02      	cmp	r3, #2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be4:	2b11      	cmp	r3, #17
 8000be6:	d003      	beq.n	8000bf0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b12      	cmp	r3, #18
 8000bee:	d130      	bne.n	8000c52 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	4013      	ands	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	68da      	ldr	r2, [r3, #12]
 8000c0c:	693b      	ldr	r3, [r7, #16]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	697a      	ldr	r2, [r7, #20]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c26:	2201      	movs	r2, #1
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	4013      	ands	r3, r2
 8000c34:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	f003 0201 	and.w	r2, r3, #1
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d017      	beq.n	8000c8a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	68db      	ldr	r3, [r3, #12]
 8000c5e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2203      	movs	r2, #3
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	697a      	ldr	r2, [r7, #20]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	697a      	ldr	r2, [r7, #20]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	697a      	ldr	r2, [r7, #20]
 8000c88:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d07c      	beq.n	8000d90 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000c96:	4a47      	ldr	r2, [pc, #284]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3318      	adds	r3, #24
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0a9a      	lsrs	r2, r3, #10
 8000cbe:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <HAL_GPIO_Init+0x2a0>)
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	f002 0203 	and.w	r2, r2, #3
 8000cc8:	00d2      	lsls	r2, r2, #3
 8000cca:	4093      	lsls	r3, r2
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000cd2:	4938      	ldr	r1, [pc, #224]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	3318      	adds	r3, #24
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ce0:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	4013      	ands	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000d04:	4a2b      	ldr	r2, [pc, #172]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	4013      	ands	r3, r2
 8000d18:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000d2e:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000d3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4013      	ands	r3, r2
 8000d44:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d003      	beq.n	8000d5a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d68:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	4013      	ands	r3, r2
 8000d72:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_GPIO_Init+0x29c>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	3301      	adds	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f aec1 	bne.w	8000b28 <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	44022000 	.word	0x44022000
 8000db8:	002f7f7f 	.word	0x002f7f7f

08000dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dcc:	787b      	ldrb	r3, [r7, #1]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd2:	887a      	ldrh	r2, [r7, #2]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dd8:	e002      	b.n	8000de0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dda:	887a      	ldrh	r2, [r7, #2]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dfe:	887a      	ldrh	r2, [r7, #2]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4013      	ands	r3, r2
 8000e04:	041a      	lsls	r2, r3, #16
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43d9      	mvns	r1, r3
 8000e0a:	887b      	ldrh	r3, [r7, #2]
 8000e0c:	400b      	ands	r3, r1
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	619a      	str	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d101      	bne.n	8000e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e08d      	b.n	8000f4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d106      	bne.n	8000e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff face 	bl	80003e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2224      	movs	r2, #36	; 0x24
 8000e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000e70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d107      	bne.n	8000e9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	e006      	b.n	8000ea8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000ea6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d108      	bne.n	8000ec2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	e007      	b.n	8000ed2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ed0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ef4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	69d9      	ldr	r1, [r3, #28]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a1a      	ldr	r2, [r3, #32]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	430a      	orrs	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0201 	orr.w	r2, r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2220      	movs	r2, #32
 8000f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	817b      	strh	r3, [r7, #10]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b20      	cmp	r3, #32
 8000f76:	f040 80da 	bne.w	800112e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d101      	bne.n	8000f88 <HAL_I2C_Master_Transmit+0x30>
 8000f84:	2302      	movs	r3, #2
 8000f86:	e0d3      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f90:	f7ff fcae 	bl	80008f0 <HAL_GetTick>
 8000f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2319      	movs	r3, #25
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f8f0 	bl	8001188 <I2C_WaitOnFlagUntilTimeout>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e0be      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	2221      	movs	r2, #33	; 0x21
 8000fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	893a      	ldrh	r2, [r7, #8]
 8000fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d90e      	bls.n	8001002 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	22ff      	movs	r2, #255	; 0xff
 8000fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	8979      	ldrh	r1, [r7, #10]
 8000ff2:	4b51      	ldr	r3, [pc, #324]	; (8001138 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f000 fa7e 	bl	80014fc <I2C_TransferConfig>
 8001000:	e06c      	b.n	80010dc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001006:	b29a      	uxth	r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001010:	b2da      	uxtb	r2, r3
 8001012:	8979      	ldrh	r1, [r7, #10]
 8001014:	4b48      	ldr	r3, [pc, #288]	; (8001138 <HAL_I2C_Master_Transmit+0x1e0>)
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f000 fa6d 	bl	80014fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001022:	e05b      	b.n	80010dc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	6a39      	ldr	r1, [r7, #32]
 8001028:	68f8      	ldr	r0, [r7, #12]
 800102a:	f000 f8fc 	bl	8001226 <I2C_WaitOnTXISFlagUntilTimeout>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e07b      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001052:	b29b      	uxth	r3, r3
 8001054:	3b01      	subs	r3, #1
 8001056:	b29a      	uxth	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001060:	3b01      	subs	r3, #1
 8001062:	b29a      	uxth	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800106c:	b29b      	uxth	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d034      	beq.n	80010dc <HAL_I2C_Master_Transmit+0x184>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001076:	2b00      	cmp	r3, #0
 8001078:	d130      	bne.n	80010dc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	2200      	movs	r2, #0
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f000 f87f 	bl	8001188 <I2C_WaitOnFlagUntilTimeout>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e04d      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001098:	b29b      	uxth	r3, r3
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d90e      	bls.n	80010bc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	8979      	ldrh	r1, [r7, #10]
 80010ac:	2300      	movs	r3, #0
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b4:	68f8      	ldr	r0, [r7, #12]
 80010b6:	f000 fa21 	bl	80014fc <I2C_TransferConfig>
 80010ba:	e00f      	b.n	80010dc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	8979      	ldrh	r1, [r7, #10]
 80010ce:	2300      	movs	r3, #0
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa10 	bl	80014fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d19e      	bne.n	8001024 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	6a39      	ldr	r1, [r7, #32]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 f8e2 	bl	80012b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e01a      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2220      	movs	r2, #32
 8001100:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6859      	ldr	r1, [r3, #4]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_I2C_Master_Transmit+0x1e4>)
 800110e:	400b      	ands	r3, r1
 8001110:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2220      	movs	r2, #32
 8001116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e000      	b.n	8001130 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800112e:	2302      	movs	r3, #2
  }
}
 8001130:	4618      	mov	r0, r3
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	80002000 	.word	0x80002000
 800113c:	fe00e800 	.word	0xfe00e800

08001140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d103      	bne.n	800115e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d007      	beq.n	800117c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f042 0201 	orr.w	r2, r2, #1
 800117a:	619a      	str	r2, [r3, #24]
  }
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001198:	e031      	b.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011a0:	d02d      	beq.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011a2:	f7ff fba5 	bl	80008f0 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d302      	bcc.n	80011b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d122      	bne.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699a      	ldr	r2, [r3, #24]
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	4013      	ands	r3, r2
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	bf0c      	ite	eq
 80011c8:	2301      	moveq	r3, #1
 80011ca:	2300      	movne	r3, #0
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f043 0220 	orr.w	r2, r3, #32
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2220      	movs	r2, #32
 80011e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699a      	ldr	r2, [r3, #24]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4013      	ands	r3, r2
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	429a      	cmp	r2, r3
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	429a      	cmp	r2, r3
 800121a:	d0be      	beq.n	800119a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001232:	e033      	b.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f000 f87f 	bl	800133c <I2C_IsErrorOccurred>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e031      	b.n	80012ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800124e:	d025      	beq.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001250:	f7ff fb4e 	bl	80008f0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	429a      	cmp	r2, r3
 800125e:	d302      	bcc.n	8001266 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d11a      	bne.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b02      	cmp	r3, #2
 8001272:	d013      	beq.n	800129c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001278:	f043 0220 	orr.w	r2, r3, #32
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2220      	movs	r2, #32
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e007      	b.n	80012ac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d1c4      	bne.n	8001234 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80012c0:	e02f      	b.n	8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f838 	bl	800133c <I2C_IsErrorOccurred>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e02d      	b.n	8001332 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff fb0b 	bl	80008f0 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11a      	bne.n	8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d013      	beq.n	8001322 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f043 0220 	orr.w	r2, r3, #32
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2220      	movs	r2, #32
 800130a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e007      	b.n	8001332 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0320 	and.w	r3, r3, #32
 800132c:	2b20      	cmp	r3, #32
 800132e:	d1c8      	bne.n	80012c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	d068      	beq.n	800143a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2210      	movs	r2, #16
 800136e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001370:	e049      	b.n	8001406 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001378:	d045      	beq.n	8001406 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800137a:	f7ff fab9 	bl	80008f0 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	429a      	cmp	r2, r3
 8001388:	d302      	bcc.n	8001390 <I2C_IsErrorOccurred+0x54>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d13a      	bne.n	8001406 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80013a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013b2:	d121      	bne.n	80013f8 <I2C_IsErrorOccurred+0xbc>
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013ba:	d01d      	beq.n	80013f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80013bc:	7cfb      	ldrb	r3, [r7, #19]
 80013be:	2b20      	cmp	r3, #32
 80013c0:	d01a      	beq.n	80013f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80013d2:	f7ff fa8d 	bl	80008f0 <HAL_GetTick>
 80013d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013d8:	e00e      	b.n	80013f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80013da:	f7ff fa89 	bl	80008f0 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b19      	cmp	r3, #25
 80013e6:	d907      	bls.n	80013f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80013f6:	e006      	b.n	8001406 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 0320 	and.w	r3, r3, #32
 8001402:	2b20      	cmp	r3, #32
 8001404:	d1e9      	bne.n	80013da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b20      	cmp	r3, #32
 8001412:	d003      	beq.n	800141c <I2C_IsErrorOccurred+0xe0>
 8001414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001418:	2b00      	cmp	r3, #0
 800141a:	d0aa      	beq.n	8001372 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001420:	2b00      	cmp	r3, #0
 8001422:	d103      	bne.n	800142c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2220      	movs	r2, #32
 800142a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	699b      	ldr	r3, [r3, #24]
 8001440:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00b      	beq.n	8001464 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800145c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00b      	beq.n	80014a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	f043 0302 	orr.w	r3, r3, #2
 8001496:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80014a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01c      	beq.n	80014ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7ff fe45 	bl	8001140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b0d      	ldr	r3, [pc, #52]	; (80014f8 <I2C_IsErrorOccurred+0x1bc>)
 80014c2:	400b      	ands	r3, r1
 80014c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2220      	movs	r2, #32
 80014d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80014ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	817b      	strh	r3, [r7, #10]
 800150a:	4613      	mov	r3, r2
 800150c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001514:	7a7b      	ldrb	r3, [r7, #9]
 8001516:	041b      	lsls	r3, r3, #16
 8001518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800151c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	4313      	orrs	r3, r2
 8001526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800152a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	0d5b      	lsrs	r3, r3, #21
 8001536:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <I2C_TransferConfig+0x60>)
 800153c:	430b      	orrs	r3, r1
 800153e:	43db      	mvns	r3, r3
 8001540:	ea02 0103 	and.w	r1, r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	430a      	orrs	r2, r1
 800154c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800154e:	bf00      	nop
 8001550:	371c      	adds	r7, #28
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	03ff63ff 	.word	0x03ff63ff

08001560 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b20      	cmp	r3, #32
 8001574:	d138      	bne.n	80015e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001580:	2302      	movs	r3, #2
 8001582:	e032      	b.n	80015ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	; 0x24
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0201 	orr.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e000      	b.n	80015ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b20      	cmp	r3, #32
 800160a:	d139      	bne.n	8001680 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001616:	2302      	movs	r3, #2
 8001618:	e033      	b.n	8001682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2224      	movs	r2, #36	; 0x24
 8001626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001648:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0201 	orr.w	r2, r2, #1
 800166a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	e000      	b.n	8001682 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001680:	2302      	movs	r3, #2
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	f000 bc28 	b.w	8001ef4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a4:	4b94      	ldr	r3, [pc, #592]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f003 0318 	and.w	r3, r3, #24
 80016ac:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80016ae:	4b92      	ldr	r3, [pc, #584]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05b      	beq.n	800177c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	2b18      	cmp	r3, #24
 80016ce:	d114      	bne.n	80016fa <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d111      	bne.n	80016fa <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	f000 bc08 	b.w	8001ef4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80016e4:	4b84      	ldr	r3, [pc, #528]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	041b      	lsls	r3, r3, #16
 80016f2:	4981      	ldr	r1, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80016f8:	e040      	b.n	800177c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d023      	beq.n	800174a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001702:	4b7d      	ldr	r3, [pc, #500]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7c      	ldr	r2, [pc, #496]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff f8ef 	bl	80008f0 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001716:	f7ff f8eb 	bl	80008f0 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e3e5      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001728:	4b73      	ldr	r3, [pc, #460]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001730:	2b00      	cmp	r3, #0
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001734:	4b70      	ldr	r3, [pc, #448]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	041b      	lsls	r3, r3, #16
 8001742:	496d      	ldr	r1, [pc, #436]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001744:	4313      	orrs	r3, r2
 8001746:	618b      	str	r3, [r1, #24]
 8001748:	e018      	b.n	800177c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800174a:	4b6b      	ldr	r3, [pc, #428]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff f8cb 	bl	80008f0 <HAL_GetTick>
 800175a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800175e:	f7ff f8c7 	bl	80008f0 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e3c1      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001770:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f0      	bne.n	800175e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 80a0 	beq.w	80018ca <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x10c>
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	2b18      	cmp	r3, #24
 8001794:	d109      	bne.n	80017aa <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d106      	bne.n	80017aa <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 8092 	bne.w	80018ca <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e3a4      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x132>
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	e058      	b.n	8001874 <HAL_RCC_OscConfig+0x1e4>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d112      	bne.n	80017f0 <HAL_RCC_OscConfig+0x160>
 80017ca:	4b4b      	ldr	r3, [pc, #300]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a4a      	ldr	r2, [pc, #296]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	4b45      	ldr	r3, [pc, #276]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a44      	ldr	r2, [pc, #272]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e041      	b.n	8001874 <HAL_RCC_OscConfig+0x1e4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f8:	d112      	bne.n	8001820 <HAL_RCC_OscConfig+0x190>
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a3e      	ldr	r2, [pc, #248]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001800:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3b      	ldr	r2, [pc, #236]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800180c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	4b39      	ldr	r3, [pc, #228]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a38      	ldr	r2, [pc, #224]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x1e4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x1c0>
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a32      	ldr	r2, [pc, #200]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800183c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	e011      	b.n	8001874 <HAL_RCC_OscConfig+0x1e4>
 8001850:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a22      	ldr	r2, [pc, #136]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 800186e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff f838 	bl	80008f0 <HAL_GetTick>
 8001880:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001884:	f7ff f834 	bl	80008f0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	; 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e32e      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x1f4>
 80018a2:	e012      	b.n	80018ca <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f824 	bl	80008f0 <HAL_GetTick>
 80018a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80018ac:	f7ff f820 	bl	80008f0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e31a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_RCC_OscConfig+0x268>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 809a 	beq.w	8001a0c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x25a>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	2b18      	cmp	r3, #24
 80018e2:	d149      	bne.n	8001978 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d146      	bne.n	8001978 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d104      	bne.n	80018fc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e2fe      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
 80018f6:	bf00      	nop
 80018f8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d11c      	bne.n	800193c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001902:	4b9a      	ldr	r3, [pc, #616]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0218 	and.w	r2, r3, #24
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	429a      	cmp	r2, r3
 8001910:	d014      	beq.n	800193c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001912:	4b96      	ldr	r3, [pc, #600]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 0218 	bic.w	r2, r3, #24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	4993      	ldr	r1, [pc, #588]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001924:	f000 fdd0 	bl	80024c8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001928:	4b91      	ldr	r3, [pc, #580]	; (8001b70 <HAL_RCC_OscConfig+0x4e0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe ff95 	bl	800085c <HAL_InitTick>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e2db      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7fe ffd8 	bl	80008f0 <HAL_GetTick>
 8001940:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001944:	f7fe ffd4 	bl	80008f0 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e2ce      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001956:	4b85      	ldr	r3, [pc, #532]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001962:	4b82      	ldr	r3, [pc, #520]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	041b      	lsls	r3, r3, #16
 8001970:	497e      	ldr	r1, [pc, #504]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001972:	4313      	orrs	r3, r2
 8001974:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001976:	e049      	b.n	8001a0c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d02c      	beq.n	80019da <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001980:	4b7a      	ldr	r3, [pc, #488]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 0218 	bic.w	r2, r3, #24
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4977      	ldr	r1, [pc, #476]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8001992:	4b76      	ldr	r3, [pc, #472]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a75      	ldr	r2, [pc, #468]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7fe ffa7 	bl	80008f0 <HAL_GetTick>
 80019a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019a6:	f7fe ffa3 	bl	80008f0 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e29d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019b8:	4b6c      	ldr	r3, [pc, #432]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019c4:	4b69      	ldr	r3, [pc, #420]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	041b      	lsls	r3, r3, #16
 80019d2:	4966      	ldr	r1, [pc, #408]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	610b      	str	r3, [r1, #16]
 80019d8:	e018      	b.n	8001a0c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b64      	ldr	r3, [pc, #400]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a63      	ldr	r2, [pc, #396]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7fe ff83 	bl	80008f0 <HAL_GetTick>
 80019ea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019ee:	f7fe ff7f 	bl	80008f0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e279      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a00:	4b5a      	ldr	r3, [pc, #360]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1f0      	bne.n	80019ee <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0308 	and.w	r3, r3, #8
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03c      	beq.n	8001a92 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a20:	4b52      	ldr	r3, [pc, #328]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a26:	4a51      	ldr	r2, [pc, #324]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a30:	f7fe ff5e 	bl	80008f0 <HAL_GetTick>
 8001a34:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a38:	f7fe ff5a 	bl	80008f0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e254      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a4a:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ef      	beq.n	8001a38 <HAL_RCC_OscConfig+0x3a8>
 8001a58:	e01b      	b.n	8001a92 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a5a:	4b44      	ldr	r3, [pc, #272]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a60:	4a42      	ldr	r2, [pc, #264]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6a:	f7fe ff41 	bl	80008f0 <HAL_GetTick>
 8001a6e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a72:	f7fe ff3d 	bl	80008f0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e237      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1ef      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80d2 	beq.w	8001c44 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001aa0:	4b34      	ldr	r3, [pc, #208]	; (8001b74 <HAL_RCC_OscConfig+0x4e4>)
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa4:	f003 0301 	and.w	r3, r3, #1
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d118      	bne.n	8001ade <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001aac:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_RCC_OscConfig+0x4e4>)
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_RCC_OscConfig+0x4e4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab8:	f7fe ff1a 	bl	80008f0 <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac0:	f7fe ff16 	bl	80008f0 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e210      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_OscConfig+0x4e4>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d108      	bne.n	8001af8 <HAL_RCC_OscConfig+0x468>
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af6:	e074      	b.n	8001be2 <HAL_RCC_OscConfig+0x552>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d118      	bne.n	8001b32 <HAL_RCC_OscConfig+0x4a2>
 8001b00:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b08:	f023 0301 	bic.w	r3, r3, #1
 8001b0c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b26:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b28:	f023 0304 	bic.w	r3, r3, #4
 8001b2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b30:	e057      	b.n	8001be2 <HAL_RCC_OscConfig+0x552>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2b05      	cmp	r3, #5
 8001b38:	d11e      	bne.n	8001b78 <HAL_RCC_OscConfig+0x4e8>
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b50:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b60:	4a02      	ldr	r2, [pc, #8]	; (8001b6c <HAL_RCC_OscConfig+0x4dc>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x552>
 8001b6c:	44020c00 	.word	0x44020c00
 8001b70:	20000014 	.word	0x20000014
 8001b74:	44020800 	.word	0x44020800
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b85      	cmp	r3, #133	; 0x85
 8001b7e:	d118      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x522>
 8001b80:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001b82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b86:	4aa1      	ldr	r2, [pc, #644]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001b88:	f043 0304 	orr.w	r3, r3, #4
 8001b8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b90:	4b9e      	ldr	r3, [pc, #632]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001b92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b96:	4a9d      	ldr	r2, [pc, #628]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ba0:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001ba2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba6:	4a99      	ldr	r2, [pc, #612]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bb0:	e017      	b.n	8001be2 <HAL_RCC_OscConfig+0x552>
 8001bb2:	4b96      	ldr	r3, [pc, #600]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb8:	4a94      	ldr	r2, [pc, #592]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bc2:	4b92      	ldr	r3, [pc, #584]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc8:	4a90      	ldr	r2, [pc, #576]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bca:	f023 0304 	bic.w	r3, r3, #4
 8001bce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bd2:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd8:	4a8c      	ldr	r2, [pc, #560]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d016      	beq.n	8001c18 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bea:	f7fe fe81 	bl	80008f0 <HAL_GetTick>
 8001bee:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf0:	e00a      	b.n	8001c08 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf2:	f7fe fe7d 	bl	80008f0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e175      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c08:	4b80      	ldr	r3, [pc, #512]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ed      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x562>
 8001c16:	e015      	b.n	8001c44 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7fe fe6a 	bl	80008f0 <HAL_GetTick>
 8001c1c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c1e:	e00a      	b.n	8001c36 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c20:	f7fe fe66 	bl	80008f0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e15e      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c36:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1ed      	bne.n	8001c20 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d036      	beq.n	8001cbe <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d019      	beq.n	8001c8c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c58:	4b6c      	ldr	r3, [pc, #432]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a6b      	ldr	r2, [pc, #428]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c64:	f7fe fe44 	bl	80008f0 <HAL_GetTick>
 8001c68:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001c6c:	f7fe fe40 	bl	80008f0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e13a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001c7e:	4b63      	ldr	r3, [pc, #396]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x5dc>
 8001c8a:	e018      	b.n	8001cbe <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c8c:	4b5f      	ldr	r3, [pc, #380]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a5e      	ldr	r2, [pc, #376]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c98:	f7fe fe2a 	bl	80008f0 <HAL_GetTick>
 8001c9c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001ca0:	f7fe fe26 	bl	80008f0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e120      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001cb2:	4b56      	ldr	r3, [pc, #344]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8115 	beq.w	8001ef2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b18      	cmp	r3, #24
 8001ccc:	f000 80af 	beq.w	8001e2e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 8086 	bne.w	8001de6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001cda:	4b4c      	ldr	r3, [pc, #304]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4b      	ldr	r2, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001ce0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fe03 	bl	80008f0 <HAL_GetTick>
 8001cea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001cee:	f7fe fdff 	bl	80008f0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e0f9      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001d14:	f023 0303 	bic.w	r3, r3, #3
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d20:	0212      	lsls	r2, r2, #8
 8001d22:	430a      	orrs	r2, r1
 8001d24:	4939      	ldr	r1, [pc, #228]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	628b      	str	r3, [r1, #40]	; 0x28
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	025b      	lsls	r3, r3, #9
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d44:	3b01      	subs	r3, #1
 8001d46:	041b      	lsls	r3, r3, #16
 8001d48:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	3b01      	subs	r3, #1
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001d5a:	492c      	ldr	r1, [pc, #176]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d64:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d66:	f023 0310 	bic.w	r3, r3, #16
 8001d6a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d7c:	f043 0310 	orr.w	r3, r3, #16
 8001d80:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d86:	f023 020c 	bic.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	491f      	ldr	r1, [pc, #124]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	f023 0220 	bic.w	r2, r3, #32
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	491a      	ldr	r1, [pc, #104]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe fd97 	bl	80008f0 <HAL_GetTick>
 8001dc2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001dc6:	f7fe fd93 	bl	80008f0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e08d      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x736>
 8001de4:	e085      	b.n	8001ef2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a08      	ldr	r2, [pc, #32]	; (8001e0c <HAL_RCC_OscConfig+0x77c>)
 8001dec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7fe fd7d 	bl	80008f0 <HAL_GetTick>
 8001df6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001df8:	e00a      	b.n	8001e10 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fd79 	bl	80008f0 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d903      	bls.n	8001e10 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e073      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
 8001e0c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	4a36      	ldr	r2, [pc, #216]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001e22:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001e26:	f023 0303 	bic.w	r3, r3, #3
 8001e2a:	6293      	str	r3, [r2, #40]	; 0x28
 8001e2c:	e061      	b.n	8001ef2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001e2e:	4b33      	ldr	r3, [pc, #204]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e34:	4b31      	ldr	r3, [pc, #196]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d031      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f003 0203 	and.w	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d12a      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d122      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d11a      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	0a5b      	lsrs	r3, r3, #9
 8001e74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d111      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d108      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	0e1b      	lsrs	r3, r3, #24
 8001e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e024      	b.n	8001ef4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	08db      	lsrs	r3, r3, #3
 8001eb0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d01a      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001ec2:	f023 0310 	bic.w	r3, r3, #16
 8001ec6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7fe fd12 	bl	80008f0 <HAL_GetTick>
 8001ecc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001ece:	bf00      	nop
 8001ed0:	f7fe fd0e 	bl	80008f0 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d0f9      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_RCC_OscConfig+0x86c>)
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3720      	adds	r7, #32
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	44020c00 	.word	0x44020c00

08001f00 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e19e      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f14:	4b83      	ldr	r3, [pc, #524]	; (8002124 <HAL_RCC_ClockConfig+0x224>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d910      	bls.n	8001f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f22:	4b80      	ldr	r3, [pc, #512]	; (8002124 <HAL_RCC_ClockConfig+0x224>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	497e      	ldr	r1, [pc, #504]	; (8002124 <HAL_RCC_ClockConfig+0x224>)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b7c      	ldr	r3, [pc, #496]	; (8002124 <HAL_RCC_ClockConfig+0x224>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e186      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0310 	and.w	r3, r3, #16
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d012      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695a      	ldr	r2, [r3, #20]
 8001f54:	4b74      	ldr	r3, [pc, #464]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d909      	bls.n	8001f76 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001f62:	4b71      	ldr	r3, [pc, #452]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	496d      	ldr	r1, [pc, #436]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	091b      	lsrs	r3, r3, #4
 8001f8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d909      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001f94:	4b64      	ldr	r3, [pc, #400]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	4961      	ldr	r1, [pc, #388]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b5b      	ldr	r3, [pc, #364]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d908      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001fc4:	4b58      	ldr	r3, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4955      	ldr	r1, [pc, #340]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d908      	bls.n	8002004 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001ff2:	4b4d      	ldr	r3, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	494a      	ldr	r1, [pc, #296]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8002000:	4313      	orrs	r3, r2
 8002002:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8093 	beq.w	8002138 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800201a:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d121      	bne.n	800206a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e113      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d107      	bne.n	8002042 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d115      	bne.n	800206a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e107      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800204a:	4b37      	ldr	r3, [pc, #220]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0fb      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e0f3      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f023 0203 	bic.w	r2, r3, #3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	492c      	ldr	r1, [pc, #176]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8002078:	4313      	orrs	r3, r2
 800207a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207c:	f7fe fc38 	bl	80008f0 <HAL_GetTick>
 8002080:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800208c:	f7fe fc30 	bl	80008f0 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0d7      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a2:	4b21      	ldr	r3, [pc, #132]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f003 0318 	and.w	r3, r3, #24
 80020aa:	2b18      	cmp	r3, #24
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_ClockConfig+0x18c>
 80020ae:	e043      	b.n	8002138 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d112      	bne.n	80020de <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	e00a      	b.n	80020d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe fc19 	bl	80008f0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0c0      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f003 0318 	and.w	r3, r3, #24
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x1ba>
 80020dc:	e02c      	b.n	8002138 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d122      	bne.n	800212c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80020e8:	f7fe fc02 	bl	80008f0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0a9      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_ClockConfig+0x228>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 0318 	and.w	r3, r3, #24
 8002106:	2b08      	cmp	r3, #8
 8002108:	d1ee      	bne.n	80020e8 <HAL_RCC_ClockConfig+0x1e8>
 800210a:	e015      	b.n	8002138 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7fe fbf0 	bl	80008f0 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d906      	bls.n	800212c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e097      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f003 0318 	and.w	r3, r3, #24
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e9      	bne.n	800210c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d010      	beq.n	8002166 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	4b44      	ldr	r3, [pc, #272]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 030f 	and.w	r3, r3, #15
 8002150:	429a      	cmp	r2, r3
 8002152:	d208      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002154:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f023 020f 	bic.w	r2, r3, #15
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	493e      	ldr	r1, [pc, #248]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002162:	4313      	orrs	r3, r2
 8002164:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x360>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d210      	bcs.n	8002196 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002174:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_ClockConfig+0x360>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f023 020f 	bic.w	r2, r3, #15
 800217c:	4938      	ldr	r1, [pc, #224]	; (8002260 <HAL_RCC_ClockConfig+0x360>)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	4313      	orrs	r3, r2
 8002182:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_RCC_ClockConfig+0x360>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e05d      	b.n	8002252 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	4b2d      	ldr	r3, [pc, #180]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d208      	bcs.n	80021c4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d012      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021de:	429a      	cmp	r2, r3
 80021e0:	d209      	bcs.n	80021f6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	491a      	ldr	r1, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d012      	beq.n	8002228 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002210:	429a      	cmp	r2, r3
 8002212:	d209      	bcs.n	8002228 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002214:	4b11      	ldr	r3, [pc, #68]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	490e      	ldr	r1, [pc, #56]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002224:	4313      	orrs	r3, r2
 8002226:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002228:	f000 f822 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_ClockConfig+0x35c>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	490b      	ldr	r1, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x364>)
 8002238:	5ccb      	ldrb	r3, [r1, r3]
 800223a:	fa22 f303 	lsr.w	r3, r2, r3
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <HAL_RCC_ClockConfig+0x368>)
 8002240:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x36c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fb08 	bl	800085c <HAL_InitTick>
 800224c:	4603      	mov	r3, r0
 800224e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002250:	7afb      	ldrb	r3, [r7, #11]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	44020c00 	.word	0x44020c00
 8002260:	40022000 	.word	0x40022000
 8002264:	080046e4 	.word	0x080046e4
 8002268:	20000010 	.word	0x20000010
 800226c:	20000014 	.word	0x20000014

08002270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002276:	4b8c      	ldr	r3, [pc, #560]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0318 	and.w	r3, r3, #24
 800227e:	2b08      	cmp	r3, #8
 8002280:	d102      	bne.n	8002288 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_GetSysClockFreq+0x23c>)
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	e107      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002288:	4b87      	ldr	r3, [pc, #540]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 0318 	and.w	r3, r3, #24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d112      	bne.n	80022ba <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002294:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80022a0:	4b81      	ldr	r3, [pc, #516]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	4a81      	ldr	r2, [pc, #516]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x240>)
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e0f1      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80022b4:	4b7e      	ldr	r3, [pc, #504]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x240>)
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	e0ee      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ba:	4b7b      	ldr	r3, [pc, #492]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f003 0318 	and.w	r3, r3, #24
 80022c2:	2b10      	cmp	r3, #16
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c6:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x244>)
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e0e5      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022cc:	4b76      	ldr	r3, [pc, #472]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f003 0318 	and.w	r3, r3, #24
 80022d4:	2b18      	cmp	r3, #24
 80022d6:	f040 80dd 	bne.w	8002494 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80022da:	4b73      	ldr	r3, [pc, #460]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80022e4:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80022f0:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80022fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	fb02 f303 	mul.w	r3, r2, r3
 800230c:	ee07 3a90 	vmov	s15, r3
 8002310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002314:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80b7 	beq.w	800248e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d003      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0xbe>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b03      	cmp	r3, #3
 800232a:	d056      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x16a>
 800232c:	e077      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0320 	and.w	r3, r3, #32
 8002336:	2b00      	cmp	r3, #0
 8002338:	d02d      	beq.n	8002396 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800233a:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	08db      	lsrs	r3, r3, #3
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	4a5a      	ldr	r2, [pc, #360]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002360:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002364:	4b50      	ldr	r3, [pc, #320]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002374:	ed97 6a02 	vldr	s12, [r7, #8]
 8002378:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x248>
 800237c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002380:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002384:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002388:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800238c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002390:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002394:	e065      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a0:	eddf 6a46 	vldr	s13, [pc, #280]	; 80024bc <HAL_RCC_GetSysClockFreq+0x24c>
 80023a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a8:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80023b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80023bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x248>
 80023c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80023c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80023d8:	e043      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	ee07 3a90 	vmov	s15, r3
 80023e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x250>
 80023e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ec:	4b2e      	ldr	r3, [pc, #184]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 80023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80023fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002400:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x248>
 8002404:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002408:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800240c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002410:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002414:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002418:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800241c:	e021      	b.n	8002462 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002428:	eddf 6a26 	vldr	s13, [pc, #152]	; 80024c4 <HAL_RCC_GetSysClockFreq+0x254>
 800242c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002440:	ed97 6a02 	vldr	s12, [r7, #8]
 8002444:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x248>
 8002448:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800244c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002454:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002460:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x238>)
 8002464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002466:	0a5b      	lsrs	r3, r3, #9
 8002468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800246c:	3301      	adds	r3, #1
 800246e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800247a:	edd7 6a06 	vldr	s13, [r7, #24]
 800247e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002486:	ee17 3a90 	vmov	r3, s15
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e004      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	e001      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002496:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8002498:	69fb      	ldr	r3, [r7, #28]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3724      	adds	r7, #36	; 0x24
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	44020c00 	.word	0x44020c00
 80024ac:	003d0900 	.word	0x003d0900
 80024b0:	03d09000 	.word	0x03d09000
 80024b4:	007a1200 	.word	0x007a1200
 80024b8:	46000000 	.word	0x46000000
 80024bc:	4c742400 	.word	0x4c742400
 80024c0:	4af42400 	.word	0x4af42400
 80024c4:	4a742400 	.word	0x4a742400

080024c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024cc:	f7ff fed0 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80024d6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024da:	4907      	ldr	r1, [pc, #28]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x30>)
 80024dc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80024de:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <HAL_RCC_GetHCLKFreq+0x34>)
 80024e8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_RCC_GetHCLKFreq+0x34>)
 80024ec:	681b      	ldr	r3, [r3, #0]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	44020c00 	.word	0x44020c00
 80024f8:	080046e4 	.word	0x080046e4
 80024fc:	20000010 	.word	0x20000010

08002500 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002504:	b0d8      	sub	sp, #352	; 0x160
 8002506:	af00      	add	r7, sp, #0
 8002508:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800250c:	2300      	movs	r3, #0
 800250e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002512:	2300      	movs	r3, #0
 8002514:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002524:	2500      	movs	r5, #0
 8002526:	ea54 0305 	orrs.w	r3, r4, r5
 800252a:	d00b      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800252c:	4bcd      	ldr	r3, [pc, #820]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800252e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002532:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002536:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4ac9      	ldr	r2, [pc, #804]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800253e:	430b      	orrs	r3, r1
 8002540:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f002 0801 	and.w	r8, r2, #1
 8002550:	f04f 0900 	mov.w	r9, #0
 8002554:	ea58 0309 	orrs.w	r3, r8, r9
 8002558:	d042      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800255a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	2b05      	cmp	r3, #5
 8002562:	d823      	bhi.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002564:	a201      	add	r2, pc, #4	; (adr r2, 800256c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256a:	bf00      	nop
 800256c:	080025b5 	.word	0x080025b5
 8002570:	08002585 	.word	0x08002585
 8002574:	08002599 	.word	0x08002599
 8002578:	080025b5 	.word	0x080025b5
 800257c:	080025b5 	.word	0x080025b5
 8002580:	080025b5 	.word	0x080025b5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002584:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002588:	3308      	adds	r3, #8
 800258a:	4618      	mov	r0, r3
 800258c:	f001 ff42 	bl	8004414 <RCCEx_PLL2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8002596:	e00e      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002598:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800259c:	3330      	adds	r3, #48	; 0x30
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 ffd0 	bl	8004544 <RCCEx_PLL3_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80025aa:	e004      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80025b2:	e000      	b.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80025b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80025be:	4ba9      	ldr	r3, [pc, #676]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c4:	f023 0107 	bic.w	r1, r3, #7
 80025c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	4aa5      	ldr	r2, [pc, #660]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025d0:	430b      	orrs	r3, r1
 80025d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025d6:	e003      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80025dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f002 0a02 	and.w	sl, r2, #2
 80025ec:	f04f 0b00 	mov.w	fp, #0
 80025f0:	ea5a 030b 	orrs.w	r3, sl, fp
 80025f4:	f000 8088 	beq.w	8002708 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80025f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	2b28      	cmp	r3, #40	; 0x28
 8002600:	d868      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	080026dd 	.word	0x080026dd
 800260c:	080026d5 	.word	0x080026d5
 8002610:	080026d5 	.word	0x080026d5
 8002614:	080026d5 	.word	0x080026d5
 8002618:	080026d5 	.word	0x080026d5
 800261c:	080026d5 	.word	0x080026d5
 8002620:	080026d5 	.word	0x080026d5
 8002624:	080026d5 	.word	0x080026d5
 8002628:	080026ad 	.word	0x080026ad
 800262c:	080026d5 	.word	0x080026d5
 8002630:	080026d5 	.word	0x080026d5
 8002634:	080026d5 	.word	0x080026d5
 8002638:	080026d5 	.word	0x080026d5
 800263c:	080026d5 	.word	0x080026d5
 8002640:	080026d5 	.word	0x080026d5
 8002644:	080026d5 	.word	0x080026d5
 8002648:	080026c1 	.word	0x080026c1
 800264c:	080026d5 	.word	0x080026d5
 8002650:	080026d5 	.word	0x080026d5
 8002654:	080026d5 	.word	0x080026d5
 8002658:	080026d5 	.word	0x080026d5
 800265c:	080026d5 	.word	0x080026d5
 8002660:	080026d5 	.word	0x080026d5
 8002664:	080026d5 	.word	0x080026d5
 8002668:	080026dd 	.word	0x080026dd
 800266c:	080026d5 	.word	0x080026d5
 8002670:	080026d5 	.word	0x080026d5
 8002674:	080026d5 	.word	0x080026d5
 8002678:	080026d5 	.word	0x080026d5
 800267c:	080026d5 	.word	0x080026d5
 8002680:	080026d5 	.word	0x080026d5
 8002684:	080026d5 	.word	0x080026d5
 8002688:	080026dd 	.word	0x080026dd
 800268c:	080026d5 	.word	0x080026d5
 8002690:	080026d5 	.word	0x080026d5
 8002694:	080026d5 	.word	0x080026d5
 8002698:	080026d5 	.word	0x080026d5
 800269c:	080026d5 	.word	0x080026d5
 80026a0:	080026d5 	.word	0x080026d5
 80026a4:	080026d5 	.word	0x080026d5
 80026a8:	080026dd 	.word	0x080026dd
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026b0:	3308      	adds	r3, #8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 feae 	bl	8004414 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80026be:	e00e      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80026c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026c4:	3330      	adds	r3, #48	; 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f001 ff3c 	bl	8004544 <RCCEx_PLL3_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80026d2:	e004      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80026da:	e000      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80026dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026ec:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80026f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026fe:	e003      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002704:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002708:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f002 0304 	and.w	r3, r2, #4
 8002714:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002718:	2300      	movs	r3, #0
 800271a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800271e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8002722:	460b      	mov	r3, r1
 8002724:	4313      	orrs	r3, r2
 8002726:	d04e      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002728:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002732:	d02c      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002734:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002738:	d825      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273e:	d028      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002744:	d81f      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002746:	2bc0      	cmp	r3, #192	; 0xc0
 8002748:	d025      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800274a:	2bc0      	cmp	r3, #192	; 0xc0
 800274c:	d81b      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800274e:	2b80      	cmp	r3, #128	; 0x80
 8002750:	d00f      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d817      	bhi.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01f      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800275a:	2b40      	cmp	r3, #64	; 0x40
 800275c:	d113      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800275e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002762:	3308      	adds	r3, #8
 8002764:	4618      	mov	r0, r3
 8002766:	f001 fe55 	bl	8004414 <RCCEx_PLL2_Config>
 800276a:	4603      	mov	r3, r0
 800276c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002770:	e014      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002772:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002776:	3330      	adds	r3, #48	; 0x30
 8002778:	4618      	mov	r0, r3
 800277a:	f001 fee3 	bl	8004544 <RCCEx_PLL3_Config>
 800277e:	4603      	mov	r3, r0
 8002780:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002784:	e00a      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800278e:	bf00      	nop
 8002790:	e004      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002792:	bf00      	nop
 8002794:	e002      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800279a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800279c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10c      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80027a4:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027aa:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80027ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027b4:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80027b6:	430b      	orrs	r3, r1
 80027b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027bc:	e003      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80027c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f002 0308 	and.w	r3, r2, #8
 80027d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80027dc:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80027e0:	460b      	mov	r3, r1
 80027e2:	4313      	orrs	r3, r2
 80027e4:	d056      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80027e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027ec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027f0:	d031      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80027f2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80027f6:	d82a      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80027f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fc:	d02d      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80027fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002802:	d824      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002804:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002808:	d029      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800280a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800280e:	d81e      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002814:	d011      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800281a:	d818      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800281c:	2b00      	cmp	r3, #0
 800281e:	d023      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d113      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800282a:	3308      	adds	r3, #8
 800282c:	4618      	mov	r0, r3
 800282e:	f001 fdf1 	bl	8004414 <RCCEx_PLL2_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002838:	e017      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800283a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800283e:	3330      	adds	r3, #48	; 0x30
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fe7f 	bl	8004544 <RCCEx_PLL3_Config>
 8002846:	4603      	mov	r3, r0
 8002848:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800284c:	e00d      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002854:	e009      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002856:	bf00      	nop
 8002858:	e007      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800285a:	bf00      	nop
 800285c:	e005      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800285e:	bf00      	nop
 8002860:	e003      	b.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8002862:	bf00      	nop
 8002864:	44020c00 	.word	0x44020c00
        break;
 8002868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800286a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002872:	4bbb      	ldr	r3, [pc, #748]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002878:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800287c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002880:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002882:	4ab7      	ldr	r2, [pc, #732]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002884:	430b      	orrs	r3, r1
 8002886:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800288a:	e003      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002890:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f002 0310 	and.w	r3, r2, #16
 80028a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80028aa:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80028ae:	460b      	mov	r3, r1
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d053      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80028b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80028be:	d031      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80028c0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80028c4:	d82a      	bhi.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028ca:	d02d      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80028cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028d0:	d824      	bhi.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028d6:	d029      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80028d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028dc:	d81e      	bhi.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e2:	d011      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80028e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e8:	d818      	bhi.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d020      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80028ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f2:	d113      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028f8:	3308      	adds	r3, #8
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 fd8a 	bl	8004414 <RCCEx_PLL2_Config>
 8002900:	4603      	mov	r3, r0
 8002902:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002906:	e014      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800290c:	3330      	adds	r3, #48	; 0x30
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fe18 	bl	8004544 <RCCEx_PLL3_Config>
 8002914:	4603      	mov	r3, r0
 8002916:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800291a:	e00a      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002922:	e006      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002924:	bf00      	nop
 8002926:	e004      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002928:	bf00      	nop
 800292a:	e002      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800292c:	bf00      	nop
 800292e:	e000      	b.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002932:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10c      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800293a:	4b89      	ldr	r3, [pc, #548]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800293c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002940:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294a:	4a85      	ldr	r2, [pc, #532]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800294c:	430b      	orrs	r3, r1
 800294e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002952:	e003      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002954:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002958:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800295c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002964:	f002 0320 	and.w	r3, r2, #32
 8002968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002972:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002976:	460b      	mov	r3, r1
 8002978:	4313      	orrs	r3, r2
 800297a:	d053      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800297c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002986:	d031      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002988:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800298c:	d82a      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800298e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002992:	d02d      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002994:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002998:	d824      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800299a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800299e:	d029      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80029a0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80029a4:	d81e      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029aa:	d011      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80029ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029b0:	d818      	bhi.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80029b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ba:	d113      	bne.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029c0:	3308      	adds	r3, #8
 80029c2:	4618      	mov	r0, r3
 80029c4:	f001 fd26 	bl	8004414 <RCCEx_PLL2_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80029ce:	e014      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029d4:	3330      	adds	r3, #48	; 0x30
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fdb4 	bl	8004544 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80029e2:	e00a      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029ea:	e006      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80029ec:	bf00      	nop
 80029ee:	e004      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80029f0:	bf00      	nop
 80029f2:	e002      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80029f4:	bf00      	nop
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002a02:	4b57      	ldr	r3, [pc, #348]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a08:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	4a53      	ldr	r2, [pc, #332]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002a14:	430b      	orrs	r3, r1
 8002a16:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a1a:	e003      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a20:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002a30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002a3a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	d053      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a4e:	d031      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8002a50:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002a54:	d82a      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a5a:	d02d      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a60:	d824      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002a62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a66:	d029      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002a6c:	d81e      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002a6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a72:	d011      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a78:	d818      	bhi.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d020      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002a7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a82:	d113      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a88:	3308      	adds	r3, #8
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 fcc2 	bl	8004414 <RCCEx_PLL2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002a96:	e014      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a9c:	3330      	adds	r3, #48	; 0x30
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f001 fd50 	bl	8004544 <RCCEx_PLL3_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ab2:	e006      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002ab4:	bf00      	nop
 8002ab6:	e004      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002ab8:	bf00      	nop
 8002aba:	e002      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002abc:	bf00      	nop
 8002abe:	e000      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002ac0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ac2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002aca:	4b25      	ldr	r3, [pc, #148]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002acc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ad0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002ad4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	4a21      	ldr	r2, [pc, #132]	; (8002b60 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002adc:	430b      	orrs	r3, r1
 8002ade:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ae2:	e003      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ae8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002aec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002af8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002afc:	2300      	movs	r3, #0
 8002afe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b02:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002b06:	460b      	mov	r3, r1
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	d055      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002b16:	d033      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002b18:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002b1c:	d82c      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b22:	d02f      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002b24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b28:	d826      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b2e:	d02b      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002b30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b34:	d820      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3a:	d013      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d81a      	bhi.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d022      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b4a:	d115      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b50:	3308      	adds	r3, #8
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fc5e 	bl	8004414 <RCCEx_PLL2_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002b5e:	e016      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8002b60:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b68:	3330      	adds	r3, #48	; 0x30
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f001 fcea 	bl	8004544 <RCCEx_PLL3_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002b76:	e00a      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b7e:	e006      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002b80:	bf00      	nop
 8002b82:	e004      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002b84:	bf00      	nop
 8002b86:	e002      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002b88:	bf00      	nop
 8002b8a:	e000      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8002b96:	4bbb      	ldr	r3, [pc, #748]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002b98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b9c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ba4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ba6:	4ab7      	ldr	r2, [pc, #732]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bae:	e003      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bb4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002bb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002bc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002bce:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	d053      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8002bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bde:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002be2:	d031      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002be4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002be8:	d82a      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002bea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bee:	d02d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf4:	d824      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002bf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002bfa:	d029      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002bfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c00:	d81e      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002c02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c06:	d011      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002c08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0c:	d818      	bhi.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d020      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8002c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c16:	d113      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002c18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c1c:	3308      	adds	r3, #8
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fbf8 	bl	8004414 <RCCEx_PLL2_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002c2a:	e014      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fc86 	bl	8004544 <RCCEx_PLL3_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c46:	e006      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002c48:	bf00      	nop
 8002c4a:	e004      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002c4c:	bf00      	nop
 8002c4e:	e002      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002c50:	bf00      	nop
 8002c52:	e000      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002c68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6e:	4a85      	ldr	r2, [pc, #532]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c76:	e003      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c7c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002c8c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002c96:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	d055      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002cac:	d031      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002cae:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002cb2:	d82a      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cb8:	d02d      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8002cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbe:	d824      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002cc0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002cc4:	d029      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8002cc6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002cca:	d81e      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002ccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd0:	d011      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002cd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cd6:	d818      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce0:	d113      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ce2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ce6:	3308      	adds	r3, #8
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fb93 	bl	8004414 <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002cf4:	e014      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cfa:	3330      	adds	r3, #48	; 0x30
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fc21 	bl	8004544 <RCCEx_PLL3_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002d08:	e00a      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002d12:	bf00      	nop
 8002d14:	e004      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002d16:	bf00      	nop
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d20:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10d      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002d28:	4b56      	ldr	r3, [pc, #344]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d2e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8002d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3a:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d42:	e003      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002d58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002d62:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002d66:	460b      	mov	r3, r1
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	d044      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d74:	2b05      	cmp	r3, #5
 8002d76:	d823      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	08002dc9 	.word	0x08002dc9
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002dc9 	.word	0x08002dc9
 8002d94:	08002dc9 	.word	0x08002dc9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 fb38 	bl	8004414 <RCCEx_PLL2_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002daa:	e00e      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002db0:	3330      	adds	r3, #48	; 0x30
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fbc6 	bl	8004544 <RCCEx_PLL3_Config>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002dbe:	e004      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002dc6:	e000      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8002dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002dd2:	4b2c      	ldr	r3, [pc, #176]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002dd4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002dd8:	f023 0107 	bic.w	r1, r3, #7
 8002ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de4:	4a27      	ldr	r2, [pc, #156]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002de6:	430b      	orrs	r3, r1
 8002de8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002dec:	e003      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002df2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002e02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002e0c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002e10:	460b      	mov	r3, r1
 8002e12:	4313      	orrs	r3, r2
 8002e14:	d04f      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	2b50      	cmp	r3, #80	; 0x50
 8002e20:	d029      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002e22:	2b50      	cmp	r3, #80	; 0x50
 8002e24:	d823      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d027      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002e2a:	2b40      	cmp	r3, #64	; 0x40
 8002e2c:	d81f      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e2e:	2b30      	cmp	r3, #48	; 0x30
 8002e30:	d025      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8002e32:	2b30      	cmp	r3, #48	; 0x30
 8002e34:	d81b      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e36:	2b20      	cmp	r3, #32
 8002e38:	d00f      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	d817      	bhi.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d022      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002e42:	2b10      	cmp	r3, #16
 8002e44:	d113      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 fae1 	bl	8004414 <RCCEx_PLL2_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002e58:	e017      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e5e:	3330      	adds	r3, #48	; 0x30
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fb6f 	bl	8004544 <RCCEx_PLL3_Config>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002e6c:	e00d      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e74:	e009      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002e76:	bf00      	nop
 8002e78:	e007      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002e7a:	bf00      	nop
 8002e7c:	e005      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e003      	b.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002e82:	bf00      	nop
 8002e84:	44020c00 	.word	0x44020c00
        break;
 8002e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d10d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002e92:	4baf      	ldr	r3, [pc, #700]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002e94:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e98:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002e9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea4:	4aaa      	ldr	r2, [pc, #680]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002eac:	e003      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002eb2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002ec2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002ecc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	d055      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ede:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ee2:	d031      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002ee4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002ee8:	d82a      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002eea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eee:	d02d      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002ef0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef4:	d824      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002ef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002efa:	d029      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002efc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f00:	d81e      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002f02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f06:	d011      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002f08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0c:	d818      	bhi.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d020      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002f12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f16:	d113      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f1c:	3308      	adds	r3, #8
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 fa78 	bl	8004414 <RCCEx_PLL2_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002f2a:	e014      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f30:	3330      	adds	r3, #48	; 0x30
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fb06 	bl	8004544 <RCCEx_PLL3_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f46:	e006      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e004      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002f4c:	bf00      	nop
 8002f4e:	e002      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002f50:	bf00      	nop
 8002f52:	e000      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f64:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f70:	4a77      	ldr	r2, [pc, #476]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002f72:	430b      	orrs	r3, r1
 8002f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f78:	e003      	b.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f7e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002f98:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	d03d      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002fa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fae:	d01b      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8002fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fb4:	d814      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fba:	d017      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc0:	d80e      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d014      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8002fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fd0:	3330      	adds	r3, #48	; 0x30
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fab6 	bl	8004544 <RCCEx_PLL3_Config>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002fde:	e008      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002fe8:	bf00      	nop
 8002fea:	e002      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002fec:	bf00      	nop
 8002fee:	e000      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002ffa:	4b55      	ldr	r3, [pc, #340]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002ffc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003000:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300c:	4a50      	ldr	r2, [pc, #320]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800300e:	430b      	orrs	r3, r1
 8003010:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003014:	e003      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003016:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800301a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800301e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003026:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800302a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003034:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d03d      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800303e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800304a:	d01b      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800304c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003050:	d814      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003052:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003056:	d017      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800305c:	d80e      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d014      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003062:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003066:	d109      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800306c:	3330      	adds	r3, #48	; 0x30
 800306e:	4618      	mov	r0, r3
 8003070:	f001 fa68 	bl	8004544 <RCCEx_PLL3_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800307a:	e008      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003082:	e004      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003084:	bf00      	nop
 8003086:	e002      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003088:	bf00      	nop
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800308c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800308e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10d      	bne.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800309c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80030a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a8:	4a29      	ldr	r2, [pc, #164]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80030aa:	430b      	orrs	r3, r1
 80030ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80030b0:	e003      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80030c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80030d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030d4:	460b      	mov	r3, r1
 80030d6:	4313      	orrs	r3, r2
 80030d8:	d040      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80030da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030e6:	d01b      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80030e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030ec:	d814      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80030ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f2:	d017      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80030f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030f8:	d80e      	bhi.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d014      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003102:	d109      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003108:	3330      	adds	r3, #48	; 0x30
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fa1a 	bl	8004544 <RCCEx_PLL3_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003116:	e008      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800311e:	e004      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003120:	bf00      	nop
 8003122:	e002      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003124:	bf00      	nop
 8003126:	e000      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800312e:	2b00      	cmp	r3, #0
 8003130:	d110      	bne.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003134:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003138:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800313c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003144:	4a02      	ldr	r2, [pc, #8]	; (8003150 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003146:	430b      	orrs	r3, r1
 8003148:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800314e:	bf00      	nop
 8003150:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003154:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003158:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800315c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	2100      	movs	r1, #0
 8003166:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003172:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003176:	460b      	mov	r3, r1
 8003178:	4313      	orrs	r3, r2
 800317a:	d03d      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800317c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003180:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003184:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003188:	d01b      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800318a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800318e:	d814      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003194:	d017      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003196:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800319a:	d80e      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d014      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80031a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a4:	d109      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031aa:	3330      	adds	r3, #48	; 0x30
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 f9c9 	bl	8004544 <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 80031b8:	e008      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031c0:	e004      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80031c2:	bf00      	nop
 80031c4:	e002      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80031c6:	bf00      	nop
 80031c8:	e000      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80031ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10d      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80031d4:	4bbe      	ldr	r3, [pc, #760]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80031d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80031da:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80031de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031e6:	4aba      	ldr	r2, [pc, #744]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80031ee:	e003      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80031f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003204:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003208:	2300      	movs	r3, #0
 800320a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800320e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003212:	460b      	mov	r3, r1
 8003214:	4313      	orrs	r3, r2
 8003216:	d035      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003218:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800321c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003224:	d015      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003226:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800322a:	d80e      	bhi.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003234:	d109      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003236:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800323a:	3330      	adds	r3, #48	; 0x30
 800323c:	4618      	mov	r0, r3
 800323e:	f001 f981 	bl	8004544 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003258:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10d      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003260:	4b9b      	ldr	r3, [pc, #620]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003262:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003266:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800326a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800326e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003272:	4a97      	ldr	r2, [pc, #604]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003274:	430b      	orrs	r3, r1
 8003276:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800327a:	e003      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003280:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003284:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	2100      	movs	r1, #0
 800328e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800329a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800329e:	460b      	mov	r3, r1
 80032a0:	4313      	orrs	r3, r2
 80032a2:	d00e      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80032a4:	4b8a      	ldr	r3, [pc, #552]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	4a89      	ldr	r2, [pc, #548]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032ae:	61d3      	str	r3, [r2, #28]
 80032b0:	4b87      	ldr	r3, [pc, #540]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80032bc:	4a84      	ldr	r2, [pc, #528]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80032ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032d2:	2300      	movs	r3, #0
 80032d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032d8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80032dc:	460b      	mov	r3, r1
 80032de:	4313      	orrs	r3, r2
 80032e0:	d055      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80032e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032ee:	d031      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80032f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80032f4:	d82a      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d02d      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d824      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003306:	d029      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800330c:	d81e      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800330e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003312:	d011      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003318:	d818      	bhi.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d020      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800331e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003322:	d113      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003324:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003328:	3308      	adds	r3, #8
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f872 	bl	8004414 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003336:	e014      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800333c:	3330      	adds	r3, #48	; 0x30
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f900 	bl	8004544 <RCCEx_PLL3_Config>
 8003344:	4603      	mov	r3, r0
 8003346:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800334a:	e00a      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003352:	e006      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003354:	bf00      	nop
 8003356:	e004      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003358:	bf00      	nop
 800335a:	e002      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800335c:	bf00      	nop
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003362:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800336a:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800336c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003370:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800337e:	430b      	orrs	r3, r1
 8003380:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003384:	e003      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800338a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800338e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800339a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4313      	orrs	r3, r2
 80033ac:	d055      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 80033ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033b6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80033ba:	d031      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80033bc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80033c0:	d82a      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80033c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c6:	d02d      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80033c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033cc:	d824      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80033ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d2:	d029      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80033d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033d8:	d81e      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80033da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033de:	d011      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80033e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033e4:	d818      	bhi.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d020      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80033ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ee:	d113      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f4:	3308      	adds	r3, #8
 80033f6:	4618      	mov	r0, r3
 80033f8:	f001 f80c 	bl	8004414 <RCCEx_PLL2_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003402:	e014      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003408:	3330      	adds	r3, #48	; 0x30
 800340a:	4618      	mov	r0, r3
 800340c:	f001 f89a 	bl	8004544 <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8003416:	e00a      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800341e:	e006      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003420:	bf00      	nop
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003424:	bf00      	nop
 8003426:	e002      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8003428:	bf00      	nop
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800342c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10d      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003438:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800343c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003440:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003444:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003448:	4a21      	ldr	r2, [pc, #132]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800344a:	430b      	orrs	r3, r1
 800344c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003450:	e003      	b.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003456:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800345a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	2100      	movs	r1, #0
 8003464:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003474:	460b      	mov	r3, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	d057      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800347a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800347e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003482:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003486:	d033      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8003488:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800348c:	d82c      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800348e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003492:	d02f      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8003494:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003498:	d826      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800349a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800349e:	d02b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80034a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034a4:	d820      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80034a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034aa:	d013      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80034ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034b0:	d81a      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d022      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80034b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ba:	d115      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c0:	3308      	adds	r3, #8
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 ffa6 	bl	8004414 <RCCEx_PLL2_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80034ce:	e016      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80034d0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034d8:	3330      	adds	r3, #48	; 0x30
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 f832 	bl	8004544 <RCCEx_PLL3_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80034e6:	e00a      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034ee:	e006      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80034f0:	bf00      	nop
 80034f2:	e004      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80034f4:	bf00      	nop
 80034f6:	e002      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80034f8:	bf00      	nop
 80034fa:	e000      	b.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 80034fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10d      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003506:	4bbb      	ldr	r3, [pc, #748]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003508:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800350c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003510:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003518:	4ab6      	ldr	r2, [pc, #728]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800351a:	430b      	orrs	r3, r1
 800351c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003526:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800352a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	2100      	movs	r1, #0
 8003534:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003540:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d055      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800354a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800354e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003552:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003556:	d031      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003558:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800355c:	d82a      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800355e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003562:	d02d      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003568:	d824      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800356a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800356e:	d029      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003574:	d81e      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800357a:	d011      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800357c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003580:	d818      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d020      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8003586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800358a:	d113      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800358c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003590:	3308      	adds	r3, #8
 8003592:	4618      	mov	r0, r3
 8003594:	f000 ff3e 	bl	8004414 <RCCEx_PLL2_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800359e:	e014      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035a4:	3330      	adds	r3, #48	; 0x30
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 ffcc 	bl	8004544 <RCCEx_PLL3_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80035b2:	e00a      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035ba:	e006      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80035bc:	bf00      	nop
 80035be:	e004      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80035c0:	bf00      	nop
 80035c2:	e002      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80035c4:	bf00      	nop
 80035c6:	e000      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80035c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80035d2:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80035d8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80035dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035e4:	4a83      	ldr	r2, [pc, #524]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80035f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	2100      	movs	r1, #0
 8003600:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800360c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003610:	460b      	mov	r3, r1
 8003612:	4313      	orrs	r3, r2
 8003614:	d055      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800361a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800361e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003622:	d031      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003624:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003628:	d82a      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800362a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800362e:	d02d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8003630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003634:	d824      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003636:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800363a:	d029      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800363c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003640:	d81e      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003642:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003646:	d011      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800364c:	d818      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d020      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8003652:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003656:	d113      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800365c:	3308      	adds	r3, #8
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fed8 	bl	8004414 <RCCEx_PLL2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800366a:	e014      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800366c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003670:	3330      	adds	r3, #48	; 0x30
 8003672:	4618      	mov	r0, r3
 8003674:	f000 ff66 	bl	8004544 <RCCEx_PLL3_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800367e:	e00a      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003686:	e006      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003688:	bf00      	nop
 800368a:	e004      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800368c:	bf00      	nop
 800368e:	e002      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003690:	bf00      	nop
 8003692:	e000      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003696:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800369e:	4b55      	ldr	r3, [pc, #340]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80036a4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80036a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036b0:	4a50      	ldr	r2, [pc, #320]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80036b8:	e003      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036be:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80036c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ca:	2100      	movs	r1, #0
 80036cc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80036d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80036dc:	460b      	mov	r3, r1
 80036de:	4313      	orrs	r3, r2
 80036e0:	d055      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80036e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036e6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ee:	d031      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80036f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036f4:	d82a      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d02d      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80036fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003700:	d824      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003706:	d029      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800370c:	d81e      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003712:	d011      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003718:	d818      	bhi.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d020      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800371e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003722:	d113      	bne.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003724:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003728:	3308      	adds	r3, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fe72 	bl	8004414 <RCCEx_PLL2_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003736:	e014      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373c:	3330      	adds	r3, #48	; 0x30
 800373e:	4618      	mov	r0, r3
 8003740:	f000 ff00 	bl	8004544 <RCCEx_PLL3_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800374a:	e00a      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003752:	e006      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003754:	bf00      	nop
 8003756:	e004      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003758:	bf00      	nop
 800375a:	e002      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003760:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003762:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800376c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003770:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003774:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003778:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800377c:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800377e:	430b      	orrs	r3, r1
 8003780:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800378a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800378e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003796:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800379a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d055      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80037ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037ba:	d035      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80037bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037c0:	d82e      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80037c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037c6:	d031      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80037c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037cc:	d828      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80037ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d2:	d01b      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80037d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037d8:	d822      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80037de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80037e4:	e01c      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e6:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	4a02      	ldr	r2, [pc, #8]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80037ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80037f2:	e01c      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80037f4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037fc:	3308      	adds	r3, #8
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fe08 	bl	8004414 <RCCEx_PLL2_Config>
 8003804:	4603      	mov	r3, r0
 8003806:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800380a:	e010      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003810:	3330      	adds	r3, #48	; 0x30
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fe96 	bl	8004544 <RCCEx_PLL3_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800381e:	e006      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003826:	e002      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003828:	bf00      	nop
 800382a:	e000      	b.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800382c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10d      	bne.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003836:	4bc3      	ldr	r3, [pc, #780]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800383c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003844:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003848:	4abe      	ldr	r2, [pc, #760]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800384a:	430b      	orrs	r3, r1
 800384c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003852:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003856:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800385a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003862:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800386a:	2300      	movs	r3, #0
 800386c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003870:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003874:	460b      	mov	r3, r1
 8003876:	4313      	orrs	r3, r2
 8003878:	d051      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800387a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800387e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003886:	d033      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003888:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800388c:	d82c      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800388e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003892:	d02d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003894:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003898:	d826      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800389a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800389e:	d019      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80038a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a4:	d820      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80038aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038ae:	d007      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80038b0:	e01a      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b2:	4ba4      	ldr	r3, [pc, #656]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	4aa3      	ldr	r2, [pc, #652]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80038b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038bc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038be:	e018      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038c4:	3308      	adds	r3, #8
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fda4 	bl	8004414 <RCCEx_PLL2_Config>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038d2:	e00e      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d8:	3330      	adds	r3, #48	; 0x30
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fe32 	bl	8004544 <RCCEx_PLL3_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80038fa:	4b92      	ldr	r3, [pc, #584]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80038fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003900:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003904:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003908:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800390c:	4a8d      	ldr	r2, [pc, #564]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003914:	e003      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003916:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800391a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800391e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800392a:	67bb      	str	r3, [r7, #120]	; 0x78
 800392c:	2300      	movs	r3, #0
 800392e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003930:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003934:	460b      	mov	r3, r1
 8003936:	4313      	orrs	r3, r2
 8003938:	d032      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800393a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800393e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003942:	2b05      	cmp	r3, #5
 8003944:	d80f      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003946:	2b03      	cmp	r3, #3
 8003948:	d211      	bcs.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800394a:	2b01      	cmp	r3, #1
 800394c:	d911      	bls.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800394e:	2b02      	cmp	r3, #2
 8003950:	d109      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003956:	3308      	adds	r3, #8
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fd5b 	bl	8004414 <RCCEx_PLL2_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10d      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800397c:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800397e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003982:	f023 0107 	bic.w	r1, r3, #7
 8003986:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800398a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800398e:	4a6d      	ldr	r2, [pc, #436]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003990:	430b      	orrs	r3, r1
 8003992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003996:	e003      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800399c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80039a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	2100      	movs	r1, #0
 80039aa:	6739      	str	r1, [r7, #112]	; 0x70
 80039ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039b0:	677b      	str	r3, [r7, #116]	; 0x74
 80039b2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80039b6:	460b      	mov	r3, r1
 80039b8:	4313      	orrs	r3, r2
 80039ba:	d024      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80039bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d005      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039d2:	e002      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80039d4:	bf00      	nop
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80039e2:	4b58      	ldr	r3, [pc, #352]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039e8:	f023 0108 	bic.w	r1, r3, #8
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039f4:	4a53      	ldr	r2, [pc, #332]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a02:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a14:	2300      	movs	r3, #0
 8003a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	f000 80b9 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a30:	f7fc ff5e 	bl	80008f0 <HAL_GetTick>
 8003a34:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a38:	e00b      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fc ff59 	bl	80008f0 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d903      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a50:	e005      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003a52:	4b3d      	ldr	r3, [pc, #244]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ed      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8003a5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 8093 	bne.w	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003a76:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d023      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003a7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a82:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8003a86:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01b      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a9c:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa2:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ab2:	4a24      	ldr	r2, [pc, #144]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003abe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ac6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d019      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fc ff0d 	bl	80008f0 <HAL_GetTick>
 8003ad6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ada:	e00d      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fc ff08 	bl	80008f0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	f241 3388 	movw	r3, #5000	; 0x1388
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d903      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003af6:	e006      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ea      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003b06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d13a      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b12:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b1e:	d115      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b2c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b36:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b3a:	4a02      	ldr	r2, [pc, #8]	; (8003b44 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	61d3      	str	r3, [r2, #28]
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8003b42:	bf00      	nop
 8003b44:	44020c00 	.word	0x44020c00
 8003b48:	44020800 	.word	0x44020800
 8003b4c:	4b9f      	ldr	r3, [pc, #636]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	4a9e      	ldr	r2, [pc, #632]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b56:	61d3      	str	r3, [r2, #28]
 8003b58:	4b9c      	ldr	r3, [pc, #624]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b5e:	4a9b      	ldr	r2, [pc, #620]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b68:	4b98      	ldr	r3, [pc, #608]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b6a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b72:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7a:	4a94      	ldr	r2, [pc, #592]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b82:	e008      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b88:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003ba2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d035      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003bba:	2b30      	cmp	r3, #48	; 0x30
 8003bbc:	d014      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003bbe:	2b30      	cmp	r3, #48	; 0x30
 8003bc0:	d80e      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d012      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d80a      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d010      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd2:	4b7e      	ldr	r3, [pc, #504]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	4a7d      	ldr	r2, [pc, #500]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bdc:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bde:	e008      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003be6:	e004      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003be8:	bf00      	nop
 8003bea:	e002      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003bec:	bf00      	nop
 8003bee:	e000      	b.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003bfa:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c08:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003c0c:	4a6f      	ldr	r2, [pc, #444]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c30:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d033      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003c46:	2b40      	cmp	r3, #64	; 0x40
 8003c48:	d007      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003c4a:	e010      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4c:	4b5f      	ldr	r3, [pc, #380]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c56:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003c58:	e00d      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c5e:	3308      	adds	r3, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 fbd7 	bl	8004414 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c76:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003c7e:	4b53      	ldr	r3, [pc, #332]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c84:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003c88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003c90:	4a4e      	ldr	r2, [pc, #312]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c98:	e003      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c9e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ca2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003cae:	653b      	str	r3, [r7, #80]	; 0x50
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	d033      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003cbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8003cca:	2b80      	cmp	r3, #128	; 0x80
 8003ccc:	d007      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003cce:	e010      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd0:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	4a3d      	ldr	r2, [pc, #244]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cda:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003cdc:	e00d      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb95 	bl	8004414 <RCCEx_PLL2_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003cf0:	e003      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003d02:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d10:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003d14:	4a2d      	ldr	r2, [pc, #180]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003d32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d34:	2300      	movs	r3, #0
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	d04a      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d827      	bhi.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d69 	.word	0x08003d69
 8003d58:	08003d77 	.word	0x08003d77
 8003d5c:	08003d8b 	.word	0x08003d8b
 8003d60:	08003da7 	.word	0x08003da7
 8003d64:	08003da7 	.word	0x08003da7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d72:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d74:	e018      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7a:	3308      	adds	r3, #8
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fb49 	bl	8004414 <RCCEx_PLL2_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d88:	e00e      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d8e:	3330      	adds	r3, #48	; 0x30
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fbd7 	bl	8004544 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003d9c:	e004      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003da4:	e000      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8003da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10f      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db6:	f023 0107 	bic.w	r1, r3, #7
 8003dba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc2:	4a02      	ldr	r2, [pc, #8]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003dc4:	430b      	orrs	r3, r1
 8003dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dca:	e005      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003dcc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
 8003de6:	2300      	movs	r3, #0
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003dee:	460b      	mov	r3, r1
 8003df0:	4313      	orrs	r3, r2
 8003df2:	f000 8081 	beq.w	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d85f      	bhi.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e8d 	.word	0x08003e8d
 8003e0c:	08003ec3 	.word	0x08003ec3
 8003e10:	08003ec3 	.word	0x08003ec3
 8003e14:	08003ec3 	.word	0x08003ec3
 8003e18:	08003ec3 	.word	0x08003ec3
 8003e1c:	08003ec3 	.word	0x08003ec3
 8003e20:	08003ec3 	.word	0x08003ec3
 8003e24:	08003ec3 	.word	0x08003ec3
 8003e28:	08003e9b 	.word	0x08003e9b
 8003e2c:	08003ec3 	.word	0x08003ec3
 8003e30:	08003ec3 	.word	0x08003ec3
 8003e34:	08003ec3 	.word	0x08003ec3
 8003e38:	08003ec3 	.word	0x08003ec3
 8003e3c:	08003ec3 	.word	0x08003ec3
 8003e40:	08003ec3 	.word	0x08003ec3
 8003e44:	08003ec3 	.word	0x08003ec3
 8003e48:	08003eaf 	.word	0x08003eaf
 8003e4c:	08003ec3 	.word	0x08003ec3
 8003e50:	08003ec3 	.word	0x08003ec3
 8003e54:	08003ec3 	.word	0x08003ec3
 8003e58:	08003ec3 	.word	0x08003ec3
 8003e5c:	08003ec3 	.word	0x08003ec3
 8003e60:	08003ec3 	.word	0x08003ec3
 8003e64:	08003ec3 	.word	0x08003ec3
 8003e68:	08003ecb 	.word	0x08003ecb
 8003e6c:	08003ec3 	.word	0x08003ec3
 8003e70:	08003ec3 	.word	0x08003ec3
 8003e74:	08003ec3 	.word	0x08003ec3
 8003e78:	08003ec3 	.word	0x08003ec3
 8003e7c:	08003ec3 	.word	0x08003ec3
 8003e80:	08003ec3 	.word	0x08003ec3
 8003e84:	08003ec3 	.word	0x08003ec3
 8003e88:	08003ecb 	.word	0x08003ecb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4bab      	ldr	r3, [pc, #684]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	4aaa      	ldr	r2, [pc, #680]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e96:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003e98:	e018      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fab7 	bl	8004414 <RCCEx_PLL2_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003eac:	e00e      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eb2:	3330      	adds	r3, #48	; 0x30
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 fb45 	bl	8004544 <RCCEx_PLL3_Config>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003ec0:	e004      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003ed4:	4b99      	ldr	r3, [pc, #612]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eda:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ede:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ee6:	4a95      	ldr	r2, [pc, #596]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ef4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f06:	2300      	movs	r3, #0
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4313      	orrs	r3, r2
 8003f12:	d04e      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f26:	d827      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003f28:	2bc0      	cmp	r3, #192	; 0xc0
 8003f2a:	d02b      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8003f2c:	2bc0      	cmp	r3, #192	; 0xc0
 8003f2e:	d823      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003f30:	2b80      	cmp	r3, #128	; 0x80
 8003f32:	d017      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d81f      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8003f3c:	2b40      	cmp	r3, #64	; 0x40
 8003f3e:	d007      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8003f40:	e01a      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f42:	4b7e      	ldr	r3, [pc, #504]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	4a7d      	ldr	r2, [pc, #500]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f4c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003f4e:	e01a      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f54:	3308      	adds	r3, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 fa5c 	bl	8004414 <RCCEx_PLL2_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003f62:	e010      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f68:	3330      	adds	r3, #48	; 0x30
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 faea 	bl	8004544 <RCCEx_PLL3_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003f76:	e006      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f7e:	e002      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003f80:	bf00      	nop
 8003f82:	e000      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003f84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10d      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003f8e:	4b6b      	ldr	r3, [pc, #428]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f94:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fa0:	4a66      	ldr	r2, [pc, #408]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fa8:	e003      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003fb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	d055      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fd2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003fd6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fda:	d031      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8003fdc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003fe0:	d82a      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d02d      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fec:	d824      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003fee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff2:	d029      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8003ff4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ff8:	d81e      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	d011      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004004:	d818      	bhi.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d020      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800400a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800400e:	d113      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004010:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004014:	3308      	adds	r3, #8
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f9fc 	bl	8004414 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004022:	e014      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004024:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004028:	3330      	adds	r3, #48	; 0x30
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fa8a 	bl	8004544 <RCCEx_PLL3_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004036:	e00a      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800403e:	e006      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004040:	bf00      	nop
 8004042:	e004      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004044:	bf00      	nop
 8004046:	e002      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004048:	bf00      	nop
 800404a:	e000      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800404c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004056:	4b39      	ldr	r3, [pc, #228]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004064:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004068:	4a34      	ldr	r2, [pc, #208]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800406a:	430b      	orrs	r3, r1
 800406c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004070:	e003      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004072:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004076:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800407a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004086:	62bb      	str	r3, [r7, #40]	; 0x28
 8004088:	2300      	movs	r3, #0
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800408c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004090:	460b      	mov	r3, r1
 8004092:	4313      	orrs	r3, r2
 8004094:	d058      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004096:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800409a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800409e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040a2:	d031      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80040a4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80040a8:	d82a      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ae:	d02d      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 80040b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b4:	d824      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80040b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ba:	d029      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80040bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c0:	d81e      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d011      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040cc:	d818      	bhi.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d113      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040dc:	3308      	adds	r3, #8
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f998 	bl	8004414 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80040ea:	e014      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040f0:	3330      	adds	r3, #48	; 0x30
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fa26 	bl	8004544 <RCCEx_PLL3_Config>
 80040f8:	4603      	mov	r3, r0
 80040fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80040fe:	e00a      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004106:	e006      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004108:	bf00      	nop
 800410a:	e004      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800410c:	bf00      	nop
 800410e:	e002      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004110:	bf00      	nop
 8004112:	e000      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004114:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004116:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004124:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800412c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004130:	4902      	ldr	r1, [pc, #8]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004138:	e006      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800413a:	bf00      	nop
 800413c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004144:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	2100      	movs	r1, #0
 8004152:	6239      	str	r1, [r7, #32]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d055      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004164:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800416c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004170:	d031      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004172:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004176:	d82a      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800417c:	d02d      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800417e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004182:	d824      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004184:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004188:	d029      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800418a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800418e:	d81e      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004194:	d011      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419a:	d818      	bhi.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d020      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d113      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041aa:	3308      	adds	r3, #8
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 f931 	bl	8004414 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041b8:	e014      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041be:	3330      	adds	r3, #48	; 0x30
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 f9bf 	bl	8004544 <RCCEx_PLL3_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041cc:	e00a      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80041d6:	bf00      	nop
 80041d8:	e004      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80041da:	bf00      	nop
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80041e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80041ec:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80041ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f2:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80041f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041fe:	4984      	ldr	r1, [pc, #528]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800420c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004210:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	2100      	movs	r1, #0
 800421a:	61b9      	str	r1, [r7, #24]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004226:	460b      	mov	r3, r1
 8004228:	4313      	orrs	r3, r2
 800422a:	d03d      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 800422c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004230:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004234:	2b03      	cmp	r3, #3
 8004236:	d81c      	bhi.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	0800427b 	.word	0x0800427b
 8004244:	08004251 	.word	0x08004251
 8004248:	0800425f 	.word	0x0800425f
 800424c:	0800427b 	.word	0x0800427b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004250:	4b6f      	ldr	r3, [pc, #444]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	4a6e      	ldr	r2, [pc, #440]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800425c:	e00e      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800425e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004262:	3308      	adds	r3, #8
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f8d5 	bl	8004414 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004270:	e004      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004278:	e000      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800427a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800427c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10d      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004284:	4b62      	ldr	r3, [pc, #392]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800428a:	f023 0203 	bic.w	r2, r3, #3
 800428e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004292:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004296:	495e      	ldr	r1, [pc, #376]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800429e:	e003      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	2100      	movs	r1, #0
 80042b2:	6139      	str	r1, [r7, #16]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	617b      	str	r3, [r7, #20]
 80042ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80042be:	460b      	mov	r3, r1
 80042c0:	4313      	orrs	r3, r2
 80042c2:	d03a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80042c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80042cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d0:	d00e      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d6:	d815      	bhi.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d017      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80042dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e0:	d110      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e2:	4b4b      	ldr	r3, [pc, #300]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	4a4a      	ldr	r2, [pc, #296]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80042e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ec:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80042ee:	e00e      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042f4:	3308      	adds	r3, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f88c 	bl	8004414 <RCCEx_PLL2_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004302:	e004      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800430a:	e000      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 800430c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10d      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800431c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004320:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004324:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004328:	4939      	ldr	r1, [pc, #228]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004332:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004336:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800433a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	2100      	movs	r1, #0
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	f003 0310 	and.w	r3, r3, #16
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d038      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800435a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	d01b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004362:	2b30      	cmp	r3, #48	; 0x30
 8004364:	d815      	bhi.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004366:	2b10      	cmp	r3, #16
 8004368:	d002      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800436a:	2b20      	cmp	r3, #32
 800436c:	d007      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800436e:	e010      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800437a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800437c:	e00e      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800437e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004382:	3330      	adds	r3, #48	; 0x30
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f8dd 	bl	8004544 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004390:	e004      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004398:	e000      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800439a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80043a4:	4b1a      	ldr	r3, [pc, #104]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80043aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80043b6:	4916      	ldr	r1, [pc, #88]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80043be:	e003      	b.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d0:	2100      	movs	r1, #0
 80043d2:	6039      	str	r1, [r7, #0]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043de:	460b      	mov	r3, r1
 80043e0:	4313      	orrs	r3, r2
 80043e2:	d00c      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043f2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80043f6:	4906      	ldr	r1, [pc, #24]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80043fe:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8004402:	4618      	mov	r0, r3
 8004404:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	44020c00 	.word	0x44020c00

08004414 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800441c:	4b48      	ldr	r3, [pc, #288]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a47      	ldr	r2, [pc, #284]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 8004422:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004426:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004428:	f7fc fa62 	bl	80008f0 <HAL_GetTick>
 800442c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800442e:	e008      	b.n	8004442 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004430:	f7fc fa5e 	bl	80008f0 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e07a      	b.n	8004538 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004442:	4b3f      	ldr	r3, [pc, #252]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800444e:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6811      	ldr	r1, [r2, #0]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6852      	ldr	r2, [r2, #4]
 8004462:	0212      	lsls	r2, r2, #8
 8004464:	430a      	orrs	r2, r1
 8004466:	4936      	ldr	r1, [pc, #216]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	3b01      	subs	r3, #1
 8004472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	3b01      	subs	r3, #1
 800447c:	025b      	lsls	r3, r3, #9
 800447e:	b29b      	uxth	r3, r3
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	3b01      	subs	r3, #1
 8004488:	041b      	lsls	r3, r3, #16
 800448a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800448e:	431a      	orrs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	3b01      	subs	r3, #1
 8004496:	061b      	lsls	r3, r3, #24
 8004498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800449c:	4928      	ldr	r1, [pc, #160]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80044a2:	4b27      	ldr	r3, [pc, #156]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f023 020c 	bic.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	4924      	ldr	r1, [pc, #144]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	f023 0220 	bic.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	491f      	ldr	r1, [pc, #124]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80044c6:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	491c      	ldr	r1, [pc, #112]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80044d4:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044da:	f023 0310 	bic.w	r3, r3, #16
 80044de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80044e0:	4b17      	ldr	r3, [pc, #92]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6a12      	ldr	r2, [r2, #32]
 80044f0:	00d2      	lsls	r2, r2, #3
 80044f2:	4913      	ldr	r1, [pc, #76]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80044f8:	4b11      	ldr	r3, [pc, #68]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fc:	4a10      	ldr	r2, [pc, #64]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 80044fe:	f043 0310 	orr.w	r3, r3, #16
 8004502:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004504:	4b0e      	ldr	r3, [pc, #56]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 800450a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800450e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004510:	f7fc f9ee 	bl	80008f0 <HAL_GetTick>
 8004514:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004516:	e008      	b.n	800452a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004518:	f7fc f9ea 	bl	80008f0 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b02      	cmp	r3, #2
 8004524:	d901      	bls.n	800452a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <RCCEx_PLL2_Config+0x12c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d0f0      	beq.n	8004518 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0

}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	44020c00 	.word	0x44020c00

08004544 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800454c:	4b48      	ldr	r3, [pc, #288]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a47      	ldr	r2, [pc, #284]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004558:	f7fc f9ca 	bl	80008f0 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800455e:	e008      	b.n	8004572 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004560:	f7fc f9c6 	bl	80008f0 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e07a      	b.n	8004668 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004572:	4b3f      	ldr	r3, [pc, #252]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800457e:	4b3c      	ldr	r3, [pc, #240]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6811      	ldr	r1, [r2, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6852      	ldr	r2, [r2, #4]
 8004592:	0212      	lsls	r2, r2, #8
 8004594:	430a      	orrs	r2, r1
 8004596:	4936      	ldr	r1, [pc, #216]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	630b      	str	r3, [r1, #48]	; 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	025b      	lsls	r3, r3, #9
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045cc:	4928      	ldr	r1, [pc, #160]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045d2:	4b27      	ldr	r3, [pc, #156]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d6:	f023 020c 	bic.w	r2, r3, #12
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	4924      	ldr	r1, [pc, #144]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80045e4:	4b22      	ldr	r3, [pc, #136]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f023 0220 	bic.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	491f      	ldr	r1, [pc, #124]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 80045f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	491c      	ldr	r1, [pc, #112]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8004604:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800460a:	f023 0310 	bic.w	r3, r3, #16
 800460e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004614:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004618:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6a12      	ldr	r2, [r2, #32]
 8004620:	00d2      	lsls	r2, r2, #3
 8004622:	4913      	ldr	r1, [pc, #76]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004624:	4313      	orrs	r3, r2
 8004626:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	4a10      	ldr	r2, [pc, #64]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800462e:	f043 0310 	orr.w	r3, r3, #16
 8004632:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8004634:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a0d      	ldr	r2, [pc, #52]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800463a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800463e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004640:	f7fc f956 	bl	80008f0 <HAL_GetTick>
 8004644:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004646:	e008      	b.n	800465a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004648:	f7fc f952 	bl	80008f0 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	2b02      	cmp	r3, #2
 8004654:	d901      	bls.n	800465a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e006      	b.n	8004668 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <RCCEx_PLL3_Config+0x12c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0f0      	beq.n	8004648 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	44020c00 	.word	0x44020c00

08004674 <memset>:
 8004674:	4402      	add	r2, r0
 8004676:	4603      	mov	r3, r0
 8004678:	4293      	cmp	r3, r2
 800467a:	d100      	bne.n	800467e <memset+0xa>
 800467c:	4770      	bx	lr
 800467e:	f803 1b01 	strb.w	r1, [r3], #1
 8004682:	e7f9      	b.n	8004678 <memset+0x4>

08004684 <__libc_init_array>:
 8004684:	b570      	push	{r4, r5, r6, lr}
 8004686:	4d0d      	ldr	r5, [pc, #52]	; (80046bc <__libc_init_array+0x38>)
 8004688:	2600      	movs	r6, #0
 800468a:	4c0d      	ldr	r4, [pc, #52]	; (80046c0 <__libc_init_array+0x3c>)
 800468c:	1b64      	subs	r4, r4, r5
 800468e:	10a4      	asrs	r4, r4, #2
 8004690:	42a6      	cmp	r6, r4
 8004692:	d109      	bne.n	80046a8 <__libc_init_array+0x24>
 8004694:	4d0b      	ldr	r5, [pc, #44]	; (80046c4 <__libc_init_array+0x40>)
 8004696:	2600      	movs	r6, #0
 8004698:	4c0b      	ldr	r4, [pc, #44]	; (80046c8 <__libc_init_array+0x44>)
 800469a:	f000 f817 	bl	80046cc <_init>
 800469e:	1b64      	subs	r4, r4, r5
 80046a0:	10a4      	asrs	r4, r4, #2
 80046a2:	42a6      	cmp	r6, r4
 80046a4:	d105      	bne.n	80046b2 <__libc_init_array+0x2e>
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ac:	3601      	adds	r6, #1
 80046ae:	4798      	blx	r3
 80046b0:	e7ee      	b.n	8004690 <__libc_init_array+0xc>
 80046b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b6:	3601      	adds	r6, #1
 80046b8:	4798      	blx	r3
 80046ba:	e7f2      	b.n	80046a2 <__libc_init_array+0x1e>
 80046bc:	080046f4 	.word	0x080046f4
 80046c0:	080046f4 	.word	0x080046f4
 80046c4:	080046f4 	.word	0x080046f4
 80046c8:	080046f8 	.word	0x080046f8

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
