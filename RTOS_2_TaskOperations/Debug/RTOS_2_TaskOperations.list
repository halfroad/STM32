
RTOS_2_TaskOperations.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d84  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003030  08003030  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003030  08003030  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000068  080030a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080030a0  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc53  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000189b  00000000  00000000  0002cd34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  0002e5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000938  00000000  00000000  0002f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030899  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eb1a  00000000  00000000  000603a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00137e64  00000000  00000000  0006eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a10  00000000  00000000  001a6d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001aa738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000068 	.word	0x20000068
 8000268:	00000000 	.word	0x00000000
 800026c:	08002fb8 	.word	0x08002fb8

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	2000006c 	.word	0x2000006c
 8000288:	08002fb8 	.word	0x08002fb8

0800028c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000290:	f000 fa96 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000294:	f000 f820 	bl	80002d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MEMORYMAP_Init();
 8000298:	f000 f876 	bl	8000388 <MX_MEMORYMAP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("The count is %d\n", count);
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <main+0x40>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4619      	mov	r1, r3
 80002a2:	480b      	ldr	r0, [pc, #44]	; (80002d0 <main+0x44>)
 80002a4:	f002 f8b2 	bl	800240c <iprintf>

	  count ++;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <main+0x40>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	3301      	adds	r3, #1
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <main+0x40>)
 80002b2:	701a      	strb	r2, [r3, #0]

	  fflush(stdout);
 80002b4:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <main+0x48>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 ffe2 	bl	8002284 <fflush>
	  HAL_Delay(1000);
 80002c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c4:	f000 fac2 	bl	800084c <HAL_Delay>
	  printf("The count is %d\n", count);
 80002c8:	e7e8      	b.n	800029c <main+0x10>
 80002ca:	bf00      	nop
 80002cc:	20000084 	.word	0x20000084
 80002d0:	08002fd0 	.word	0x08002fd0
 80002d4:	20000064 	.word	0x20000064

080002d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b09c      	sub	sp, #112	; 0x70
 80002dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002de:	f107 0320 	add.w	r3, r7, #32
 80002e2:	2250      	movs	r2, #80	; 0x50
 80002e4:	2100      	movs	r1, #0
 80002e6:	4618      	mov	r0, r3
 80002e8:	f002 f8e5 	bl	80024b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
 80002fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <SystemClock_Config+0xac>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	4a20      	ldr	r2, [pc, #128]	; (8000384 <SystemClock_Config+0xac>)
 8000304:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000308:	6113      	str	r3, [r2, #16]
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <SystemClock_Config+0xac>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000316:	bf00      	nop
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <SystemClock_Config+0xac>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	2b08      	cmp	r3, #8
 8000322:	d1f9      	bne.n	8000318 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000324:	2302      	movs	r3, #2
 8000326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800032c:	2308      	movs	r3, #8
 800032e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000330:	2340      	movs	r3, #64	; 0x40
 8000332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000334:	2300      	movs	r3, #0
 8000336:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0320 	add.w	r3, r7, #32
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fb89 	bl	8000a54 <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000348:	f000 f838 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	231f      	movs	r3, #31
 800034e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	2101      	movs	r1, #1
 800036a:	4618      	mov	r0, r3
 800036c:	f000 ffaa 	bl	80012c4 <HAL_RCC_ClockConfig>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000376:	f000 f821 	bl	80003bc <Error_Handler>
  }
}
 800037a:	bf00      	nop
 800037c:	3770      	adds	r7, #112	; 0x70
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	44020800 	.word	0x44020800

08000388 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
	...

08000398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d101      	bne.n	80003ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003aa:	f000 fa2f 	bl	800080c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40001000 	.word	0x40001000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>

080003c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b08e      	sub	sp, #56	; 0x38
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80003dc:	4b33      	ldr	r3, [pc, #204]	; (80004ac <HAL_InitTick+0xd8>)
 80003de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003e2:	4a32      	ldr	r2, [pc, #200]	; (80004ac <HAL_InitTick+0xd8>)
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80003ec:	4b2f      	ldr	r3, [pc, #188]	; (80004ac <HAL_InitTick+0xd8>)
 80003ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003f2:	f003 0310 	and.w	r3, r3, #16
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80003fa:	f107 020c 	add.w	r2, r7, #12
 80003fe:	f107 0310 	add.w	r3, r7, #16
 8000402:	4611      	mov	r1, r2
 8000404:	4618      	mov	r0, r3
 8000406:	f001 fa73 	bl	80018f0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800040a:	69fb      	ldr	r3, [r7, #28]
 800040c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800040e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000410:	2b00      	cmp	r3, #0
 8000412:	d103      	bne.n	800041c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000414:	f001 fa56 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8000418:	6378      	str	r0, [r7, #52]	; 0x34
 800041a:	e004      	b.n	8000426 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800041c:	f001 fa52 	bl	80018c4 <HAL_RCC_GetPCLK1Freq>
 8000420:	4603      	mov	r3, r0
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 8000426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000428:	095b      	lsrs	r3, r3, #5
 800042a:	4a21      	ldr	r2, [pc, #132]	; (80004b0 <HAL_InitTick+0xdc>)
 800042c:	fba2 2303 	umull	r2, r3, r2, r3
 8000430:	09db      	lsrs	r3, r3, #7
 8000432:	3b01      	subs	r3, #1
 8000434:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000436:	4b1f      	ldr	r3, [pc, #124]	; (80004b4 <HAL_InitTick+0xe0>)
 8000438:	4a1f      	ldr	r2, [pc, #124]	; (80004b8 <HAL_InitTick+0xe4>)
 800043a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <HAL_InitTick+0xe0>)
 800043e:	2263      	movs	r2, #99	; 0x63
 8000440:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <HAL_InitTick+0xe0>)
 8000444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000446:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000448:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <HAL_InitTick+0xe0>)
 800044a:	2200      	movs	r2, #0
 800044c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044e:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <HAL_InitTick+0xe0>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000454:	4817      	ldr	r0, [pc, #92]	; (80004b4 <HAL_InitTick+0xe0>)
 8000456:	f001 fa83 	bl	8001960 <HAL_TIM_Base_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000460:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000464:	2b00      	cmp	r3, #0
 8000466:	d118      	bne.n	800049a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000468:	4812      	ldr	r0, [pc, #72]	; (80004b4 <HAL_InitTick+0xe0>)
 800046a:	f001 fadb 	bl	8001a24 <HAL_TIM_Base_Start_IT>
 800046e:	4603      	mov	r3, r0
 8000470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000478:	2b00      	cmp	r3, #0
 800047a:	d10e      	bne.n	800049a <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b0f      	cmp	r3, #15
 8000480:	d808      	bhi.n	8000494 <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000482:	2200      	movs	r2, #0
 8000484:	6879      	ldr	r1, [r7, #4]
 8000486:	2031      	movs	r0, #49	; 0x31
 8000488:	f000 fabc 	bl	8000a04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800048c:	4a0b      	ldr	r2, [pc, #44]	; (80004bc <HAL_InitTick+0xe8>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6013      	str	r3, [r2, #0]
 8000492:	e002      	b.n	800049a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000494:	2301      	movs	r3, #1
 8000496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800049a:	2031      	movs	r0, #49	; 0x31
 800049c:	f000 facc 	bl	8000a38 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80004a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3738      	adds	r7, #56	; 0x38
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	44020c00 	.word	0x44020c00
 80004b0:	0a7c5ac5 	.word	0x0a7c5ac5
 80004b4:	20000088 	.word	0x20000088
 80004b8:	40001000 	.word	0x40001000
 80004bc:	20000004 	.word	0x20000004

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
	...

08000518 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <TIM6_IRQHandler+0x10>)
 800051e:	f001 fb2f 	bl	8001b80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000088 	.word	0x20000088

0800052c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e00a      	b.n	8000554 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800053e:	f3af 8000 	nop.w
 8000542:	4601      	mov	r1, r0
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	60ba      	str	r2, [r7, #8]
 800054a:	b2ca      	uxtb	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	3301      	adds	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
 8000554:	697a      	ldr	r2, [r7, #20]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	429a      	cmp	r2, r3
 800055a:	dbf0      	blt.n	800053e <_read+0x12>
  }

  return len;
 800055c:	687b      	ldr	r3, [r7, #4]
}
 800055e:	4618      	mov	r0, r3
 8000560:	3718      	adds	r7, #24
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	b086      	sub	sp, #24
 800056a:	af00      	add	r7, sp, #0
 800056c:	60f8      	str	r0, [r7, #12]
 800056e:	60b9      	str	r1, [r7, #8]
 8000570:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	2300      	movs	r3, #0
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	e009      	b.n	800058c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	60ba      	str	r2, [r7, #8]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	4618      	mov	r0, r3
 8000582:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	3301      	adds	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
 800058c:	697a      	ldr	r2, [r7, #20]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	429a      	cmp	r2, r3
 8000592:	dbf1      	blt.n	8000578 <_write+0x12>
  }
  return len;
 8000594:	687b      	ldr	r3, [r7, #4]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3718      	adds	r7, #24
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}

0800059e <_close>:

int _close(int file)
{
 800059e:	b480      	push	{r7}
 80005a0:	b083      	sub	sp, #12
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b083      	sub	sp, #12
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c6:	605a      	str	r2, [r3, #4]
  return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <_isatty>:

int _isatty(int file)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005de:	2301      	movs	r3, #1
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000610:	4a14      	ldr	r2, [pc, #80]	; (8000664 <_sbrk+0x5c>)
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <_sbrk+0x60>)
 8000614:	1ad3      	subs	r3, r2, r3
 8000616:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d102      	bne.n	800062a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <_sbrk+0x64>)
 8000626:	4a12      	ldr	r2, [pc, #72]	; (8000670 <_sbrk+0x68>)
 8000628:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800062a:	4b10      	ldr	r3, [pc, #64]	; (800066c <_sbrk+0x64>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	693a      	ldr	r2, [r7, #16]
 8000634:	429a      	cmp	r2, r3
 8000636:	d207      	bcs.n	8000648 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000638:	f001 ff8c 	bl	8002554 <__errno>
 800063c:	4603      	mov	r3, r0
 800063e:	220c      	movs	r2, #12
 8000640:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000642:	f04f 33ff 	mov.w	r3, #4294967295
 8000646:	e009      	b.n	800065c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <_sbrk+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800064e:	4b07      	ldr	r3, [pc, #28]	; (800066c <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	4a05      	ldr	r2, [pc, #20]	; (800066c <_sbrk+0x64>)
 8000658:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200a0000 	.word	0x200a0000
 8000668:	00000400 	.word	0x00000400
 800066c:	200000d4 	.word	0x200000d4
 8000670:	20000228 	.word	0x20000228

08000674 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800067a:	4b35      	ldr	r3, [pc, #212]	; (8000750 <SystemInit+0xdc>)
 800067c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000680:	4a33      	ldr	r2, [pc, #204]	; (8000750 <SystemInit+0xdc>)
 8000682:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000686:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <SystemInit+0xe0>)
 800068c:	2201      	movs	r2, #1
 800068e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <SystemInit+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemInit+0xe0>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <SystemInit+0xe0>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	492c      	ldr	r1, [pc, #176]	; (8000754 <SystemInit+0xe0>)
 80006a2:	4b2d      	ldr	r3, [pc, #180]	; (8000758 <SystemInit+0xe4>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <SystemInit+0xe0>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemInit+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <SystemInit+0xe0>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <SystemInit+0xe0>)
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SystemInit+0xe8>)
 80006be:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <SystemInit+0xe0>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <SystemInit+0xe0>)
 80006c8:	4a24      	ldr	r2, [pc, #144]	; (800075c <SystemInit+0xe8>)
 80006ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <SystemInit+0xe0>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <SystemInit+0xe0>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemInit+0xe8>)
 80006d6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <SystemInit+0xe0>)
 80006da:	2200      	movs	r2, #0
 80006dc:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <SystemInit+0xe0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <SystemInit+0xe0>)
 80006e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <SystemInit+0xe0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <SystemInit+0xdc>)
 80006f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006f6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <SystemInit+0xec>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000700:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000708:	d003      	beq.n	8000712 <SystemInit+0x9e>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000710:	d117      	bne.n	8000742 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <SystemInit+0xec>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	2b00      	cmp	r3, #0
 800071c:	d005      	beq.n	800072a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <SystemInit+0xec>)
 8000720:	4a10      	ldr	r2, [pc, #64]	; (8000764 <SystemInit+0xf0>)
 8000722:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <SystemInit+0xec>)
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <SystemInit+0xf4>)
 8000728:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <SystemInit+0xec>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <SystemInit+0xec>)
 8000730:	f043 0302 	orr.w	r3, r3, #2
 8000734:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <SystemInit+0xec>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <SystemInit+0xec>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	61d3      	str	r3, [r2, #28]
  }
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00
 8000754:	44020c00 	.word	0x44020c00
 8000758:	eae2eae3 	.word	0xeae2eae3
 800075c:	01010280 	.word	0x01010280
 8000760:	40022000 	.word	0x40022000
 8000764:	08192a3b 	.word	0x08192a3b
 8000768:	4c5d6e7f 	.word	0x4c5d6e7f

0800076c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000770:	f7ff ff80 	bl	8000674 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000774:	480c      	ldr	r0, [pc, #48]	; (80007a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000776:	490d      	ldr	r1, [pc, #52]	; (80007ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000778:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <LoopForever+0xe>)
  movs r3, #0
 800077a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800077c:	e002      	b.n	8000784 <LoopCopyDataInit>

0800077e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000780:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000782:	3304      	adds	r3, #4

08000784 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000784:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000786:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000788:	d3f9      	bcc.n	800077e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800078c:	4c0a      	ldr	r4, [pc, #40]	; (80007b8 <LoopForever+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000790:	e001      	b.n	8000796 <LoopFillZerobss>

08000792 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000792:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000794:	3204      	adds	r2, #4

08000796 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000796:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000798:	d3fb      	bcc.n	8000792 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800079a:	f001 fee1 	bl	8002560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079e:	f7ff fd75 	bl	800028c <main>

080007a2 <LoopForever>:

LoopForever:
    b LoopForever
 80007a2:	e7fe      	b.n	80007a2 <LoopForever>
  ldr   r0, =_estack
 80007a4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007b0:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 80007b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007b8:	20000228 	.word	0x20000228

080007bc <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f912 	bl	80009ee <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80007ca:	f000 ff33 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80007ce:	4602      	mov	r2, r0
 80007d0:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <HAL_Init+0x40>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	f003 030f 	and.w	r3, r3, #15
 80007d8:	490a      	ldr	r1, [pc, #40]	; (8000804 <HAL_Init+0x44>)
 80007da:	5ccb      	ldrb	r3, [r1, r3]
 80007dc:	fa22 f303 	lsr.w	r3, r2, r3
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <HAL_Init+0x48>)
 80007e2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007e4:	200f      	movs	r0, #15
 80007e6:	f7ff fdf5 	bl	80003d4 <HAL_InitTick>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
 80007f2:	e002      	b.n	80007fa <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff fde7 	bl	80003c6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	44020c00 	.word	0x44020c00
 8000804:	08002fe4 	.word	0x08002fe4
 8000808:	20000000 	.word	0x20000000

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_IncTick+0x20>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x24>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_IncTick+0x24>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000008 	.word	0x20000008
 8000830:	200000d8 	.word	0x200000d8

08000834 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  return uwTick;
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_GetTick+0x14>)
 800083a:	681b      	ldr	r3, [r3, #0]
}
 800083c:	4618      	mov	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	200000d8 	.word	0x200000d8

0800084c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000854:	f7ff ffee 	bl	8000834 <HAL_GetTick>
 8000858:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000864:	d005      	beq.n	8000872 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_Delay+0x44>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	461a      	mov	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000872:	bf00      	nop
 8000874:	f7ff ffde 	bl	8000834 <HAL_GetTick>
 8000878:	4602      	mov	r2, r0
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	429a      	cmp	r2, r3
 8000882:	d8f7      	bhi.n	8000874 <HAL_Delay+0x28>
  {
  }
}
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008

08000894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008c6:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <__NVIC_SetPriorityGrouping+0x44>)
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	60d3      	str	r3, [r2, #12]
}
 80008cc:	bf00      	nop
 80008ce:	3714      	adds	r7, #20
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <__NVIC_GetPriorityGrouping+0x18>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	0a1b      	lsrs	r3, r3, #8
 80008e6:	f003 0307 	and.w	r3, r3, #7
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000906:	2b00      	cmp	r3, #0
 8000908:	db0b      	blt.n	8000922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f003 021f 	and.w	r2, r3, #31
 8000910:	4907      	ldr	r1, [pc, #28]	; (8000930 <__NVIC_EnableIRQ+0x38>)
 8000912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000916:	095b      	lsrs	r3, r3, #5
 8000918:	2001      	movs	r0, #1
 800091a:	fa00 f202 	lsl.w	r2, r0, r2
 800091e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	; (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	88fb      	ldrh	r3, [r7, #6]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	; 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	; 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff4c 	bl	8000894 <__NVIC_SetPriorityGrouping>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
 8000a10:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a12:	f7ff ff63 	bl	80008dc <__NVIC_GetPriorityGrouping>
 8000a16:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	68b9      	ldr	r1, [r7, #8]
 8000a1c:	6978      	ldr	r0, [r7, #20]
 8000a1e:	f7ff ffb3 	bl	8000988 <NVIC_EncodePriority>
 8000a22:	4602      	mov	r2, r0
 8000a24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff ff82 	bl	8000934 <__NVIC_SetPriority>
}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff56 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f000 bc28 	b.w	80012b8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a68:	4b94      	ldr	r3, [pc, #592]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f003 0318 	and.w	r3, r3, #24
 8000a70:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000a72:	4b92      	ldr	r3, [pc, #584]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0310 	and.w	r3, r3, #16
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d05b      	beq.n	8000b40 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	2b08      	cmp	r3, #8
 8000a8c:	d005      	beq.n	8000a9a <HAL_RCC_OscConfig+0x46>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	2b18      	cmp	r3, #24
 8000a92:	d114      	bne.n	8000abe <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d111      	bne.n	8000abe <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d102      	bne.n	8000aa8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f000 bc08 	b.w	80012b8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000aa8:	4b84      	ldr	r3, [pc, #528]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a1b      	ldr	r3, [r3, #32]
 8000ab4:	041b      	lsls	r3, r3, #16
 8000ab6:	4981      	ldr	r1, [pc, #516]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000abc:	e040      	b.n	8000b40 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d023      	beq.n	8000b0e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000ac6:	4b7d      	ldr	r3, [pc, #500]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a7c      	ldr	r2, [pc, #496]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad2:	f7ff feaf 	bl	8000834 <HAL_GetTick>
 8000ad6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000ad8:	e008      	b.n	8000aec <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000ada:	f7ff feab 	bl	8000834 <HAL_GetTick>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	1ad3      	subs	r3, r2, r3
 8000ae4:	2b02      	cmp	r3, #2
 8000ae6:	d901      	bls.n	8000aec <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	e3e5      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000aec:	4b73      	ldr	r3, [pc, #460]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f0      	beq.n	8000ada <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000af8:	4b70      	ldr	r3, [pc, #448]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a1b      	ldr	r3, [r3, #32]
 8000b04:	041b      	lsls	r3, r3, #16
 8000b06:	496d      	ldr	r1, [pc, #436]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	618b      	str	r3, [r1, #24]
 8000b0c:	e018      	b.n	8000b40 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000b0e:	4b6b      	ldr	r3, [pc, #428]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6a      	ldr	r2, [pc, #424]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b1a:	f7ff fe8b 	bl	8000834 <HAL_GetTick>
 8000b1e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000b20:	e008      	b.n	8000b34 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000b22:	f7ff fe87 	bl	8000834 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d901      	bls.n	8000b34 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000b30:	2303      	movs	r3, #3
 8000b32:	e3c1      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000b34:	4b61      	ldr	r3, [pc, #388]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d1f0      	bne.n	8000b22 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 80a0 	beq.w	8000c8e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b10      	cmp	r3, #16
 8000b52:	d005      	beq.n	8000b60 <HAL_RCC_OscConfig+0x10c>
 8000b54:	69fb      	ldr	r3, [r7, #28]
 8000b56:	2b18      	cmp	r3, #24
 8000b58:	d109      	bne.n	8000b6e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	d106      	bne.n	8000b6e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f040 8092 	bne.w	8000c8e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e3a4      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b76:	d106      	bne.n	8000b86 <HAL_RCC_OscConfig+0x132>
 8000b78:	4b50      	ldr	r3, [pc, #320]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a4f      	ldr	r2, [pc, #316]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	e058      	b.n	8000c38 <HAL_RCC_OscConfig+0x1e4>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d112      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x160>
 8000b8e:	4b4b      	ldr	r3, [pc, #300]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a4a      	ldr	r2, [pc, #296]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	4b48      	ldr	r3, [pc, #288]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a47      	ldr	r2, [pc, #284]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000ba0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4b45      	ldr	r3, [pc, #276]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb0:	6013      	str	r3, [r2, #0]
 8000bb2:	e041      	b.n	8000c38 <HAL_RCC_OscConfig+0x1e4>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bbc:	d112      	bne.n	8000be4 <HAL_RCC_OscConfig+0x190>
 8000bbe:	4b3f      	ldr	r3, [pc, #252]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a3e      	ldr	r2, [pc, #248]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	4b3c      	ldr	r3, [pc, #240]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a3b      	ldr	r2, [pc, #236]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bd0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b39      	ldr	r3, [pc, #228]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a38      	ldr	r2, [pc, #224]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e029      	b.n	8000c38 <HAL_RCC_OscConfig+0x1e4>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000bec:	d112      	bne.n	8000c14 <HAL_RCC_OscConfig+0x1c0>
 8000bee:	4b33      	ldr	r3, [pc, #204]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a2c      	ldr	r2, [pc, #176]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e011      	b.n	8000c38 <HAL_RCC_OscConfig+0x1e4>
 8000c14:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1e:	6013      	str	r3, [r2, #0]
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c32:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c40:	f7ff fdf8 	bl	8000834 <HAL_GetTick>
 8000c44:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fdf4 	bl	8000834 <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e32e      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0x1f4>
 8000c66:	e012      	b.n	8000c8e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c68:	f7ff fde4 	bl	8000834 <HAL_GetTick>
 8000c6c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fde0 	bl	8000834 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e31a      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_RCC_OscConfig+0x268>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 809a 	beq.w	8000dd0 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d005      	beq.n	8000cae <HAL_RCC_OscConfig+0x25a>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	2b18      	cmp	r3, #24
 8000ca6:	d149      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d146      	bne.n	8000d3c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d104      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e2fe      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
 8000cba:	bf00      	nop
 8000cbc:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d11c      	bne.n	8000d00 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8000cc6:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0218 	and.w	r2, r3, #24
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d014      	beq.n	8000d00 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000cd6:	4b96      	ldr	r3, [pc, #600]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f023 0218 	bic.w	r2, r3, #24
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	4993      	ldr	r1, [pc, #588]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8000ce8:	f000 fdd0 	bl	800188c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000cec:	4b91      	ldr	r3, [pc, #580]	; (8000f34 <HAL_RCC_OscConfig+0x4e0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fb6f 	bl	80003d4 <HAL_InitTick>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e2db      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d00:	f7ff fd98 	bl	8000834 <HAL_GetTick>
 8000d04:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d08:	f7ff fd94 	bl	8000834 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e2ce      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d1a:	4b85      	ldr	r3, [pc, #532]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8000d26:	4b82      	ldr	r3, [pc, #520]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	041b      	lsls	r3, r3, #16
 8000d34:	497e      	ldr	r1, [pc, #504]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d36:	4313      	orrs	r3, r2
 8000d38:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000d3a:	e049      	b.n	8000dd0 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d02c      	beq.n	8000d9e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000d44:	4b7a      	ldr	r3, [pc, #488]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f023 0218 	bic.w	r2, r3, #24
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	691b      	ldr	r3, [r3, #16]
 8000d50:	4977      	ldr	r1, [pc, #476]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8000d56:	4b76      	ldr	r3, [pc, #472]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a75      	ldr	r2, [pc, #468]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d62:	f7ff fd67 	bl	8000834 <HAL_GetTick>
 8000d66:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d68:	e008      	b.n	8000d7c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000d6a:	f7ff fd63 	bl	8000834 <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d901      	bls.n	8000d7c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e29d      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d7c:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0f0      	beq.n	8000d6a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8000d88:	4b69      	ldr	r3, [pc, #420]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d8a:	691b      	ldr	r3, [r3, #16]
 8000d8c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	4966      	ldr	r1, [pc, #408]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	610b      	str	r3, [r1, #16]
 8000d9c:	e018      	b.n	8000dd0 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9e:	4b64      	ldr	r3, [pc, #400]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a63      	ldr	r2, [pc, #396]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000daa:	f7ff fd43 	bl	8000834 <HAL_GetTick>
 8000dae:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000db0:	e008      	b.n	8000dc4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000db2:	f7ff fd3f 	bl	8000834 <HAL_GetTick>
 8000db6:	4602      	mov	r2, r0
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	2b02      	cmp	r3, #2
 8000dbe:	d901      	bls.n	8000dc4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	e279      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000dc4:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f003 0302 	and.w	r3, r3, #2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d1f0      	bne.n	8000db2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d03c      	beq.n	8000e56 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d01c      	beq.n	8000e1e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000de4:	4b52      	ldr	r3, [pc, #328]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000de6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000dea:	4a51      	ldr	r2, [pc, #324]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000dec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000df0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000df4:	f7ff fd1e 	bl	8000834 <HAL_GetTick>
 8000df8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fd1a 	bl	8000834 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e254      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8000e0e:	4b48      	ldr	r3, [pc, #288]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0ef      	beq.n	8000dfc <HAL_RCC_OscConfig+0x3a8>
 8000e1c:	e01b      	b.n	8000e56 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e1e:	4b44      	ldr	r3, [pc, #272]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e24:	4a42      	ldr	r2, [pc, #264]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e2e:	f7ff fd01 	bl	8000834 <HAL_GetTick>
 8000e32:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8000e34:	e008      	b.n	8000e48 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8000e36:	f7ff fcfd 	bl	8000834 <HAL_GetTick>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d901      	bls.n	8000e48 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8000e44:	2303      	movs	r3, #3
 8000e46:	e237      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8000e48:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000e4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1ef      	bne.n	8000e36 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f000 80d2 	beq.w	8001008 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8000e64:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_RCC_OscConfig+0x4e4>)
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d118      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8000e70:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_RCC_OscConfig+0x4e4>)
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <HAL_RCC_OscConfig+0x4e4>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fcda 	bl	8000834 <HAL_GetTick>
 8000e80:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e84:	f7ff fcd6 	bl	8000834 <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e210      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_RCC_OscConfig+0x4e4>)
 8000e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d108      	bne.n	8000ebc <HAL_RCC_OscConfig+0x468>
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eb0:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000eba:	e074      	b.n	8000fa6 <HAL_RCC_OscConfig+0x552>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d118      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x4a2>
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eca:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000ecc:	f023 0301 	bic.w	r3, r3, #1
 8000ed0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ed4:	4b16      	ldr	r3, [pc, #88]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ee0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000eea:	4a11      	ldr	r2, [pc, #68]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000ef4:	e057      	b.n	8000fa6 <HAL_RCC_OscConfig+0x552>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	2b05      	cmp	r3, #5
 8000efc:	d11e      	bne.n	8000f3c <HAL_RCC_OscConfig+0x4e8>
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f14:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f24:	4a02      	ldr	r2, [pc, #8]	; (8000f30 <HAL_RCC_OscConfig+0x4dc>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f2e:	e03a      	b.n	8000fa6 <HAL_RCC_OscConfig+0x552>
 8000f30:	44020c00 	.word	0x44020c00
 8000f34:	20000004 	.word	0x20000004
 8000f38:	44020800 	.word	0x44020800
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b85      	cmp	r3, #133	; 0x85
 8000f42:	d118      	bne.n	8000f76 <HAL_RCC_OscConfig+0x522>
 8000f44:	4ba2      	ldr	r3, [pc, #648]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f4a:	4aa1      	ldr	r2, [pc, #644]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f54:	4b9e      	ldr	r3, [pc, #632]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f5a:	4a9d      	ldr	r2, [pc, #628]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f64:	4b9a      	ldr	r3, [pc, #616]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f6a:	4a99      	ldr	r2, [pc, #612]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f74:	e017      	b.n	8000fa6 <HAL_RCC_OscConfig+0x552>
 8000f76:	4b96      	ldr	r3, [pc, #600]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f7c:	4a94      	ldr	r2, [pc, #592]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f7e:	f023 0301 	bic.w	r3, r3, #1
 8000f82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f86:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f8c:	4a90      	ldr	r2, [pc, #576]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f8e:	f023 0304 	bic.w	r3, r3, #4
 8000f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f96:	4b8e      	ldr	r3, [pc, #568]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f9c:	4a8c      	ldr	r2, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d016      	beq.n	8000fdc <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fae:	f7ff fc41 	bl	8000834 <HAL_GetTick>
 8000fb2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fc3d 	bl	8000834 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e175      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000fcc:	4b80      	ldr	r3, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0ed      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x562>
 8000fda:	e015      	b.n	8001008 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fdc:	f7ff fc2a 	bl	8000834 <HAL_GetTick>
 8000fe0:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fe2:	e00a      	b.n	8000ffa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fe4:	f7ff fc26 	bl	8000834 <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e15e      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ffa:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8000ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001000:	f003 0302 	and.w	r3, r3, #2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1ed      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0320 	and.w	r3, r3, #32
 8001010:	2b00      	cmp	r3, #0
 8001012:	d036      	beq.n	8001082 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	2b00      	cmp	r3, #0
 800101a:	d019      	beq.n	8001050 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800101c:	4b6c      	ldr	r3, [pc, #432]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a6b      	ldr	r2, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001026:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001028:	f7ff fc04 	bl	8000834 <HAL_GetTick>
 800102c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001030:	f7ff fc00 	bl	8000834 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e13a      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001042:	4b63      	ldr	r3, [pc, #396]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0f0      	beq.n	8001030 <HAL_RCC_OscConfig+0x5dc>
 800104e:	e018      	b.n	8001082 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001050:	4b5f      	ldr	r3, [pc, #380]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001056:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800105a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800105c:	f7ff fbea 	bl	8000834 <HAL_GetTick>
 8001060:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001064:	f7ff fbe6 	bl	8000834 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e120      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001076:	4b56      	ldr	r3, [pc, #344]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8115 	beq.w	80012b6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b18      	cmp	r3, #24
 8001090:	f000 80af 	beq.w	80011f2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	2b02      	cmp	r3, #2
 800109a:	f040 8086 	bne.w	80011aa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80010a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fbc3 	bl	8000834 <HAL_GetTick>
 80010ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80010b2:	f7ff fbbf 	bl	8000834 <HAL_GetTick>
 80010b6:	4602      	mov	r2, r0
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e0f9      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80010c4:	4b42      	ldr	r3, [pc, #264]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d1f0      	bne.n	80010b2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80010d0:	4b3f      	ldr	r3, [pc, #252]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80010d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80010d8:	f023 0303 	bic.w	r3, r3, #3
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010e4:	0212      	lsls	r2, r2, #8
 80010e6:	430a      	orrs	r2, r1
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	628b      	str	r3, [r1, #40]	; 0x28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fc:	3b01      	subs	r3, #1
 80010fe:	025b      	lsls	r3, r3, #9
 8001100:	b29b      	uxth	r3, r3
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001108:	3b01      	subs	r3, #1
 800110a:	041b      	lsls	r3, r3, #16
 800110c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	3b01      	subs	r3, #1
 8001118:	061b      	lsls	r3, r3, #24
 800111a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800111e:	492c      	ldr	r1, [pc, #176]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001120:	4313      	orrs	r3, r2
 8001122:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800112a:	f023 0310 	bic.w	r3, r3, #16
 800112e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001146:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f023 020c 	bic.w	r2, r3, #12
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	491f      	ldr	r1, [pc, #124]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001154:	4313      	orrs	r3, r2
 8001156:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800115a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800115c:	f023 0220 	bic.w	r2, r3, #32
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001164:	491a      	ldr	r1, [pc, #104]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001166:	4313      	orrs	r3, r2
 8001168:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800116c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116e:	4a18      	ldr	r2, [pc, #96]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800117c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001182:	f7ff fb57 	bl	8000834 <HAL_GetTick>
 8001186:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800118a:	f7ff fb53 	bl	8000834 <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e08d      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x736>
 80011a8:	e085      	b.n	80012b6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_RCC_OscConfig+0x77c>)
 80011b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b6:	f7ff fb3d 	bl	8000834 <HAL_GetTick>
 80011ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80011bc:	e00a      	b.n	80011d4 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80011be:	f7ff fb39 	bl	8000834 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d903      	bls.n	80011d4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e073      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
 80011d0:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1ee      	bne.n	80011be <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80011e0:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80011e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e4:	4a36      	ldr	r2, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80011e6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	6293      	str	r3, [r2, #40]	; 0x28
 80011f0:	e061      	b.n	80012b6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80011f2:	4b33      	ldr	r3, [pc, #204]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	2b01      	cmp	r3, #1
 8001204:	d031      	beq.n	800126a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001210:	429a      	cmp	r2, r3
 8001212:	d12a      	bne.n	800126a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	0a1b      	lsrs	r3, r3, #8
 8001218:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d122      	bne.n	800126a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d11a      	bne.n	800126a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	0a5b      	lsrs	r3, r3, #9
 8001238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001242:	429a      	cmp	r2, r3
 8001244:	d111      	bne.n	800126a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	0c1b      	lsrs	r3, r3, #16
 800124a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001252:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001254:	429a      	cmp	r2, r3
 8001256:	d108      	bne.n	800126a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	0e1b      	lsrs	r3, r3, #24
 800125c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001266:	429a      	cmp	r2, r3
 8001268:	d001      	beq.n	800126e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e024      	b.n	80012b8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	08db      	lsrs	r3, r3, #3
 8001274:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800127c:	429a      	cmp	r2, r3
 800127e:	d01a      	beq.n	80012b6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	4a0e      	ldr	r2, [pc, #56]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 8001286:	f023 0310 	bic.w	r3, r3, #16
 800128a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fad2 	bl	8000834 <HAL_GetTick>
 8001290:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001292:	bf00      	nop
 8001294:	f7ff face 	bl	8000834 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4293      	cmp	r3, r2
 800129e:	d0f9      	beq.n	8001294 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_RCC_OscConfig+0x86c>)
 80012b0:	f043 0310 	orr.w	r3, r3, #16
 80012b4:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3720      	adds	r7, #32
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	44020c00 	.word	0x44020c00

080012c4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d101      	bne.n	80012d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e19e      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012d8:	4b83      	ldr	r3, [pc, #524]	; (80014e8 <HAL_RCC_ClockConfig+0x224>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d910      	bls.n	8001308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b80      	ldr	r3, [pc, #512]	; (80014e8 <HAL_RCC_ClockConfig+0x224>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 020f 	bic.w	r2, r3, #15
 80012ee:	497e      	ldr	r1, [pc, #504]	; (80014e8 <HAL_RCC_ClockConfig+0x224>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b7c      	ldr	r3, [pc, #496]	; (80014e8 <HAL_RCC_ClockConfig+0x224>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e186      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695a      	ldr	r2, [r3, #20]
 8001318:	4b74      	ldr	r3, [pc, #464]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001322:	429a      	cmp	r2, r3
 8001324:	d909      	bls.n	800133a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001326:	4b71      	ldr	r3, [pc, #452]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001328:	6a1b      	ldr	r3, [r3, #32]
 800132a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	021b      	lsls	r3, r3, #8
 8001334:	496d      	ldr	r1, [pc, #436]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001336:	4313      	orrs	r3, r2
 8001338:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	4b68      	ldr	r3, [pc, #416]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001354:	429a      	cmp	r2, r3
 8001356:	d909      	bls.n	800136c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001358:	4b64      	ldr	r3, [pc, #400]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4961      	ldr	r1, [pc, #388]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001368:	4313      	orrs	r3, r2
 800136a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	2b00      	cmp	r3, #0
 8001376:	d010      	beq.n	800139a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4b5b      	ldr	r3, [pc, #364]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001384:	429a      	cmp	r2, r3
 8001386:	d908      	bls.n	800139a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001388:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4955      	ldr	r1, [pc, #340]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001396:	4313      	orrs	r3, r2
 8001398:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d010      	beq.n	80013c8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	4b50      	ldr	r3, [pc, #320]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d908      	bls.n	80013c8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80013b6:	4b4d      	ldr	r3, [pc, #308]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	f023 020f 	bic.w	r2, r3, #15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	494a      	ldr	r1, [pc, #296]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80013c4:	4313      	orrs	r3, r2
 80013c6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 8093 	beq.w	80014fc <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d121      	bne.n	800142e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e113      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d107      	bne.n	8001406 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d115      	bne.n	800142e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e107      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	2b01      	cmp	r3, #1
 800140c:	d107      	bne.n	800141e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001416:	2b00      	cmp	r3, #0
 8001418:	d109      	bne.n	800142e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0fb      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e0f3      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800142e:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	f023 0203 	bic.w	r2, r3, #3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	492c      	ldr	r1, [pc, #176]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 800143c:	4313      	orrs	r3, r2
 800143e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001440:	f7ff f9f8 	bl	8000834 <HAL_GetTick>
 8001444:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b03      	cmp	r3, #3
 800144c:	d112      	bne.n	8001474 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001450:	f7ff f9f0 	bl	8000834 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0d7      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001466:	4b21      	ldr	r3, [pc, #132]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001468:	69db      	ldr	r3, [r3, #28]
 800146a:	f003 0318 	and.w	r3, r3, #24
 800146e:	2b18      	cmp	r3, #24
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_ClockConfig+0x18c>
 8001472:	e043      	b.n	80014fc <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800147c:	e00a      	b.n	8001494 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800147e:	f7ff f9d9 	bl	8000834 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0c0      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 8001496:	69db      	ldr	r3, [r3, #28]
 8001498:	f003 0318 	and.w	r3, r3, #24
 800149c:	2b10      	cmp	r3, #16
 800149e:	d1ee      	bne.n	800147e <HAL_RCC_ClockConfig+0x1ba>
 80014a0:	e02c      	b.n	80014fc <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d122      	bne.n	80014f0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014ac:	f7ff f9c2 	bl	8000834 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e0a9      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x228>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 0318 	and.w	r3, r3, #24
 80014ca:	2b08      	cmp	r3, #8
 80014cc:	d1ee      	bne.n	80014ac <HAL_RCC_ClockConfig+0x1e8>
 80014ce:	e015      	b.n	80014fc <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff f9b0 	bl	8000834 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d906      	bls.n	80014f0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e097      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80014f0:	4b4b      	ldr	r3, [pc, #300]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	f003 0318 	and.w	r3, r3, #24
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e9      	bne.n	80014d0 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d010      	beq.n	800152a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	4b44      	ldr	r3, [pc, #272]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	f003 030f 	and.w	r3, r3, #15
 8001514:	429a      	cmp	r2, r3
 8001516:	d208      	bcs.n	800152a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001518:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f023 020f 	bic.w	r2, r3, #15
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	493e      	ldr	r1, [pc, #248]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 8001526:	4313      	orrs	r3, r2
 8001528:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800152a:	4b3e      	ldr	r3, [pc, #248]	; (8001624 <HAL_RCC_ClockConfig+0x360>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d210      	bcs.n	800155a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001538:	4b3a      	ldr	r3, [pc, #232]	; (8001624 <HAL_RCC_ClockConfig+0x360>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f023 020f 	bic.w	r2, r3, #15
 8001540:	4938      	ldr	r1, [pc, #224]	; (8001624 <HAL_RCC_ClockConfig+0x360>)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_ClockConfig+0x360>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d001      	beq.n	800155a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e05d      	b.n	8001616 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d010      	beq.n	8001588 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001572:	429a      	cmp	r2, r3
 8001574:	d208      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	4927      	ldr	r1, [pc, #156]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b00      	cmp	r3, #0
 8001592:	d012      	beq.n	80015ba <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691a      	ldr	r2, [r3, #16]
 8001598:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d209      	bcs.n	80015ba <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	491a      	ldr	r1, [pc, #104]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d012      	beq.n	80015ec <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	0a1b      	lsrs	r3, r3, #8
 80015d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d209      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015ec:	f000 f822 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 80015f0:	4602      	mov	r2, r0
 80015f2:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_ClockConfig+0x35c>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490b      	ldr	r1, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x364>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x368>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_RCC_ClockConfig+0x36c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe fee2 	bl	80003d4 <HAL_InitTick>
 8001610:	4603      	mov	r3, r0
 8001612:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001614:	7afb      	ldrb	r3, [r7, #11]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	44020c00 	.word	0x44020c00
 8001624:	40022000 	.word	0x40022000
 8001628:	08002fe4 	.word	0x08002fe4
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800163a:	4b8c      	ldr	r3, [pc, #560]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0318 	and.w	r3, r3, #24
 8001642:	2b08      	cmp	r3, #8
 8001644:	d102      	bne.n	800164c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001646:	4b8a      	ldr	r3, [pc, #552]	; (8001870 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e107      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800164c:	4b87      	ldr	r3, [pc, #540]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 0318 	and.w	r3, r3, #24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d112      	bne.n	800167e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0320 	and.w	r3, r3, #32
 8001660:	2b00      	cmp	r3, #0
 8001662:	d009      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001664:	4b81      	ldr	r3, [pc, #516]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	08db      	lsrs	r3, r3, #3
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	4a81      	ldr	r2, [pc, #516]	; (8001874 <HAL_RCC_GetSysClockFreq+0x240>)
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	e0f1      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001678:	4b7e      	ldr	r3, [pc, #504]	; (8001874 <HAL_RCC_GetSysClockFreq+0x240>)
 800167a:	61fb      	str	r3, [r7, #28]
 800167c:	e0ee      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167e:	4b7b      	ldr	r3, [pc, #492]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0318 	and.w	r3, r3, #24
 8001686:	2b10      	cmp	r3, #16
 8001688:	d102      	bne.n	8001690 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800168a:	4b7b      	ldr	r3, [pc, #492]	; (8001878 <HAL_RCC_GetSysClockFreq+0x244>)
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e0e5      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001690:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	f003 0318 	and.w	r3, r3, #24
 8001698:	2b18      	cmp	r3, #24
 800169a:	f040 80dd 	bne.w	8001858 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f003 0303 	and.w	r3, r3, #3
 80016a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80016b4:	4b6d      	ldr	r3, [pc, #436]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80016b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b8:	091b      	lsrs	r3, r3, #4
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80016c4:	08db      	lsrs	r3, r3, #3
 80016c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	fb02 f303 	mul.w	r3, r2, r3
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016d8:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80b7 	beq.w	8001852 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0xbe>
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d056      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x16a>
 80016f0:	e077      	b.n	80017e2 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80016f2:	4b5e      	ldr	r3, [pc, #376]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d02d      	beq.n	800175a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80016fe:	4b5b      	ldr	r3, [pc, #364]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	08db      	lsrs	r3, r3, #3
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	4a5a      	ldr	r2, [pc, #360]	; (8001874 <HAL_RCC_GetSysClockFreq+0x240>)
 800170a:	fa22 f303 	lsr.w	r3, r2, r3
 800170e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001724:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001728:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 800172a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001738:	ed97 6a02 	vldr	s12, [r7, #8]
 800173c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800187c <HAL_RCC_GetSysClockFreq+0x248>
 8001740:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001744:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001748:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800174c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001758:	e065      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001764:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001880 <HAL_RCC_GetSysClockFreq+0x24c>
 8001768:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800176c:	4b3f      	ldr	r3, [pc, #252]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 800176e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800177c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001780:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800187c <HAL_RCC_GetSysClockFreq+0x248>
 8001784:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001788:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 800178c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001790:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001798:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 800179c:	e043      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001884 <HAL_RCC_GetSysClockFreq+0x250>
 80017ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017b0:	4b2e      	ldr	r3, [pc, #184]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80017c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80017c4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800187c <HAL_RCC_GetSysClockFreq+0x248>
 80017c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80017cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80017d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 80017e0:	e021      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ec:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001888 <HAL_RCC_GetSysClockFreq+0x254>
 80017f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001804:	ed97 6a02 	vldr	s12, [r7, #8]
 8001808:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800187c <HAL_RCC_GetSysClockFreq+0x248>
 800180c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001810:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001814:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001818:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800181c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001820:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001824:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_RCC_GetSysClockFreq+0x238>)
 8001828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001830:	3301      	adds	r3, #1
 8001832:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800184a:	ee17 3a90 	vmov	r3, s15
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e004      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
 8001856:	e001      	b.n	800185c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_GetSysClockFreq+0x240>)
 800185a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 800185c:	69fb      	ldr	r3, [r7, #28]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	44020c00 	.word	0x44020c00
 8001870:	003d0900 	.word	0x003d0900
 8001874:	03d09000 	.word	0x03d09000
 8001878:	017d7840 	.word	0x017d7840
 800187c:	46000000 	.word	0x46000000
 8001880:	4c742400 	.word	0x4c742400
 8001884:	4bbebc20 	.word	0x4bbebc20
 8001888:	4a742400 	.word	0x4a742400

0800188c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001890:	f7ff fed0 	bl	8001634 <HAL_RCC_GetSysClockFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800189a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800189e:	4907      	ldr	r1, [pc, #28]	; (80018bc <HAL_RCC_GetHCLKFreq+0x30>)
 80018a0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80018a2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x34>)
 80018ac:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80018ae:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_RCC_GetHCLKFreq+0x34>)
 80018b0:	681b      	ldr	r3, [r3, #0]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	44020c00 	.word	0x44020c00
 80018bc:	08002fe4 	.word	0x08002fe4
 80018c0:	20000000 	.word	0x20000000

080018c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80018c8:	f7ff ffe0 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018cc:	4602      	mov	r2, r0
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	091b      	lsrs	r3, r3, #4
 80018d4:	f003 0307 	and.w	r3, r3, #7
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80018da:	5ccb      	ldrb	r3, [r1, r3]
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	44020c00 	.word	0x44020c00
 80018ec:	08002ff4 	.word	0x08002ff4

080018f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	221f      	movs	r2, #31
 80018fe:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_RCC_GetClockConfig+0x68>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f003 0203 	and.w	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_GetClockConfig+0x68>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f003 020f 	and.w	r2, r3, #15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_RCC_GetClockConfig+0x6c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 020f 	and.w	r2, r3, #15
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	601a      	str	r2, [r3, #0]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	44020c00 	.word	0x44020c00
 800195c:	40022000 	.word	0x40022000

08001960 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e049      	b.n	8001a06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d106      	bne.n	800198c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f841 	bl	8001a0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3304      	adds	r3, #4
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f000 fa60 	bl	8001e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d001      	beq.n	8001a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e07c      	b.n	8001b36 <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3a      	ldr	r2, [pc, #232]	; (8001b44 <HAL_TIM_Base_Start_IT+0x120>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d04a      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <HAL_TIM_Base_Start_IT+0x124>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d045      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	d040      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a7a:	d03b      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a32      	ldr	r2, [pc, #200]	; (8001b4c <HAL_TIM_Base_Start_IT+0x128>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d036      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_TIM_Base_Start_IT+0x12c>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d031      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a2f      	ldr	r2, [pc, #188]	; (8001b54 <HAL_TIM_Base_Start_IT+0x130>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d02c      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a2e      	ldr	r2, [pc, #184]	; (8001b58 <HAL_TIM_Base_Start_IT+0x134>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d027      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <HAL_TIM_Base_Start_IT+0x138>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d022      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2b      	ldr	r2, [pc, #172]	; (8001b60 <HAL_TIM_Base_Start_IT+0x13c>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d01d      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a29      	ldr	r2, [pc, #164]	; (8001b64 <HAL_TIM_Base_Start_IT+0x140>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d018      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a28      	ldr	r2, [pc, #160]	; (8001b68 <HAL_TIM_Base_Start_IT+0x144>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d013      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_TIM_Base_Start_IT+0x148>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00e      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a25      	ldr	r2, [pc, #148]	; (8001b70 <HAL_TIM_Base_Start_IT+0x14c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d009      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <HAL_TIM_Base_Start_IT+0x150>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d004      	beq.n	8001af4 <HAL_TIM_Base_Start_IT+0xd0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_TIM_Base_Start_IT+0x154>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d115      	bne.n	8001b20 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_TIM_Base_Start_IT+0x158>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d015      	beq.n	8001b32 <HAL_TIM_Base_Start_IT+0x10e>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b0c:	d011      	beq.n	8001b32 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1e:	e008      	b.n	8001b32 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e000      	b.n	8001b34 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40012c00 	.word	0x40012c00
 8001b48:	50012c00 	.word	0x50012c00
 8001b4c:	40000400 	.word	0x40000400
 8001b50:	50000400 	.word	0x50000400
 8001b54:	40000800 	.word	0x40000800
 8001b58:	50000800 	.word	0x50000800
 8001b5c:	40000c00 	.word	0x40000c00
 8001b60:	50000c00 	.word	0x50000c00
 8001b64:	40013400 	.word	0x40013400
 8001b68:	50013400 	.word	0x50013400
 8001b6c:	40001800 	.word	0x40001800
 8001b70:	50001800 	.word	0x50001800
 8001b74:	40014000 	.word	0x40014000
 8001b78:	50014000 	.word	0x50014000
 8001b7c:	00010007 	.word	0x00010007

08001b80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d020      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d01b      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f92c 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f91e 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f92f 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d020      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0204 	mvn.w	r2, #4
 8001c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2202      	movs	r2, #2
 8001c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f906 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c1c:	e005      	b.n	8001c2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f8f8 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	f000 f909 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d020      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d01b      	beq.n	8001c7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8e0 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f8d2 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8e3 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d020      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01b      	beq.n	8001cc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f8ba 	bl	8001e28 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8ac 	bl	8001e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f8bd 	bl	8001e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00c      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 0201 	mvn.w	r2, #1
 8001ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fb56 	bl	8000398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f9d2 	bl	80020b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00c      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d007      	beq.n	8001d34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f9ca 	bl	80020c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d007      	beq.n	8001d58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 f87c 	bl	8001e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00c      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f06f 0220 	mvn.w	r2, #32
 8001d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f992 	bl	80020a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f99e 	bl	80020dc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00c      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d007      	beq.n	8001dc4 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f996 	bl	80020f0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f98e 	bl	8002104 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00c      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f986 	bl	8002118 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a74      	ldr	r2, [pc, #464]	; (8002048 <TIM_Base_SetConfig+0x1e4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d02b      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a73      	ldr	r2, [pc, #460]	; (800204c <TIM_Base_SetConfig+0x1e8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d027      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8a:	d023      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e92:	d01f      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a6e      	ldr	r2, [pc, #440]	; (8002050 <TIM_Base_SetConfig+0x1ec>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01b      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a6d      	ldr	r2, [pc, #436]	; (8002054 <TIM_Base_SetConfig+0x1f0>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d017      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a6c      	ldr	r2, [pc, #432]	; (8002058 <TIM_Base_SetConfig+0x1f4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a6b      	ldr	r2, [pc, #428]	; (800205c <TIM_Base_SetConfig+0x1f8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00f      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <TIM_Base_SetConfig+0x1fc>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d00b      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <TIM_Base_SetConfig+0x200>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d007      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a68      	ldr	r2, [pc, #416]	; (8002068 <TIM_Base_SetConfig+0x204>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d003      	beq.n	8001ed4 <TIM_Base_SetConfig+0x70>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a67      	ldr	r2, [pc, #412]	; (800206c <TIM_Base_SetConfig+0x208>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d108      	bne.n	8001ee6 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <TIM_Base_SetConfig+0x1e4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d05b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	; (800204c <TIM_Base_SetConfig+0x1e8>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d057      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efc:	d053      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f04:	d04f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a51      	ldr	r2, [pc, #324]	; (8002050 <TIM_Base_SetConfig+0x1ec>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d04b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a50      	ldr	r2, [pc, #320]	; (8002054 <TIM_Base_SetConfig+0x1f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d047      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <TIM_Base_SetConfig+0x1f4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d043      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a4e      	ldr	r2, [pc, #312]	; (800205c <TIM_Base_SetConfig+0x1f8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d03f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4d      	ldr	r2, [pc, #308]	; (8002060 <TIM_Base_SetConfig+0x1fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d03b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a4c      	ldr	r2, [pc, #304]	; (8002064 <TIM_Base_SetConfig+0x200>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d037      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <TIM_Base_SetConfig+0x204>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d033      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4a      	ldr	r2, [pc, #296]	; (800206c <TIM_Base_SetConfig+0x208>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d02f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a49      	ldr	r2, [pc, #292]	; (8002070 <TIM_Base_SetConfig+0x20c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a48      	ldr	r2, [pc, #288]	; (8002074 <TIM_Base_SetConfig+0x210>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a47      	ldr	r2, [pc, #284]	; (8002078 <TIM_Base_SetConfig+0x214>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a46      	ldr	r2, [pc, #280]	; (800207c <TIM_Base_SetConfig+0x218>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a45      	ldr	r2, [pc, #276]	; (8002080 <TIM_Base_SetConfig+0x21c>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a44      	ldr	r2, [pc, #272]	; (8002084 <TIM_Base_SetConfig+0x220>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a43      	ldr	r2, [pc, #268]	; (8002088 <TIM_Base_SetConfig+0x224>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a42      	ldr	r2, [pc, #264]	; (800208c <TIM_Base_SetConfig+0x228>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a41      	ldr	r2, [pc, #260]	; (8002090 <TIM_Base_SetConfig+0x22c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a40      	ldr	r2, [pc, #256]	; (8002094 <TIM_Base_SetConfig+0x230>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a3f      	ldr	r2, [pc, #252]	; (8002098 <TIM_Base_SetConfig+0x234>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0x142>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a3e      	ldr	r2, [pc, #248]	; (800209c <TIM_Base_SetConfig+0x238>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <TIM_Base_SetConfig+0x1e4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d023      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a19      	ldr	r2, [pc, #100]	; (800204c <TIM_Base_SetConfig+0x1e8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d01f      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <TIM_Base_SetConfig+0x204>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01b      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <TIM_Base_SetConfig+0x208>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d017      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <TIM_Base_SetConfig+0x224>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a21      	ldr	r2, [pc, #132]	; (800208c <TIM_Base_SetConfig+0x228>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00f      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a20      	ldr	r2, [pc, #128]	; (8002090 <TIM_Base_SetConfig+0x22c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00b      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <TIM_Base_SetConfig+0x230>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <TIM_Base_SetConfig+0x234>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d003      	beq.n	800202c <TIM_Base_SetConfig+0x1c8>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <TIM_Base_SetConfig+0x238>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40012c00 	.word	0x40012c00
 800204c:	50012c00 	.word	0x50012c00
 8002050:	40000400 	.word	0x40000400
 8002054:	50000400 	.word	0x50000400
 8002058:	40000800 	.word	0x40000800
 800205c:	50000800 	.word	0x50000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	50000c00 	.word	0x50000c00
 8002068:	40013400 	.word	0x40013400
 800206c:	50013400 	.word	0x50013400
 8002070:	40001800 	.word	0x40001800
 8002074:	50001800 	.word	0x50001800
 8002078:	40001c00 	.word	0x40001c00
 800207c:	50001c00 	.word	0x50001c00
 8002080:	40002000 	.word	0x40002000
 8002084:	50002000 	.word	0x50002000
 8002088:	40014000 	.word	0x40014000
 800208c:	50014000 	.word	0x50014000
 8002090:	40014400 	.word	0x40014400
 8002094:	50014400 	.word	0x50014400
 8002098:	40014800 	.word	0x40014800
 800209c:	50014800 	.word	0x50014800

080020a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <__sflush_r>:
 800212c:	898a      	ldrh	r2, [r1, #12]
 800212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002132:	4605      	mov	r5, r0
 8002134:	0710      	lsls	r0, r2, #28
 8002136:	460c      	mov	r4, r1
 8002138:	d458      	bmi.n	80021ec <__sflush_r+0xc0>
 800213a:	684b      	ldr	r3, [r1, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	dc05      	bgt.n	800214c <__sflush_r+0x20>
 8002140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	dc02      	bgt.n	800214c <__sflush_r+0x20>
 8002146:	2000      	movs	r0, #0
 8002148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800214c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800214e:	2e00      	cmp	r6, #0
 8002150:	d0f9      	beq.n	8002146 <__sflush_r+0x1a>
 8002152:	2300      	movs	r3, #0
 8002154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002158:	682f      	ldr	r7, [r5, #0]
 800215a:	6a21      	ldr	r1, [r4, #32]
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	d032      	beq.n	80021c6 <__sflush_r+0x9a>
 8002160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002162:	89a3      	ldrh	r3, [r4, #12]
 8002164:	075a      	lsls	r2, r3, #29
 8002166:	d505      	bpl.n	8002174 <__sflush_r+0x48>
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	1ac0      	subs	r0, r0, r3
 800216c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800216e:	b10b      	cbz	r3, 8002174 <__sflush_r+0x48>
 8002170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002172:	1ac0      	subs	r0, r0, r3
 8002174:	2300      	movs	r3, #0
 8002176:	4602      	mov	r2, r0
 8002178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800217a:	4628      	mov	r0, r5
 800217c:	6a21      	ldr	r1, [r4, #32]
 800217e:	47b0      	blx	r6
 8002180:	1c43      	adds	r3, r0, #1
 8002182:	89a3      	ldrh	r3, [r4, #12]
 8002184:	d106      	bne.n	8002194 <__sflush_r+0x68>
 8002186:	6829      	ldr	r1, [r5, #0]
 8002188:	291d      	cmp	r1, #29
 800218a:	d82b      	bhi.n	80021e4 <__sflush_r+0xb8>
 800218c:	4a28      	ldr	r2, [pc, #160]	; (8002230 <__sflush_r+0x104>)
 800218e:	410a      	asrs	r2, r1
 8002190:	07d6      	lsls	r6, r2, #31
 8002192:	d427      	bmi.n	80021e4 <__sflush_r+0xb8>
 8002194:	2200      	movs	r2, #0
 8002196:	04d9      	lsls	r1, r3, #19
 8002198:	6062      	str	r2, [r4, #4]
 800219a:	6922      	ldr	r2, [r4, #16]
 800219c:	6022      	str	r2, [r4, #0]
 800219e:	d504      	bpl.n	80021aa <__sflush_r+0x7e>
 80021a0:	1c42      	adds	r2, r0, #1
 80021a2:	d101      	bne.n	80021a8 <__sflush_r+0x7c>
 80021a4:	682b      	ldr	r3, [r5, #0]
 80021a6:	b903      	cbnz	r3, 80021aa <__sflush_r+0x7e>
 80021a8:	6560      	str	r0, [r4, #84]	; 0x54
 80021aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021ac:	602f      	str	r7, [r5, #0]
 80021ae:	2900      	cmp	r1, #0
 80021b0:	d0c9      	beq.n	8002146 <__sflush_r+0x1a>
 80021b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021b6:	4299      	cmp	r1, r3
 80021b8:	d002      	beq.n	80021c0 <__sflush_r+0x94>
 80021ba:	4628      	mov	r0, r5
 80021bc:	f000 f9f6 	bl	80025ac <_free_r>
 80021c0:	2000      	movs	r0, #0
 80021c2:	6360      	str	r0, [r4, #52]	; 0x34
 80021c4:	e7c0      	b.n	8002148 <__sflush_r+0x1c>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4628      	mov	r0, r5
 80021ca:	47b0      	blx	r6
 80021cc:	1c41      	adds	r1, r0, #1
 80021ce:	d1c8      	bne.n	8002162 <__sflush_r+0x36>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0c5      	beq.n	8002162 <__sflush_r+0x36>
 80021d6:	2b1d      	cmp	r3, #29
 80021d8:	d001      	beq.n	80021de <__sflush_r+0xb2>
 80021da:	2b16      	cmp	r3, #22
 80021dc:	d101      	bne.n	80021e2 <__sflush_r+0xb6>
 80021de:	602f      	str	r7, [r5, #0]
 80021e0:	e7b1      	b.n	8002146 <__sflush_r+0x1a>
 80021e2:	89a3      	ldrh	r3, [r4, #12]
 80021e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e8:	81a3      	strh	r3, [r4, #12]
 80021ea:	e7ad      	b.n	8002148 <__sflush_r+0x1c>
 80021ec:	690f      	ldr	r7, [r1, #16]
 80021ee:	2f00      	cmp	r7, #0
 80021f0:	d0a9      	beq.n	8002146 <__sflush_r+0x1a>
 80021f2:	0793      	lsls	r3, r2, #30
 80021f4:	680e      	ldr	r6, [r1, #0]
 80021f6:	600f      	str	r7, [r1, #0]
 80021f8:	bf0c      	ite	eq
 80021fa:	694b      	ldreq	r3, [r1, #20]
 80021fc:	2300      	movne	r3, #0
 80021fe:	eba6 0807 	sub.w	r8, r6, r7
 8002202:	608b      	str	r3, [r1, #8]
 8002204:	f1b8 0f00 	cmp.w	r8, #0
 8002208:	dd9d      	ble.n	8002146 <__sflush_r+0x1a>
 800220a:	4643      	mov	r3, r8
 800220c:	463a      	mov	r2, r7
 800220e:	6a21      	ldr	r1, [r4, #32]
 8002210:	4628      	mov	r0, r5
 8002212:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002214:	47b0      	blx	r6
 8002216:	2800      	cmp	r0, #0
 8002218:	dc06      	bgt.n	8002228 <__sflush_r+0xfc>
 800221a:	89a3      	ldrh	r3, [r4, #12]
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002224:	81a3      	strh	r3, [r4, #12]
 8002226:	e78f      	b.n	8002148 <__sflush_r+0x1c>
 8002228:	4407      	add	r7, r0
 800222a:	eba8 0800 	sub.w	r8, r8, r0
 800222e:	e7e9      	b.n	8002204 <__sflush_r+0xd8>
 8002230:	dfbffffe 	.word	0xdfbffffe

08002234 <_fflush_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	690b      	ldr	r3, [r1, #16]
 8002238:	4605      	mov	r5, r0
 800223a:	460c      	mov	r4, r1
 800223c:	b913      	cbnz	r3, 8002244 <_fflush_r+0x10>
 800223e:	2500      	movs	r5, #0
 8002240:	4628      	mov	r0, r5
 8002242:	bd38      	pop	{r3, r4, r5, pc}
 8002244:	b118      	cbz	r0, 800224e <_fflush_r+0x1a>
 8002246:	6a03      	ldr	r3, [r0, #32]
 8002248:	b90b      	cbnz	r3, 800224e <_fflush_r+0x1a>
 800224a:	f000 f8a9 	bl	80023a0 <__sinit>
 800224e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f3      	beq.n	800223e <_fflush_r+0xa>
 8002256:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002258:	07d0      	lsls	r0, r2, #31
 800225a:	d404      	bmi.n	8002266 <_fflush_r+0x32>
 800225c:	0599      	lsls	r1, r3, #22
 800225e:	d402      	bmi.n	8002266 <_fflush_r+0x32>
 8002260:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002262:	f000 f9a1 	bl	80025a8 <__retarget_lock_acquire_recursive>
 8002266:	4628      	mov	r0, r5
 8002268:	4621      	mov	r1, r4
 800226a:	f7ff ff5f 	bl	800212c <__sflush_r>
 800226e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002270:	4605      	mov	r5, r0
 8002272:	07da      	lsls	r2, r3, #31
 8002274:	d4e4      	bmi.n	8002240 <_fflush_r+0xc>
 8002276:	89a3      	ldrh	r3, [r4, #12]
 8002278:	059b      	lsls	r3, r3, #22
 800227a:	d4e1      	bmi.n	8002240 <_fflush_r+0xc>
 800227c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800227e:	f000 f994 	bl	80025aa <__retarget_lock_release_recursive>
 8002282:	e7dd      	b.n	8002240 <_fflush_r+0xc>

08002284 <fflush>:
 8002284:	4601      	mov	r1, r0
 8002286:	b920      	cbnz	r0, 8002292 <fflush+0xe>
 8002288:	4a04      	ldr	r2, [pc, #16]	; (800229c <fflush+0x18>)
 800228a:	4905      	ldr	r1, [pc, #20]	; (80022a0 <fflush+0x1c>)
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <fflush+0x20>)
 800228e:	f000 b89f 	b.w	80023d0 <_fwalk_sglue>
 8002292:	4b05      	ldr	r3, [pc, #20]	; (80022a8 <fflush+0x24>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	f7ff bfcd 	b.w	8002234 <_fflush_r>
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	08002235 	.word	0x08002235
 80022a4:	20000018 	.word	0x20000018
 80022a8:	20000064 	.word	0x20000064

080022ac <std>:
 80022ac:	2300      	movs	r3, #0
 80022ae:	b510      	push	{r4, lr}
 80022b0:	4604      	mov	r4, r0
 80022b2:	6083      	str	r3, [r0, #8]
 80022b4:	8181      	strh	r1, [r0, #12]
 80022b6:	4619      	mov	r1, r3
 80022b8:	6643      	str	r3, [r0, #100]	; 0x64
 80022ba:	81c2      	strh	r2, [r0, #14]
 80022bc:	2208      	movs	r2, #8
 80022be:	6183      	str	r3, [r0, #24]
 80022c0:	e9c0 3300 	strd	r3, r3, [r0]
 80022c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80022c8:	305c      	adds	r0, #92	; 0x5c
 80022ca:	f000 f8f4 	bl	80024b6 <memset>
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <std+0x38>)
 80022d0:	6224      	str	r4, [r4, #32]
 80022d2:	6263      	str	r3, [r4, #36]	; 0x24
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <std+0x3c>)
 80022d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <std+0x40>)
 80022da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <std+0x44>)
 80022de:	6323      	str	r3, [r4, #48]	; 0x30
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	bf00      	nop
 80022e4:	08002431 	.word	0x08002431
 80022e8:	08002453 	.word	0x08002453
 80022ec:	0800248b 	.word	0x0800248b
 80022f0:	080024af 	.word	0x080024af

080022f4 <stdio_exit_handler>:
 80022f4:	4a02      	ldr	r2, [pc, #8]	; (8002300 <stdio_exit_handler+0xc>)
 80022f6:	4903      	ldr	r1, [pc, #12]	; (8002304 <stdio_exit_handler+0x10>)
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <stdio_exit_handler+0x14>)
 80022fa:	f000 b869 	b.w	80023d0 <_fwalk_sglue>
 80022fe:	bf00      	nop
 8002300:	2000000c 	.word	0x2000000c
 8002304:	08002235 	.word	0x08002235
 8002308:	20000018 	.word	0x20000018

0800230c <cleanup_stdio>:
 800230c:	6841      	ldr	r1, [r0, #4]
 800230e:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <cleanup_stdio+0x34>)
 8002310:	4299      	cmp	r1, r3
 8002312:	b510      	push	{r4, lr}
 8002314:	4604      	mov	r4, r0
 8002316:	d001      	beq.n	800231c <cleanup_stdio+0x10>
 8002318:	f7ff ff8c 	bl	8002234 <_fflush_r>
 800231c:	68a1      	ldr	r1, [r4, #8]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <cleanup_stdio+0x38>)
 8002320:	4299      	cmp	r1, r3
 8002322:	d002      	beq.n	800232a <cleanup_stdio+0x1e>
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff ff85 	bl	8002234 <_fflush_r>
 800232a:	68e1      	ldr	r1, [r4, #12]
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <cleanup_stdio+0x3c>)
 800232e:	4299      	cmp	r1, r3
 8002330:	d004      	beq.n	800233c <cleanup_stdio+0x30>
 8002332:	4620      	mov	r0, r4
 8002334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002338:	f7ff bf7c 	b.w	8002234 <_fflush_r>
 800233c:	bd10      	pop	{r4, pc}
 800233e:	bf00      	nop
 8002340:	200000dc 	.word	0x200000dc
 8002344:	20000144 	.word	0x20000144
 8002348:	200001ac 	.word	0x200001ac

0800234c <global_stdio_init.part.0>:
 800234c:	b510      	push	{r4, lr}
 800234e:	4b0b      	ldr	r3, [pc, #44]	; (800237c <global_stdio_init.part.0+0x30>)
 8002350:	2104      	movs	r1, #4
 8002352:	4c0b      	ldr	r4, [pc, #44]	; (8002380 <global_stdio_init.part.0+0x34>)
 8002354:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <global_stdio_init.part.0+0x38>)
 8002356:	4620      	mov	r0, r4
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	f7ff ffa6 	bl	80022ac <std>
 8002360:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002364:	2201      	movs	r2, #1
 8002366:	2109      	movs	r1, #9
 8002368:	f7ff ffa0 	bl	80022ac <std>
 800236c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002370:	2202      	movs	r2, #2
 8002372:	2112      	movs	r1, #18
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002378:	f7ff bf98 	b.w	80022ac <std>
 800237c:	20000214 	.word	0x20000214
 8002380:	200000dc 	.word	0x200000dc
 8002384:	080022f5 	.word	0x080022f5

08002388 <__sfp_lock_acquire>:
 8002388:	4801      	ldr	r0, [pc, #4]	; (8002390 <__sfp_lock_acquire+0x8>)
 800238a:	f000 b90d 	b.w	80025a8 <__retarget_lock_acquire_recursive>
 800238e:	bf00      	nop
 8002390:	2000021d 	.word	0x2000021d

08002394 <__sfp_lock_release>:
 8002394:	4801      	ldr	r0, [pc, #4]	; (800239c <__sfp_lock_release+0x8>)
 8002396:	f000 b908 	b.w	80025aa <__retarget_lock_release_recursive>
 800239a:	bf00      	nop
 800239c:	2000021d 	.word	0x2000021d

080023a0 <__sinit>:
 80023a0:	b510      	push	{r4, lr}
 80023a2:	4604      	mov	r4, r0
 80023a4:	f7ff fff0 	bl	8002388 <__sfp_lock_acquire>
 80023a8:	6a23      	ldr	r3, [r4, #32]
 80023aa:	b11b      	cbz	r3, 80023b4 <__sinit+0x14>
 80023ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023b0:	f7ff bff0 	b.w	8002394 <__sfp_lock_release>
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__sinit+0x28>)
 80023b6:	6223      	str	r3, [r4, #32]
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__sinit+0x2c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1f5      	bne.n	80023ac <__sinit+0xc>
 80023c0:	f7ff ffc4 	bl	800234c <global_stdio_init.part.0>
 80023c4:	e7f2      	b.n	80023ac <__sinit+0xc>
 80023c6:	bf00      	nop
 80023c8:	0800230d 	.word	0x0800230d
 80023cc:	20000214 	.word	0x20000214

080023d0 <_fwalk_sglue>:
 80023d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023d4:	4607      	mov	r7, r0
 80023d6:	4688      	mov	r8, r1
 80023d8:	4614      	mov	r4, r2
 80023da:	2600      	movs	r6, #0
 80023dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80023e0:	f1b9 0901 	subs.w	r9, r9, #1
 80023e4:	d505      	bpl.n	80023f2 <_fwalk_sglue+0x22>
 80023e6:	6824      	ldr	r4, [r4, #0]
 80023e8:	2c00      	cmp	r4, #0
 80023ea:	d1f7      	bne.n	80023dc <_fwalk_sglue+0xc>
 80023ec:	4630      	mov	r0, r6
 80023ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023f2:	89ab      	ldrh	r3, [r5, #12]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d907      	bls.n	8002408 <_fwalk_sglue+0x38>
 80023f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023fc:	3301      	adds	r3, #1
 80023fe:	d003      	beq.n	8002408 <_fwalk_sglue+0x38>
 8002400:	4629      	mov	r1, r5
 8002402:	4638      	mov	r0, r7
 8002404:	47c0      	blx	r8
 8002406:	4306      	orrs	r6, r0
 8002408:	3568      	adds	r5, #104	; 0x68
 800240a:	e7e9      	b.n	80023e0 <_fwalk_sglue+0x10>

0800240c <iprintf>:
 800240c:	b40f      	push	{r0, r1, r2, r3}
 800240e:	b507      	push	{r0, r1, r2, lr}
 8002410:	4906      	ldr	r1, [pc, #24]	; (800242c <iprintf+0x20>)
 8002412:	ab04      	add	r3, sp, #16
 8002414:	6808      	ldr	r0, [r1, #0]
 8002416:	f853 2b04 	ldr.w	r2, [r3], #4
 800241a:	6881      	ldr	r1, [r0, #8]
 800241c:	9301      	str	r3, [sp, #4]
 800241e:	f000 f9e7 	bl	80027f0 <_vfiprintf_r>
 8002422:	b003      	add	sp, #12
 8002424:	f85d eb04 	ldr.w	lr, [sp], #4
 8002428:	b004      	add	sp, #16
 800242a:	4770      	bx	lr
 800242c:	20000064 	.word	0x20000064

08002430 <__sread>:
 8002430:	b510      	push	{r4, lr}
 8002432:	460c      	mov	r4, r1
 8002434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002438:	f000 f868 	bl	800250c <_read_r>
 800243c:	2800      	cmp	r0, #0
 800243e:	bfab      	itete	ge
 8002440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002442:	89a3      	ldrhlt	r3, [r4, #12]
 8002444:	181b      	addge	r3, r3, r0
 8002446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800244a:	bfac      	ite	ge
 800244c:	6563      	strge	r3, [r4, #84]	; 0x54
 800244e:	81a3      	strhlt	r3, [r4, #12]
 8002450:	bd10      	pop	{r4, pc}

08002452 <__swrite>:
 8002452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002456:	461f      	mov	r7, r3
 8002458:	898b      	ldrh	r3, [r1, #12]
 800245a:	4605      	mov	r5, r0
 800245c:	460c      	mov	r4, r1
 800245e:	05db      	lsls	r3, r3, #23
 8002460:	4616      	mov	r6, r2
 8002462:	d505      	bpl.n	8002470 <__swrite+0x1e>
 8002464:	2302      	movs	r3, #2
 8002466:	2200      	movs	r2, #0
 8002468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800246c:	f000 f83c 	bl	80024e8 <_lseek_r>
 8002470:	89a3      	ldrh	r3, [r4, #12]
 8002472:	4632      	mov	r2, r6
 8002474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002478:	4628      	mov	r0, r5
 800247a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800247e:	81a3      	strh	r3, [r4, #12]
 8002480:	463b      	mov	r3, r7
 8002482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002486:	f000 b853 	b.w	8002530 <_write_r>

0800248a <__sseek>:
 800248a:	b510      	push	{r4, lr}
 800248c:	460c      	mov	r4, r1
 800248e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002492:	f000 f829 	bl	80024e8 <_lseek_r>
 8002496:	1c43      	adds	r3, r0, #1
 8002498:	89a3      	ldrh	r3, [r4, #12]
 800249a:	bf15      	itete	ne
 800249c:	6560      	strne	r0, [r4, #84]	; 0x54
 800249e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80024a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80024a6:	81a3      	strheq	r3, [r4, #12]
 80024a8:	bf18      	it	ne
 80024aa:	81a3      	strhne	r3, [r4, #12]
 80024ac:	bd10      	pop	{r4, pc}

080024ae <__sclose>:
 80024ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024b2:	f000 b809 	b.w	80024c8 <_close_r>

080024b6 <memset>:
 80024b6:	4402      	add	r2, r0
 80024b8:	4603      	mov	r3, r0
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d100      	bne.n	80024c0 <memset+0xa>
 80024be:	4770      	bx	lr
 80024c0:	f803 1b01 	strb.w	r1, [r3], #1
 80024c4:	e7f9      	b.n	80024ba <memset+0x4>
	...

080024c8 <_close_r>:
 80024c8:	b538      	push	{r3, r4, r5, lr}
 80024ca:	2300      	movs	r3, #0
 80024cc:	4d05      	ldr	r5, [pc, #20]	; (80024e4 <_close_r+0x1c>)
 80024ce:	4604      	mov	r4, r0
 80024d0:	4608      	mov	r0, r1
 80024d2:	602b      	str	r3, [r5, #0]
 80024d4:	f7fe f863 	bl	800059e <_close>
 80024d8:	1c43      	adds	r3, r0, #1
 80024da:	d102      	bne.n	80024e2 <_close_r+0x1a>
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	b103      	cbz	r3, 80024e2 <_close_r+0x1a>
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	bd38      	pop	{r3, r4, r5, pc}
 80024e4:	20000218 	.word	0x20000218

080024e8 <_lseek_r>:
 80024e8:	b538      	push	{r3, r4, r5, lr}
 80024ea:	4604      	mov	r4, r0
 80024ec:	4d06      	ldr	r5, [pc, #24]	; (8002508 <_lseek_r+0x20>)
 80024ee:	4608      	mov	r0, r1
 80024f0:	4611      	mov	r1, r2
 80024f2:	2200      	movs	r2, #0
 80024f4:	602a      	str	r2, [r5, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	f7fe f878 	bl	80005ec <_lseek>
 80024fc:	1c43      	adds	r3, r0, #1
 80024fe:	d102      	bne.n	8002506 <_lseek_r+0x1e>
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	b103      	cbz	r3, 8002506 <_lseek_r+0x1e>
 8002504:	6023      	str	r3, [r4, #0]
 8002506:	bd38      	pop	{r3, r4, r5, pc}
 8002508:	20000218 	.word	0x20000218

0800250c <_read_r>:
 800250c:	b538      	push	{r3, r4, r5, lr}
 800250e:	4604      	mov	r4, r0
 8002510:	4d06      	ldr	r5, [pc, #24]	; (800252c <_read_r+0x20>)
 8002512:	4608      	mov	r0, r1
 8002514:	4611      	mov	r1, r2
 8002516:	2200      	movs	r2, #0
 8002518:	602a      	str	r2, [r5, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	f7fe f806 	bl	800052c <_read>
 8002520:	1c43      	adds	r3, r0, #1
 8002522:	d102      	bne.n	800252a <_read_r+0x1e>
 8002524:	682b      	ldr	r3, [r5, #0]
 8002526:	b103      	cbz	r3, 800252a <_read_r+0x1e>
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	bd38      	pop	{r3, r4, r5, pc}
 800252c:	20000218 	.word	0x20000218

08002530 <_write_r>:
 8002530:	b538      	push	{r3, r4, r5, lr}
 8002532:	4604      	mov	r4, r0
 8002534:	4d06      	ldr	r5, [pc, #24]	; (8002550 <_write_r+0x20>)
 8002536:	4608      	mov	r0, r1
 8002538:	4611      	mov	r1, r2
 800253a:	2200      	movs	r2, #0
 800253c:	602a      	str	r2, [r5, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	f7fe f811 	bl	8000566 <_write>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_write_r+0x1e>
 8002548:	682b      	ldr	r3, [r5, #0]
 800254a:	b103      	cbz	r3, 800254e <_write_r+0x1e>
 800254c:	6023      	str	r3, [r4, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	20000218 	.word	0x20000218

08002554 <__errno>:
 8002554:	4b01      	ldr	r3, [pc, #4]	; (800255c <__errno+0x8>)
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000064 	.word	0x20000064

08002560 <__libc_init_array>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	4d0d      	ldr	r5, [pc, #52]	; (8002598 <__libc_init_array+0x38>)
 8002564:	2600      	movs	r6, #0
 8002566:	4c0d      	ldr	r4, [pc, #52]	; (800259c <__libc_init_array+0x3c>)
 8002568:	1b64      	subs	r4, r4, r5
 800256a:	10a4      	asrs	r4, r4, #2
 800256c:	42a6      	cmp	r6, r4
 800256e:	d109      	bne.n	8002584 <__libc_init_array+0x24>
 8002570:	4d0b      	ldr	r5, [pc, #44]	; (80025a0 <__libc_init_array+0x40>)
 8002572:	2600      	movs	r6, #0
 8002574:	4c0b      	ldr	r4, [pc, #44]	; (80025a4 <__libc_init_array+0x44>)
 8002576:	f000 fd1f 	bl	8002fb8 <_init>
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	42a6      	cmp	r6, r4
 8002580:	d105      	bne.n	800258e <__libc_init_array+0x2e>
 8002582:	bd70      	pop	{r4, r5, r6, pc}
 8002584:	f855 3b04 	ldr.w	r3, [r5], #4
 8002588:	3601      	adds	r6, #1
 800258a:	4798      	blx	r3
 800258c:	e7ee      	b.n	800256c <__libc_init_array+0xc>
 800258e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002592:	3601      	adds	r6, #1
 8002594:	4798      	blx	r3
 8002596:	e7f2      	b.n	800257e <__libc_init_array+0x1e>
 8002598:	08003030 	.word	0x08003030
 800259c:	08003030 	.word	0x08003030
 80025a0:	08003030 	.word	0x08003030
 80025a4:	08003034 	.word	0x08003034

080025a8 <__retarget_lock_acquire_recursive>:
 80025a8:	4770      	bx	lr

080025aa <__retarget_lock_release_recursive>:
 80025aa:	4770      	bx	lr

080025ac <_free_r>:
 80025ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025ae:	2900      	cmp	r1, #0
 80025b0:	d043      	beq.n	800263a <_free_r+0x8e>
 80025b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025b6:	1f0c      	subs	r4, r1, #4
 80025b8:	9001      	str	r0, [sp, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	bfb8      	it	lt
 80025be:	18e4      	addlt	r4, r4, r3
 80025c0:	f000 f8e0 	bl	8002784 <__malloc_lock>
 80025c4:	4a1e      	ldr	r2, [pc, #120]	; (8002640 <_free_r+0x94>)
 80025c6:	9801      	ldr	r0, [sp, #4]
 80025c8:	6813      	ldr	r3, [r2, #0]
 80025ca:	b933      	cbnz	r3, 80025da <_free_r+0x2e>
 80025cc:	6063      	str	r3, [r4, #4]
 80025ce:	6014      	str	r4, [r2, #0]
 80025d0:	b003      	add	sp, #12
 80025d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025d6:	f000 b8db 	b.w	8002790 <__malloc_unlock>
 80025da:	42a3      	cmp	r3, r4
 80025dc:	d908      	bls.n	80025f0 <_free_r+0x44>
 80025de:	6825      	ldr	r5, [r4, #0]
 80025e0:	1961      	adds	r1, r4, r5
 80025e2:	428b      	cmp	r3, r1
 80025e4:	bf01      	itttt	eq
 80025e6:	6819      	ldreq	r1, [r3, #0]
 80025e8:	685b      	ldreq	r3, [r3, #4]
 80025ea:	1949      	addeq	r1, r1, r5
 80025ec:	6021      	streq	r1, [r4, #0]
 80025ee:	e7ed      	b.n	80025cc <_free_r+0x20>
 80025f0:	461a      	mov	r2, r3
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	b10b      	cbz	r3, 80025fa <_free_r+0x4e>
 80025f6:	42a3      	cmp	r3, r4
 80025f8:	d9fa      	bls.n	80025f0 <_free_r+0x44>
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	1855      	adds	r5, r2, r1
 80025fe:	42a5      	cmp	r5, r4
 8002600:	d10b      	bne.n	800261a <_free_r+0x6e>
 8002602:	6824      	ldr	r4, [r4, #0]
 8002604:	4421      	add	r1, r4
 8002606:	1854      	adds	r4, r2, r1
 8002608:	6011      	str	r1, [r2, #0]
 800260a:	42a3      	cmp	r3, r4
 800260c:	d1e0      	bne.n	80025d0 <_free_r+0x24>
 800260e:	681c      	ldr	r4, [r3, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	440c      	add	r4, r1
 8002614:	6053      	str	r3, [r2, #4]
 8002616:	6014      	str	r4, [r2, #0]
 8002618:	e7da      	b.n	80025d0 <_free_r+0x24>
 800261a:	d902      	bls.n	8002622 <_free_r+0x76>
 800261c:	230c      	movs	r3, #12
 800261e:	6003      	str	r3, [r0, #0]
 8002620:	e7d6      	b.n	80025d0 <_free_r+0x24>
 8002622:	6825      	ldr	r5, [r4, #0]
 8002624:	1961      	adds	r1, r4, r5
 8002626:	428b      	cmp	r3, r1
 8002628:	bf02      	ittt	eq
 800262a:	6819      	ldreq	r1, [r3, #0]
 800262c:	685b      	ldreq	r3, [r3, #4]
 800262e:	1949      	addeq	r1, r1, r5
 8002630:	6063      	str	r3, [r4, #4]
 8002632:	bf08      	it	eq
 8002634:	6021      	streq	r1, [r4, #0]
 8002636:	6054      	str	r4, [r2, #4]
 8002638:	e7ca      	b.n	80025d0 <_free_r+0x24>
 800263a:	b003      	add	sp, #12
 800263c:	bd30      	pop	{r4, r5, pc}
 800263e:	bf00      	nop
 8002640:	20000220 	.word	0x20000220

08002644 <sbrk_aligned>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	4e0e      	ldr	r6, [pc, #56]	; (8002680 <sbrk_aligned+0x3c>)
 8002648:	460c      	mov	r4, r1
 800264a:	4605      	mov	r5, r0
 800264c:	6831      	ldr	r1, [r6, #0]
 800264e:	b911      	cbnz	r1, 8002656 <sbrk_aligned+0x12>
 8002650:	f000 fc10 	bl	8002e74 <_sbrk_r>
 8002654:	6030      	str	r0, [r6, #0]
 8002656:	4621      	mov	r1, r4
 8002658:	4628      	mov	r0, r5
 800265a:	f000 fc0b 	bl	8002e74 <_sbrk_r>
 800265e:	1c43      	adds	r3, r0, #1
 8002660:	d00a      	beq.n	8002678 <sbrk_aligned+0x34>
 8002662:	1cc4      	adds	r4, r0, #3
 8002664:	f024 0403 	bic.w	r4, r4, #3
 8002668:	42a0      	cmp	r0, r4
 800266a:	d007      	beq.n	800267c <sbrk_aligned+0x38>
 800266c:	1a21      	subs	r1, r4, r0
 800266e:	4628      	mov	r0, r5
 8002670:	f000 fc00 	bl	8002e74 <_sbrk_r>
 8002674:	3001      	adds	r0, #1
 8002676:	d101      	bne.n	800267c <sbrk_aligned+0x38>
 8002678:	f04f 34ff 	mov.w	r4, #4294967295
 800267c:	4620      	mov	r0, r4
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	20000224 	.word	0x20000224

08002684 <_malloc_r>:
 8002684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002688:	1ccd      	adds	r5, r1, #3
 800268a:	4607      	mov	r7, r0
 800268c:	f025 0503 	bic.w	r5, r5, #3
 8002690:	3508      	adds	r5, #8
 8002692:	2d0c      	cmp	r5, #12
 8002694:	bf38      	it	cc
 8002696:	250c      	movcc	r5, #12
 8002698:	2d00      	cmp	r5, #0
 800269a:	db01      	blt.n	80026a0 <_malloc_r+0x1c>
 800269c:	42a9      	cmp	r1, r5
 800269e:	d905      	bls.n	80026ac <_malloc_r+0x28>
 80026a0:	230c      	movs	r3, #12
 80026a2:	2600      	movs	r6, #0
 80026a4:	603b      	str	r3, [r7, #0]
 80026a6:	4630      	mov	r0, r6
 80026a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002780 <_malloc_r+0xfc>
 80026b0:	f000 f868 	bl	8002784 <__malloc_lock>
 80026b4:	f8d8 3000 	ldr.w	r3, [r8]
 80026b8:	461c      	mov	r4, r3
 80026ba:	bb5c      	cbnz	r4, 8002714 <_malloc_r+0x90>
 80026bc:	4629      	mov	r1, r5
 80026be:	4638      	mov	r0, r7
 80026c0:	f7ff ffc0 	bl	8002644 <sbrk_aligned>
 80026c4:	1c43      	adds	r3, r0, #1
 80026c6:	4604      	mov	r4, r0
 80026c8:	d155      	bne.n	8002776 <_malloc_r+0xf2>
 80026ca:	f8d8 4000 	ldr.w	r4, [r8]
 80026ce:	4626      	mov	r6, r4
 80026d0:	2e00      	cmp	r6, #0
 80026d2:	d145      	bne.n	8002760 <_malloc_r+0xdc>
 80026d4:	2c00      	cmp	r4, #0
 80026d6:	d048      	beq.n	800276a <_malloc_r+0xe6>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	4631      	mov	r1, r6
 80026dc:	4638      	mov	r0, r7
 80026de:	eb04 0903 	add.w	r9, r4, r3
 80026e2:	f000 fbc7 	bl	8002e74 <_sbrk_r>
 80026e6:	4581      	cmp	r9, r0
 80026e8:	d13f      	bne.n	800276a <_malloc_r+0xe6>
 80026ea:	6821      	ldr	r1, [r4, #0]
 80026ec:	4638      	mov	r0, r7
 80026ee:	1a6d      	subs	r5, r5, r1
 80026f0:	4629      	mov	r1, r5
 80026f2:	f7ff ffa7 	bl	8002644 <sbrk_aligned>
 80026f6:	3001      	adds	r0, #1
 80026f8:	d037      	beq.n	800276a <_malloc_r+0xe6>
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	442b      	add	r3, r5
 80026fe:	6023      	str	r3, [r4, #0]
 8002700:	f8d8 3000 	ldr.w	r3, [r8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d038      	beq.n	800277a <_malloc_r+0xf6>
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	42a2      	cmp	r2, r4
 800270c:	d12b      	bne.n	8002766 <_malloc_r+0xe2>
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	e00f      	b.n	8002734 <_malloc_r+0xb0>
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	1b52      	subs	r2, r2, r5
 8002718:	d41f      	bmi.n	800275a <_malloc_r+0xd6>
 800271a:	2a0b      	cmp	r2, #11
 800271c:	d917      	bls.n	800274e <_malloc_r+0xca>
 800271e:	1961      	adds	r1, r4, r5
 8002720:	42a3      	cmp	r3, r4
 8002722:	6025      	str	r5, [r4, #0]
 8002724:	bf18      	it	ne
 8002726:	6059      	strne	r1, [r3, #4]
 8002728:	6863      	ldr	r3, [r4, #4]
 800272a:	bf08      	it	eq
 800272c:	f8c8 1000 	streq.w	r1, [r8]
 8002730:	5162      	str	r2, [r4, r5]
 8002732:	604b      	str	r3, [r1, #4]
 8002734:	f104 060b 	add.w	r6, r4, #11
 8002738:	4638      	mov	r0, r7
 800273a:	f000 f829 	bl	8002790 <__malloc_unlock>
 800273e:	1d23      	adds	r3, r4, #4
 8002740:	f026 0607 	bic.w	r6, r6, #7
 8002744:	1af2      	subs	r2, r6, r3
 8002746:	d0ae      	beq.n	80026a6 <_malloc_r+0x22>
 8002748:	1b9b      	subs	r3, r3, r6
 800274a:	50a3      	str	r3, [r4, r2]
 800274c:	e7ab      	b.n	80026a6 <_malloc_r+0x22>
 800274e:	42a3      	cmp	r3, r4
 8002750:	6862      	ldr	r2, [r4, #4]
 8002752:	d1dd      	bne.n	8002710 <_malloc_r+0x8c>
 8002754:	f8c8 2000 	str.w	r2, [r8]
 8002758:	e7ec      	b.n	8002734 <_malloc_r+0xb0>
 800275a:	4623      	mov	r3, r4
 800275c:	6864      	ldr	r4, [r4, #4]
 800275e:	e7ac      	b.n	80026ba <_malloc_r+0x36>
 8002760:	4634      	mov	r4, r6
 8002762:	6876      	ldr	r6, [r6, #4]
 8002764:	e7b4      	b.n	80026d0 <_malloc_r+0x4c>
 8002766:	4613      	mov	r3, r2
 8002768:	e7cc      	b.n	8002704 <_malloc_r+0x80>
 800276a:	230c      	movs	r3, #12
 800276c:	4638      	mov	r0, r7
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	f000 f80e 	bl	8002790 <__malloc_unlock>
 8002774:	e797      	b.n	80026a6 <_malloc_r+0x22>
 8002776:	6025      	str	r5, [r4, #0]
 8002778:	e7dc      	b.n	8002734 <_malloc_r+0xb0>
 800277a:	605b      	str	r3, [r3, #4]
 800277c:	deff      	udf	#255	; 0xff
 800277e:	bf00      	nop
 8002780:	20000220 	.word	0x20000220

08002784 <__malloc_lock>:
 8002784:	4801      	ldr	r0, [pc, #4]	; (800278c <__malloc_lock+0x8>)
 8002786:	f7ff bf0f 	b.w	80025a8 <__retarget_lock_acquire_recursive>
 800278a:	bf00      	nop
 800278c:	2000021c 	.word	0x2000021c

08002790 <__malloc_unlock>:
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <__malloc_unlock+0x8>)
 8002792:	f7ff bf0a 	b.w	80025aa <__retarget_lock_release_recursive>
 8002796:	bf00      	nop
 8002798:	2000021c 	.word	0x2000021c

0800279c <__sfputc_r>:
 800279c:	6893      	ldr	r3, [r2, #8]
 800279e:	3b01      	subs	r3, #1
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	6093      	str	r3, [r2, #8]
 80027a4:	b410      	push	{r4}
 80027a6:	da08      	bge.n	80027ba <__sfputc_r+0x1e>
 80027a8:	6994      	ldr	r4, [r2, #24]
 80027aa:	42a3      	cmp	r3, r4
 80027ac:	db01      	blt.n	80027b2 <__sfputc_r+0x16>
 80027ae:	290a      	cmp	r1, #10
 80027b0:	d103      	bne.n	80027ba <__sfputc_r+0x1e>
 80027b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027b6:	f000 bac7 	b.w	8002d48 <__swbuf_r>
 80027ba:	6813      	ldr	r3, [r2, #0]
 80027bc:	1c58      	adds	r0, r3, #1
 80027be:	6010      	str	r0, [r2, #0]
 80027c0:	4608      	mov	r0, r1
 80027c2:	7019      	strb	r1, [r3, #0]
 80027c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <__sfputs_r>:
 80027ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027cc:	4606      	mov	r6, r0
 80027ce:	460f      	mov	r7, r1
 80027d0:	4614      	mov	r4, r2
 80027d2:	18d5      	adds	r5, r2, r3
 80027d4:	42ac      	cmp	r4, r5
 80027d6:	d101      	bne.n	80027dc <__sfputs_r+0x12>
 80027d8:	2000      	movs	r0, #0
 80027da:	e007      	b.n	80027ec <__sfputs_r+0x22>
 80027dc:	463a      	mov	r2, r7
 80027de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027e2:	4630      	mov	r0, r6
 80027e4:	f7ff ffda 	bl	800279c <__sfputc_r>
 80027e8:	1c43      	adds	r3, r0, #1
 80027ea:	d1f3      	bne.n	80027d4 <__sfputs_r+0xa>
 80027ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080027f0 <_vfiprintf_r>:
 80027f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f4:	460d      	mov	r5, r1
 80027f6:	b09d      	sub	sp, #116	; 0x74
 80027f8:	4614      	mov	r4, r2
 80027fa:	4698      	mov	r8, r3
 80027fc:	4606      	mov	r6, r0
 80027fe:	b118      	cbz	r0, 8002808 <_vfiprintf_r+0x18>
 8002800:	6a03      	ldr	r3, [r0, #32]
 8002802:	b90b      	cbnz	r3, 8002808 <_vfiprintf_r+0x18>
 8002804:	f7ff fdcc 	bl	80023a0 <__sinit>
 8002808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800280a:	07d9      	lsls	r1, r3, #31
 800280c:	d405      	bmi.n	800281a <_vfiprintf_r+0x2a>
 800280e:	89ab      	ldrh	r3, [r5, #12]
 8002810:	059a      	lsls	r2, r3, #22
 8002812:	d402      	bmi.n	800281a <_vfiprintf_r+0x2a>
 8002814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002816:	f7ff fec7 	bl	80025a8 <__retarget_lock_acquire_recursive>
 800281a:	89ab      	ldrh	r3, [r5, #12]
 800281c:	071b      	lsls	r3, r3, #28
 800281e:	d501      	bpl.n	8002824 <_vfiprintf_r+0x34>
 8002820:	692b      	ldr	r3, [r5, #16]
 8002822:	b99b      	cbnz	r3, 800284c <_vfiprintf_r+0x5c>
 8002824:	4629      	mov	r1, r5
 8002826:	4630      	mov	r0, r6
 8002828:	f000 facc 	bl	8002dc4 <__swsetup_r>
 800282c:	b170      	cbz	r0, 800284c <_vfiprintf_r+0x5c>
 800282e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002830:	07dc      	lsls	r4, r3, #31
 8002832:	d504      	bpl.n	800283e <_vfiprintf_r+0x4e>
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	b01d      	add	sp, #116	; 0x74
 800283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800283e:	89ab      	ldrh	r3, [r5, #12]
 8002840:	0598      	lsls	r0, r3, #22
 8002842:	d4f7      	bmi.n	8002834 <_vfiprintf_r+0x44>
 8002844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002846:	f7ff feb0 	bl	80025aa <__retarget_lock_release_recursive>
 800284a:	e7f3      	b.n	8002834 <_vfiprintf_r+0x44>
 800284c:	2300      	movs	r3, #0
 800284e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002852:	f04f 0901 	mov.w	r9, #1
 8002856:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8002a10 <_vfiprintf_r+0x220>
 800285a:	9309      	str	r3, [sp, #36]	; 0x24
 800285c:	2320      	movs	r3, #32
 800285e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002862:	2330      	movs	r3, #48	; 0x30
 8002864:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002868:	4623      	mov	r3, r4
 800286a:	469a      	mov	sl, r3
 800286c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002870:	b10a      	cbz	r2, 8002876 <_vfiprintf_r+0x86>
 8002872:	2a25      	cmp	r2, #37	; 0x25
 8002874:	d1f9      	bne.n	800286a <_vfiprintf_r+0x7a>
 8002876:	ebba 0b04 	subs.w	fp, sl, r4
 800287a:	d00b      	beq.n	8002894 <_vfiprintf_r+0xa4>
 800287c:	465b      	mov	r3, fp
 800287e:	4622      	mov	r2, r4
 8002880:	4629      	mov	r1, r5
 8002882:	4630      	mov	r0, r6
 8002884:	f7ff ffa1 	bl	80027ca <__sfputs_r>
 8002888:	3001      	adds	r0, #1
 800288a:	f000 80a9 	beq.w	80029e0 <_vfiprintf_r+0x1f0>
 800288e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002890:	445a      	add	r2, fp
 8002892:	9209      	str	r2, [sp, #36]	; 0x24
 8002894:	f89a 3000 	ldrb.w	r3, [sl]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a1 	beq.w	80029e0 <_vfiprintf_r+0x1f0>
 800289e:	2300      	movs	r3, #0
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	f10a 0a01 	add.w	sl, sl, #1
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	9307      	str	r3, [sp, #28]
 80028ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80028b0:	931a      	str	r3, [sp, #104]	; 0x68
 80028b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028b6:	4654      	mov	r4, sl
 80028b8:	2205      	movs	r2, #5
 80028ba:	4855      	ldr	r0, [pc, #340]	; (8002a10 <_vfiprintf_r+0x220>)
 80028bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028c0:	f000 fae8 	bl	8002e94 <memchr>
 80028c4:	9a04      	ldr	r2, [sp, #16]
 80028c6:	b9d8      	cbnz	r0, 8002900 <_vfiprintf_r+0x110>
 80028c8:	06d1      	lsls	r1, r2, #27
 80028ca:	bf44      	itt	mi
 80028cc:	2320      	movmi	r3, #32
 80028ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028d2:	0713      	lsls	r3, r2, #28
 80028d4:	bf44      	itt	mi
 80028d6:	232b      	movmi	r3, #43	; 0x2b
 80028d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028dc:	f89a 3000 	ldrb.w	r3, [sl]
 80028e0:	2b2a      	cmp	r3, #42	; 0x2a
 80028e2:	d015      	beq.n	8002910 <_vfiprintf_r+0x120>
 80028e4:	9a07      	ldr	r2, [sp, #28]
 80028e6:	4654      	mov	r4, sl
 80028e8:	2000      	movs	r0, #0
 80028ea:	f04f 0c0a 	mov.w	ip, #10
 80028ee:	4621      	mov	r1, r4
 80028f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028f4:	3b30      	subs	r3, #48	; 0x30
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d94d      	bls.n	8002996 <_vfiprintf_r+0x1a6>
 80028fa:	b1b0      	cbz	r0, 800292a <_vfiprintf_r+0x13a>
 80028fc:	9207      	str	r2, [sp, #28]
 80028fe:	e014      	b.n	800292a <_vfiprintf_r+0x13a>
 8002900:	eba0 0308 	sub.w	r3, r0, r8
 8002904:	46a2      	mov	sl, r4
 8002906:	fa09 f303 	lsl.w	r3, r9, r3
 800290a:	4313      	orrs	r3, r2
 800290c:	9304      	str	r3, [sp, #16]
 800290e:	e7d2      	b.n	80028b6 <_vfiprintf_r+0xc6>
 8002910:	9b03      	ldr	r3, [sp, #12]
 8002912:	1d19      	adds	r1, r3, #4
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	9103      	str	r1, [sp, #12]
 800291a:	bfbb      	ittet	lt
 800291c:	425b      	neglt	r3, r3
 800291e:	f042 0202 	orrlt.w	r2, r2, #2
 8002922:	9307      	strge	r3, [sp, #28]
 8002924:	9307      	strlt	r3, [sp, #28]
 8002926:	bfb8      	it	lt
 8002928:	9204      	strlt	r2, [sp, #16]
 800292a:	7823      	ldrb	r3, [r4, #0]
 800292c:	2b2e      	cmp	r3, #46	; 0x2e
 800292e:	d10c      	bne.n	800294a <_vfiprintf_r+0x15a>
 8002930:	7863      	ldrb	r3, [r4, #1]
 8002932:	2b2a      	cmp	r3, #42	; 0x2a
 8002934:	d134      	bne.n	80029a0 <_vfiprintf_r+0x1b0>
 8002936:	9b03      	ldr	r3, [sp, #12]
 8002938:	3402      	adds	r4, #2
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	9203      	str	r2, [sp, #12]
 8002942:	bfb8      	it	lt
 8002944:	f04f 33ff 	movlt.w	r3, #4294967295
 8002948:	9305      	str	r3, [sp, #20]
 800294a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a20 <_vfiprintf_r+0x230>
 800294e:	2203      	movs	r2, #3
 8002950:	7821      	ldrb	r1, [r4, #0]
 8002952:	4650      	mov	r0, sl
 8002954:	f000 fa9e 	bl	8002e94 <memchr>
 8002958:	b138      	cbz	r0, 800296a <_vfiprintf_r+0x17a>
 800295a:	eba0 000a 	sub.w	r0, r0, sl
 800295e:	2240      	movs	r2, #64	; 0x40
 8002960:	9b04      	ldr	r3, [sp, #16]
 8002962:	3401      	adds	r4, #1
 8002964:	4082      	lsls	r2, r0
 8002966:	4313      	orrs	r3, r2
 8002968:	9304      	str	r3, [sp, #16]
 800296a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800296e:	2206      	movs	r2, #6
 8002970:	4828      	ldr	r0, [pc, #160]	; (8002a14 <_vfiprintf_r+0x224>)
 8002972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002976:	f000 fa8d 	bl	8002e94 <memchr>
 800297a:	2800      	cmp	r0, #0
 800297c:	d03f      	beq.n	80029fe <_vfiprintf_r+0x20e>
 800297e:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <_vfiprintf_r+0x228>)
 8002980:	bb1b      	cbnz	r3, 80029ca <_vfiprintf_r+0x1da>
 8002982:	9b03      	ldr	r3, [sp, #12]
 8002984:	3307      	adds	r3, #7
 8002986:	f023 0307 	bic.w	r3, r3, #7
 800298a:	3308      	adds	r3, #8
 800298c:	9303      	str	r3, [sp, #12]
 800298e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002990:	443b      	add	r3, r7
 8002992:	9309      	str	r3, [sp, #36]	; 0x24
 8002994:	e768      	b.n	8002868 <_vfiprintf_r+0x78>
 8002996:	fb0c 3202 	mla	r2, ip, r2, r3
 800299a:	460c      	mov	r4, r1
 800299c:	2001      	movs	r0, #1
 800299e:	e7a6      	b.n	80028ee <_vfiprintf_r+0xfe>
 80029a0:	2300      	movs	r3, #0
 80029a2:	3401      	adds	r4, #1
 80029a4:	f04f 0c0a 	mov.w	ip, #10
 80029a8:	4619      	mov	r1, r3
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	4620      	mov	r0, r4
 80029ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029b2:	3a30      	subs	r2, #48	; 0x30
 80029b4:	2a09      	cmp	r2, #9
 80029b6:	d903      	bls.n	80029c0 <_vfiprintf_r+0x1d0>
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0c6      	beq.n	800294a <_vfiprintf_r+0x15a>
 80029bc:	9105      	str	r1, [sp, #20]
 80029be:	e7c4      	b.n	800294a <_vfiprintf_r+0x15a>
 80029c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80029c4:	4604      	mov	r4, r0
 80029c6:	2301      	movs	r3, #1
 80029c8:	e7f0      	b.n	80029ac <_vfiprintf_r+0x1bc>
 80029ca:	ab03      	add	r3, sp, #12
 80029cc:	462a      	mov	r2, r5
 80029ce:	a904      	add	r1, sp, #16
 80029d0:	4630      	mov	r0, r6
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_vfiprintf_r+0x22c>)
 80029d6:	f3af 8000 	nop.w
 80029da:	4607      	mov	r7, r0
 80029dc:	1c78      	adds	r0, r7, #1
 80029de:	d1d6      	bne.n	800298e <_vfiprintf_r+0x19e>
 80029e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80029e2:	07d9      	lsls	r1, r3, #31
 80029e4:	d405      	bmi.n	80029f2 <_vfiprintf_r+0x202>
 80029e6:	89ab      	ldrh	r3, [r5, #12]
 80029e8:	059a      	lsls	r2, r3, #22
 80029ea:	d402      	bmi.n	80029f2 <_vfiprintf_r+0x202>
 80029ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80029ee:	f7ff fddc 	bl	80025aa <__retarget_lock_release_recursive>
 80029f2:	89ab      	ldrh	r3, [r5, #12]
 80029f4:	065b      	lsls	r3, r3, #25
 80029f6:	f53f af1d 	bmi.w	8002834 <_vfiprintf_r+0x44>
 80029fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029fc:	e71c      	b.n	8002838 <_vfiprintf_r+0x48>
 80029fe:	ab03      	add	r3, sp, #12
 8002a00:	462a      	mov	r2, r5
 8002a02:	a904      	add	r1, sp, #16
 8002a04:	4630      	mov	r0, r6
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <_vfiprintf_r+0x22c>)
 8002a0a:	f000 f87d 	bl	8002b08 <_printf_i>
 8002a0e:	e7e4      	b.n	80029da <_vfiprintf_r+0x1ea>
 8002a10:	08002ffc 	.word	0x08002ffc
 8002a14:	08003006 	.word	0x08003006
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	080027cb 	.word	0x080027cb
 8002a20:	08003002 	.word	0x08003002

08002a24 <_printf_common>:
 8002a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a28:	4616      	mov	r6, r2
 8002a2a:	4699      	mov	r9, r3
 8002a2c:	688a      	ldr	r2, [r1, #8]
 8002a2e:	4607      	mov	r7, r0
 8002a30:	690b      	ldr	r3, [r1, #16]
 8002a32:	460c      	mov	r4, r1
 8002a34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bfb8      	it	lt
 8002a3c:	4613      	movlt	r3, r2
 8002a3e:	6033      	str	r3, [r6, #0]
 8002a40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a44:	b10a      	cbz	r2, 8002a4a <_printf_common+0x26>
 8002a46:	3301      	adds	r3, #1
 8002a48:	6033      	str	r3, [r6, #0]
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	0699      	lsls	r1, r3, #26
 8002a4e:	bf42      	ittt	mi
 8002a50:	6833      	ldrmi	r3, [r6, #0]
 8002a52:	3302      	addmi	r3, #2
 8002a54:	6033      	strmi	r3, [r6, #0]
 8002a56:	6825      	ldr	r5, [r4, #0]
 8002a58:	f015 0506 	ands.w	r5, r5, #6
 8002a5c:	d106      	bne.n	8002a6c <_printf_common+0x48>
 8002a5e:	f104 0a19 	add.w	sl, r4, #25
 8002a62:	68e3      	ldr	r3, [r4, #12]
 8002a64:	6832      	ldr	r2, [r6, #0]
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	42ab      	cmp	r3, r5
 8002a6a:	dc2b      	bgt.n	8002ac4 <_printf_common+0xa0>
 8002a6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a70:	1e13      	subs	r3, r2, #0
 8002a72:	6822      	ldr	r2, [r4, #0]
 8002a74:	bf18      	it	ne
 8002a76:	2301      	movne	r3, #1
 8002a78:	0692      	lsls	r2, r2, #26
 8002a7a:	d430      	bmi.n	8002ade <_printf_common+0xba>
 8002a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a80:	4649      	mov	r1, r9
 8002a82:	4638      	mov	r0, r7
 8002a84:	47c0      	blx	r8
 8002a86:	3001      	adds	r0, #1
 8002a88:	d023      	beq.n	8002ad2 <_printf_common+0xae>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	341a      	adds	r4, #26
 8002a8e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	bf0a      	itet	eq
 8002a9a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8002a9e:	2500      	movne	r5, #0
 8002aa0:	6833      	ldreq	r3, [r6, #0]
 8002aa2:	f04f 0600 	mov.w	r6, #0
 8002aa6:	bf08      	it	eq
 8002aa8:	1aed      	subeq	r5, r5, r3
 8002aaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aae:	bf08      	it	eq
 8002ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bfc4      	itt	gt
 8002ab8:	1a9b      	subgt	r3, r3, r2
 8002aba:	18ed      	addgt	r5, r5, r3
 8002abc:	42b5      	cmp	r5, r6
 8002abe:	d11a      	bne.n	8002af6 <_printf_common+0xd2>
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	e008      	b.n	8002ad6 <_printf_common+0xb2>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	4652      	mov	r2, sl
 8002ac8:	4649      	mov	r1, r9
 8002aca:	4638      	mov	r0, r7
 8002acc:	47c0      	blx	r8
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d103      	bne.n	8002ada <_printf_common+0xb6>
 8002ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ada:	3501      	adds	r5, #1
 8002adc:	e7c1      	b.n	8002a62 <_printf_common+0x3e>
 8002ade:	18e1      	adds	r1, r4, r3
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	2030      	movs	r0, #48	; 0x30
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	4422      	add	r2, r4
 8002ae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002aec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002af0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002af4:	e7c2      	b.n	8002a7c <_printf_common+0x58>
 8002af6:	2301      	movs	r3, #1
 8002af8:	4622      	mov	r2, r4
 8002afa:	4649      	mov	r1, r9
 8002afc:	4638      	mov	r0, r7
 8002afe:	47c0      	blx	r8
 8002b00:	3001      	adds	r0, #1
 8002b02:	d0e6      	beq.n	8002ad2 <_printf_common+0xae>
 8002b04:	3601      	adds	r6, #1
 8002b06:	e7d9      	b.n	8002abc <_printf_common+0x98>

08002b08 <_printf_i>:
 8002b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b0c:	7e0f      	ldrb	r7, [r1, #24]
 8002b0e:	4691      	mov	r9, r2
 8002b10:	4680      	mov	r8, r0
 8002b12:	460c      	mov	r4, r1
 8002b14:	2f78      	cmp	r7, #120	; 0x78
 8002b16:	469a      	mov	sl, r3
 8002b18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002b1e:	d807      	bhi.n	8002b30 <_printf_i+0x28>
 8002b20:	2f62      	cmp	r7, #98	; 0x62
 8002b22:	d80a      	bhi.n	8002b3a <_printf_i+0x32>
 8002b24:	2f00      	cmp	r7, #0
 8002b26:	f000 80d3 	beq.w	8002cd0 <_printf_i+0x1c8>
 8002b2a:	2f58      	cmp	r7, #88	; 0x58
 8002b2c:	f000 80bf 	beq.w	8002cae <_printf_i+0x1a6>
 8002b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b38:	e03a      	b.n	8002bb0 <_printf_i+0xa8>
 8002b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b3e:	2b15      	cmp	r3, #21
 8002b40:	d8f6      	bhi.n	8002b30 <_printf_i+0x28>
 8002b42:	a101      	add	r1, pc, #4	; (adr r1, 8002b48 <_printf_i+0x40>)
 8002b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b48:	08002ba1 	.word	0x08002ba1
 8002b4c:	08002bb5 	.word	0x08002bb5
 8002b50:	08002b31 	.word	0x08002b31
 8002b54:	08002b31 	.word	0x08002b31
 8002b58:	08002b31 	.word	0x08002b31
 8002b5c:	08002b31 	.word	0x08002b31
 8002b60:	08002bb5 	.word	0x08002bb5
 8002b64:	08002b31 	.word	0x08002b31
 8002b68:	08002b31 	.word	0x08002b31
 8002b6c:	08002b31 	.word	0x08002b31
 8002b70:	08002b31 	.word	0x08002b31
 8002b74:	08002cb7 	.word	0x08002cb7
 8002b78:	08002be1 	.word	0x08002be1
 8002b7c:	08002c73 	.word	0x08002c73
 8002b80:	08002b31 	.word	0x08002b31
 8002b84:	08002b31 	.word	0x08002b31
 8002b88:	08002cd9 	.word	0x08002cd9
 8002b8c:	08002b31 	.word	0x08002b31
 8002b90:	08002be1 	.word	0x08002be1
 8002b94:	08002b31 	.word	0x08002b31
 8002b98:	08002b31 	.word	0x08002b31
 8002b9c:	08002c7b 	.word	0x08002c7b
 8002ba0:	682b      	ldr	r3, [r5, #0]
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	602a      	str	r2, [r5, #0]
 8002ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e09e      	b.n	8002cf2 <_printf_i+0x1ea>
 8002bb4:	6820      	ldr	r0, [r4, #0]
 8002bb6:	682b      	ldr	r3, [r5, #0]
 8002bb8:	0607      	lsls	r7, r0, #24
 8002bba:	f103 0104 	add.w	r1, r3, #4
 8002bbe:	6029      	str	r1, [r5, #0]
 8002bc0:	d501      	bpl.n	8002bc6 <_printf_i+0xbe>
 8002bc2:	681e      	ldr	r6, [r3, #0]
 8002bc4:	e003      	b.n	8002bce <_printf_i+0xc6>
 8002bc6:	0646      	lsls	r6, r0, #25
 8002bc8:	d5fb      	bpl.n	8002bc2 <_printf_i+0xba>
 8002bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002bce:	2e00      	cmp	r6, #0
 8002bd0:	da03      	bge.n	8002bda <_printf_i+0xd2>
 8002bd2:	232d      	movs	r3, #45	; 0x2d
 8002bd4:	4276      	negs	r6, r6
 8002bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bda:	4859      	ldr	r0, [pc, #356]	; (8002d40 <_printf_i+0x238>)
 8002bdc:	230a      	movs	r3, #10
 8002bde:	e012      	b.n	8002c06 <_printf_i+0xfe>
 8002be0:	682b      	ldr	r3, [r5, #0]
 8002be2:	6820      	ldr	r0, [r4, #0]
 8002be4:	1d19      	adds	r1, r3, #4
 8002be6:	6029      	str	r1, [r5, #0]
 8002be8:	0605      	lsls	r5, r0, #24
 8002bea:	d501      	bpl.n	8002bf0 <_printf_i+0xe8>
 8002bec:	681e      	ldr	r6, [r3, #0]
 8002bee:	e002      	b.n	8002bf6 <_printf_i+0xee>
 8002bf0:	0641      	lsls	r1, r0, #25
 8002bf2:	d5fb      	bpl.n	8002bec <_printf_i+0xe4>
 8002bf4:	881e      	ldrh	r6, [r3, #0]
 8002bf6:	2f6f      	cmp	r7, #111	; 0x6f
 8002bf8:	4851      	ldr	r0, [pc, #324]	; (8002d40 <_printf_i+0x238>)
 8002bfa:	bf0c      	ite	eq
 8002bfc:	2308      	moveq	r3, #8
 8002bfe:	230a      	movne	r3, #10
 8002c00:	2100      	movs	r1, #0
 8002c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c06:	6865      	ldr	r5, [r4, #4]
 8002c08:	2d00      	cmp	r5, #0
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	bfa2      	ittt	ge
 8002c0e:	6821      	ldrge	r1, [r4, #0]
 8002c10:	f021 0104 	bicge.w	r1, r1, #4
 8002c14:	6021      	strge	r1, [r4, #0]
 8002c16:	b90e      	cbnz	r6, 8002c1c <_printf_i+0x114>
 8002c18:	2d00      	cmp	r5, #0
 8002c1a:	d04a      	beq.n	8002cb2 <_printf_i+0x1aa>
 8002c1c:	4615      	mov	r5, r2
 8002c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002c22:	fb03 6711 	mls	r7, r3, r1, r6
 8002c26:	5dc7      	ldrb	r7, [r0, r7]
 8002c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002c2c:	4637      	mov	r7, r6
 8002c2e:	460e      	mov	r6, r1
 8002c30:	42bb      	cmp	r3, r7
 8002c32:	d9f4      	bls.n	8002c1e <_printf_i+0x116>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d10b      	bne.n	8002c50 <_printf_i+0x148>
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	07de      	lsls	r6, r3, #31
 8002c3c:	d508      	bpl.n	8002c50 <_printf_i+0x148>
 8002c3e:	6923      	ldr	r3, [r4, #16]
 8002c40:	6861      	ldr	r1, [r4, #4]
 8002c42:	4299      	cmp	r1, r3
 8002c44:	bfde      	ittt	le
 8002c46:	2330      	movle	r3, #48	; 0x30
 8002c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c50:	1b52      	subs	r2, r2, r5
 8002c52:	6122      	str	r2, [r4, #16]
 8002c54:	464b      	mov	r3, r9
 8002c56:	aa03      	add	r2, sp, #12
 8002c58:	4621      	mov	r1, r4
 8002c5a:	4640      	mov	r0, r8
 8002c5c:	f8cd a000 	str.w	sl, [sp]
 8002c60:	f7ff fee0 	bl	8002a24 <_printf_common>
 8002c64:	3001      	adds	r0, #1
 8002c66:	d149      	bne.n	8002cfc <_printf_i+0x1f4>
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	b004      	add	sp, #16
 8002c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	f043 0320 	orr.w	r3, r3, #32
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	2778      	movs	r7, #120	; 0x78
 8002c7c:	4831      	ldr	r0, [pc, #196]	; (8002d44 <_printf_i+0x23c>)
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002c84:	061f      	lsls	r7, r3, #24
 8002c86:	6829      	ldr	r1, [r5, #0]
 8002c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c8c:	d402      	bmi.n	8002c94 <_printf_i+0x18c>
 8002c8e:	065f      	lsls	r7, r3, #25
 8002c90:	bf48      	it	mi
 8002c92:	b2b6      	uxthmi	r6, r6
 8002c94:	07df      	lsls	r7, r3, #31
 8002c96:	6029      	str	r1, [r5, #0]
 8002c98:	bf44      	itt	mi
 8002c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8002c9e:	6023      	strmi	r3, [r4, #0]
 8002ca0:	b91e      	cbnz	r6, 8002caa <_printf_i+0x1a2>
 8002ca2:	6823      	ldr	r3, [r4, #0]
 8002ca4:	f023 0320 	bic.w	r3, r3, #32
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	2310      	movs	r3, #16
 8002cac:	e7a8      	b.n	8002c00 <_printf_i+0xf8>
 8002cae:	4824      	ldr	r0, [pc, #144]	; (8002d40 <_printf_i+0x238>)
 8002cb0:	e7e5      	b.n	8002c7e <_printf_i+0x176>
 8002cb2:	4615      	mov	r5, r2
 8002cb4:	e7be      	b.n	8002c34 <_printf_i+0x12c>
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	6826      	ldr	r6, [r4, #0]
 8002cba:	1d18      	adds	r0, r3, #4
 8002cbc:	6961      	ldr	r1, [r4, #20]
 8002cbe:	6028      	str	r0, [r5, #0]
 8002cc0:	0635      	lsls	r5, r6, #24
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	d501      	bpl.n	8002cca <_printf_i+0x1c2>
 8002cc6:	6019      	str	r1, [r3, #0]
 8002cc8:	e002      	b.n	8002cd0 <_printf_i+0x1c8>
 8002cca:	0670      	lsls	r0, r6, #25
 8002ccc:	d5fb      	bpl.n	8002cc6 <_printf_i+0x1be>
 8002cce:	8019      	strh	r1, [r3, #0]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	4615      	mov	r5, r2
 8002cd4:	6123      	str	r3, [r4, #16]
 8002cd6:	e7bd      	b.n	8002c54 <_printf_i+0x14c>
 8002cd8:	682b      	ldr	r3, [r5, #0]
 8002cda:	2100      	movs	r1, #0
 8002cdc:	1d1a      	adds	r2, r3, #4
 8002cde:	602a      	str	r2, [r5, #0]
 8002ce0:	681d      	ldr	r5, [r3, #0]
 8002ce2:	6862      	ldr	r2, [r4, #4]
 8002ce4:	4628      	mov	r0, r5
 8002ce6:	f000 f8d5 	bl	8002e94 <memchr>
 8002cea:	b108      	cbz	r0, 8002cf0 <_printf_i+0x1e8>
 8002cec:	1b40      	subs	r0, r0, r5
 8002cee:	6060      	str	r0, [r4, #4]
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	6123      	str	r3, [r4, #16]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cfa:	e7ab      	b.n	8002c54 <_printf_i+0x14c>
 8002cfc:	6923      	ldr	r3, [r4, #16]
 8002cfe:	462a      	mov	r2, r5
 8002d00:	4649      	mov	r1, r9
 8002d02:	4640      	mov	r0, r8
 8002d04:	47d0      	blx	sl
 8002d06:	3001      	adds	r0, #1
 8002d08:	d0ae      	beq.n	8002c68 <_printf_i+0x160>
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	079b      	lsls	r3, r3, #30
 8002d0e:	d413      	bmi.n	8002d38 <_printf_i+0x230>
 8002d10:	68e0      	ldr	r0, [r4, #12]
 8002d12:	9b03      	ldr	r3, [sp, #12]
 8002d14:	4298      	cmp	r0, r3
 8002d16:	bfb8      	it	lt
 8002d18:	4618      	movlt	r0, r3
 8002d1a:	e7a7      	b.n	8002c6c <_printf_i+0x164>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	4632      	mov	r2, r6
 8002d20:	4649      	mov	r1, r9
 8002d22:	4640      	mov	r0, r8
 8002d24:	47d0      	blx	sl
 8002d26:	3001      	adds	r0, #1
 8002d28:	d09e      	beq.n	8002c68 <_printf_i+0x160>
 8002d2a:	3501      	adds	r5, #1
 8002d2c:	68e3      	ldr	r3, [r4, #12]
 8002d2e:	9903      	ldr	r1, [sp, #12]
 8002d30:	1a5b      	subs	r3, r3, r1
 8002d32:	42ab      	cmp	r3, r5
 8002d34:	dcf2      	bgt.n	8002d1c <_printf_i+0x214>
 8002d36:	e7eb      	b.n	8002d10 <_printf_i+0x208>
 8002d38:	2500      	movs	r5, #0
 8002d3a:	f104 0619 	add.w	r6, r4, #25
 8002d3e:	e7f5      	b.n	8002d2c <_printf_i+0x224>
 8002d40:	0800300d 	.word	0x0800300d
 8002d44:	0800301e 	.word	0x0800301e

08002d48 <__swbuf_r>:
 8002d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4a:	460e      	mov	r6, r1
 8002d4c:	4614      	mov	r4, r2
 8002d4e:	4605      	mov	r5, r0
 8002d50:	b118      	cbz	r0, 8002d5a <__swbuf_r+0x12>
 8002d52:	6a03      	ldr	r3, [r0, #32]
 8002d54:	b90b      	cbnz	r3, 8002d5a <__swbuf_r+0x12>
 8002d56:	f7ff fb23 	bl	80023a0 <__sinit>
 8002d5a:	69a3      	ldr	r3, [r4, #24]
 8002d5c:	60a3      	str	r3, [r4, #8]
 8002d5e:	89a3      	ldrh	r3, [r4, #12]
 8002d60:	071a      	lsls	r2, r3, #28
 8002d62:	d525      	bpl.n	8002db0 <__swbuf_r+0x68>
 8002d64:	6923      	ldr	r3, [r4, #16]
 8002d66:	b31b      	cbz	r3, 8002db0 <__swbuf_r+0x68>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	b2f6      	uxtb	r6, r6
 8002d6c:	6922      	ldr	r2, [r4, #16]
 8002d6e:	4637      	mov	r7, r6
 8002d70:	1a98      	subs	r0, r3, r2
 8002d72:	6963      	ldr	r3, [r4, #20]
 8002d74:	4283      	cmp	r3, r0
 8002d76:	dc04      	bgt.n	8002d82 <__swbuf_r+0x3a>
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	f7ff fa5a 	bl	8002234 <_fflush_r>
 8002d80:	b9e0      	cbnz	r0, 8002dbc <__swbuf_r+0x74>
 8002d82:	68a3      	ldr	r3, [r4, #8]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	60a3      	str	r3, [r4, #8]
 8002d88:	6823      	ldr	r3, [r4, #0]
 8002d8a:	1c5a      	adds	r2, r3, #1
 8002d8c:	6022      	str	r2, [r4, #0]
 8002d8e:	701e      	strb	r6, [r3, #0]
 8002d90:	1c43      	adds	r3, r0, #1
 8002d92:	6962      	ldr	r2, [r4, #20]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d004      	beq.n	8002da2 <__swbuf_r+0x5a>
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	07db      	lsls	r3, r3, #31
 8002d9c:	d506      	bpl.n	8002dac <__swbuf_r+0x64>
 8002d9e:	2e0a      	cmp	r6, #10
 8002da0:	d104      	bne.n	8002dac <__swbuf_r+0x64>
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f7ff fa45 	bl	8002234 <_fflush_r>
 8002daa:	b938      	cbnz	r0, 8002dbc <__swbuf_r+0x74>
 8002dac:	4638      	mov	r0, r7
 8002dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db0:	4621      	mov	r1, r4
 8002db2:	4628      	mov	r0, r5
 8002db4:	f000 f806 	bl	8002dc4 <__swsetup_r>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	d0d5      	beq.n	8002d68 <__swbuf_r+0x20>
 8002dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8002dc0:	e7f4      	b.n	8002dac <__swbuf_r+0x64>
	...

08002dc4 <__swsetup_r>:
 8002dc4:	b538      	push	{r3, r4, r5, lr}
 8002dc6:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <__swsetup_r+0xac>)
 8002dc8:	4605      	mov	r5, r0
 8002dca:	460c      	mov	r4, r1
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	b118      	cbz	r0, 8002dd8 <__swsetup_r+0x14>
 8002dd0:	6a03      	ldr	r3, [r0, #32]
 8002dd2:	b90b      	cbnz	r3, 8002dd8 <__swsetup_r+0x14>
 8002dd4:	f7ff fae4 	bl	80023a0 <__sinit>
 8002dd8:	89a3      	ldrh	r3, [r4, #12]
 8002dda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002dde:	0718      	lsls	r0, r3, #28
 8002de0:	d422      	bmi.n	8002e28 <__swsetup_r+0x64>
 8002de2:	06d9      	lsls	r1, r3, #27
 8002de4:	d407      	bmi.n	8002df6 <__swsetup_r+0x32>
 8002de6:	2309      	movs	r3, #9
 8002de8:	602b      	str	r3, [r5, #0]
 8002dea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002dee:	f04f 30ff 	mov.w	r0, #4294967295
 8002df2:	81a3      	strh	r3, [r4, #12]
 8002df4:	e034      	b.n	8002e60 <__swsetup_r+0x9c>
 8002df6:	0758      	lsls	r0, r3, #29
 8002df8:	d512      	bpl.n	8002e20 <__swsetup_r+0x5c>
 8002dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002dfc:	b141      	cbz	r1, 8002e10 <__swsetup_r+0x4c>
 8002dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e02:	4299      	cmp	r1, r3
 8002e04:	d002      	beq.n	8002e0c <__swsetup_r+0x48>
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7ff fbd0 	bl	80025ac <_free_r>
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6363      	str	r3, [r4, #52]	; 0x34
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e16:	81a3      	strh	r3, [r4, #12]
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6063      	str	r3, [r4, #4]
 8002e1c:	6923      	ldr	r3, [r4, #16]
 8002e1e:	6023      	str	r3, [r4, #0]
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	81a3      	strh	r3, [r4, #12]
 8002e28:	6923      	ldr	r3, [r4, #16]
 8002e2a:	b94b      	cbnz	r3, 8002e40 <__swsetup_r+0x7c>
 8002e2c:	89a3      	ldrh	r3, [r4, #12]
 8002e2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e36:	d003      	beq.n	8002e40 <__swsetup_r+0x7c>
 8002e38:	4621      	mov	r1, r4
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	f000 f85d 	bl	8002efa <__smakebuf_r>
 8002e40:	89a0      	ldrh	r0, [r4, #12]
 8002e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e46:	f010 0301 	ands.w	r3, r0, #1
 8002e4a:	d00a      	beq.n	8002e62 <__swsetup_r+0x9e>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60a3      	str	r3, [r4, #8]
 8002e50:	6963      	ldr	r3, [r4, #20]
 8002e52:	425b      	negs	r3, r3
 8002e54:	61a3      	str	r3, [r4, #24]
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	b943      	cbnz	r3, 8002e6c <__swsetup_r+0xa8>
 8002e5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002e5e:	d1c4      	bne.n	8002dea <__swsetup_r+0x26>
 8002e60:	bd38      	pop	{r3, r4, r5, pc}
 8002e62:	0781      	lsls	r1, r0, #30
 8002e64:	bf58      	it	pl
 8002e66:	6963      	ldrpl	r3, [r4, #20]
 8002e68:	60a3      	str	r3, [r4, #8]
 8002e6a:	e7f4      	b.n	8002e56 <__swsetup_r+0x92>
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e7f7      	b.n	8002e60 <__swsetup_r+0x9c>
 8002e70:	20000064 	.word	0x20000064

08002e74 <_sbrk_r>:
 8002e74:	b538      	push	{r3, r4, r5, lr}
 8002e76:	2300      	movs	r3, #0
 8002e78:	4d05      	ldr	r5, [pc, #20]	; (8002e90 <_sbrk_r+0x1c>)
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	602b      	str	r3, [r5, #0]
 8002e80:	f7fd fbc2 	bl	8000608 <_sbrk>
 8002e84:	1c43      	adds	r3, r0, #1
 8002e86:	d102      	bne.n	8002e8e <_sbrk_r+0x1a>
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	b103      	cbz	r3, 8002e8e <_sbrk_r+0x1a>
 8002e8c:	6023      	str	r3, [r4, #0]
 8002e8e:	bd38      	pop	{r3, r4, r5, pc}
 8002e90:	20000218 	.word	0x20000218

08002e94 <memchr>:
 8002e94:	b2c9      	uxtb	r1, r1
 8002e96:	4402      	add	r2, r0
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	4290      	cmp	r0, r2
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	d101      	bne.n	8002ea4 <memchr+0x10>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e003      	b.n	8002eac <memchr+0x18>
 8002ea4:	781c      	ldrb	r4, [r3, #0]
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	428c      	cmp	r4, r1
 8002eaa:	d1f6      	bne.n	8002e9a <memchr+0x6>
 8002eac:	4618      	mov	r0, r3
 8002eae:	bd10      	pop	{r4, pc}

08002eb0 <__swhatbuf_r>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb8:	b096      	sub	sp, #88	; 0x58
 8002eba:	4615      	mov	r5, r2
 8002ebc:	2900      	cmp	r1, #0
 8002ebe:	461e      	mov	r6, r3
 8002ec0:	da0c      	bge.n	8002edc <__swhatbuf_r+0x2c>
 8002ec2:	89a3      	ldrh	r3, [r4, #12]
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002eca:	bf0c      	ite	eq
 8002ecc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002ed0:	2340      	movne	r3, #64	; 0x40
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	6031      	str	r1, [r6, #0]
 8002ed6:	602b      	str	r3, [r5, #0]
 8002ed8:	b016      	add	sp, #88	; 0x58
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	466a      	mov	r2, sp
 8002ede:	f000 f849 	bl	8002f74 <_fstat_r>
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	dbed      	blt.n	8002ec2 <__swhatbuf_r+0x12>
 8002ee6:	9901      	ldr	r1, [sp, #4]
 8002ee8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002eec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002ef0:	4259      	negs	r1, r3
 8002ef2:	4159      	adcs	r1, r3
 8002ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ef8:	e7eb      	b.n	8002ed2 <__swhatbuf_r+0x22>

08002efa <__smakebuf_r>:
 8002efa:	898b      	ldrh	r3, [r1, #12]
 8002efc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002efe:	079d      	lsls	r5, r3, #30
 8002f00:	4606      	mov	r6, r0
 8002f02:	460c      	mov	r4, r1
 8002f04:	d507      	bpl.n	8002f16 <__smakebuf_r+0x1c>
 8002f06:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	6123      	str	r3, [r4, #16]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	6163      	str	r3, [r4, #20]
 8002f12:	b002      	add	sp, #8
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
 8002f16:	ab01      	add	r3, sp, #4
 8002f18:	466a      	mov	r2, sp
 8002f1a:	f7ff ffc9 	bl	8002eb0 <__swhatbuf_r>
 8002f1e:	9900      	ldr	r1, [sp, #0]
 8002f20:	4605      	mov	r5, r0
 8002f22:	4630      	mov	r0, r6
 8002f24:	f7ff fbae 	bl	8002684 <_malloc_r>
 8002f28:	b948      	cbnz	r0, 8002f3e <__smakebuf_r+0x44>
 8002f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f2e:	059a      	lsls	r2, r3, #22
 8002f30:	d4ef      	bmi.n	8002f12 <__smakebuf_r+0x18>
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	f043 0302 	orr.w	r3, r3, #2
 8002f3a:	81a3      	strh	r3, [r4, #12]
 8002f3c:	e7e3      	b.n	8002f06 <__smakebuf_r+0xc>
 8002f3e:	89a3      	ldrh	r3, [r4, #12]
 8002f40:	6020      	str	r0, [r4, #0]
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	6120      	str	r0, [r4, #16]
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	9b00      	ldr	r3, [sp, #0]
 8002f4c:	6163      	str	r3, [r4, #20]
 8002f4e:	9b01      	ldr	r3, [sp, #4]
 8002f50:	b15b      	cbz	r3, 8002f6a <__smakebuf_r+0x70>
 8002f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f56:	4630      	mov	r0, r6
 8002f58:	f000 f81e 	bl	8002f98 <_isatty_r>
 8002f5c:	b128      	cbz	r0, 8002f6a <__smakebuf_r+0x70>
 8002f5e:	89a3      	ldrh	r3, [r4, #12]
 8002f60:	f023 0303 	bic.w	r3, r3, #3
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	81a3      	strh	r3, [r4, #12]
 8002f6a:	89a3      	ldrh	r3, [r4, #12]
 8002f6c:	431d      	orrs	r5, r3
 8002f6e:	81a5      	strh	r5, [r4, #12]
 8002f70:	e7cf      	b.n	8002f12 <__smakebuf_r+0x18>
	...

08002f74 <_fstat_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	2300      	movs	r3, #0
 8002f78:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_fstat_r+0x20>)
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	4611      	mov	r1, r2
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	f7fd fb18 	bl	80005b6 <_fstat>
 8002f86:	1c43      	adds	r3, r0, #1
 8002f88:	d102      	bne.n	8002f90 <_fstat_r+0x1c>
 8002f8a:	682b      	ldr	r3, [r5, #0]
 8002f8c:	b103      	cbz	r3, 8002f90 <_fstat_r+0x1c>
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	bd38      	pop	{r3, r4, r5, pc}
 8002f92:	bf00      	nop
 8002f94:	20000218 	.word	0x20000218

08002f98 <_isatty_r>:
 8002f98:	b538      	push	{r3, r4, r5, lr}
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	4d05      	ldr	r5, [pc, #20]	; (8002fb4 <_isatty_r+0x1c>)
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	602b      	str	r3, [r5, #0]
 8002fa4:	f7fd fb17 	bl	80005d6 <_isatty>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d102      	bne.n	8002fb2 <_isatty_r+0x1a>
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	b103      	cbz	r3, 8002fb2 <_isatty_r+0x1a>
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000218 	.word	0x20000218

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
