
FlexibleData.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009924  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb0  08009bb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb0  08009bb0  00019bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bb8  08009bb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bb8  08009bb8  00019bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009bc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  2000000c  08009bcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08009bcc  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010e12  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3d  00000000  00000000  00030e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd8  00000000  00000000  00032cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000937  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f715  00000000  00000000  000341e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e18  00000000  00000000  000638fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012c1b0  00000000  00000000  00074714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003144  00000000  00000000  001a08c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001a3a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009b58 	.word	0x08009b58

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08009b58 	.word	0x08009b58

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_UART_Transmit_DMA(&huart3, receivedData, sizeof(receivedData));
 80005b4:	2232      	movs	r2, #50	; 0x32
 80005b6:	491a      	ldr	r1, [pc, #104]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 80005ba:	f007 fe7d 	bl	80082b8 <HAL_UART_Transmit_DMA>

	GPIO_PinState state = GPIO_PIN_SET;
 80005be:	2301      	movs	r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]

	if (receivedData[1] == '0')
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2b30      	cmp	r3, #48	; 0x30
 80005c8:	d101      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x22>
		state = GPIO_PIN_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]

	if (receivedData[0] == 'R')
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b52      	cmp	r3, #82	; 0x52
 80005d4:	d106      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x38>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	461a      	mov	r2, r3
 80005da:	2110      	movs	r1, #16
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <HAL_UART_RxCpltCallback+0x7c>)
 80005de:	f001 fe37 	bl	8002250 <HAL_GPIO_WritePin>
 80005e2:	e014      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'G')
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b47      	cmp	r3, #71	; 0x47
 80005ea:	d106      	bne.n	80005fa <HAL_UART_RxCpltCallback+0x4e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <HAL_UART_RxCpltCallback+0x80>)
 80005f4:	f001 fe2c 	bl	8002250 <HAL_GPIO_WritePin>
 80005f8:	e009      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'Y')
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b59      	cmp	r3, #89	; 0x59
 8000600:	d105      	bne.n	800060e <HAL_UART_RxCpltCallback+0x62>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	461a      	mov	r2, r3
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_UART_RxCpltCallback+0x84>)
 800060a:	f001 fe21 	bl	8002250 <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart3, receivedData, sizeof(receivedData));
 800060e:	2232      	movs	r2, #50	; 0x32
 8000610:	4903      	ldr	r1, [pc, #12]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 8000614:	f007 ff18 	bl	8008448 <HAL_UART_Receive_DMA>

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200001ac 	.word	0x200001ac
 8000624:	20000028 	.word	0x20000028
 8000628:	42021800 	.word	0x42021800
 800062c:	42020400 	.word	0x42020400
 8000630:	42021400 	.word	0x42021400

08000634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */

	if (huart == &huart3)
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <HAL_UARTEx_RxEventCallback+0x44>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d112      	bne.n	800066e <HAL_UARTEx_RxEventCallback+0x3a>
	{
		HAL_UART_Transmit_DMA(&huart3, receivedData, Size);
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	461a      	mov	r2, r3
 800064c:	490b      	ldr	r1, [pc, #44]	; (800067c <HAL_UARTEx_RxEventCallback+0x48>)
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <HAL_UARTEx_RxEventCallback+0x44>)
 8000650:	f007 fe32 	bl	80082b8 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receivedData, sizeof(receivedData));
 8000654:	2232      	movs	r2, #50	; 0x32
 8000656:	4909      	ldr	r1, [pc, #36]	; (800067c <HAL_UARTEx_RxEventCallback+0x48>)
 8000658:	4807      	ldr	r0, [pc, #28]	; (8000678 <HAL_UARTEx_RxEventCallback+0x44>)
 800065a:	f009 f9ae 	bl	80099ba <HAL_UARTEx_ReceiveToIdle_DMA>

		__HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel7, DMA_IT_HT);
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	695a      	ldr	r2, [r3, #20]
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_UARTEx_RxEventCallback+0x4c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800066c:	615a      	str	r2, [r3, #20]
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000028 	.word	0x20000028
 800067c:	200001ac 	.word	0x200001ac
 8000680:	200000bc 	.word	0x200000bc

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000688:	f000 fbac 	bl	8000de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068c:	f000 f81c 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000690:	f000 f8ee 	bl	8000870 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000694:	f000 f870 	bl	8000778 <MX_GPDMA1_Init>
  MX_MEMORYMAP_Init();
 8000698:	f000 f896 	bl	80007c8 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 800069c:	f000 f89c 	bl	80007d8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, receivedData, sizeof(receivedData));
 80006a0:	2232      	movs	r2, #50	; 0x32
 80006a2:	4906      	ldr	r1, [pc, #24]	; (80006bc <main+0x38>)
 80006a4:	4806      	ldr	r0, [pc, #24]	; (80006c0 <main+0x3c>)
 80006a6:	f009 f988 	bl	80099ba <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel7, DMA_IT_HT);
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <main+0x40>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	695a      	ldr	r2, [r3, #20]
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <main+0x40>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <main+0x36>
 80006bc:	200001ac 	.word	0x200001ac
 80006c0:	20000028 	.word	0x20000028
 80006c4:	200000bc 	.word	0x200000bc

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09c      	sub	sp, #112	; 0x70
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2250      	movs	r2, #80	; 0x50
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f009 fa12 	bl	8009b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
 80006ec:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <SystemClock_Config+0xac>)
 80006f0:	691b      	ldr	r3, [r3, #16]
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <SystemClock_Config+0xac>)
 80006f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006f8:	6113      	str	r3, [r2, #16]
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <SystemClock_Config+0xac>)
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000706:	bf00      	nop
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <SystemClock_Config+0xac>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	f003 0308 	and.w	r3, r3, #8
 8000710:	2b08      	cmp	r3, #8
 8000712:	d1f9      	bne.n	8000708 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800071c:	2308      	movs	r3, #8
 800071e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fda7 	bl	8002280 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000738:	f000 f926 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	231f      	movs	r3, #31
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f9c8 	bl	8002af0 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000766:	f000 f90f 	bl	8000988 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3770      	adds	r7, #112	; 0x70
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	44020800 	.word	0x44020800

08000778 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_GPDMA1_Init+0x4c>)
 8000780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000784:	4a0f      	ldr	r2, [pc, #60]	; (80007c4 <MX_GPDMA1_Init+0x4c>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800078e:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_GPDMA1_Init+0x4c>)
 8000790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2021      	movs	r0, #33	; 0x21
 80007a2:	f000 fc76 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 80007a6:	2021      	movs	r0, #33	; 0x21
 80007a8:	f000 fc8d 	bl	80010c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	2022      	movs	r0, #34	; 0x22
 80007b2:	f000 fc6e 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 80007b6:	2022      	movs	r0, #34	; 0x22
 80007b8:	f000 fc85 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	44020c00 	.word	0x44020c00

080007c8 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007de:	4a23      	ldr	r2, [pc, #140]	; (800086c <MX_USART3_UART_Init+0x94>)
 80007e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_USART3_UART_Init+0x90>)
 80007fe:	220c      	movs	r2, #12
 8000800:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000820:	4811      	ldr	r0, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000822:	f007 fcf9 	bl	8008218 <HAL_UART_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800082c:	f000 f8ac 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000830:	2100      	movs	r1, #0
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000834:	f009 f845 	bl	80098c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800083e:	f000 f8a3 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000846:	f009 f87a 	bl	800993e <HAL_UARTEx_SetRxFifoThreshold>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000850:	f000 f89a 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_USART3_UART_Init+0x90>)
 8000856:	f008 fffb 	bl	8009850 <HAL_UARTEx_DisableFifoMode>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f892 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000028 	.word	0x20000028
 800086c:	40004800 	.word	0x40004800

08000870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	; 0x28
 8000874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_GPIO_Init+0x108>)
 8000888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800088c:	4a3a      	ldr	r2, [pc, #232]	; (8000978 <MX_GPIO_Init+0x108>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000896:	4b38      	ldr	r3, [pc, #224]	; (8000978 <MX_GPIO_Init+0x108>)
 8000898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a4:	4b34      	ldr	r3, [pc, #208]	; (8000978 <MX_GPIO_Init+0x108>)
 80008a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008aa:	4a33      	ldr	r2, [pc, #204]	; (8000978 <MX_GPIO_Init+0x108>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <MX_GPIO_Init+0x108>)
 80008b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <MX_GPIO_Init+0x108>)
 80008c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c8:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <MX_GPIO_Init+0x108>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <MX_GPIO_Init+0x108>)
 80008d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d8:	f003 0308 	and.w	r3, r3, #8
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_GPIO_Init+0x108>)
 80008e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008e6:	4a24      	ldr	r2, [pc, #144]	; (8000978 <MX_GPIO_Init+0x108>)
 80008e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_GPIO_Init+0x108>)
 80008f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2110      	movs	r1, #16
 8000902:	481e      	ldr	r0, [pc, #120]	; (800097c <MX_GPIO_Init+0x10c>)
 8000904:	f001 fca4 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2101      	movs	r1, #1
 800090c:	481c      	ldr	r0, [pc, #112]	; (8000980 <MX_GPIO_Init+0x110>)
 800090e:	f001 fc9f 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2110      	movs	r1, #16
 8000916:	481b      	ldr	r0, [pc, #108]	; (8000984 <MX_GPIO_Init+0x114>)
 8000918:	f001 fc9a 	bl	8002250 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800091c:	2310      	movs	r3, #16
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4812      	ldr	r0, [pc, #72]	; (800097c <MX_GPIO_Init+0x10c>)
 8000934:	f001 fb3a 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	480c      	ldr	r0, [pc, #48]	; (8000980 <MX_GPIO_Init+0x110>)
 8000950:	f001 fb2c 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000954:	2310      	movs	r3, #16
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <MX_GPIO_Init+0x114>)
 800096c:	f001 fb1e 	bl	8001fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	44020c00 	.word	0x44020c00
 800097c:	42021400 	.word	0x42021400
 8000980:	42020400 	.word	0x42020400
 8000984:	42021800 	.word	0x42021800

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>

08000992 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b0cc      	sub	sp, #304	; 0x130
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009ae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009c8:	4618      	mov	r0, r3
 80009ca:	f44f 7384 	mov.w	r3, #264	; 0x108
 80009ce:	461a      	mov	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f009 f895 	bl	8009b00 <memset>
  if(huart->Instance==USART3)
 80009d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a82      	ldr	r2, [pc, #520]	; (8000bec <HAL_UART_MspInit+0x24c>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	f040 80fb 	bne.w	8000be0 <HAL_UART_MspInit+0x240>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009ee:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80009f2:	f04f 0204 	mov.w	r2, #4
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a02:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000a06:	2200      	movs	r2, #0
 8000a08:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fbb0 	bl	8003174 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000a1a:	f7ff ffb5 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a1e:	4b74      	ldr	r3, [pc, #464]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a24:	4a72      	ldr	r2, [pc, #456]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000a2e:	4b70      	ldr	r3, [pc, #448]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000a34:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a3c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a46:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000a4a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4c:	4b68      	ldr	r3, [pc, #416]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a52:	4a67      	ldr	r2, [pc, #412]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000a5c:	4b64      	ldr	r3, [pc, #400]	; (8000bf0 <HAL_UART_MspInit+0x250>)
 8000a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000a62:	f003 0208 	and.w	r2, r3, #8
 8000a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a6a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a74:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a78:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a94:	2307      	movs	r3, #7
 8000a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4854      	ldr	r0, [pc, #336]	; (8000bf4 <HAL_UART_MspInit+0x254>)
 8000aa2:	f001 fa83 	bl	8001fac <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* GPDMA1_REQUEST_USART3_TX Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8000aa6:	4b54      	ldr	r3, [pc, #336]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000aa8:	4a54      	ldr	r2, [pc, #336]	; (8000bfc <HAL_UART_MspInit+0x25c>)
 8000aaa:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART3_TX;
 8000aac:	4b52      	ldr	r3, [pc, #328]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000aae:	221a      	movs	r2, #26
 8000ab0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ab2:	4b51      	ldr	r3, [pc, #324]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ab8:	4b4f      	ldr	r3, [pc, #316]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000abe:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_FIXED;
 8000ac6:	4b4c      	ldr	r3, [pc, #304]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000acc:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000ad2:	4b49      	ldr	r3, [pc, #292]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000ad8:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8000ade:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8000ae4:	4b44      	ldr	r3, [pc, #272]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000aea:	4b43      	ldr	r3, [pc, #268]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000af0:	4b41      	ldr	r3, [pc, #260]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8000af6:	4b40      	ldr	r3, [pc, #256]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8000afc:	483e      	ldr	r0, [pc, #248]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000afe:	f000 fafd 	bl	80010fc <HAL_DMA_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8000b08:	f7ff ff3e 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel7);
 8000b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a38      	ldr	r2, [pc, #224]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000b18:	67da      	str	r2, [r3, #124]	; 0x7c
 8000b1a:	4a37      	ldr	r2, [pc, #220]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b28:	2110      	movs	r1, #16
 8000b2a:	4833      	ldr	r0, [pc, #204]	; (8000bf8 <HAL_UART_MspInit+0x258>)
 8000b2c:	f000 fe95 	bl	800185a <HAL_DMA_ConfigChannelAttributes>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 8000b36:	f7ff ff27 	bl	8000988 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART3_RX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_UART_MspInit+0x264>)
 8000b3e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b42:	2219      	movs	r2, #25
 8000b44:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel6.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000b46:	4b2e      	ldr	r3, [pc, #184]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel6.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_FIXED;
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_INCREMENTED;
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b5a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b5e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel6.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000b60:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 8000b72:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 8000b78:	4b21      	ldr	r3, [pc, #132]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8000b90:	481b      	ldr	r0, [pc, #108]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000b92:	f000 fab3 	bl	80010fc <HAL_DMA_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x200>
    {
      Error_Handler();
 8000b9c:	f7ff fef4 	bl	8000988 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel6);
 8000ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <HAL_UART_MspInit+0x260>)
 8000bc2:	f000 fe4a 	bl	800185a <HAL_DMA_ConfigChannelAttributes>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_UART_MspInit+0x230>
    {
      Error_Handler();
 8000bcc:	f7ff fedc 	bl	8000988 <Error_Handler>
    }

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	203c      	movs	r0, #60	; 0x3c
 8000bd6:	f000 fa5c 	bl	8001092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bda:	203c      	movs	r0, #60	; 0x3c
 8000bdc:	f000 fa73 	bl	80010c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40004800 	.word	0x40004800
 8000bf0:	44020c00 	.word	0x44020c00
 8000bf4:	42020c00 	.word	0x42020c00
 8000bf8:	200000bc 	.word	0x200000bc
 8000bfc:	400203d0 	.word	0x400203d0
 8000c00:	20000134 	.word	0x20000134
 8000c04:	40020350 	.word	0x40020350

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f922 	bl	8000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <GPDMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 6 global interrupt.
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <GPDMA1_Channel6_IRQHandler+0x10>)
 8000c62:	f000 fc80 	bl	8001566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 1 */

  /* USER CODE END GPDMA1_Channel6_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000134 	.word	0x20000134

08000c70 <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <GPDMA1_Channel7_IRQHandler+0x10>)
 8000c76:	f000 fc76 	bl	8001566 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000bc 	.word	0x200000bc

08000c84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <USART3_IRQHandler+0x10>)
 8000c8a:	f007 fc2f 	bl	80084ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000028 	.word	0x20000028

08000c98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9e:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <SystemInit+0xdc>)
 8000ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca4:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <SystemInit+0xdc>)
 8000ca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000caa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemInit+0xe0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <SystemInit+0xe0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <SystemInit+0xe0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <SystemInit+0xe0>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	492c      	ldr	r1, [pc, #176]	; (8000d78 <SystemInit+0xe0>)
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <SystemInit+0xe4>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000ccc:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <SystemInit+0xe0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000cd2:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <SystemInit+0xe0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <SystemInit+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <SystemInit+0xe0>)
 8000ce0:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <SystemInit+0xe8>)
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <SystemInit+0xe0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <SystemInit+0xe0>)
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <SystemInit+0xe8>)
 8000cee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <SystemInit+0xe0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	; (8000d78 <SystemInit+0xe0>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <SystemInit+0xe8>)
 8000cfa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <SystemInit+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <SystemInit+0xe0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <SystemInit+0xe0>)
 8000d08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <SystemInit+0xe0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d14:	4b17      	ldr	r3, [pc, #92]	; (8000d74 <SystemInit+0xdc>)
 8000d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d1a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <SystemInit+0xec>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000d24:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000d2c:	d003      	beq.n	8000d36 <SystemInit+0x9e>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d34:	d117      	bne.n	8000d66 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <SystemInit+0xec>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d005      	beq.n	8000d4e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <SystemInit+0xec>)
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <SystemInit+0xf0>)
 8000d46:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <SystemInit+0xec>)
 8000d4a:	4a10      	ldr	r2, [pc, #64]	; (8000d8c <SystemInit+0xf4>)
 8000d4c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <SystemInit+0xec>)
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <SystemInit+0xec>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	; (8000d84 <SystemInit+0xec>)
 8000d5c:	69db      	ldr	r3, [r3, #28]
 8000d5e:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <SystemInit+0xec>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	61d3      	str	r3, [r2, #28]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00
 8000d78:	44020c00 	.word	0x44020c00
 8000d7c:	eae2eae3 	.word	0xeae2eae3
 8000d80:	01010280 	.word	0x01010280
 8000d84:	40022000 	.word	0x40022000
 8000d88:	08192a3b 	.word	0x08192a3b
 8000d8c:	4c5d6e7f 	.word	0x4c5d6e7f

08000d90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d94:	f7ff ff80 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	; (8000dd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <LoopForever+0xe>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	; (8000dd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	; (8000ddc <LoopForever+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dbe:	f008 fea7 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dc2:	f7ff fc5f 	bl	8000684 <main>

08000dc6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc6:	e7fe      	b.n	8000dc6 <LoopForever>
  ldr   r0, =_estack
 8000dc8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd4:	08009bc0 	.word	0x08009bc0
  ldr r2, =_sbss
 8000dd8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ddc:	200001e4 	.word	0x200001e4

08000de0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC1_IRQHandler>
	...

08000de4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f947 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000dee:	f002 f837 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8000df2:	4602      	mov	r2, r0
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <HAL_Init+0x40>)
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	f003 030f 	and.w	r3, r3, #15
 8000dfc:	490a      	ldr	r1, [pc, #40]	; (8000e28 <HAL_Init+0x44>)
 8000dfe:	5ccb      	ldrb	r3, [r1, r3]
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_Init+0x48>)
 8000e06:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e08:	200f      	movs	r0, #15
 8000e0a:	f000 f811 	bl	8000e30 <HAL_InitTick>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e002      	b.n	8000e1e <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fdbb 	bl	8000992 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	44020c00 	.word	0x44020c00
 8000e28:	08009b70 	.word	0x08009b70
 8000e2c:	20000000 	.word	0x20000000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d101      	bne.n	8000e44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e021      	b.n	8000e88 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e44:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_InitTick+0x64>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_InitTick+0x60>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f941 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00e      	b.n	8000e88 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d80a      	bhi.n	8000e86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f000 f90b 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e7c:	4a06      	ldr	r2, [pc, #24]	; (8000e98 <HAL_InitTick+0x68>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x24>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <HAL_IncTick+0x24>)
 8000eae:	6013      	str	r3, [r2, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008
 8000ec0:	200001e0 	.word	0x200001e0

08000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <HAL_GetTick+0x14>)
 8000eca:	681b      	ldr	r3, [r3, #0]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	200001e0 	.word	0x200001e0

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff40 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff33 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa4 	bl	8001038 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8001104:	f7ff fede 	bl	8000ec4 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d101      	bne.n	8001114 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0df      	b.n	80012d4 <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <HAL_DMA_Init+0x1e0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	f000 809f 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a6c      	ldr	r2, [pc, #432]	; (80012e0 <HAL_DMA_Init+0x1e4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	f000 8099 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a6a      	ldr	r2, [pc, #424]	; (80012e4 <HAL_DMA_Init+0x1e8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	f000 8093 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a68      	ldr	r2, [pc, #416]	; (80012e8 <HAL_DMA_Init+0x1ec>)
 8001146:	4293      	cmp	r3, r2
 8001148:	f000 808d 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a66      	ldr	r2, [pc, #408]	; (80012ec <HAL_DMA_Init+0x1f0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	f000 8087 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <HAL_DMA_Init+0x1f4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	f000 8081 	beq.w	8001266 <HAL_DMA_Init+0x16a>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <HAL_DMA_Init+0x1f8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d07b      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a61      	ldr	r2, [pc, #388]	; (80012f8 <HAL_DMA_Init+0x1fc>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d076      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <HAL_DMA_Init+0x200>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d071      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <HAL_DMA_Init+0x204>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d06c      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a5c      	ldr	r2, [pc, #368]	; (8001304 <HAL_DMA_Init+0x208>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d067      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5b      	ldr	r2, [pc, #364]	; (8001308 <HAL_DMA_Init+0x20c>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d062      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a59      	ldr	r2, [pc, #356]	; (800130c <HAL_DMA_Init+0x210>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d05d      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_DMA_Init+0x214>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d058      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a56      	ldr	r2, [pc, #344]	; (8001314 <HAL_DMA_Init+0x218>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d053      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_DMA_Init+0x21c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d04e      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a53      	ldr	r2, [pc, #332]	; (800131c <HAL_DMA_Init+0x220>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d049      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_DMA_Init+0x224>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d044      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a50      	ldr	r2, [pc, #320]	; (8001324 <HAL_DMA_Init+0x228>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d03f      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4f      	ldr	r2, [pc, #316]	; (8001328 <HAL_DMA_Init+0x22c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d03a      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_DMA_Init+0x230>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d035      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_DMA_Init+0x234>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d030      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4a      	ldr	r2, [pc, #296]	; (8001334 <HAL_DMA_Init+0x238>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d02b      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a49      	ldr	r2, [pc, #292]	; (8001338 <HAL_DMA_Init+0x23c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d026      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a47      	ldr	r2, [pc, #284]	; (800133c <HAL_DMA_Init+0x240>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d021      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a46      	ldr	r2, [pc, #280]	; (8001340 <HAL_DMA_Init+0x244>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d01c      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a44      	ldr	r2, [pc, #272]	; (8001344 <HAL_DMA_Init+0x248>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d017      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a43      	ldr	r2, [pc, #268]	; (8001348 <HAL_DMA_Init+0x24c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d012      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a41      	ldr	r2, [pc, #260]	; (800134c <HAL_DMA_Init+0x250>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00d      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a40      	ldr	r2, [pc, #256]	; (8001350 <HAL_DMA_Init+0x254>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d008      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a3e      	ldr	r2, [pc, #248]	; (8001354 <HAL_DMA_Init+0x258>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d003      	beq.n	8001266 <HAL_DMA_Init+0x16a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <HAL_DMA_Init+0x25c>)
 8001264:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2202      	movs	r2, #2
 8001272:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0206 	orr.w	r2, r2, #6
 8001284:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001286:	e00f      	b.n	80012a8 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001288:	f7ff fe1c 	bl	8000ec4 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b05      	cmp	r3, #5
 8001294:	d908      	bls.n	80012a8 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2210      	movs	r2, #16
 800129a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e015      	b.n	80012d4 <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1e8      	bne.n	8001288 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fb30 	bl	800191c <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2201      	movs	r2, #1
 80012ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020050 	.word	0x40020050
 80012e0:	50020050 	.word	0x50020050
 80012e4:	400200d0 	.word	0x400200d0
 80012e8:	500200d0 	.word	0x500200d0
 80012ec:	40020150 	.word	0x40020150
 80012f0:	50020150 	.word	0x50020150
 80012f4:	400201d0 	.word	0x400201d0
 80012f8:	500201d0 	.word	0x500201d0
 80012fc:	40020250 	.word	0x40020250
 8001300:	50020250 	.word	0x50020250
 8001304:	400202d0 	.word	0x400202d0
 8001308:	500202d0 	.word	0x500202d0
 800130c:	40020350 	.word	0x40020350
 8001310:	50020350 	.word	0x50020350
 8001314:	400203d0 	.word	0x400203d0
 8001318:	500203d0 	.word	0x500203d0
 800131c:	40021050 	.word	0x40021050
 8001320:	50021050 	.word	0x50021050
 8001324:	400210d0 	.word	0x400210d0
 8001328:	500210d0 	.word	0x500210d0
 800132c:	40021150 	.word	0x40021150
 8001330:	50021150 	.word	0x50021150
 8001334:	400211d0 	.word	0x400211d0
 8001338:	500211d0 	.word	0x500211d0
 800133c:	40021250 	.word	0x40021250
 8001340:	50021250 	.word	0x50021250
 8001344:	400212d0 	.word	0x400212d0
 8001348:	500212d0 	.word	0x500212d0
 800134c:	40021350 	.word	0x40021350
 8001350:	50021350 	.word	0x50021350
 8001354:	400213d0 	.word	0x400213d0
 8001358:	500213d0 	.word	0x500213d0

0800135c <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e04f      	b.n	8001414 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_DMA_Start_IT+0x26>
 800137e:	2302      	movs	r3, #2
 8001380:	e048      	b.n	8001414 <HAL_DMA_Start_IT+0xb8>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d136      	bne.n	8001404 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 fa91 	bl	80018d2 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695a      	ldr	r2, [r3, #20]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80013be:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d007      	beq.n	80013d8 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	695a      	ldr	r2, [r3, #20]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d6:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013ee:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0201 	orr.w	r2, r2, #1
 80013fe:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	e007      	b.n	8001414 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001424:	f7ff fd4e 	bl	8000ec4 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e06b      	b.n	800150c <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d008      	beq.n	8001452 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2220      	movs	r2, #32
 8001444:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e05c      	b.n	800150c <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	695a      	ldr	r2, [r3, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f042 0204 	orr.w	r2, r2, #4
 8001460:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2205      	movs	r2, #5
 8001466:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800146a:	e020      	b.n	80014ae <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800146c:	f7ff fd2a 	bl	8000ec4 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b05      	cmp	r3, #5
 8001478:	d919      	bls.n	80014ae <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f043 0210 	orr.w	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2203      	movs	r2, #3
 800148a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149e:	2201      	movs	r2, #1
 80014a0:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e02e      	b.n	800150c <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0d7      	beq.n	800146c <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	695a      	ldr	r2, [r3, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0202 	orr.w	r2, r2, #2
 80014ca:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2204      	movs	r2, #4
 80014d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80014dc:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f6:	2201      	movs	r2, #1
 80014f8:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2200      	movs	r2, #0
 8001500:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e019      	b.n	800155a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d004      	beq.n	800153c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2220      	movs	r2, #32
 8001536:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e00e      	b.n	800155a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2204      	movs	r2, #4
 8001540:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001576:	f023 030f 	bic.w	r3, r3, #15
 800157a:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001584:	3b50      	subs	r3, #80	; 0x50
 8001586:	09db      	lsrs	r3, r3, #7
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2201      	movs	r2, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 8154 	beq.w	800184e <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d011      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ca:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d011      	beq.n	800160a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f043 0202 	orr.w	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d011      	beq.n	800163c <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00a      	beq.n	800163c <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800162e:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d011      	beq.n	800166e <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001660:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001666:	f043 0208 	orr.w	r2, r3, #8
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001678:	2b00      	cmp	r3, #0
 800167a:	d013      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001692:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d059      	beq.n	8001766 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d052      	beq.n	8001766 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c8:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d13b      	bne.n	800174e <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695a      	ldr	r2, [r3, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016e4:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f042 0202 	orr.w	r2, r2, #2
 80016f4:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2203      	movs	r2, #3
 8001708:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800170c:	e003      	b.n	8001716 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	2b00      	cmp	r3, #0
 8001720:	d007      	beq.n	8001732 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001726:	2201      	movs	r2, #1
 8001728:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8087 	beq.w	8001852 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
        }

        return;
 800174c:	e081      	b.n	8001852 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2205      	movs	r2, #5
 8001752:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001770:	2b00      	cmp	r3, #0
 8001772:	d039      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d032      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178a:	2b00      	cmp	r3, #0
 800178c:	d012      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d116      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d111      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017ae:	2201      	movs	r2, #1
 80017b0:	731a      	strb	r2, [r3, #12]
 80017b2:	e008      	b.n	80017c6 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2201      	movs	r2, #1
 80017c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017ce:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d031      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	695a      	ldr	r2, [r3, #20]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0202 	orr.w	r2, r2, #2
 80017fe:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2203      	movs	r2, #3
 8001812:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001816:	e003      	b.n	8001820 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001828:	2b00      	cmp	r3, #0
 800182a:	d003      	beq.n	8001834 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001830:	2201      	movs	r2, #1
 8001832:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001840:	2b00      	cmp	r3, #0
 8001842:	d007      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
 800184c:	e002      	b.n	8001854 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8001852:	bf00      	nop
    }
  }
}
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e02b      	b.n	80018c6 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001876:	f023 030f 	bic.w	r3, r3, #15
 800187a:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001884:	3b50      	subs	r3, #80	; 0x50
 8001886:	09db      	lsrs	r3, r3, #7
 8001888:	f003 031f 	and.w	r3, r3, #31
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f003 0310 	and.w	r3, r3, #16
 800189a:	2b00      	cmp	r3, #0
 800189c:	d012      	beq.n	80018c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f003 0311 	and.w	r3, r3, #17
 80018a4:	2b11      	cmp	r3, #17
 80018a6:	d106      	bne.n	80018b6 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
 80018b4:	e006      	b.n	80018c4 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
 80018de:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	b291      	uxth	r1, r2
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6812      	ldr	r2, [r2, #0]
 80018f2:	430b      	orrs	r3, r1
 80018f4:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80018fe:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	430a      	orrs	r2, r1
 800193c:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695a      	ldr	r2, [r3, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a53      	ldr	r2, [pc, #332]	; (8001aa8 <DMA_Init+0x18c>)
 800195c:	4293      	cmp	r3, r2
 800195e:	f000 80a0 	beq.w	8001aa2 <DMA_Init+0x186>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a51      	ldr	r2, [pc, #324]	; (8001aac <DMA_Init+0x190>)
 8001968:	4293      	cmp	r3, r2
 800196a:	f000 809a 	beq.w	8001aa2 <DMA_Init+0x186>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <DMA_Init+0x194>)
 8001974:	4293      	cmp	r3, r2
 8001976:	f000 8094 	beq.w	8001aa2 <DMA_Init+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a4d      	ldr	r2, [pc, #308]	; (8001ab4 <DMA_Init+0x198>)
 8001980:	4293      	cmp	r3, r2
 8001982:	f000 808e 	beq.w	8001aa2 <DMA_Init+0x186>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a4b      	ldr	r2, [pc, #300]	; (8001ab8 <DMA_Init+0x19c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	f000 8088 	beq.w	8001aa2 <DMA_Init+0x186>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <DMA_Init+0x1a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	f000 8082 	beq.w	8001aa2 <DMA_Init+0x186>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <DMA_Init+0x1a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d07c      	beq.n	8001aa2 <DMA_Init+0x186>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <DMA_Init+0x1a8>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d077      	beq.n	8001aa2 <DMA_Init+0x186>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a44      	ldr	r2, [pc, #272]	; (8001ac8 <DMA_Init+0x1ac>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d072      	beq.n	8001aa2 <DMA_Init+0x186>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <DMA_Init+0x1b0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d06d      	beq.n	8001aa2 <DMA_Init+0x186>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <DMA_Init+0x1b4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d068      	beq.n	8001aa2 <DMA_Init+0x186>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <DMA_Init+0x1b8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d063      	beq.n	8001aa2 <DMA_Init+0x186>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a3e      	ldr	r2, [pc, #248]	; (8001ad8 <DMA_Init+0x1bc>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d05e      	beq.n	8001aa2 <DMA_Init+0x186>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <DMA_Init+0x1c0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d059      	beq.n	8001aa2 <DMA_Init+0x186>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a3b      	ldr	r2, [pc, #236]	; (8001ae0 <DMA_Init+0x1c4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d054      	beq.n	8001aa2 <DMA_Init+0x186>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a39      	ldr	r2, [pc, #228]	; (8001ae4 <DMA_Init+0x1c8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d04f      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <DMA_Init+0x1cc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d04a      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a36      	ldr	r2, [pc, #216]	; (8001aec <DMA_Init+0x1d0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d045      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a35      	ldr	r2, [pc, #212]	; (8001af0 <DMA_Init+0x1d4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d040      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a33      	ldr	r2, [pc, #204]	; (8001af4 <DMA_Init+0x1d8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d03b      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a32      	ldr	r2, [pc, #200]	; (8001af8 <DMA_Init+0x1dc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d036      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a30      	ldr	r2, [pc, #192]	; (8001afc <DMA_Init+0x1e0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d031      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <DMA_Init+0x1e4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d02c      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2d      	ldr	r2, [pc, #180]	; (8001b04 <DMA_Init+0x1e8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d027      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2c      	ldr	r2, [pc, #176]	; (8001b08 <DMA_Init+0x1ec>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d022      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <DMA_Init+0x1f0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01d      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <DMA_Init+0x1f4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d018      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <DMA_Init+0x1f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d013      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a26      	ldr	r2, [pc, #152]	; (8001b18 <DMA_Init+0x1fc>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00e      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <DMA_Init+0x200>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a23      	ldr	r2, [pc, #140]	; (8001b20 <DMA_Init+0x204>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d004      	beq.n	8001aa2 <DMA_Init+0x186>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <DMA_Init+0x208>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d142      	bne.n	8001b28 <DMA_Init+0x20c>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e041      	b.n	8001b2a <DMA_Init+0x20e>
 8001aa6:	bf00      	nop
 8001aa8:	40020050 	.word	0x40020050
 8001aac:	50020050 	.word	0x50020050
 8001ab0:	400200d0 	.word	0x400200d0
 8001ab4:	500200d0 	.word	0x500200d0
 8001ab8:	40020150 	.word	0x40020150
 8001abc:	50020150 	.word	0x50020150
 8001ac0:	400201d0 	.word	0x400201d0
 8001ac4:	500201d0 	.word	0x500201d0
 8001ac8:	40020250 	.word	0x40020250
 8001acc:	50020250 	.word	0x50020250
 8001ad0:	400202d0 	.word	0x400202d0
 8001ad4:	500202d0 	.word	0x500202d0
 8001ad8:	40020350 	.word	0x40020350
 8001adc:	50020350 	.word	0x50020350
 8001ae0:	400203d0 	.word	0x400203d0
 8001ae4:	500203d0 	.word	0x500203d0
 8001ae8:	40021050 	.word	0x40021050
 8001aec:	50021050 	.word	0x50021050
 8001af0:	400210d0 	.word	0x400210d0
 8001af4:	500210d0 	.word	0x500210d0
 8001af8:	40021150 	.word	0x40021150
 8001afc:	50021150 	.word	0x50021150
 8001b00:	400211d0 	.word	0x400211d0
 8001b04:	500211d0 	.word	0x500211d0
 8001b08:	40021250 	.word	0x40021250
 8001b0c:	50021250 	.word	0x50021250
 8001b10:	400212d0 	.word	0x400212d0
 8001b14:	500212d0 	.word	0x500212d0
 8001b18:	40021350 	.word	0x40021350
 8001b1c:	50021350 	.word	0x50021350
 8001b20:	400213d0 	.word	0x400213d0
 8001b24:	500213d0 	.word	0x500213d0
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d012      	beq.n	8001b54 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	3b01      	subs	r3, #1
 8001b38:	051b      	lsls	r3, r3, #20
 8001b3a:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b3e:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	3b01      	subs	r3, #1
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b4c:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* defined (DMA_CTR1_SSEC) */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b84:	f040 80b0 	bne.w	8001ce8 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a84      	ldr	r2, [pc, #528]	; (8001da0 <DMA_Init+0x484>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	f000 80a0 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a82      	ldr	r2, [pc, #520]	; (8001da4 <DMA_Init+0x488>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	f000 809a 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a80      	ldr	r2, [pc, #512]	; (8001da8 <DMA_Init+0x48c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	f000 8094 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a7e      	ldr	r2, [pc, #504]	; (8001dac <DMA_Init+0x490>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	f000 808e 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7c      	ldr	r2, [pc, #496]	; (8001db0 <DMA_Init+0x494>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	f000 8088 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <DMA_Init+0x498>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	f000 8082 	beq.w	8001cd4 <DMA_Init+0x3b8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a78      	ldr	r2, [pc, #480]	; (8001db8 <DMA_Init+0x49c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d07c      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <DMA_Init+0x4a0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d077      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a75      	ldr	r2, [pc, #468]	; (8001dc0 <DMA_Init+0x4a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d072      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a74      	ldr	r2, [pc, #464]	; (8001dc4 <DMA_Init+0x4a8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d06d      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a72      	ldr	r2, [pc, #456]	; (8001dc8 <DMA_Init+0x4ac>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d068      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a71      	ldr	r2, [pc, #452]	; (8001dcc <DMA_Init+0x4b0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d063      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6f      	ldr	r2, [pc, #444]	; (8001dd0 <DMA_Init+0x4b4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d05e      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6e      	ldr	r2, [pc, #440]	; (8001dd4 <DMA_Init+0x4b8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d059      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <DMA_Init+0x4bc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d054      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a6b      	ldr	r2, [pc, #428]	; (8001ddc <DMA_Init+0x4c0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d04f      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <DMA_Init+0x4c4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d04a      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a68      	ldr	r2, [pc, #416]	; (8001de4 <DMA_Init+0x4c8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d045      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a66      	ldr	r2, [pc, #408]	; (8001de8 <DMA_Init+0x4cc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d040      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a65      	ldr	r2, [pc, #404]	; (8001dec <DMA_Init+0x4d0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d03b      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a63      	ldr	r2, [pc, #396]	; (8001df0 <DMA_Init+0x4d4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d036      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a62      	ldr	r2, [pc, #392]	; (8001df4 <DMA_Init+0x4d8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d031      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a60      	ldr	r2, [pc, #384]	; (8001df8 <DMA_Init+0x4dc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d02c      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a5f      	ldr	r2, [pc, #380]	; (8001dfc <DMA_Init+0x4e0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d027      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5d      	ldr	r2, [pc, #372]	; (8001e00 <DMA_Init+0x4e4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d022      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <DMA_Init+0x4e8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d01d      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <DMA_Init+0x4ec>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d018      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <DMA_Init+0x4f0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a57      	ldr	r2, [pc, #348]	; (8001e10 <DMA_Init+0x4f4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00e      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a56      	ldr	r2, [pc, #344]	; (8001e14 <DMA_Init+0x4f8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a54      	ldr	r2, [pc, #336]	; (8001e18 <DMA_Init+0x4fc>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <DMA_Init+0x3b8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a53      	ldr	r2, [pc, #332]	; (8001e1c <DMA_Init+0x500>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <DMA_Init+0x3bc>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <DMA_Init+0x3be>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00d      	beq.n	8001cfa <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e008      	b.n	8001cfa <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf0:	d103      	bne.n	8001cfa <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf8:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <DMA_Init+0x504>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	68f9      	ldr	r1, [r7, #12]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <DMA_Init+0x4b4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d022      	beq.n	8001d70 <DMA_Init+0x454>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a29      	ldr	r2, [pc, #164]	; (8001dd4 <DMA_Init+0x4b8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01d      	beq.n	8001d70 <DMA_Init+0x454>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <DMA_Init+0x4bc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d018      	beq.n	8001d70 <DMA_Init+0x454>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <DMA_Init+0x4c0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d013      	beq.n	8001d70 <DMA_Init+0x454>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <DMA_Init+0x4f4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00e      	beq.n	8001d70 <DMA_Init+0x454>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2f      	ldr	r2, [pc, #188]	; (8001e14 <DMA_Init+0x4f8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d009      	beq.n	8001d70 <DMA_Init+0x454>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a2d      	ldr	r2, [pc, #180]	; (8001e18 <DMA_Init+0x4fc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d004      	beq.n	8001d70 <DMA_Init+0x454>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <DMA_Init+0x500>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <DMA_Init+0x458>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <DMA_Init+0x45a>
 8001d74:	2300      	movs	r3, #0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2200      	movs	r2, #0
 8001d88:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40020050 	.word	0x40020050
 8001da4:	50020050 	.word	0x50020050
 8001da8:	400200d0 	.word	0x400200d0
 8001dac:	500200d0 	.word	0x500200d0
 8001db0:	40020150 	.word	0x40020150
 8001db4:	50020150 	.word	0x50020150
 8001db8:	400201d0 	.word	0x400201d0
 8001dbc:	500201d0 	.word	0x500201d0
 8001dc0:	40020250 	.word	0x40020250
 8001dc4:	50020250 	.word	0x50020250
 8001dc8:	400202d0 	.word	0x400202d0
 8001dcc:	500202d0 	.word	0x500202d0
 8001dd0:	40020350 	.word	0x40020350
 8001dd4:	50020350 	.word	0x50020350
 8001dd8:	400203d0 	.word	0x400203d0
 8001ddc:	500203d0 	.word	0x500203d0
 8001de0:	40021050 	.word	0x40021050
 8001de4:	50021050 	.word	0x50021050
 8001de8:	400210d0 	.word	0x400210d0
 8001dec:	500210d0 	.word	0x500210d0
 8001df0:	40021150 	.word	0x40021150
 8001df4:	50021150 	.word	0x50021150
 8001df8:	400211d0 	.word	0x400211d0
 8001dfc:	500211d0 	.word	0x500211d0
 8001e00:	40021250 	.word	0x40021250
 8001e04:	50021250 	.word	0x50021250
 8001e08:	400212d0 	.word	0x400212d0
 8001e0c:	500212d0 	.word	0x500212d0
 8001e10:	40021350 	.word	0x40021350
 8001e14:	50021350 	.word	0x50021350
 8001e18:	400213d0 	.word	0x400213d0
 8001e1c:	500213d0 	.word	0x500213d0
 8001e20:	3cc02100 	.word	0x3cc02100

08001e24 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_DMAEx_List_Start_IT+0x16>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e082      	b.n	8001f44 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e44:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d005      	beq.n	8001e64 <HAL_DMAEx_List_Start_IT+0x40>
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d16a      	bne.n	8001f34 <HAL_DMAEx_List_Start_IT+0x110>
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d067      	beq.n	8001f34 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d157      	bne.n	8001f20 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_DMAEx_List_Start_IT+0x5a>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e062      	b.n	8001f44 <HAL_DMAEx_List_Start_IT+0x120>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	2202      	movs	r2, #2
 8001e94:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8001eb2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d007      	beq.n	8001ecc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eca:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d007      	beq.n	8001ee4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f107 010c 	add.w	r1, r7, #12
 8001eee:	2200      	movs	r2, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 f82b 	bl	8001f4c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	0c0b      	lsrs	r3, r1, #16
 8001f04:	041b      	lsls	r3, r3, #16
 8001f06:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001f14:	4013      	ands	r3, r2
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	430b      	orrs	r3, r1
 8001f1e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e007      	b.n	8001f44 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00c      	beq.n	8001f7e <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d002      	beq.n	8001f70 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	; (8001fa4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8001f6e:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00f      	beq.n	8001f96 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2207      	movs	r2, #7
 8001f7a:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8001f7c:	e00b      	b.n	8001f96 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4a08      	ldr	r2, [pc, #32]	; (8001fa8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2205      	movs	r2, #5
 8001f94:	601a      	str	r2, [r3, #0]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	fe010000 	.word	0xfe010000
 8001fa8:	f8010000 	.word	0xf8010000

08001fac <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fba:	e136      	b.n	800222a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 8128 	beq.w	8002224 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x38>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2b12      	cmp	r3, #18
 8001fe2:	d125      	bne.n	8002030 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	08da      	lsrs	r2, r3, #3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	3208      	adds	r2, #8
 8001fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ff0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	f003 020f 	and.w	r2, r3, #15
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4313      	orrs	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	08da      	lsrs	r2, r3, #3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3208      	adds	r2, #8
 800202a:	6979      	ldr	r1, [r7, #20]
 800202c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	4013      	ands	r3, r2
 8002046:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0203 	and.w	r2, r3, #3
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d00b      	beq.n	8002084 <HAL_GPIO_Init+0xd8>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d007      	beq.n	8002084 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002078:	2b11      	cmp	r3, #17
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b12      	cmp	r3, #18
 8002082:	d130      	bne.n	80020e6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ba:	2201      	movs	r2, #1
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43db      	mvns	r3, r3
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0201 	and.w	r2, r3, #1
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	4013      	ands	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4313      	orrs	r3, r2
 8002116:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d07c      	beq.n	8002224 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800212a:	4a47      	ldr	r2, [pc, #284]	; (8002248 <HAL_GPIO_Init+0x29c>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3318      	adds	r3, #24
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4013      	ands	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	0a9a      	lsrs	r2, r3, #10
 8002152:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_GPIO_Init+0x2a0>)
 8002154:	4013      	ands	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	f002 0203 	and.w	r2, r2, #3
 800215c:	00d2      	lsls	r2, r2, #3
 800215e:	4093      	lsls	r3, r2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002166:	4938      	ldr	r1, [pc, #224]	; (8002248 <HAL_GPIO_Init+0x29c>)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	089b      	lsrs	r3, r3, #2
 800216c:	3318      	adds	r3, #24
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_GPIO_Init+0x29c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	43db      	mvns	r3, r3
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	4013      	ands	r3, r2
 8002182:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002198:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <HAL_GPIO_Init+0x29c>)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_GPIO_Init+0x29c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	43db      	mvns	r3, r3
 80021a8:	697a      	ldr	r2, [r7, #20]
 80021aa:	4013      	ands	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80021c2:	4a21      	ldr	r2, [pc, #132]	; (8002248 <HAL_GPIO_Init+0x29c>)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_GPIO_Init+0x29c>)
 80021ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ce:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4013      	ands	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_GPIO_Init+0x29c>)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_GPIO_Init+0x29c>)
 80021f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4013      	ands	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800221c:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <HAL_GPIO_Init+0x29c>)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	3301      	adds	r3, #1
 8002228:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	f47f aec1 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 800223a:	bf00      	nop
 800223c:	bf00      	nop
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	44022000 	.word	0x44022000
 800224c:	002f7f7f 	.word	0x002f7f7f

08002250 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
 800225c:	4613      	mov	r3, r2
 800225e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002260:	787b      	ldrb	r3, [r7, #1]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002266:	887a      	ldrh	r2, [r7, #2]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800226c:	e002      	b.n	8002274 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 bc28 	b.w	8002ae4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002294:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	f003 0318 	and.w	r3, r3, #24
 800229c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800229e:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0310 	and.w	r3, r3, #16
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d05b      	beq.n	800236c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46>
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	2b18      	cmp	r3, #24
 80022be:	d114      	bne.n	80022ea <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d111      	bne.n	80022ea <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f000 bc08 	b.w	8002ae4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022d4:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	4981      	ldr	r1, [pc, #516]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022e8:	e040      	b.n	800236c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d023      	beq.n	800233a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022f2:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a7c      	ldr	r2, [pc, #496]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fe:	f7fe fde1 	bl	8000ec4 <HAL_GetTick>
 8002302:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002306:	f7fe fddd 	bl	8000ec4 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e3e5      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002318:	4b73      	ldr	r3, [pc, #460]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f0      	beq.n	8002306 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002324:	4b70      	ldr	r3, [pc, #448]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	496d      	ldr	r1, [pc, #436]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002334:	4313      	orrs	r3, r2
 8002336:	618b      	str	r3, [r1, #24]
 8002338:	e018      	b.n	800236c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800233a:	4b6b      	ldr	r3, [pc, #428]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a6a      	ldr	r2, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fdbd 	bl	8000ec4 <HAL_GetTick>
 800234a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800234e:	f7fe fdb9 	bl	8000ec4 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e3c1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002360:	4b61      	ldr	r3, [pc, #388]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f0      	bne.n	800234e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	f000 80a0 	beq.w	80024ba <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	2b10      	cmp	r3, #16
 800237e:	d005      	beq.n	800238c <HAL_RCC_OscConfig+0x10c>
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b18      	cmp	r3, #24
 8002384:	d109      	bne.n	800239a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d106      	bne.n	800239a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	f040 8092 	bne.w	80024ba <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e3a4      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x132>
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a4f      	ldr	r2, [pc, #316]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	e058      	b.n	8002464 <HAL_RCC_OscConfig+0x1e4>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d112      	bne.n	80023e0 <HAL_RCC_OscConfig+0x160>
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a47      	ldr	r2, [pc, #284]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a44      	ldr	r2, [pc, #272]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e041      	b.n	8002464 <HAL_RCC_OscConfig+0x1e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d112      	bne.n	8002410 <HAL_RCC_OscConfig+0x190>
 80023ea:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a3b      	ldr	r2, [pc, #236]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80023fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a38      	ldr	r2, [pc, #224]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e029      	b.n	8002464 <HAL_RCC_OscConfig+0x1e4>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002418:	d112      	bne.n	8002440 <HAL_RCC_OscConfig+0x1c0>
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a32      	ldr	r2, [pc, #200]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002420:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2f      	ldr	r2, [pc, #188]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800242c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e011      	b.n	8002464 <HAL_RCC_OscConfig+0x1e4>
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a28      	ldr	r2, [pc, #160]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b26      	ldr	r3, [pc, #152]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a25      	ldr	r2, [pc, #148]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a22      	ldr	r2, [pc, #136]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 800245e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d013      	beq.n	8002494 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246c:	f7fe fd2a 	bl	8000ec4 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002474:	f7fe fd26 	bl	8000ec4 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e32e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b18      	ldr	r3, [pc, #96]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x1f4>
 8002492:	e012      	b.n	80024ba <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fd16 	bl	8000ec4 <HAL_GetTick>
 8002498:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800249c:	f7fe fd12 	bl	8000ec4 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e31a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_RCC_OscConfig+0x268>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 809a 	beq.w	80025fc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x25a>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	2b18      	cmp	r3, #24
 80024d2:	d149      	bne.n	8002568 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d146      	bne.n	8002568 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e2fe      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
 80024e6:	bf00      	nop
 80024e8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d11c      	bne.n	800252c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80024f2:	4b9a      	ldr	r3, [pc, #616]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0218 	and.w	r2, r3, #24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d014      	beq.n	800252c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002502:	4b96      	ldr	r3, [pc, #600]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 0218 	bic.w	r2, r3, #24
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	4993      	ldr	r1, [pc, #588]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002510:	4313      	orrs	r3, r2
 8002512:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002514:	f000 fdd0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002518:	4b91      	ldr	r3, [pc, #580]	; (8002760 <HAL_RCC_OscConfig+0x4e0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe fc87 	bl	8000e30 <HAL_InitTick>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e2db      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fcca 	bl	8000ec4 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002534:	f7fe fcc6 	bl	8000ec4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e2ce      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002546:	4b85      	ldr	r3, [pc, #532]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002552:	4b82      	ldr	r3, [pc, #520]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	041b      	lsls	r3, r3, #16
 8002560:	497e      	ldr	r1, [pc, #504]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002566:	e049      	b.n	80025fc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02c      	beq.n	80025ca <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002570:	4b7a      	ldr	r3, [pc, #488]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 0218 	bic.w	r2, r3, #24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4977      	ldr	r1, [pc, #476]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe fc99 	bl	8000ec4 <HAL_GetTick>
 8002592:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002596:	f7fe fc95 	bl	8000ec4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e29d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80025b4:	4b69      	ldr	r3, [pc, #420]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4966      	ldr	r1, [pc, #408]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	610b      	str	r3, [r1, #16]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b64      	ldr	r3, [pc, #400]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a63      	ldr	r2, [pc, #396]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fc75 	bl	8000ec4 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025de:	f7fe fc71 	bl	8000ec4 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e279      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f0:	4b5a      	ldr	r3, [pc, #360]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d03c      	beq.n	8002682 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01c      	beq.n	800264a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b52      	ldr	r3, [pc, #328]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002616:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002618:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800261c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fc50 	bl	8000ec4 <HAL_GetTick>
 8002624:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002628:	f7fe fc4c 	bl	8000ec4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e254      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800263a:	4b48      	ldr	r3, [pc, #288]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800263c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0ef      	beq.n	8002628 <HAL_RCC_OscConfig+0x3a8>
 8002648:	e01b      	b.n	8002682 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800264a:	4b44      	ldr	r3, [pc, #272]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800264c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002650:	4a42      	ldr	r2, [pc, #264]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002656:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265a:	f7fe fc33 	bl	8000ec4 <HAL_GetTick>
 800265e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002662:	f7fe fc2f 	bl	8000ec4 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e237      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800267a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ef      	bne.n	8002662 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	f000 80d2 	beq.w	8002834 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_RCC_OscConfig+0x4e4>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d118      	bne.n	80026ce <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800269c:	4b31      	ldr	r3, [pc, #196]	; (8002764 <HAL_RCC_OscConfig+0x4e4>)
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	4a30      	ldr	r2, [pc, #192]	; (8002764 <HAL_RCC_OscConfig+0x4e4>)
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a8:	f7fe fc0c 	bl	8000ec4 <HAL_GetTick>
 80026ac:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7fe fc08 	bl	8000ec4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e210      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_RCC_OscConfig+0x4e4>)
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x468>
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026dc:	4a1f      	ldr	r2, [pc, #124]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026e6:	e074      	b.n	80027d2 <HAL_RCC_OscConfig+0x552>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d118      	bne.n	8002722 <HAL_RCC_OscConfig+0x4a2>
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 80026f8:	f023 0301 	bic.w	r3, r3, #1
 80026fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002700:	4b16      	ldr	r3, [pc, #88]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002702:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002708:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002716:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002720:	e057      	b.n	80027d2 <HAL_RCC_OscConfig+0x552>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b05      	cmp	r3, #5
 8002728:	d11e      	bne.n	8002768 <HAL_RCC_OscConfig+0x4e8>
 800272a:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800272c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002732:	f043 0304 	orr.w	r3, r3, #4
 8002736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800273c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002746:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800274a:	4b04      	ldr	r3, [pc, #16]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 800274c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002750:	4a02      	ldr	r2, [pc, #8]	; (800275c <HAL_RCC_OscConfig+0x4dc>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800275a:	e03a      	b.n	80027d2 <HAL_RCC_OscConfig+0x552>
 800275c:	44020c00 	.word	0x44020c00
 8002760:	20000004 	.word	0x20000004
 8002764:	44020800 	.word	0x44020800
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	2b85      	cmp	r3, #133	; 0x85
 800276e:	d118      	bne.n	80027a2 <HAL_RCC_OscConfig+0x522>
 8002770:	4ba2      	ldr	r3, [pc, #648]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002776:	4aa1      	ldr	r2, [pc, #644]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002780:	4b9e      	ldr	r3, [pc, #632]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002786:	4a9d      	ldr	r2, [pc, #628]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800278c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002790:	4b9a      	ldr	r3, [pc, #616]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002796:	4a99      	ldr	r2, [pc, #612]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027a0:	e017      	b.n	80027d2 <HAL_RCC_OscConfig+0x552>
 80027a2:	4b96      	ldr	r3, [pc, #600]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027a8:	4a94      	ldr	r2, [pc, #592]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027b2:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b8:	4a90      	ldr	r2, [pc, #576]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027c2:	4b8e      	ldr	r3, [pc, #568]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c8:	4a8c      	ldr	r2, [pc, #560]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe fb73 	bl	8000ec4 <HAL_GetTick>
 80027de:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe fb6f 	bl	8000ec4 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e175      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f8:	4b80      	ldr	r3, [pc, #512]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80027fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ed      	beq.n	80027e2 <HAL_RCC_OscConfig+0x562>
 8002806:	e015      	b.n	8002834 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7fe fb5c 	bl	8000ec4 <HAL_GetTick>
 800280c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fb58 	bl	8000ec4 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	; 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e15e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002826:	4b75      	ldr	r3, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002828:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ed      	bne.n	8002810 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0320 	and.w	r3, r3, #32
 800283c:	2b00      	cmp	r3, #0
 800283e:	d036      	beq.n	80028ae <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b00      	cmp	r3, #0
 8002846:	d019      	beq.n	800287c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a6b      	ldr	r2, [pc, #428]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800284e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002852:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fb36 	bl	8000ec4 <HAL_GetTick>
 8002858:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800285c:	f7fe fb32 	bl	8000ec4 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e13a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x5dc>
 800287a:	e018      	b.n	80028ae <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800287c:	4b5f      	ldr	r3, [pc, #380]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a5e      	ldr	r2, [pc, #376]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002882:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002886:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002888:	f7fe fb1c 	bl	8000ec4 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002890:	f7fe fb18 	bl	8000ec4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e120      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80028a2:	4b56      	ldr	r3, [pc, #344]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 8115 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b18      	cmp	r3, #24
 80028bc:	f000 80af 	beq.w	8002a1e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	f040 8086 	bne.w	80029d6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80028ca:	4b4c      	ldr	r3, [pc, #304]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a4b      	ldr	r2, [pc, #300]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80028d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d6:	f7fe faf5 	bl	8000ec4 <HAL_GetTick>
 80028da:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028de:	f7fe faf1 	bl	8000ec4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e0f9      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028f0:	4b42      	ldr	r3, [pc, #264]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002904:	f023 0303 	bic.w	r3, r3, #3
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002910:	0212      	lsls	r2, r2, #8
 8002912:	430a      	orrs	r2, r1
 8002914:	4939      	ldr	r1, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	628b      	str	r3, [r1, #40]	; 0x28
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	3b01      	subs	r3, #1
 8002920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	3b01      	subs	r3, #1
 800292a:	025b      	lsls	r3, r3, #9
 800292c:	b29b      	uxth	r3, r3
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002934:	3b01      	subs	r3, #1
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	3b01      	subs	r3, #1
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800294a:	492c      	ldr	r1, [pc, #176]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002950:	4b2a      	ldr	r3, [pc, #168]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002956:	f023 0310 	bic.w	r3, r3, #16
 800295a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002960:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002966:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800296c:	f043 0310 	orr.w	r3, r3, #16
 8002970:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	f023 020c 	bic.w	r2, r3, #12
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	491f      	ldr	r1, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f023 0220 	bic.w	r2, r3, #32
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002990:	491a      	ldr	r1, [pc, #104]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002992:	4313      	orrs	r3, r2
 8002994:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002996:	4b19      	ldr	r3, [pc, #100]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80029a2:	4b16      	ldr	r3, [pc, #88]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80029a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fa89 	bl	8000ec4 <HAL_GetTick>
 80029b2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fa85 	bl	8000ec4 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e08d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x736>
 80029d4:	e085      	b.n	8002ae2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a08      	ldr	r2, [pc, #32]	; (80029fc <HAL_RCC_OscConfig+0x77c>)
 80029dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fa6f 	bl	8000ec4 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029ea:	f7fe fa6b 	bl	8000ec4 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d903      	bls.n	8002a00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e073      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
 80029fc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a00:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a10:	4a36      	ldr	r2, [pc, #216]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a12:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002a16:	f023 0303 	bic.w	r3, r3, #3
 8002a1a:	6293      	str	r3, [r2, #40]	; 0x28
 8002a1c:	e061      	b.n	8002ae2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d031      	beq.n	8002a96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f003 0203 	and.w	r2, r3, #3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d12a      	bne.n	8002a96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d122      	bne.n	8002a96 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d11a      	bne.n	8002a96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0a5b      	lsrs	r3, r3, #9
 8002a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d111      	bne.n	8002a96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	0c1b      	lsrs	r3, r3, #16
 8002a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d108      	bne.n	8002a96 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	0e1b      	lsrs	r3, r3, #24
 8002a88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e024      	b.n	8002ae4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	08db      	lsrs	r3, r3, #3
 8002aa0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d01a      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab0:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fa04 	bl	8000ec4 <HAL_GetTick>
 8002abc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002abe:	bf00      	nop
 8002ac0:	f7fe fa00 	bl	8000ec4 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d0f9      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad0:	4a06      	ldr	r2, [pc, #24]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ada:	4a04      	ldr	r2, [pc, #16]	; (8002aec <HAL_RCC_OscConfig+0x86c>)
 8002adc:	f043 0310 	orr.w	r3, r3, #16
 8002ae0:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	44020c00 	.word	0x44020c00

08002af0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e19e      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b04:	4b83      	ldr	r3, [pc, #524]	; (8002d14 <HAL_RCC_ClockConfig+0x224>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d910      	bls.n	8002b34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b80      	ldr	r3, [pc, #512]	; (8002d14 <HAL_RCC_ClockConfig+0x224>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 020f 	bic.w	r2, r3, #15
 8002b1a:	497e      	ldr	r1, [pc, #504]	; (8002d14 <HAL_RCC_ClockConfig+0x224>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b7c      	ldr	r3, [pc, #496]	; (8002d14 <HAL_RCC_ClockConfig+0x224>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d001      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e186      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d012      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	4b74      	ldr	r3, [pc, #464]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	0a1b      	lsrs	r3, r3, #8
 8002b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d909      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b52:	4b71      	ldr	r3, [pc, #452]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	021b      	lsls	r3, r3, #8
 8002b60:	496d      	ldr	r1, [pc, #436]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d012      	beq.n	8002b98 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d909      	bls.n	8002b98 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4961      	ldr	r1, [pc, #388]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4b5b      	ldr	r3, [pc, #364]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d908      	bls.n	8002bc6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002bb4:	4b58      	ldr	r3, [pc, #352]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002bb6:	6a1b      	ldr	r3, [r3, #32]
 8002bb8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4955      	ldr	r1, [pc, #340]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d908      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002be2:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 020f 	bic.w	r2, r3, #15
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	494a      	ldr	r1, [pc, #296]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8093 	beq.w	8002d28 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c0a:	4b43      	ldr	r3, [pc, #268]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d121      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e113      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d107      	bne.n	8002c32 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e107      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0fb      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4a:	4b33      	ldr	r3, [pc, #204]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e0f3      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	492c      	ldr	r1, [pc, #176]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6c:	f7fe f92a 	bl	8000ec4 <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d112      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c7c:	f7fe f922 	bl	8000ec4 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0d7      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f003 0318 	and.w	r3, r3, #24
 8002c9a:	2b18      	cmp	r3, #24
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x18c>
 8002c9e:	e043      	b.n	8002d28 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d112      	bne.n	8002cce <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca8:	e00a      	b.n	8002cc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002caa:	f7fe f90b 	bl	8000ec4 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e0c0      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cc0:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	f003 0318 	and.w	r3, r3, #24
 8002cc8:	2b10      	cmp	r3, #16
 8002cca:	d1ee      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ba>
 8002ccc:	e02c      	b.n	8002d28 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d122      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cd6:	e00a      	b.n	8002cee <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fe f8f4 	bl	8000ec4 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e0a9      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_RCC_ClockConfig+0x228>)
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	f003 0318 	and.w	r3, r3, #24
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d1ee      	bne.n	8002cd8 <HAL_RCC_ClockConfig+0x1e8>
 8002cfa:	e015      	b.n	8002d28 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfc:	f7fe f8e2 	bl	8000ec4 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d906      	bls.n	8002d1c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e097      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
 8002d12:	bf00      	nop
 8002d14:	40022000 	.word	0x40022000
 8002d18:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d1c:	4b4b      	ldr	r3, [pc, #300]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	f003 0318 	and.w	r3, r3, #24
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e9      	bne.n	8002cfc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	4b44      	ldr	r3, [pc, #272]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d208      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d44:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f023 020f 	bic.w	r2, r3, #15
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	493e      	ldr	r1, [pc, #248]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_RCC_ClockConfig+0x360>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d210      	bcs.n	8002d86 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <HAL_RCC_ClockConfig+0x360>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 020f 	bic.w	r2, r3, #15
 8002d6c:	4938      	ldr	r1, [pc, #224]	; (8002e50 <HAL_RCC_ClockConfig+0x360>)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <HAL_RCC_ClockConfig+0x360>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d001      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e05d      	b.n	8002e42 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d010      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d208      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002da2:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	4927      	ldr	r1, [pc, #156]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d209      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	491a      	ldr	r1, [pc, #104]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d012      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	0a1b      	lsrs	r3, r3, #8
 8002dfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d209      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e18:	f000 f822 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x35c>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490b      	ldr	r1, [pc, #44]	; (8002e54 <HAL_RCC_ClockConfig+0x364>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a0a      	ldr	r2, [pc, #40]	; (8002e58 <HAL_RCC_ClockConfig+0x368>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_RCC_ClockConfig+0x36c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fffa 	bl	8000e30 <HAL_InitTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002e40:	7afb      	ldrb	r3, [r7, #11]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	44020c00 	.word	0x44020c00
 8002e50:	40022000 	.word	0x40022000
 8002e54:	08009b70 	.word	0x08009b70
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	20000004 	.word	0x20000004

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	; 0x24
 8002e64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e66:	4b8c      	ldr	r3, [pc, #560]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f003 0318 	and.w	r3, r3, #24
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d102      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e107      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e78:	4b87      	ldr	r3, [pc, #540]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0318 	and.w	r3, r3, #24
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d112      	bne.n	8002eaa <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e84:	4b84      	ldr	r3, [pc, #528]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d009      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e90:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a81      	ldr	r2, [pc, #516]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e0f1      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	e0ee      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eaa:	4b7b      	ldr	r3, [pc, #492]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 0318 	and.w	r3, r3, #24
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d102      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eb6:	4b7b      	ldr	r3, [pc, #492]	; (80030a4 <HAL_RCC_GetSysClockFreq+0x244>)
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e0e5      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f003 0318 	and.w	r3, r3, #24
 8002ec4:	2b18      	cmp	r3, #24
 8002ec6:	f040 80dd 	bne.w	8003084 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002eca:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002ed4:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ee0:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002eec:	4b6a      	ldr	r3, [pc, #424]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f04:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80b7 	beq.w	800307e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d003      	beq.n	8002f1e <HAL_RCC_GetSysClockFreq+0xbe>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d056      	beq.n	8002fca <HAL_RCC_GetSysClockFreq+0x16a>
 8002f1c:	e077      	b.n	800300e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002f1e:	4b5e      	ldr	r3, [pc, #376]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02d      	beq.n	8002f86 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f2a:	4b5b      	ldr	r3, [pc, #364]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	08db      	lsrs	r3, r3, #3
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	4a5a      	ldr	r2, [pc, #360]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f36:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f64:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f68:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002f6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f78:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f84:	e065      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f90:	eddf 6a46 	vldr	s13, [pc, #280]	; 80030ac <HAL_RCC_GetSysClockFreq+0x24c>
 8002f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa0:	ee07 3a90 	vmov	s15, r3
 8002fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002fc8:	e043      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	eddf 6a36 	vldr	s13, [pc, #216]	; 80030b0 <HAL_RCC_GetSysClockFreq+0x250>
 8002fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fdc:	4b2e      	ldr	r3, [pc, #184]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe4:	ee07 3a90 	vmov	s15, r3
 8002fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fec:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002ff4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ff8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003000:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003008:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800300c:	e021      	b.n	8003052 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030b4 <HAL_RCC_GetSysClockFreq+0x254>
 800301c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003020:	4b1d      	ldr	r3, [pc, #116]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003028:	ee07 3a90 	vmov	s15, r3
 800302c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003030:	ed97 6a02 	vldr	s12, [r7, #8]
 8003034:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8003038:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800303c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003044:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800304c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003050:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003052:	4b11      	ldr	r3, [pc, #68]	; (8003098 <HAL_RCC_GetSysClockFreq+0x238>)
 8003054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003056:	0a5b      	lsrs	r3, r3, #9
 8003058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800305c:	3301      	adds	r3, #1
 800305e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800306a:	edd7 6a06 	vldr	s13, [r7, #24]
 800306e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003076:	ee17 3a90 	vmov	r3, s15
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	e004      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e001      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x240>)
 8003086:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003088:	69fb      	ldr	r3, [r7, #28]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3724      	adds	r7, #36	; 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	44020c00 	.word	0x44020c00
 800309c:	003d0900 	.word	0x003d0900
 80030a0:	03d09000 	.word	0x03d09000
 80030a4:	017d7840 	.word	0x017d7840
 80030a8:	46000000 	.word	0x46000000
 80030ac:	4c742400 	.word	0x4c742400
 80030b0:	4bbebc20 	.word	0x4bbebc20
 80030b4:	4a742400 	.word	0x4a742400

080030b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030bc:	f7ff fed0 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030c6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030ca:	4907      	ldr	r1, [pc, #28]	; (80030e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030ce:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a05      	ldr	r2, [pc, #20]	; (80030ec <HAL_RCC_GetHCLKFreq+0x34>)
 80030d8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80030da:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_RCC_GetHCLKFreq+0x34>)
 80030dc:	681b      	ldr	r3, [r3, #0]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	44020c00 	.word	0x44020c00
 80030e8:	08009b70 	.word	0x08009b70
 80030ec:	20000000 	.word	0x20000000

080030f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80030f4:	f7ff ffe0 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	4904      	ldr	r1, [pc, #16]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003106:	5ccb      	ldrb	r3, [r1, r3]
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	44020c00 	.word	0x44020c00
 8003118:	08009b80 	.word	0x08009b80

0800311c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003120:	f7ff ffca 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003124:	4602      	mov	r2, r0
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	4904      	ldr	r1, [pc, #16]	; (8003144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003132:	5ccb      	ldrb	r3, [r1, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800313c:	4618      	mov	r0, r3
 800313e:	bd80      	pop	{r7, pc}
 8003140:	44020c00 	.word	0x44020c00
 8003144:	08009b80 	.word	0x08009b80

08003148 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800314c:	f7ff ffb4 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8003150:	4602      	mov	r2, r0
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_RCC_GetPCLK3Freq+0x24>)
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	0b1b      	lsrs	r3, r3, #12
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	4904      	ldr	r1, [pc, #16]	; (8003170 <HAL_RCC_GetPCLK3Freq+0x28>)
 800315e:	5ccb      	ldrb	r3, [r1, r3]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	44020c00 	.word	0x44020c00
 8003170:	08009b80 	.word	0x08009b80

08003174 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003178:	b0d8      	sub	sp, #352	; 0x160
 800317a:	af00      	add	r7, sp, #0
 800317c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003180:	2300      	movs	r3, #0
 8003182:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003186:	2300      	movs	r3, #0
 8003188:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800318c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003198:	2500      	movs	r5, #0
 800319a:	ea54 0305 	orrs.w	r3, r4, r5
 800319e:	d00b      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80031a0:	4bcd      	ldr	r3, [pc, #820]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80031aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	4ac9      	ldr	r2, [pc, #804]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031b2:	430b      	orrs	r3, r1
 80031b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 0801 	and.w	r8, r2, #1
 80031c4:	f04f 0900 	mov.w	r9, #0
 80031c8:	ea58 0309 	orrs.w	r3, r8, r9
 80031cc:	d042      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80031ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d823      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	08003229 	.word	0x08003229
 80031e4:	080031f9 	.word	0x080031f9
 80031e8:	0800320d 	.word	0x0800320d
 80031ec:	08003229 	.word	0x08003229
 80031f0:	08003229 	.word	0x08003229
 80031f4:	08003229 	.word	0x08003229
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031fc:	3308      	adds	r3, #8
 80031fe:	4618      	mov	r0, r3
 8003200:	f004 feda 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003204:	4603      	mov	r3, r0
 8003206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800320a:	e00e      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800320c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003210:	3330      	adds	r3, #48	; 0x30
 8003212:	4618      	mov	r0, r3
 8003214:	f004 ff68 	bl	80080e8 <RCCEx_PLL3_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800321e:	e004      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003226:	e000      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800322a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10c      	bne.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003232:	4ba9      	ldr	r3, [pc, #676]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003234:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003238:	f023 0107 	bic.w	r1, r3, #7
 800323c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	4aa5      	ldr	r2, [pc, #660]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003244:	430b      	orrs	r3, r1
 8003246:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800324a:	e003      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800324c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003250:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f002 0a02 	and.w	sl, r2, #2
 8003260:	f04f 0b00 	mov.w	fp, #0
 8003264:	ea5a 030b 	orrs.w	r3, sl, fp
 8003268:	f000 8088 	beq.w	800337c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800326c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	2b28      	cmp	r3, #40	; 0x28
 8003274:	d868      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003276:	a201      	add	r2, pc, #4	; (adr r2, 800327c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	08003351 	.word	0x08003351
 8003280:	08003349 	.word	0x08003349
 8003284:	08003349 	.word	0x08003349
 8003288:	08003349 	.word	0x08003349
 800328c:	08003349 	.word	0x08003349
 8003290:	08003349 	.word	0x08003349
 8003294:	08003349 	.word	0x08003349
 8003298:	08003349 	.word	0x08003349
 800329c:	08003321 	.word	0x08003321
 80032a0:	08003349 	.word	0x08003349
 80032a4:	08003349 	.word	0x08003349
 80032a8:	08003349 	.word	0x08003349
 80032ac:	08003349 	.word	0x08003349
 80032b0:	08003349 	.word	0x08003349
 80032b4:	08003349 	.word	0x08003349
 80032b8:	08003349 	.word	0x08003349
 80032bc:	08003335 	.word	0x08003335
 80032c0:	08003349 	.word	0x08003349
 80032c4:	08003349 	.word	0x08003349
 80032c8:	08003349 	.word	0x08003349
 80032cc:	08003349 	.word	0x08003349
 80032d0:	08003349 	.word	0x08003349
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003349 	.word	0x08003349
 80032dc:	08003351 	.word	0x08003351
 80032e0:	08003349 	.word	0x08003349
 80032e4:	08003349 	.word	0x08003349
 80032e8:	08003349 	.word	0x08003349
 80032ec:	08003349 	.word	0x08003349
 80032f0:	08003349 	.word	0x08003349
 80032f4:	08003349 	.word	0x08003349
 80032f8:	08003349 	.word	0x08003349
 80032fc:	08003351 	.word	0x08003351
 8003300:	08003349 	.word	0x08003349
 8003304:	08003349 	.word	0x08003349
 8003308:	08003349 	.word	0x08003349
 800330c:	08003349 	.word	0x08003349
 8003310:	08003349 	.word	0x08003349
 8003314:	08003349 	.word	0x08003349
 8003318:	08003349 	.word	0x08003349
 800331c:	08003351 	.word	0x08003351
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003320:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003324:	3308      	adds	r3, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fe46 	bl	8007fb8 <RCCEx_PLL2_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003332:	e00e      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003334:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003338:	3330      	adds	r3, #48	; 0x30
 800333a:	4618      	mov	r0, r3
 800333c:	f004 fed4 	bl	80080e8 <RCCEx_PLL3_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003346:	e004      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800334e:	e000      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003352:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10c      	bne.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800335a:	4b5f      	ldr	r3, [pc, #380]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800335c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003360:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003364:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336a:	4a5b      	ldr	r2, [pc, #364]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800336c:	430b      	orrs	r3, r1
 800336e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003372:	e003      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003374:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003378:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f002 0304 	and.w	r3, r2, #4
 8003388:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003392:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003396:	460b      	mov	r3, r1
 8003398:	4313      	orrs	r3, r2
 800339a:	d04e      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 800339c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033a6:	d02c      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80033a8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033ac:	d825      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b2:	d028      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80033b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b8:	d81f      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033ba:	2bc0      	cmp	r3, #192	; 0xc0
 80033bc:	d025      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80033be:	2bc0      	cmp	r3, #192	; 0xc0
 80033c0:	d81b      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033c2:	2b80      	cmp	r3, #128	; 0x80
 80033c4:	d00f      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80033c6:	2b80      	cmp	r3, #128	; 0x80
 80033c8:	d817      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d01f      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80033ce:	2b40      	cmp	r3, #64	; 0x40
 80033d0:	d113      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d6:	3308      	adds	r3, #8
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 fded 	bl	8007fb8 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033e4:	e014      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ea:	3330      	adds	r3, #48	; 0x30
 80033ec:	4618      	mov	r0, r3
 80033ee:	f004 fe7b 	bl	80080e8 <RCCEx_PLL3_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033f8:	e00a      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003400:	e006      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003402:	bf00      	nop
 8003404:	e004      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003406:	bf00      	nop
 8003408:	e002      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800340a:	bf00      	nop
 800340c:	e000      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800340e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003410:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10c      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003418:	4b2f      	ldr	r3, [pc, #188]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800341a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800341e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800342a:	430b      	orrs	r3, r1
 800342c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003436:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800343a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f002 0308 	and.w	r3, r2, #8
 8003446:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003450:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003454:	460b      	mov	r3, r1
 8003456:	4313      	orrs	r3, r2
 8003458:	d056      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800345a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800345e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003460:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003464:	d031      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003466:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800346a:	d82a      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800346c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003470:	d02d      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003476:	d824      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003478:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800347c:	d029      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800347e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003482:	d81e      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d011      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800348a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800348e:	d818      	bhi.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d023      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003494:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003498:	d113      	bne.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800349a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800349e:	3308      	adds	r3, #8
 80034a0:	4618      	mov	r0, r3
 80034a2:	f004 fd89 	bl	8007fb8 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80034ac:	e017      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034b2:	3330      	adds	r3, #48	; 0x30
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 fe17 	bl	80080e8 <RCCEx_PLL3_Config>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80034c0:	e00d      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034c8:	e009      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034ca:	bf00      	nop
 80034cc:	e007      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034ce:	bf00      	nop
 80034d0:	e005      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034d2:	bf00      	nop
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80034d6:	bf00      	nop
 80034d8:	44020c00 	.word	0x44020c00
        break;
 80034dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80034e6:	4bbb      	ldr	r3, [pc, #748]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034ec:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80034f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034f6:	4ab7      	ldr	r2, [pc, #732]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003504:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 0310 	and.w	r3, r2, #16
 8003514:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003518:	2300      	movs	r3, #0
 800351a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800351e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8003522:	460b      	mov	r3, r1
 8003524:	4313      	orrs	r3, r2
 8003526:	d053      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003528:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800352c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003532:	d031      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003534:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003538:	d82a      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800353a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353e:	d02d      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003544:	d824      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003546:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800354a:	d029      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800354c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003550:	d81e      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003556:	d011      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d818      	bhi.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d020      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	d113      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800356c:	3308      	adds	r3, #8
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fd22 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800357a:	e014      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800357c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003580:	3330      	adds	r3, #48	; 0x30
 8003582:	4618      	mov	r0, r3
 8003584:	f004 fdb0 	bl	80080e8 <RCCEx_PLL3_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800358e:	e00a      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003596:	e006      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003598:	bf00      	nop
 800359a:	e004      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800359c:	bf00      	nop
 800359e:	e002      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80035a0:	bf00      	nop
 80035a2:	e000      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80035a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80035ae:	4b89      	ldr	r3, [pc, #548]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035be:	4a85      	ldr	r2, [pc, #532]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035c0:	430b      	orrs	r3, r1
 80035c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035c6:	e003      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035cc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f002 0320 	and.w	r3, r2, #32
 80035dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80035e0:	2300      	movs	r3, #0
 80035e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80035e6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80035ea:	460b      	mov	r3, r1
 80035ec:	4313      	orrs	r3, r2
 80035ee:	d053      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80035f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80035fa:	d031      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80035fc:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003600:	d82a      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003606:	d02d      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800360c:	d824      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800360e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003612:	d029      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003614:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003618:	d81e      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800361a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361e:	d011      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003624:	d818      	bhi.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d020      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800362a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362e:	d113      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003634:	3308      	adds	r3, #8
 8003636:	4618      	mov	r0, r3
 8003638:	f004 fcbe 	bl	8007fb8 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003642:	e014      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003644:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003648:	3330      	adds	r3, #48	; 0x30
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fd4c 	bl	80080e8 <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003656:	e00a      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800365e:	e006      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003660:	bf00      	nop
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003664:	bf00      	nop
 8003666:	e002      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003668:	bf00      	nop
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003676:	4b57      	ldr	r3, [pc, #348]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003678:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800367c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003680:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003686:	4a53      	ldr	r2, [pc, #332]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003688:	430b      	orrs	r3, r1
 800368a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003694:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80036a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036ae:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d053      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80036b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036be:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036c2:	d031      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80036c4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036c8:	d82a      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ce:	d02d      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80036d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d4:	d824      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036d6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036da:	d029      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036dc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036e0:	d81e      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036e6:	d011      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x598>
 80036e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036ec:	d818      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d020      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036f6:	d113      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036fc:	3308      	adds	r3, #8
 80036fe:	4618      	mov	r0, r3
 8003700:	f004 fc5a 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800370a:	e014      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800370c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003710:	3330      	adds	r3, #48	; 0x30
 8003712:	4618      	mov	r0, r3
 8003714:	f004 fce8 	bl	80080e8 <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800371e:	e00a      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003726:	e006      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003728:	bf00      	nop
 800372a:	e004      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800372c:	bf00      	nop
 800372e:	e002      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003730:	bf00      	nop
 8003732:	e000      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003736:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10c      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800373e:	4b25      	ldr	r3, [pc, #148]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003744:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003748:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003750:	430b      	orrs	r3, r1
 8003752:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800375c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003760:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800376c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003776:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d055      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003780:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800378a:	d033      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800378c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003790:	d82c      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003792:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003796:	d02f      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003798:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800379c:	d826      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 800379e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037a2:	d02b      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80037a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037a8:	d820      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80037aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ae:	d013      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80037b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b4:	d81a      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x678>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d022      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80037ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037be:	d115      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c4:	3308      	adds	r3, #8
 80037c6:	4618      	mov	r0, r3
 80037c8:	f004 fbf6 	bl	8007fb8 <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037d2:	e016      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037d4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037dc:	3330      	adds	r3, #48	; 0x30
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 fc82 	bl	80080e8 <RCCEx_PLL3_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037ea:	e00a      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037f2:	e006      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037f4:	bf00      	nop
 80037f6:	e004      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037f8:	bf00      	nop
 80037fa:	e002      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037fc:	bf00      	nop
 80037fe:	e000      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003802:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800380a:	4bbb      	ldr	r3, [pc, #748]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800380c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003810:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003814:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800381a:	4ab7      	ldr	r2, [pc, #732]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800381c:	430b      	orrs	r3, r1
 800381e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003822:	e003      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003828:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800382c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003838:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003842:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003846:	460b      	mov	r3, r1
 8003848:	4313      	orrs	r3, r2
 800384a:	d053      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800384c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003852:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003856:	d031      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003858:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800385c:	d82a      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800385e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003862:	d02d      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003868:	d824      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800386a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386e:	d029      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003870:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003874:	d81e      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800387a:	d011      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800387c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003880:	d818      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d020      	beq.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003886:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800388a:	d113      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800388c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003890:	3308      	adds	r3, #8
 8003892:	4618      	mov	r0, r3
 8003894:	f004 fb90 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800389e:	e014      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038a4:	3330      	adds	r3, #48	; 0x30
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 fc1e 	bl	80080e8 <RCCEx_PLL3_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80038b2:	e00a      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038ba:	e006      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038bc:	bf00      	nop
 80038be:	e004      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038c0:	bf00      	nop
 80038c2:	e002      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80038d2:	4b89      	ldr	r3, [pc, #548]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038d8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038e2:	4a85      	ldr	r2, [pc, #532]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038e4:	430b      	orrs	r3, r1
 80038e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038ea:	e003      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8003900:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003904:	2300      	movs	r3, #0
 8003906:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800390a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d055      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8003914:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800391c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003920:	d031      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8003922:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003926:	d82a      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392c:	d02d      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800392e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003932:	d824      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003934:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003938:	d029      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800393a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800393e:	d81e      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003944:	d011      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8003946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800394a:	d818      	bhi.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003954:	d113      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003956:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800395a:	3308      	adds	r3, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f004 fb2b 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003968:	e014      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800396a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800396e:	3330      	adds	r3, #48	; 0x30
 8003970:	4618      	mov	r0, r3
 8003972:	f004 fbb9 	bl	80080e8 <RCCEx_PLL3_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800397c:	e00a      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003984:	e006      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003986:	bf00      	nop
 8003988:	e004      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800398a:	bf00      	nop
 800398c:	e002      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800398e:	bf00      	nop
 8003990:	e000      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003992:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003994:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10d      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800399c:	4b56      	ldr	r3, [pc, #344]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800399e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039a2:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80039a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039b0:	430b      	orrs	r3, r1
 80039b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039bc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80039c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80039cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039d6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	d044      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80039e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d823      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80039ec:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a0d 	.word	0x08003a0d
 80039fc:	08003a21 	.word	0x08003a21
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a3d 	.word	0x08003a3d
 8003a08:	08003a3d 	.word	0x08003a3d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a10:	3308      	adds	r3, #8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fad0 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003a1e:	e00e      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a24:	3330      	adds	r3, #48	; 0x30
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fb5e 	bl	80080e8 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10d      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003a46:	4b2c      	ldr	r3, [pc, #176]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a4c:	f023 0107 	bic.w	r1, r3, #7
 8003a50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003a60:	e003      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a66:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a80:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a84:	460b      	mov	r3, r1
 8003a86:	4313      	orrs	r3, r2
 8003a88:	d04f      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003a8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	2b50      	cmp	r3, #80	; 0x50
 8003a94:	d029      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003a96:	2b50      	cmp	r3, #80	; 0x50
 8003a98:	d823      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d027      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d81f      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003aa2:	2b30      	cmp	r3, #48	; 0x30
 8003aa4:	d025      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003aa6:	2b30      	cmp	r3, #48	; 0x30
 8003aa8:	d81b      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d00f      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d817      	bhi.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d022      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d113      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003abe:	3308      	adds	r3, #8
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f004 fa79 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003acc:	e017      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ad2:	3330      	adds	r3, #48	; 0x30
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 fb07 	bl	80080e8 <RCCEx_PLL3_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ae0:	e00d      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ae8:	e009      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003aea:	bf00      	nop
 8003aec:	e007      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003aee:	bf00      	nop
 8003af0:	e005      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003af2:	bf00      	nop
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003af6:	bf00      	nop
 8003af8:	44020c00 	.word	0x44020c00
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10d      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003b06:	4baf      	ldr	r3, [pc, #700]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b0c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003b10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	4aaa      	ldr	r2, [pc, #680]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b20:	e003      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b32:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4313      	orrs	r3, r2
 8003b48:	d055      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b52:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b56:	d031      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003b58:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b5c:	d82a      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b62:	d02d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003b64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b68:	d824      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b6a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6e:	d029      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003b70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b74:	d81e      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b7a:	d011      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003b7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b80:	d818      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003b86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b8a:	d113      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b90:	3308      	adds	r3, #8
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 fa10 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b9e:	e014      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ba4:	3330      	adds	r3, #48	; 0x30
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fa9e 	bl	80080e8 <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003bb2:	e00a      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bba:	e006      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bc0:	bf00      	nop
 8003bc2:	e002      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10d      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003bd2:	4b7c      	ldr	r3, [pc, #496]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003be4:	4a77      	ldr	r2, [pc, #476]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003be6:	430b      	orrs	r3, r1
 8003be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003bec:	e003      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bf2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003c02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c10:	460b      	mov	r3, r1
 8003c12:	4313      	orrs	r3, r2
 8003c14:	d03d      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003c16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c22:	d01b      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003c24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c28:	d814      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2e:	d017      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c34:	d80e      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d014      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c44:	3330      	adds	r3, #48	; 0x30
 8003c46:	4618      	mov	r0, r3
 8003c48:	f004 fa4e 	bl	80080e8 <RCCEx_PLL3_Config>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c5a:	e004      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c5c:	bf00      	nop
 8003c5e:	e002      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c60:	bf00      	nop
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003c6e:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c74:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c80:	4a50      	ldr	r2, [pc, #320]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c82:	430b      	orrs	r3, r1
 8003c84:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ca8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	d03d      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003cb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cbe:	d01b      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003cc0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cc4:	d814      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003cc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cca:	d017      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003ccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cd0:	d80e      	bhi.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d014      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003cd6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cda:	d109      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ce0:	3330      	adds	r3, #48	; 0x30
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f004 fa00 	bl	80080e8 <RCCEx_PLL3_Config>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003cee:	e008      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cf6:	e004      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003d0a:	4b2e      	ldr	r3, [pc, #184]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d10:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d1c:	4a29      	ldr	r2, [pc, #164]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d24:	e003      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d44:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	d040      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d5a:	d01b      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d60:	d814      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d66:	d017      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d6c:	d80e      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d014      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d76:	d109      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7c:	3330      	adds	r3, #48	; 0x30
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 f9b2 	bl	80080e8 <RCCEx_PLL3_Config>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003d8a:	e008      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d92:	e004      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d94:	bf00      	nop
 8003d96:	e002      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d98:	bf00      	nop
 8003d9a:	e000      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d110      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003da8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db8:	4a02      	ldr	r2, [pc, #8]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003dc0:	e006      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003dc2:	bf00      	nop
 8003dc4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dcc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003de6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4313      	orrs	r3, r2
 8003dee:	d03d      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003df4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dfc:	d01b      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003dfe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e02:	d814      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003e04:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e08:	d017      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e0e:	d80e      	bhi.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e18:	d109      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e1e:	3330      	adds	r3, #48	; 0x30
 8003e20:	4618      	mov	r0, r3
 8003e22:	f004 f961 	bl	80080e8 <RCCEx_PLL3_Config>
 8003e26:	4603      	mov	r3, r0
 8003e28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003e2c:	e008      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10d      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003e48:	4bbe      	ldr	r3, [pc, #760]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e4e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e5a:	4aba      	ldr	r2, [pc, #744]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e62:	e003      	b.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e82:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e86:	460b      	mov	r3, r1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	d035      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003e9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e9e:	d80e      	bhi.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d012      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003ea4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea8:	d109      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eae:	3330      	adds	r3, #48	; 0x30
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f004 f919 	bl	80080e8 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ec4:	e002      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ecc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10d      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003ed4:	4b9b      	ldr	r3, [pc, #620]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ed6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003eda:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003ede:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ee6:	4a97      	ldr	r2, [pc, #604]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ef4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	2100      	movs	r1, #0
 8003f02:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003f18:	4b8a      	ldr	r3, [pc, #552]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	4a89      	ldr	r2, [pc, #548]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f22:	61d3      	str	r3, [r2, #28]
 8003f24:	4b87      	ldr	r3, [pc, #540]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f26:	69d9      	ldr	r1, [r3, #28]
 8003f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f2c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003f30:	4a84      	ldr	r2, [pc, #528]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f32:	430b      	orrs	r3, r1
 8003f34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f50:	460b      	mov	r3, r1
 8003f52:	4313      	orrs	r3, r2
 8003f54:	d055      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f5e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f62:	d031      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003f64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f68:	d82a      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6e:	d02d      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f74:	d824      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f7a:	d029      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f80:	d81e      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f86:	d011      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8c:	d818      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d020      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f96:	d113      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f004 f80a 	bl	8007fb8 <RCCEx_PLL2_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003faa:	e014      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fb0:	3330      	adds	r3, #48	; 0x30
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f004 f898 	bl	80080e8 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fc6:	e006      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e004      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fcc:	bf00      	nop
 8003fce:	e002      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d10d      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003fde:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fe0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fe4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ff0:	4a54      	ldr	r2, [pc, #336]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ff2:	430b      	orrs	r3, r1
 8003ff4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ff8:	e003      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ffe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004002:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800400e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004018:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800401c:	460b      	mov	r3, r1
 800401e:	4313      	orrs	r3, r2
 8004020:	d055      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800402a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800402e:	d031      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004030:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004034:	d82a      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403a:	d02d      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800403c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004040:	d824      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004042:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004046:	d029      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004048:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800404c:	d81e      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004052:	d011      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004058:	d818      	bhi.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800405a:	2b00      	cmp	r3, #0
 800405c:	d020      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004062:	d113      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004064:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004068:	3308      	adds	r3, #8
 800406a:	4618      	mov	r0, r3
 800406c:	f003 ffa4 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004076:	e014      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004078:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800407c:	3330      	adds	r3, #48	; 0x30
 800407e:	4618      	mov	r0, r3
 8004080:	f004 f832 	bl	80080e8 <RCCEx_PLL3_Config>
 8004084:	4603      	mov	r3, r0
 8004086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800408a:	e00a      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004092:	e006      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004094:	bf00      	nop
 8004096:	e004      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004098:	bf00      	nop
 800409a:	e002      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800409c:	bf00      	nop
 800409e:	e000      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80040a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040b0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80040b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040bc:	4a21      	ldr	r2, [pc, #132]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80040c4:	e003      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80040ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d6:	2100      	movs	r1, #0
 80040d8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e8:	460b      	mov	r3, r1
 80040ea:	4313      	orrs	r3, r2
 80040ec:	d057      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80040ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fa:	d033      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80040fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004100:	d82c      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004106:	d02f      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800410c:	d826      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800410e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004112:	d02b      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004118:	d820      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800411a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411e:	d013      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004124:	d81a      	bhi.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004126:	2b00      	cmp	r3, #0
 8004128:	d022      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800412a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412e:	d115      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004130:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004134:	3308      	adds	r3, #8
 8004136:	4618      	mov	r0, r3
 8004138:	f003 ff3e 	bl	8007fb8 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004142:	e016      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004144:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004148:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800414c:	3330      	adds	r3, #48	; 0x30
 800414e:	4618      	mov	r0, r3
 8004150:	f003 ffca 	bl	80080e8 <RCCEx_PLL3_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800415a:	e00a      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004162:	e006      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004164:	bf00      	nop
 8004166:	e004      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004168:	bf00      	nop
 800416a:	e002      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800416c:	bf00      	nop
 800416e:	e000      	b.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004172:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10d      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800417a:	4bbb      	ldr	r3, [pc, #748]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800417c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004180:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004188:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800418c:	4ab6      	ldr	r2, [pc, #728]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800418e:	430b      	orrs	r3, r1
 8004190:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004194:	e003      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004196:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800419a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800419e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a6:	2100      	movs	r1, #0
 80041a8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d055      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80041be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041c6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80041ca:	d031      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80041cc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80041d0:	d82a      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d6:	d02d      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80041d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041dc:	d824      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041e2:	d029      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80041e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041e8:	d81e      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ee:	d011      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80041f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041f4:	d818      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d020      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80041fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041fe:	d113      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004200:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004204:	3308      	adds	r3, #8
 8004206:	4618      	mov	r0, r3
 8004208:	f003 fed6 	bl	8007fb8 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004212:	e014      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004214:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004218:	3330      	adds	r3, #48	; 0x30
 800421a:	4618      	mov	r0, r3
 800421c:	f003 ff64 	bl	80080e8 <RCCEx_PLL3_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004226:	e00a      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800422e:	e006      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004230:	bf00      	nop
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004234:	bf00      	nop
 8004236:	e002      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10d      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004246:	4b88      	ldr	r3, [pc, #544]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004248:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800424c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004250:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004258:	4a83      	ldr	r2, [pc, #524]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800425a:	430b      	orrs	r3, r1
 800425c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004260:	e003      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004266:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800426a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800426e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004272:	2100      	movs	r1, #0
 8004274:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004280:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004284:	460b      	mov	r3, r1
 8004286:	4313      	orrs	r3, r2
 8004288:	d055      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800428a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800428e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004292:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004296:	d031      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004298:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800429c:	d82a      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800429e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a2:	d02d      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80042a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a8:	d824      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ae:	d029      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80042b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042b4:	d81e      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042ba:	d011      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80042bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042c0:	d818      	bhi.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d020      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80042c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042ca:	d113      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d0:	3308      	adds	r3, #8
 80042d2:	4618      	mov	r0, r3
 80042d4:	f003 fe70 	bl	8007fb8 <RCCEx_PLL2_Config>
 80042d8:	4603      	mov	r3, r0
 80042da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042de:	e014      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042e4:	3330      	adds	r3, #48	; 0x30
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fefe 	bl	80080e8 <RCCEx_PLL3_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042f2:	e00a      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042fa:	e006      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042fc:	bf00      	nop
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004300:	bf00      	nop
 8004302:	e002      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10d      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004312:	4b55      	ldr	r3, [pc, #340]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004318:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004324:	4a50      	ldr	r2, [pc, #320]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004326:	430b      	orrs	r3, r1
 8004328:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800432c:	e003      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004332:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004336:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800433a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433e:	2100      	movs	r1, #0
 8004340:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800434c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004350:	460b      	mov	r3, r1
 8004352:	4313      	orrs	r3, r2
 8004354:	d055      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800435a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004362:	d031      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004364:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004368:	d82a      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436e:	d02d      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004374:	d824      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800437a:	d029      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800437c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004380:	d81e      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004386:	d011      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800438c:	d818      	bhi.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d020      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004392:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004396:	d113      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800439c:	3308      	adds	r3, #8
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 fe0a 	bl	8007fb8 <RCCEx_PLL2_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80043aa:	e014      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b0:	3330      	adds	r3, #48	; 0x30
 80043b2:	4618      	mov	r0, r3
 80043b4:	f003 fe98 	bl	80080e8 <RCCEx_PLL3_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80043be:	e00a      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043c6:	e006      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043c8:	bf00      	nop
 80043ca:	e004      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043cc:	bf00      	nop
 80043ce:	e002      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043d0:	bf00      	nop
 80043d2:	e000      	b.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10d      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80043e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043f0:	4a1d      	ldr	r2, [pc, #116]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043f2:	430b      	orrs	r3, r1
 80043f4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80043f8:	e003      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004402:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800440e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004412:	2300      	movs	r3, #0
 8004414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004418:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800441c:	460b      	mov	r3, r1
 800441e:	4313      	orrs	r3, r2
 8004420:	d055      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004422:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004426:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800442a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442e:	d035      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004434:	d82e      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800443a:	d031      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800443c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004440:	d828      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004446:	d01b      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800444c:	d822      	bhi.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d009      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004458:	e01c      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800445a:	4b03      	ldr	r3, [pc, #12]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	4a02      	ldr	r2, [pc, #8]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004464:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004466:	e01c      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004468:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800446c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004470:	3308      	adds	r3, #8
 8004472:	4618      	mov	r0, r3
 8004474:	f003 fda0 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800447e:	e010      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004484:	3330      	adds	r3, #48	; 0x30
 8004486:	4618      	mov	r0, r3
 8004488:	f003 fe2e 	bl	80080e8 <RCCEx_PLL3_Config>
 800448c:	4603      	mov	r3, r0
 800448e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004492:	e006      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800449a:	e002      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800449c:	bf00      	nop
 800449e:	e000      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80044a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d10d      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80044aa:	4bc3      	ldr	r3, [pc, #780]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044b0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80044b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044bc:	4abe      	ldr	r2, [pc, #760]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044be:	430b      	orrs	r3, r1
 80044c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044c4:	e003      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044ca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80044ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044e4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d051      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80044ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80044f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044fa:	d033      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80044fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004500:	d82c      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004502:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004506:	d02d      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004508:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800450c:	d826      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800450e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004512:	d019      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004514:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004518:	d820      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800451e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004522:	d007      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004524:	e01a      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004526:	4ba4      	ldr	r3, [pc, #656]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452a:	4aa3      	ldr	r2, [pc, #652]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800452c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004530:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004532:	e018      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004538:	3308      	adds	r3, #8
 800453a:	4618      	mov	r0, r3
 800453c:	f003 fd3c 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004540:	4603      	mov	r3, r0
 8004542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004546:	e00e      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004548:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454c:	3330      	adds	r3, #48	; 0x30
 800454e:	4618      	mov	r0, r3
 8004550:	f003 fdca 	bl	80080e8 <RCCEx_PLL3_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800456e:	4b92      	ldr	r3, [pc, #584]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004574:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004578:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800457c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004580:	4a8d      	ldr	r2, [pc, #564]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004582:	430b      	orrs	r3, r1
 8004584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004588:	e003      	b.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800458e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004592:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800459a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800459e:	67bb      	str	r3, [r7, #120]	; 0x78
 80045a0:	2300      	movs	r3, #0
 80045a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045a8:	460b      	mov	r3, r1
 80045aa:	4313      	orrs	r3, r2
 80045ac:	d032      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80045ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80045b6:	2b05      	cmp	r3, #5
 80045b8:	d80f      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d211      	bcs.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d911      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d109      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045ca:	3308      	adds	r3, #8
 80045cc:	4618      	mov	r0, r3
 80045ce:	f003 fcf3 	bl	8007fb8 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045d8:	e006      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10d      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80045f0:	4b71      	ldr	r3, [pc, #452]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045f6:	f023 0107 	bic.w	r1, r3, #7
 80045fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004602:	4a6d      	ldr	r2, [pc, #436]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004604:	430b      	orrs	r3, r1
 8004606:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004610:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004614:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	2100      	movs	r1, #0
 800461e:	6739      	str	r1, [r7, #112]	; 0x70
 8004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004624:	677b      	str	r3, [r7, #116]	; 0x74
 8004626:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d024      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004634:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800463c:	2b08      	cmp	r3, #8
 800463e:	d005      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004656:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800465c:	f023 0108 	bic.w	r1, r3, #8
 8004660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004668:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800466a:	430b      	orrs	r3, r1
 800466c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004672:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004676:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800467a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800467e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004682:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004686:	66bb      	str	r3, [r7, #104]	; 0x68
 8004688:	2300      	movs	r3, #0
 800468a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800468c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004690:	460b      	mov	r3, r1
 8004692:	4313      	orrs	r3, r2
 8004694:	f000 80b9 	beq.w	800480a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004698:	4b48      	ldr	r3, [pc, #288]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	4a47      	ldr	r2, [pc, #284]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a4:	f7fc fc0e 	bl	8000ec4 <HAL_GetTick>
 80046a8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046ac:	e00b      	b.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ae:	f7fc fc09 	bl	8000ec4 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d903      	bls.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046c4:	e005      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0ed      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80046d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f040 8093 	bne.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046dc:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d023      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80046f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046f6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80046fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01b      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004702:	4b2d      	ldr	r3, [pc, #180]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004710:	4b29      	ldr	r3, [pc, #164]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004716:	4a28      	ldr	r2, [pc, #160]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800471c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800472c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004730:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004732:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800473a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d019      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fc fbbd 	bl	8000ec4 <HAL_GetTick>
 800474a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474e:	e00d      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fc fbb8 	bl	8000ec4 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800475a:	1ad2      	subs	r2, r2, r3
 800475c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004760:	429a      	cmp	r2, r3
 8004762:	d903      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800476a:	e006      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800476e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ea      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800477a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800477e:	2b00      	cmp	r3, #0
 8004780:	d13a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004786:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800478a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004792:	d115      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004794:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800479c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047a0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80047a4:	091b      	lsrs	r3, r3, #4
 80047a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80047ae:	4a02      	ldr	r2, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	61d3      	str	r3, [r2, #28]
 80047b4:	e00a      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80047b6:	bf00      	nop
 80047b8:	44020c00 	.word	0x44020c00
 80047bc:	44020800 	.word	0x44020800
 80047c0:	4b9f      	ldr	r3, [pc, #636]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	4a9e      	ldr	r2, [pc, #632]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047ca:	61d3      	str	r3, [r2, #28]
 80047cc:	4b9c      	ldr	r3, [pc, #624]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d2:	4a9b      	ldr	r2, [pc, #620]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047dc:	4b98      	ldr	r3, [pc, #608]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047de:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80047e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047e6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80047ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ee:	4a94      	ldr	r2, [pc, #592]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047f0:	430b      	orrs	r3, r1
 80047f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047f6:	e008      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004806:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800480a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004816:	663b      	str	r3, [r7, #96]	; 0x60
 8004818:	2300      	movs	r3, #0
 800481a:	667b      	str	r3, [r7, #100]	; 0x64
 800481c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d035      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004826:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800482a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800482e:	2b30      	cmp	r3, #48	; 0x30
 8004830:	d014      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8004832:	2b30      	cmp	r3, #48	; 0x30
 8004834:	d80e      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004836:	2b20      	cmp	r3, #32
 8004838:	d012      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800483a:	2b20      	cmp	r3, #32
 800483c:	d80a      	bhi.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800483e:	2b00      	cmp	r3, #0
 8004840:	d010      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8004842:	2b10      	cmp	r3, #16
 8004844:	d106      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004846:	4b7e      	ldr	r3, [pc, #504]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484a:	4a7d      	ldr	r2, [pc, #500]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004850:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004852:	e008      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800485a:	e004      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800485c:	bf00      	nop
 800485e:	e002      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004860:	bf00      	nop
 8004862:	e000      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004866:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800486e:	4b74      	ldr	r3, [pc, #464]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004874:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800487c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004880:	4a6f      	ldr	r2, [pc, #444]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004888:	e003      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800488e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004892:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800489e:	65bb      	str	r3, [r7, #88]	; 0x58
 80048a0:	2300      	movs	r3, #0
 80048a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048a4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d033      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80048ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d002      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d007      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80048be:	e010      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c0:	4b5f      	ldr	r3, [pc, #380]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	4a5e      	ldr	r2, [pc, #376]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ca:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048cc:	e00d      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048d2:	3308      	adds	r3, #8
 80048d4:	4618      	mov	r0, r3
 80048d6:	f003 fb6f 	bl	8007fb8 <RCCEx_PLL2_Config>
 80048da:	4603      	mov	r3, r0
 80048dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10d      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048f8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80048fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004900:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004904:	4a4e      	ldr	r2, [pc, #312]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004906:	430b      	orrs	r3, r1
 8004908:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004912:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004916:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004922:	653b      	str	r3, [r7, #80]	; 0x50
 8004924:	2300      	movs	r3, #0
 8004926:	657b      	str	r3, [r7, #84]	; 0x54
 8004928:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d033      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8004932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004936:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800493e:	2b80      	cmp	r3, #128	; 0x80
 8004940:	d007      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8004942:	e010      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004948:	4a3d      	ldr	r2, [pc, #244]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800494a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800494e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004950:	e00d      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004956:	3308      	adds	r3, #8
 8004958:	4618      	mov	r0, r3
 800495a:	f003 fb2d 	bl	8007fb8 <RCCEx_PLL2_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004964:	e003      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800496c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800496e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10d      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004976:	4b32      	ldr	r3, [pc, #200]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004978:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800497c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004980:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004984:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004988:	4a2d      	ldr	r2, [pc, #180]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800498a:	430b      	orrs	r3, r1
 800498c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004990:	e003      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004992:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004996:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80049a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a8:	2300      	movs	r3, #0
 80049aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80049b0:	460b      	mov	r3, r1
 80049b2:	4313      	orrs	r3, r2
 80049b4:	d04a      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80049b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049be:	2b04      	cmp	r3, #4
 80049c0:	d827      	bhi.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049dd 	.word	0x080049dd
 80049cc:	080049eb 	.word	0x080049eb
 80049d0:	080049ff 	.word	0x080049ff
 80049d4:	08004a1b 	.word	0x08004a1b
 80049d8:	08004a1b 	.word	0x08004a1b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049dc:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049e8:	e018      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ee:	3308      	adds	r3, #8
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fae1 	bl	8007fb8 <RCCEx_PLL2_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049fc:	e00e      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a02:	3330      	adds	r3, #48	; 0x30
 8004a04:	4618      	mov	r0, r3
 8004a06:	f003 fb6f 	bl	80080e8 <RCCEx_PLL3_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004a10:	e004      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a18:	e000      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10f      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004a24:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a2a:	f023 0107 	bic.w	r1, r3, #7
 8004a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a36:	4a02      	ldr	r2, [pc, #8]	; (8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a3e:	e005      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004a40:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a48:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004a4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a54:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a58:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004a5e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a62:	460b      	mov	r3, r1
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f000 8081 	beq.w	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d85f      	bhi.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004b01 	.word	0x08004b01
 8004a80:	08004b37 	.word	0x08004b37
 8004a84:	08004b37 	.word	0x08004b37
 8004a88:	08004b37 	.word	0x08004b37
 8004a8c:	08004b37 	.word	0x08004b37
 8004a90:	08004b37 	.word	0x08004b37
 8004a94:	08004b37 	.word	0x08004b37
 8004a98:	08004b37 	.word	0x08004b37
 8004a9c:	08004b0f 	.word	0x08004b0f
 8004aa0:	08004b37 	.word	0x08004b37
 8004aa4:	08004b37 	.word	0x08004b37
 8004aa8:	08004b37 	.word	0x08004b37
 8004aac:	08004b37 	.word	0x08004b37
 8004ab0:	08004b37 	.word	0x08004b37
 8004ab4:	08004b37 	.word	0x08004b37
 8004ab8:	08004b37 	.word	0x08004b37
 8004abc:	08004b23 	.word	0x08004b23
 8004ac0:	08004b37 	.word	0x08004b37
 8004ac4:	08004b37 	.word	0x08004b37
 8004ac8:	08004b37 	.word	0x08004b37
 8004acc:	08004b37 	.word	0x08004b37
 8004ad0:	08004b37 	.word	0x08004b37
 8004ad4:	08004b37 	.word	0x08004b37
 8004ad8:	08004b37 	.word	0x08004b37
 8004adc:	08004b3f 	.word	0x08004b3f
 8004ae0:	08004b37 	.word	0x08004b37
 8004ae4:	08004b37 	.word	0x08004b37
 8004ae8:	08004b37 	.word	0x08004b37
 8004aec:	08004b37 	.word	0x08004b37
 8004af0:	08004b37 	.word	0x08004b37
 8004af4:	08004b37 	.word	0x08004b37
 8004af8:	08004b37 	.word	0x08004b37
 8004afc:	08004b3f 	.word	0x08004b3f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b00:	4bab      	ldr	r3, [pc, #684]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	4aaa      	ldr	r2, [pc, #680]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b0c:	e018      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b12:	3308      	adds	r3, #8
 8004b14:	4618      	mov	r0, r3
 8004b16:	f003 fa4f 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b20:	e00e      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b26:	3330      	adds	r3, #48	; 0x30
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f003 fadd 	bl	80080e8 <RCCEx_PLL3_Config>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b40:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10d      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004b48:	4b99      	ldr	r3, [pc, #612]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b4e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b5a:	4a95      	ldr	r2, [pc, #596]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b62:	e003      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b7e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b82:	460b      	mov	r3, r1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	d04e      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004b88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b94:	d02e      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9a:	d827      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b9c:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9e:	d02b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004ba0:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba2:	d823      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d017      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d81f      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d007      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004bb4:	e01a      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bb6:	4b7e      	ldr	r3, [pc, #504]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	4a7d      	ldr	r2, [pc, #500]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bc2:	e01a      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc8:	3308      	adds	r3, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f003 f9f4 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bd6:	e010      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bdc:	3330      	adds	r3, #48	; 0x30
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 fa82 	bl	80080e8 <RCCEx_PLL3_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bea:	e006      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bf2:	e002      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bf4:	bf00      	nop
 8004bf6:	e000      	b.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10d      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004c02:	4b6b      	ldr	r3, [pc, #428]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c08:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c14:	4a66      	ldr	r2, [pc, #408]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c16:	430b      	orrs	r3, r1
 8004c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c1c:	e003      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004c26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c32:	633b      	str	r3, [r7, #48]	; 0x30
 8004c34:	2300      	movs	r3, #0
 8004c36:	637b      	str	r3, [r7, #52]	; 0x34
 8004c38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d055      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004c42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004c4a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c4e:	d031      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004c50:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c54:	d82a      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5a:	d02d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c60:	d824      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c62:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c66:	d029      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004c68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c6c:	d81e      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c72:	d011      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c78:	d818      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d020      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c82:	d113      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c88:	3308      	adds	r3, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f003 f994 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c96:	e014      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c9c:	3330      	adds	r3, #48	; 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 fa22 	bl	80080e8 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004caa:	e00a      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004cb2:	e006      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cb8:	bf00      	nop
 8004cba:	e002      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cbc:	bf00      	nop
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10d      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004cca:	4b39      	ldr	r3, [pc, #228]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cd0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004cdc:	4a34      	ldr	r2, [pc, #208]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004cee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d04:	460b      	mov	r3, r1
 8004d06:	4313      	orrs	r3, r2
 8004d08:	d058      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004d0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d12:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d16:	d031      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004d18:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d1c:	d82a      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d22:	d02d      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d28:	d824      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d2e:	d029      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004d30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d34:	d81e      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3a:	d011      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004d3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d40:	d818      	bhi.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d020      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d113      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d50:	3308      	adds	r3, #8
 8004d52:	4618      	mov	r0, r3
 8004d54:	f003 f930 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d5e:	e014      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d64:	3330      	adds	r3, #48	; 0x30
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 f9be 	bl	80080e8 <RCCEx_PLL3_Config>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d72:	e00a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d7a:	e006      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e004      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d80:	bf00      	nop
 8004d82:	e002      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d84:	bf00      	nop
 8004d86:	e000      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d110      	bne.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004d92:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004da4:	4902      	ldr	r1, [pc, #8]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004dac:	e006      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004dae:	bf00      	nop
 8004db0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004db8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6239      	str	r1, [r7, #32]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	d055      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004dd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004de0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004de4:	d031      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004de6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004dea:	d82a      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df0:	d02d      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004df2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df6:	d824      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004df8:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004dfc:	d029      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004dfe:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004e02:	d81e      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d011      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d818      	bhi.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d020      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	d113      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e1e:	3308      	adds	r3, #8
 8004e20:	4618      	mov	r0, r3
 8004e22:	f003 f8c9 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004e26:	4603      	mov	r3, r0
 8004e28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e2c:	e014      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e32:	3330      	adds	r3, #48	; 0x30
 8004e34:	4618      	mov	r0, r3
 8004e36:	f003 f957 	bl	80080e8 <RCCEx_PLL3_Config>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e48:	e006      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e004      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e58:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10d      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004e60:	4b88      	ldr	r3, [pc, #544]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e66:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004e6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e72:	4984      	ldr	r1, [pc, #528]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004e7a:	e003      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e7c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e80:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	61b9      	str	r1, [r7, #24]
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	d03d      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004ea0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ea4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d81c      	bhi.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004eac:	a201      	add	r2, pc, #4	; (adr r2, 8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb2:	bf00      	nop
 8004eb4:	08004eef 	.word	0x08004eef
 8004eb8:	08004ec5 	.word	0x08004ec5
 8004ebc:	08004ed3 	.word	0x08004ed3
 8004ec0:	08004eef 	.word	0x08004eef
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec4:	4b6f      	ldr	r3, [pc, #444]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec8:	4a6e      	ldr	r2, [pc, #440]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ece:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f003 f86d 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10d      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004ef8:	4b62      	ldr	r3, [pc, #392]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004efa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004efe:	f023 0203 	bic.w	r2, r3, #3
 8004f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f0a:	495e      	ldr	r1, [pc, #376]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004f12:	e003      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	2100      	movs	r1, #0
 8004f26:	6139      	str	r1, [r7, #16]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f32:	460b      	mov	r3, r1
 8004f34:	4313      	orrs	r3, r2
 8004f36:	d03a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d00e      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4a:	d815      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d017      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f54:	d110      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f56:	4b4b      	ldr	r3, [pc, #300]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5a:	4a4a      	ldr	r2, [pc, #296]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f60:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f62:	e00e      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f68:	3308      	adds	r3, #8
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f003 f824 	bl	8007fb8 <RCCEx_PLL2_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f76:	e004      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f7e:	e000      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004f8a:	4b3e      	ldr	r3, [pc, #248]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f98:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f9c:	4939      	ldr	r1, [pc, #228]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004fa4:	e003      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004faa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	2100      	movs	r1, #0
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	d038      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004fca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004fd2:	2b30      	cmp	r3, #48	; 0x30
 8004fd4:	d01b      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004fd6:	2b30      	cmp	r3, #48	; 0x30
 8004fd8:	d815      	bhi.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d002      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d007      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004fe2:	e010      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe4:	4b27      	ldr	r3, [pc, #156]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	4a26      	ldr	r2, [pc, #152]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fee:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004ff0:	e00e      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ff6:	3330      	adds	r3, #48	; 0x30
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f003 f875 	bl	80080e8 <RCCEx_PLL3_Config>
 8004ffe:	4603      	mov	r3, r0
 8005000:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005004:	e004      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800500c:	e000      	b.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800500e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005010:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10d      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800501a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800501e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005022:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005026:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800502a:	4916      	ldr	r1, [pc, #88]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800502c:	4313      	orrs	r3, r2
 800502e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005032:	e003      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005034:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005038:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800503c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	2100      	movs	r1, #0
 8005046:	6039      	str	r1, [r7, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	607b      	str	r3, [r7, #4]
 800504e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005052:	460b      	mov	r3, r1
 8005054:	4313      	orrs	r3, r2
 8005056:	d00c      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005058:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800505a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800505e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005062:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005066:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800506a:	4906      	ldr	r1, [pc, #24]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005072:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005076:	4618      	mov	r0, r3
 8005078:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	44020c00 	.word	0x44020c00

08005088 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005088:	b480      	push	{r7}
 800508a:	b08b      	sub	sp, #44	; 0x2c
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005090:	4bad      	ldr	r3, [pc, #692]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005098:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800509a:	4bab      	ldr	r3, [pc, #684]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80050a4:	4ba8      	ldr	r3, [pc, #672]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	0a1b      	lsrs	r3, r3, #8
 80050aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ae:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80050b0:	4ba5      	ldr	r3, [pc, #660]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80050ba:	4ba3      	ldr	r3, [pc, #652]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050be:	08db      	lsrs	r3, r3, #3
 80050c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	fb02 f303 	mul.w	r3, r2, r3
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 8126 	beq.w	800532a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d053      	beq.n	800518c <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d86f      	bhi.n	80051ca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d003      	beq.n	80050f8 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d02b      	beq.n	800514e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80050f6:	e068      	b.n	80051ca <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050f8:	4b93      	ldr	r3, [pc, #588]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	08db      	lsrs	r3, r3, #3
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	4a92      	ldr	r2, [pc, #584]	; (800534c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	ee07 3a90 	vmov	s15, r3
 8005110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005130:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005350 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005134:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005138:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005140:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005148:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800514c:	e068      	b.n	8005220 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	ee07 3a90 	vmov	s15, r3
 8005154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005158:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005354 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800515c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a04 	vldr	s12, [r7, #16]
 800516e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005350 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800518a:	e049      	b.n	8005220 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005358 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	ee07 3a90 	vmov	s15, r3
 80051a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80051ac:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005350 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80051c8:	e02a      	b.n	8005220 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	08db      	lsrs	r3, r3, #3
 80051d0:	f003 0303 	and.w	r3, r3, #3
 80051d4:	4a5d      	ldr	r2, [pc, #372]	; (800534c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051d6:	fa22 f303 	lsr.w	r3, r2, r3
 80051da:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	ee07 3a90 	vmov	s15, r3
 80051ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8005202:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005350 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800520e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800521e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005220:	4b49      	ldr	r3, [pc, #292]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800522c:	d121      	bne.n	8005272 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800522e:	4b46      	ldr	r3, [pc, #280]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d017      	beq.n	800526a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800523a:	4b43      	ldr	r3, [pc, #268]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800523c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800523e:	0a5b      	lsrs	r3, r3, #9
 8005240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800524c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005250:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005254:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005260:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e006      	b.n	8005278 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e002      	b.n	8005278 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005278:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005284:	d121      	bne.n	80052ca <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005286:	4b30      	ldr	r3, [pc, #192]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d017      	beq.n	80052c2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005292:	4b2d      	ldr	r3, [pc, #180]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005296:	0c1b      	lsrs	r3, r3, #16
 8005298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529c:	ee07 3a90 	vmov	s15, r3
 80052a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80052a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80052ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	e006      	b.n	80052d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
 80052c8:	e002      	b.n	80052d0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052d0:	4b1d      	ldr	r3, [pc, #116]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052dc:	d121      	bne.n	8005322 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80052de:	4b1a      	ldr	r3, [pc, #104]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d017      	beq.n	800531a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052ea:	4b17      	ldr	r3, [pc, #92]	; (8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	0e1b      	lsrs	r3, r3, #24
 80052f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f4:	ee07 3a90 	vmov	s15, r3
 80052f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80052fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005300:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005304:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800530c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005310:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005318:	e010      	b.n	800533c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	e00c      	b.n	800533c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	609a      	str	r2, [r3, #8]
}
 8005328:	e008      	b.n	800533c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	372c      	adds	r7, #44	; 0x2c
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	44020c00 	.word	0x44020c00
 800534c:	03d09000 	.word	0x03d09000
 8005350:	46000000 	.word	0x46000000
 8005354:	4a742400 	.word	0x4a742400
 8005358:	4bbebc20 	.word	0x4bbebc20

0800535c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800535c:	b480      	push	{r7}
 800535e:	b08b      	sub	sp, #44	; 0x2c
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005364:	4bad      	ldr	r3, [pc, #692]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800536e:	4bab      	ldr	r3, [pc, #684]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005372:	f003 0303 	and.w	r3, r3, #3
 8005376:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005378:	4ba8      	ldr	r3, [pc, #672]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	0a1b      	lsrs	r3, r3, #8
 800537e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005382:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005384:	4ba5      	ldr	r3, [pc, #660]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800538e:	4ba3      	ldr	r3, [pc, #652]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 8126 	beq.w	80055fe <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d053      	beq.n	8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d86f      	bhi.n	800549e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d003      	beq.n	80053cc <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d02b      	beq.n	8005422 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80053ca:	e068      	b.n	800549e <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053cc:	4b93      	ldr	r3, [pc, #588]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	4a92      	ldr	r2, [pc, #584]	; (8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053d8:	fa22 f303 	lsr.w	r3, r2, r3
 80053dc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	ee07 3a90 	vmov	s15, r3
 80053e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	ee07 3a90 	vmov	s15, r3
 80053fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005400:	ed97 6a04 	vldr	s12, [r7, #16]
 8005404:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005408:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005410:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005414:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005420:	e068      	b.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	ee07 3a90 	vmov	s15, r3
 8005428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005628 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005442:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800545e:	e049      	b.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800562c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800546e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	ee07 3a90 	vmov	s15, r3
 8005478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005480:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005498:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800549c:	e02a      	b.n	80054f4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800549e:	4b5f      	ldr	r3, [pc, #380]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	08db      	lsrs	r3, r3, #3
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	4a5d      	ldr	r2, [pc, #372]	; (8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	ee07 3a90 	vmov	s15, r3
 80054c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	ee07 3a90 	vmov	s15, r3
 80054ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d2:	ed97 6a04 	vldr	s12, [r7, #16]
 80054d6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054f2:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054f4:	4b49      	ldr	r3, [pc, #292]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005500:	d121      	bne.n	8005546 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005502:	4b46      	ldr	r3, [pc, #280]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550a:	2b00      	cmp	r3, #0
 800550c:	d017      	beq.n	800553e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800550e:	4b43      	ldr	r3, [pc, #268]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	0a5b      	lsrs	r3, r3, #9
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005518:	ee07 3a90 	vmov	s15, r3
 800551c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005524:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005528:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800552c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005534:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e006      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e002      	b.n	800554c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800554c:	4b33      	ldr	r3, [pc, #204]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005558:	d121      	bne.n	800559e <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d017      	beq.n	8005596 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005566:	4b2d      	ldr	r3, [pc, #180]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556a:	0c1b      	lsrs	r3, r3, #16
 800556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005578:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800557c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005580:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e006      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]
 800559c:	e002      	b.n	80055a4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055a4:	4b1d      	ldr	r3, [pc, #116]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b0:	d121      	bne.n	80055f6 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d017      	beq.n	80055ee <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80055d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055d4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80055d8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055ec:	e010      	b.n	8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	e00c      	b.n	8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	609a      	str	r2, [r3, #8]
}
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
}
 8005610:	bf00      	nop
 8005612:	372c      	adds	r7, #44	; 0x2c
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	44020c00 	.word	0x44020c00
 8005620:	03d09000 	.word	0x03d09000
 8005624:	46000000 	.word	0x46000000
 8005628:	4a742400 	.word	0x4a742400
 800562c:	4bbebc20 	.word	0x4bbebc20

08005630 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005630:	b480      	push	{r7}
 8005632:	b08b      	sub	sp, #44	; 0x2c
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005638:	4bad      	ldr	r3, [pc, #692]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005640:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005642:	4bab      	ldr	r3, [pc, #684]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	f003 0303 	and.w	r3, r3, #3
 800564a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800564c:	4ba8      	ldr	r3, [pc, #672]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005656:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005658:	4ba5      	ldr	r3, [pc, #660]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005662:	4ba3      	ldr	r3, [pc, #652]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005666:	08db      	lsrs	r3, r3, #3
 8005668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	fb02 f303 	mul.w	r3, r2, r3
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800567a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8126 	beq.w	80058d2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2b03      	cmp	r3, #3
 800568a:	d053      	beq.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d86f      	bhi.n	8005772 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d003      	beq.n	80056a0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d02b      	beq.n	80056f6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800569e:	e068      	b.n	8005772 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80056a0:	4b93      	ldr	r3, [pc, #588]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	08db      	lsrs	r3, r3, #3
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	4a92      	ldr	r2, [pc, #584]	; (80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
 80056b0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	ee07 3a90 	vmov	s15, r3
 80056b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ca:	6a3b      	ldr	r3, [r7, #32]
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056d4:	ed97 6a04 	vldr	s12, [r7, #16]
 80056d8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80056dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80056f4:	e068      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	ee07 3a90 	vmov	s15, r3
 80056fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005700:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8005704:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a04 	vldr	s12, [r7, #16]
 8005716:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005732:	e049      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	ee07 3a90 	vmov	s15, r3
 800574c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005750:	ed97 6a04 	vldr	s12, [r7, #16]
 8005754:	eddf 5a68 	vldr	s11, [pc, #416]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005770:	e02a      	b.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005772:	4b5f      	ldr	r3, [pc, #380]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	f003 0303 	and.w	r3, r3, #3
 800577c:	4a5d      	ldr	r2, [pc, #372]	; (80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800577e:	fa22 f303 	lsr.w	r3, r2, r3
 8005782:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	ee07 3a90 	vmov	s15, r3
 8005794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80057aa:	eddf 5a53 	vldr	s11, [pc, #332]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80057c6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057c8:	4b49      	ldr	r3, [pc, #292]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d4:	d121      	bne.n	800581a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80057d6:	4b46      	ldr	r3, [pc, #280]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d017      	beq.n	8005812 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057e2:	4b43      	ldr	r3, [pc, #268]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	0a5b      	lsrs	r3, r3, #9
 80057e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ec:	ee07 3a90 	vmov	s15, r3
 80057f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80057f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80057fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005800:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005808:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005820:	4b33      	ldr	r3, [pc, #204]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582c:	d121      	bne.n	8005872 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800582e:	4b30      	ldr	r3, [pc, #192]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d017      	beq.n	800586a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800583a:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800583c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800583e:	0c1b      	lsrs	r3, r3, #16
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	ee07 3a90 	vmov	s15, r3
 8005848:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800584c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005850:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005854:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800585c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005860:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e006      	b.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	605a      	str	r2, [r3, #4]
 8005870:	e002      	b.n	8005878 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005878:	4b1d      	ldr	r3, [pc, #116]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005884:	d121      	bne.n	80058ca <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	0e1b      	lsrs	r3, r3, #24
 8005898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80058a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80058b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80058c0:	e010      	b.n	80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	e00c      	b.n	80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	e008      	b.n	80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	609a      	str	r2, [r3, #8]
}
 80058e4:	bf00      	nop
 80058e6:	372c      	adds	r7, #44	; 0x2c
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	44020c00 	.word	0x44020c00
 80058f4:	03d09000 	.word	0x03d09000
 80058f8:	46000000 	.word	0x46000000
 80058fc:	4a742400 	.word	0x4a742400
 8005900:	4bbebc20 	.word	0x4bbebc20

08005904 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005904:	b590      	push	{r4, r7, lr}
 8005906:	b08f      	sub	sp, #60	; 0x3c
 8005908:	af00      	add	r7, sp, #0
 800590a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800590e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005912:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8005916:	4321      	orrs	r1, r4
 8005918:	d150      	bne.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800591c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005924:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005926:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005928:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b02      	cmp	r3, #2
 8005932:	d108      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593a:	d104      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800593c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
 8005942:	f002 bb2a 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005946:	4b1b      	ldr	r3, [pc, #108]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800594c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005954:	d108      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800595c:	d104      	bne.n	8005968 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800595e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005962:	637b      	str	r3, [r7, #52]	; 0x34
 8005964:	f002 bb19 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005968:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005974:	d119      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800597c:	d115      	bne.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800598a:	d30a      	bcc.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800598c:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	0a1b      	lsrs	r3, r3, #8
 8005992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005996:	4a08      	ldr	r2, [pc, #32]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005998:	fbb2 f3f3 	udiv	r3, r2, r3
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800599e:	f002 bafc 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80059a6:	f002 baf8 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80059aa:	2300      	movs	r3, #0
 80059ac:	637b      	str	r3, [r7, #52]	; 0x34
 80059ae:	f002 baf4 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059b2:	bf00      	nop
 80059b4:	44020c00 	.word	0x44020c00
 80059b8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80059bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80059c4:	ea50 0104 	orrs.w	r1, r0, r4
 80059c8:	f001 8275 	beq.w	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80059cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d0:	2801      	cmp	r0, #1
 80059d2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80059d6:	f082 82dd 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059de:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80059e2:	ea50 0104 	orrs.w	r1, r0, r4
 80059e6:	f001 816c 	beq.w	8006cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80059ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059ee:	2801      	cmp	r0, #1
 80059f0:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80059f4:	f082 82ce 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059fc:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8005a00:	ea50 0104 	orrs.w	r1, r0, r4
 8005a04:	f001 8602 	beq.w	800760c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a0c:	2801      	cmp	r0, #1
 8005a0e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005a12:	f082 82bf 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a1a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005a1e:	ea50 0104 	orrs.w	r1, r0, r4
 8005a22:	f001 854c 	beq.w	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2a:	2801      	cmp	r0, #1
 8005a2c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005a30:	f082 82b0 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a38:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005a3c:	ea50 0104 	orrs.w	r1, r0, r4
 8005a40:	f001 849e 	beq.w	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a48:	2801      	cmp	r0, #1
 8005a4a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005a4e:	f082 82a1 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a56:	f1a1 0420 	sub.w	r4, r1, #32
 8005a5a:	ea50 0104 	orrs.w	r1, r0, r4
 8005a5e:	f001 83e8 	beq.w	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a66:	2801      	cmp	r0, #1
 8005a68:	f171 0120 	sbcs.w	r1, r1, #32
 8005a6c:	f082 8292 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a74:	f1a1 0410 	sub.w	r4, r1, #16
 8005a78:	ea50 0104 	orrs.w	r1, r0, r4
 8005a7c:	f002 8256 	beq.w	8007f2c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a84:	2801      	cmp	r0, #1
 8005a86:	f171 0110 	sbcs.w	r1, r1, #16
 8005a8a:	f082 8283 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a92:	f1a1 0408 	sub.w	r4, r1, #8
 8005a96:	ea50 0104 	orrs.w	r1, r0, r4
 8005a9a:	f002 81cc 	beq.w	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005a9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa2:	2801      	cmp	r0, #1
 8005aa4:	f171 0108 	sbcs.w	r1, r1, #8
 8005aa8:	f082 8274 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab0:	1f0c      	subs	r4, r1, #4
 8005ab2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ab6:	f001 8648 	beq.w	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abe:	2801      	cmp	r0, #1
 8005ac0:	f171 0104 	sbcs.w	r1, r1, #4
 8005ac4:	f082 8266 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005acc:	1e8c      	subs	r4, r1, #2
 8005ace:	ea50 0104 	orrs.w	r1, r0, r4
 8005ad2:	f002 8143 	beq.w	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005ad6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ada:	2801      	cmp	r0, #1
 8005adc:	f171 0102 	sbcs.w	r1, r1, #2
 8005ae0:	f082 8258 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae8:	1e4c      	subs	r4, r1, #1
 8005aea:	ea50 0104 	orrs.w	r1, r0, r4
 8005aee:	f002 80ce 	beq.w	8007c8e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005af6:	2801      	cmp	r0, #1
 8005af8:	f171 0101 	sbcs.w	r1, r1, #1
 8005afc:	f082 824a 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b04:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005b08:	4321      	orrs	r1, r4
 8005b0a:	f002 8059 	beq.w	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b12:	4cd9      	ldr	r4, [pc, #868]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b14:	42a0      	cmp	r0, r4
 8005b16:	f171 0100 	sbcs.w	r1, r1, #0
 8005b1a:	f082 823b 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b22:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005b26:	4321      	orrs	r1, r4
 8005b28:	f001 87d9 	beq.w	8007ade <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005b2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b30:	4cd2      	ldr	r4, [pc, #840]	; (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005b32:	42a0      	cmp	r0, r4
 8005b34:	f171 0100 	sbcs.w	r1, r1, #0
 8005b38:	f082 822c 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b40:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005b44:	4321      	orrs	r1, r4
 8005b46:	f001 8751 	beq.w	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4e:	4ccc      	ldr	r4, [pc, #816]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005b50:	42a0      	cmp	r0, r4
 8005b52:	f171 0100 	sbcs.w	r1, r1, #0
 8005b56:	f082 821d 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b5e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005b62:	4321      	orrs	r1, r4
 8005b64:	f001 869a 	beq.w	800789c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005b68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b6c:	4cc5      	ldr	r4, [pc, #788]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b6e:	42a0      	cmp	r0, r4
 8005b70:	f171 0100 	sbcs.w	r1, r1, #0
 8005b74:	f082 820e 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b7c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005b80:	4321      	orrs	r1, r4
 8005b82:	f001 8612 	beq.w	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b8a:	4cbf      	ldr	r4, [pc, #764]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	f171 0100 	sbcs.w	r1, r1, #0
 8005b92:	f082 81ff 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9a:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005b9e:	4321      	orrs	r1, r4
 8005ba0:	f002 817e 	beq.w	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba8:	4cb8      	ldr	r4, [pc, #736]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005baa:	42a0      	cmp	r0, r4
 8005bac:	f171 0100 	sbcs.w	r1, r1, #0
 8005bb0:	f082 81f0 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8005bbc:	4321      	orrs	r1, r4
 8005bbe:	f000 829e 	beq.w	80060fe <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bc6:	4cb2      	ldr	r4, [pc, #712]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005bc8:	42a0      	cmp	r0, r4
 8005bca:	f171 0100 	sbcs.w	r1, r1, #0
 8005bce:	f082 81e1 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bd6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005bda:	4321      	orrs	r1, r4
 8005bdc:	f000 826d 	beq.w	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be4:	4cab      	ldr	r4, [pc, #684]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005be6:	42a0      	cmp	r0, r4
 8005be8:	f171 0100 	sbcs.w	r1, r1, #0
 8005bec:	f082 81d2 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf4:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005bf8:	4321      	orrs	r1, r4
 8005bfa:	f001 800d 	beq.w	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c02:	4ca5      	ldr	r4, [pc, #660]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005c04:	42a0      	cmp	r0, r4
 8005c06:	f171 0100 	sbcs.w	r1, r1, #0
 8005c0a:	f082 81c3 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c12:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005c16:	4321      	orrs	r1, r4
 8005c18:	f000 81d0 	beq.w	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005c1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c20:	4c9e      	ldr	r4, [pc, #632]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c22:	42a0      	cmp	r0, r4
 8005c24:	f171 0100 	sbcs.w	r1, r1, #0
 8005c28:	f082 81b4 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c30:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005c34:	4321      	orrs	r1, r4
 8005c36:	f000 8142 	beq.w	8005ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c3e:	4c98      	ldr	r4, [pc, #608]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c40:	42a0      	cmp	r0, r4
 8005c42:	f171 0100 	sbcs.w	r1, r1, #0
 8005c46:	f082 81a5 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c4e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005c52:	4321      	orrs	r1, r4
 8005c54:	f001 824e 	beq.w	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005c58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c5c:	4c91      	ldr	r4, [pc, #580]	; (8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005c5e:	42a0      	cmp	r0, r4
 8005c60:	f171 0100 	sbcs.w	r1, r1, #0
 8005c64:	f082 8196 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c6c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005c70:	4321      	orrs	r1, r4
 8005c72:	f001 8197 	beq.w	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c7a:	4c8b      	ldr	r4, [pc, #556]	; (8005ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	f171 0100 	sbcs.w	r1, r1, #0
 8005c82:	f082 8187 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c8a:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005c8e:	4321      	orrs	r1, r4
 8005c90:	f001 8154 	beq.w	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c98:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005c9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005ca0:	f082 8178 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ca4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005cac:	4321      	orrs	r1, r4
 8005cae:	f001 80b7 	beq.w	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005cb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb6:	f248 0401 	movw	r4, #32769	; 0x8001
 8005cba:	42a0      	cmp	r0, r4
 8005cbc:	f171 0100 	sbcs.w	r1, r1, #0
 8005cc0:	f082 8168 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005ccc:	4321      	orrs	r1, r4
 8005cce:	f001 8064 	beq.w	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005cd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd6:	f244 0401 	movw	r4, #16385	; 0x4001
 8005cda:	42a0      	cmp	r0, r4
 8005cdc:	f171 0100 	sbcs.w	r1, r1, #0
 8005ce0:	f082 8158 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ce4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce8:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005cec:	4321      	orrs	r1, r4
 8005cee:	f001 8011 	beq.w	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005cf2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf6:	f242 0401 	movw	r4, #8193	; 0x2001
 8005cfa:	42a0      	cmp	r0, r4
 8005cfc:	f171 0100 	sbcs.w	r1, r1, #0
 8005d00:	f082 8148 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d08:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005d0c:	4321      	orrs	r1, r4
 8005d0e:	f000 871e 	beq.w	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d16:	f241 0401 	movw	r4, #4097	; 0x1001
 8005d1a:	42a0      	cmp	r0, r4
 8005d1c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d20:	f082 8138 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d28:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005d2c:	4321      	orrs	r1, r4
 8005d2e:	f000 86a8 	beq.w	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005d32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d36:	f640 0401 	movw	r4, #2049	; 0x801
 8005d3a:	42a0      	cmp	r0, r4
 8005d3c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d40:	f082 8128 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d48:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005d4c:	4321      	orrs	r1, r4
 8005d4e:	f000 8632 	beq.w	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005d52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d56:	f240 4401 	movw	r4, #1025	; 0x401
 8005d5a:	42a0      	cmp	r0, r4
 8005d5c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d60:	f082 8118 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d68:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005d6c:	4321      	orrs	r1, r4
 8005d6e:	f000 85b0 	beq.w	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d76:	f240 2401 	movw	r4, #513	; 0x201
 8005d7a:	42a0      	cmp	r0, r4
 8005d7c:	f171 0100 	sbcs.w	r1, r1, #0
 8005d80:	f082 8108 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d88:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005d8c:	4321      	orrs	r1, r4
 8005d8e:	f000 8535 	beq.w	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005d92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d96:	f240 1401 	movw	r4, #257	; 0x101
 8005d9a:	42a0      	cmp	r0, r4
 8005d9c:	f171 0100 	sbcs.w	r1, r1, #0
 8005da0:	f082 80f8 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005da4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005dac:	4321      	orrs	r1, r4
 8005dae:	f000 84ba 	beq.w	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005db2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005db6:	2881      	cmp	r0, #129	; 0x81
 8005db8:	f171 0100 	sbcs.w	r1, r1, #0
 8005dbc:	f082 80ea 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc4:	2821      	cmp	r0, #33	; 0x21
 8005dc6:	f171 0100 	sbcs.w	r1, r1, #0
 8005dca:	d26f      	bcs.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005dcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd0:	4301      	orrs	r1, r0
 8005dd2:	f002 80df 	beq.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dda:	1e42      	subs	r2, r0, #1
 8005ddc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8005de0:	2a20      	cmp	r2, #32
 8005de2:	f173 0100 	sbcs.w	r1, r3, #0
 8005de6:	f082 80d5 	bcs.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dea:	2a1f      	cmp	r2, #31
 8005dec:	f202 80d2 	bhi.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005df0:	a101      	add	r1, pc, #4	; (adr r1, 8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005df2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005df6:	bf00      	nop
 8005df8:	08006159 	.word	0x08006159
 8005dfc:	08006225 	.word	0x08006225
 8005e00:	08007f95 	.word	0x08007f95
 8005e04:	080062e5 	.word	0x080062e5
 8005e08:	08007f95 	.word	0x08007f95
 8005e0c:	08007f95 	.word	0x08007f95
 8005e10:	08007f95 	.word	0x08007f95
 8005e14:	080063b5 	.word	0x080063b5
 8005e18:	08007f95 	.word	0x08007f95
 8005e1c:	08007f95 	.word	0x08007f95
 8005e20:	08007f95 	.word	0x08007f95
 8005e24:	08007f95 	.word	0x08007f95
 8005e28:	08007f95 	.word	0x08007f95
 8005e2c:	08007f95 	.word	0x08007f95
 8005e30:	08007f95 	.word	0x08007f95
 8005e34:	08006497 	.word	0x08006497
 8005e38:	08007f95 	.word	0x08007f95
 8005e3c:	08007f95 	.word	0x08007f95
 8005e40:	08007f95 	.word	0x08007f95
 8005e44:	08007f95 	.word	0x08007f95
 8005e48:	08007f95 	.word	0x08007f95
 8005e4c:	08007f95 	.word	0x08007f95
 8005e50:	08007f95 	.word	0x08007f95
 8005e54:	08007f95 	.word	0x08007f95
 8005e58:	08007f95 	.word	0x08007f95
 8005e5c:	08007f95 	.word	0x08007f95
 8005e60:	08007f95 	.word	0x08007f95
 8005e64:	08007f95 	.word	0x08007f95
 8005e68:	08007f95 	.word	0x08007f95
 8005e6c:	08007f95 	.word	0x08007f95
 8005e70:	08007f95 	.word	0x08007f95
 8005e74:	0800656d 	.word	0x0800656d
 8005e78:	80000001 	.word	0x80000001
 8005e7c:	40000001 	.word	0x40000001
 8005e80:	20000001 	.word	0x20000001
 8005e84:	10000001 	.word	0x10000001
 8005e88:	08000001 	.word	0x08000001
 8005e8c:	04000001 	.word	0x04000001
 8005e90:	00800001 	.word	0x00800001
 8005e94:	00400001 	.word	0x00400001
 8005e98:	00200001 	.word	0x00200001
 8005e9c:	00100001 	.word	0x00100001
 8005ea0:	00080001 	.word	0x00080001
 8005ea4:	00040001 	.word	0x00040001
 8005ea8:	00020001 	.word	0x00020001
 8005eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005eb4:	430b      	orrs	r3, r1
 8005eb6:	f000 83c4 	beq.w	8006642 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005eba:	f002 b86b 	b.w	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005ebe:	4ba1      	ldr	r3, [pc, #644]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ec4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005ec8:	633b      	str	r3, [r7, #48]	; 0x30
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ed0:	d036      	beq.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ed8:	d86b      	bhi.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee0:	d02b      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee8:	d863      	bhi.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef0:	d01b      	beq.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef8:	d85b      	bhi.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f06:	d008      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005f08:	e053      	b.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f0a:	f107 0320 	add.w	r3, r7, #32
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff f8ba 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f18:	e04e      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f1a:	f107 0314 	add.w	r3, r7, #20
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff fa1c 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f28:	e046      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f2a:	f107 0308 	add.w	r3, r7, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fb7e 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f38:	e03e      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005f3a:	4b83      	ldr	r3, [pc, #524]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f3e:	e03b      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f40:	4b80      	ldr	r3, [pc, #512]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f4c:	4b7d      	ldr	r3, [pc, #500]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d10c      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f5e:	4b79      	ldr	r3, [pc, #484]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	08db      	lsrs	r3, r3, #3
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	4a78      	ldr	r2, [pc, #480]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f70:	e01e      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f72:	4b74      	ldr	r3, [pc, #464]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7e:	d106      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f86:	d102      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f88:	4b71      	ldr	r3, [pc, #452]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f8c:	e010      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f8e:	4b6d      	ldr	r3, [pc, #436]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f9a:	d106      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa2:	d102      	bne.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005fa4:	4b6b      	ldr	r3, [pc, #428]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005fae:	e003      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005fb0:	e002      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fb6:	bf00      	nop
          }
        }
        break;
 8005fb8:	f001 bfef 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005fbc:	4b61      	ldr	r3, [pc, #388]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fc2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fce:	d036      	beq.n	800603e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fd6:	d86b      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005fde:	d02b      	beq.n	8006038 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005fe6:	d863      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d01b      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff6:	d85b      	bhi.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d004      	beq.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006004:	d008      	beq.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006006:	e053      	b.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006008:	f107 0320 	add.w	r3, r7, #32
 800600c:	4618      	mov	r0, r3
 800600e:	f7ff f83b 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006016:	e04e      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f7ff f99d 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006026:	e046      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006028:	f107 0308 	add.w	r3, r7, #8
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff faff 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006036:	e03e      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006038:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800603c:	e03b      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006044:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006048:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800604a:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b02      	cmp	r3, #2
 8006054:	d10c      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d109      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800605c:	4b39      	ldr	r3, [pc, #228]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	08db      	lsrs	r3, r3, #3
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	4a39      	ldr	r2, [pc, #228]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
 800606e:	e01e      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006070:	4b34      	ldr	r3, [pc, #208]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d106      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d102      	bne.n	800608c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006086:	4b32      	ldr	r3, [pc, #200]	; (8006150 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006088:	637b      	str	r3, [r7, #52]	; 0x34
 800608a:	e010      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800608c:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006098:	d106      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060a0:	d102      	bne.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80060a2:	4b2c      	ldr	r3, [pc, #176]	; (8006154 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
 80060a6:	e002      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80060ac:	e003      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80060ae:	e002      	b.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060b4:	bf00      	nop
          }
        }
        break;
 80060b6:	f001 bf70 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80060ba:	4b22      	ldr	r3, [pc, #136]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d108      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060cc:	f107 0320 	add.w	r3, r7, #32
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe ffd9 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060da:	f001 bf5e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b40      	cmp	r3, #64	; 0x40
 80060e2:	d108      	bne.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060e4:	f107 0314 	add.w	r3, r7, #20
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7ff f937 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060f2:	f001 bf52 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060fa:	f001 bf4e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006100:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006108:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2b00      	cmp	r3, #0
 800610e:	d108      	bne.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006110:	f107 0320 	add.w	r3, r7, #32
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe ffb7 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800611e:	f001 bf3c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	2b80      	cmp	r3, #128	; 0x80
 8006126:	d108      	bne.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006128:	f107 0314 	add.w	r3, r7, #20
 800612c:	4618      	mov	r0, r3
 800612e:	f7ff f915 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006132:	69fb      	ldr	r3, [r7, #28]
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006136:	f001 bf30 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800613e:	f001 bf2c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006142:	bf00      	nop
 8006144:	44020c00 	.word	0x44020c00
 8006148:	00bb8000 	.word	0x00bb8000
 800614c:	03d09000 	.word	0x03d09000
 8006150:	003d0900 	.word	0x003d0900
 8006154:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006158:	4b9d      	ldr	r3, [pc, #628]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800615a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	2b00      	cmp	r3, #0
 8006168:	d104      	bne.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800616a:	f7fc ffd7 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 800616e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006170:	f001 bf13 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006174:	4b96      	ldr	r3, [pc, #600]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800617c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006180:	d10a      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff f8e5 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	e043      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006198:	4b8d      	ldr	r3, [pc, #564]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061a4:	d10a      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d107      	bne.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ac:	f107 0308 	add.w	r3, r7, #8
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fa3d 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	637b      	str	r3, [r7, #52]	; 0x34
 80061ba:	e031      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061bc:	4b84      	ldr	r3, [pc, #528]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d10c      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d109      	bne.n	80061e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061ce:	4b80      	ldr	r3, [pc, #512]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	08db      	lsrs	r3, r3, #3
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	4a7e      	ldr	r2, [pc, #504]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	637b      	str	r3, [r7, #52]	; 0x34
 80061e0:	e01e      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80061e2:	4b7b      	ldr	r3, [pc, #492]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ee:	d105      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d102      	bne.n	80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80061f6:	4b78      	ldr	r3, [pc, #480]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
 80061fa:	e011      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061fc:	4b74      	ldr	r3, [pc, #464]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	2b02      	cmp	r3, #2
 8006208:	d106      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	2b05      	cmp	r3, #5
 800620e:	d103      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006210:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800621c:	f001 bebd 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006220:	f001 bebb 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006224:	4b6a      	ldr	r3, [pc, #424]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006226:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800622a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006232:	2b00      	cmp	r3, #0
 8006234:	d104      	bne.n	8006240 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006236:	f7fc ff5b 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 800623a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800623c:	f001 bead 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006240:	4b63      	ldr	r3, [pc, #396]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800624c:	d10a      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2b08      	cmp	r3, #8
 8006252:	d107      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006254:	f107 0314 	add.w	r3, r7, #20
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff f87f 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	637b      	str	r3, [r7, #52]	; 0x34
 8006262:	e03d      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006266:	2b10      	cmp	r3, #16
 8006268:	d108      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626a:	f107 0308 	add.w	r3, r7, #8
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff f9de 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006278:	f001 be8f 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800627c:	4b54      	ldr	r3, [pc, #336]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0302 	and.w	r3, r3, #2
 8006284:	2b02      	cmp	r3, #2
 8006286:	d10c      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628a:	2b18      	cmp	r3, #24
 800628c:	d109      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800628e:	4b50      	ldr	r3, [pc, #320]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a4e      	ldr	r2, [pc, #312]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	637b      	str	r3, [r7, #52]	; 0x34
 80062a0:	e01e      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80062a2:	4b4b      	ldr	r3, [pc, #300]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ae:	d105      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d102      	bne.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80062b6:	4b48      	ldr	r3, [pc, #288]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80062b8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ba:	e011      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062bc:	4b44      	ldr	r3, [pc, #272]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d106      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	2b28      	cmp	r3, #40	; 0x28
 80062ce:	d103      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80062d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
 80062d6:	e003      	b.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80062d8:	2300      	movs	r3, #0
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062dc:	f001 be5d 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062e0:	f001 be5b 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062e4:	4b3a      	ldr	r3, [pc, #232]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80062ee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062f6:	f7fc fefb 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80062fa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80062fc:	f001 be4d 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006300:	4b33      	ldr	r3, [pc, #204]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800630c:	d10a      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	2b40      	cmp	r3, #64	; 0x40
 8006312:	d107      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006314:	f107 0314 	add.w	r3, r7, #20
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff f81f 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	e045      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006324:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800632c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006330:	d10a      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2b80      	cmp	r3, #128	; 0x80
 8006336:	d107      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006338:	f107 0308 	add.w	r3, r7, #8
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff f977 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	637b      	str	r3, [r7, #52]	; 0x34
 8006346:	e033      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d10c      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	2bc0      	cmp	r3, #192	; 0xc0
 8006358:	d109      	bne.n	800636e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800635a:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	08db      	lsrs	r3, r3, #3
 8006360:	f003 0303 	and.w	r3, r3, #3
 8006364:	4a1b      	ldr	r2, [pc, #108]	; (80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006366:	fa22 f303 	lsr.w	r3, r2, r3
 800636a:	637b      	str	r3, [r7, #52]	; 0x34
 800636c:	e020      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800636e:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	d106      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006382:	d102      	bne.n	800638a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
 8006388:	e012      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800638a:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800638c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b02      	cmp	r3, #2
 8006396:	d107      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800639e:	d103      	bne.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80063a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a4:	637b      	str	r3, [r7, #52]	; 0x34
 80063a6:	e003      	b.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063ac:	f001 bdf5 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063b0:	f001 bdf3 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063ba:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80063be:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10a      	bne.n	80063dc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063c6:	f7fc fe93 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80063ca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80063cc:	f001 bde5 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063d0:	44020c00 	.word	0x44020c00
 80063d4:	03d09000 	.word	0x03d09000
 80063d8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80063dc:	4ba0      	ldr	r3, [pc, #640]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e8:	d10b      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe ffb0 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006400:	e047      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006402:	4b97      	ldr	r3, [pc, #604]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800640a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800640e:	d10b      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006416:	d107      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006418:	f107 0308 	add.w	r3, r7, #8
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff f907 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	e034      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006428:	4b8d      	ldr	r3, [pc, #564]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b02      	cmp	r3, #2
 8006432:	d10d      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800643a:	d109      	bne.n	8006450 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800643c:	4b88      	ldr	r3, [pc, #544]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	08db      	lsrs	r3, r3, #3
 8006442:	f003 0303 	and.w	r3, r3, #3
 8006446:	4a87      	ldr	r2, [pc, #540]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006448:	fa22 f303 	lsr.w	r3, r2, r3
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	e020      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006450:	4b83      	ldr	r3, [pc, #524]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800645c:	d106      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800645e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006464:	d102      	bne.n	800646c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006466:	4b80      	ldr	r3, [pc, #512]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
 800646a:	e012      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800646c:	4b7c      	ldr	r3, [pc, #496]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800646e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b02      	cmp	r3, #2
 8006478:	d107      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006480:	d103      	bne.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
 8006488:	e003      	b.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800648e:	f001 bd84 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006492:	f001 bd82 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006496:	4b72      	ldr	r3, [pc, #456]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800649c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fc fe22 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80064ac:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80064ae:	f001 bd74 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80064b2:	4b6b      	ldr	r3, [pc, #428]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064be:	d10b      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c6:	d107      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c8:	f107 0314 	add.w	r3, r7, #20
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fe ff45 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	e047      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80064d8:	4b61      	ldr	r3, [pc, #388]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e4:	d10b      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ec:	d107      	bne.n	80064fe <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064ee:	f107 0308 	add.w	r3, r7, #8
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff f89c 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	637b      	str	r3, [r7, #52]	; 0x34
 80064fc:	e034      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064fe:	4b58      	ldr	r3, [pc, #352]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b02      	cmp	r3, #2
 8006508:	d10d      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006510:	d109      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006512:	4b53      	ldr	r3, [pc, #332]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	08db      	lsrs	r3, r3, #3
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	4a51      	ldr	r2, [pc, #324]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	637b      	str	r3, [r7, #52]	; 0x34
 8006524:	e020      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006526:	4b4e      	ldr	r3, [pc, #312]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800652e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006532:	d106      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800653a:	d102      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800653c:	4b4a      	ldr	r3, [pc, #296]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	e012      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006542:	4b47      	ldr	r3, [pc, #284]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b02      	cmp	r3, #2
 800654e:	d107      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006556:	d103      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006558:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655c:	637b      	str	r3, [r7, #52]	; 0x34
 800655e:	e003      	b.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006564:	f001 bd19 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006568:	f001 bd17 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800656c:	4b3c      	ldr	r3, [pc, #240]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800656e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006572:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006576:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d104      	bne.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800657e:	f7fc fdb7 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006582:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006584:	f001 bd09 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006588:	4b35      	ldr	r3, [pc, #212]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006594:	d10b      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800659e:	f107 0314 	add.w	r3, r7, #20
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe feda 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
 80065ac:	e047      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80065ae:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ba:	d10b      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d107      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff f831 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	637b      	str	r3, [r7, #52]	; 0x34
 80065d2:	e034      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80065d4:	4b22      	ldr	r3, [pc, #136]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d10d      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80065e6:	d109      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065e8:	4b1d      	ldr	r3, [pc, #116]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	08db      	lsrs	r3, r3, #3
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80065f4:	fa22 f303 	lsr.w	r3, r2, r3
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
 80065fa:	e020      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80065fc:	4b18      	ldr	r3, [pc, #96]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006604:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006608:	d106      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006610:	d102      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
 8006616:	e012      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800661a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800661e:	f003 0302 	and.w	r3, r3, #2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d107      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800662c:	d103      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800662e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
 8006634:	e003      	b.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800663a:	f001 bcae 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800663e:	f001 bcac 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006642:	4b07      	ldr	r3, [pc, #28]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006648:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800664c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800664e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006654:	f7fc fd4c 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006658:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800665a:	f001 bc9e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800665e:	bf00      	nop
 8006660:	44020c00 	.word	0x44020c00
 8006664:	03d09000 	.word	0x03d09000
 8006668:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800666c:	4ba0      	ldr	r3, [pc, #640]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006678:	d10b      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800667c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006680:	d107      	bne.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006682:	f107 0314 	add.w	r3, r7, #20
 8006686:	4618      	mov	r0, r3
 8006688:	f7fe fe68 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
 8006690:	e047      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006692:	4b97      	ldr	r3, [pc, #604]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800669a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669e:	d10b      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80066a6:	d107      	bne.n	80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a8:	f107 0308 	add.w	r3, r7, #8
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe ffbf 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	637b      	str	r3, [r7, #52]	; 0x34
 80066b6:	e034      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80066b8:	4b8d      	ldr	r3, [pc, #564]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d10d      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066ca:	d109      	bne.n	80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066cc:	4b88      	ldr	r3, [pc, #544]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	08db      	lsrs	r3, r3, #3
 80066d2:	f003 0303 	and.w	r3, r3, #3
 80066d6:	4a87      	ldr	r2, [pc, #540]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80066d8:	fa22 f303 	lsr.w	r3, r2, r3
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
 80066de:	e020      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80066e0:	4b83      	ldr	r3, [pc, #524]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d106      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80066ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f4:	d102      	bne.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80066f6:	4b80      	ldr	r3, [pc, #512]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
 80066fa:	e012      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80066fc:	4b7c      	ldr	r3, [pc, #496]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006702:	f003 0302 	and.w	r3, r3, #2
 8006706:	2b02      	cmp	r3, #2
 8006708:	d107      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006710:	d103      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
 8006718:	e003      	b.n	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800671a:	2300      	movs	r3, #0
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800671e:	f001 bc3c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006722:	f001 bc3a 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8006726:	4b72      	ldr	r3, [pc, #456]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800672c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006730:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fc fcda 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 800673c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800673e:	f001 bc2c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8006742:	4b6b      	ldr	r3, [pc, #428]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800674a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800674e:	d10b      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006756:	d107      	bne.n	8006768 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006758:	f107 0314 	add.w	r3, r7, #20
 800675c:	4618      	mov	r0, r3
 800675e:	f7fe fdfd 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	e047      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006768:	4b61      	ldr	r3, [pc, #388]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006774:	d10b      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800677c:	d107      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe ff54 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	637b      	str	r3, [r7, #52]	; 0x34
 800678c:	e034      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800678e:	4b58      	ldr	r3, [pc, #352]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b02      	cmp	r3, #2
 8006798:	d10d      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067a0:	d109      	bne.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067a2:	4b53      	ldr	r3, [pc, #332]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	08db      	lsrs	r3, r3, #3
 80067a8:	f003 0303 	and.w	r3, r3, #3
 80067ac:	4a51      	ldr	r2, [pc, #324]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80067ae:	fa22 f303 	lsr.w	r3, r2, r3
 80067b2:	637b      	str	r3, [r7, #52]	; 0x34
 80067b4:	e020      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80067b6:	4b4e      	ldr	r3, [pc, #312]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c2:	d106      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80067c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ca:	d102      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80067cc:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	e012      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80067d2:	4b47      	ldr	r3, [pc, #284]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d107      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80067e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80067e6:	d103      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80067e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
 80067ee:	e003      	b.n	80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f4:	f001 bbd1 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067f8:	f001 bbcf 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80067fc:	4b3c      	ldr	r3, [pc, #240]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006802:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006806:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	2b00      	cmp	r3, #0
 800680c:	d104      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800680e:	f7fc fc6f 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006812:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8006814:	f001 bbc1 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006818:	4b35      	ldr	r3, [pc, #212]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006824:	d10b      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800682c:	d107      	bne.n	800683e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682e:	f107 0314 	add.w	r3, r7, #20
 8006832:	4618      	mov	r0, r3
 8006834:	f7fe fd92 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	e047      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800683e:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800684a:	d10b      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006852:	d107      	bne.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006854:	f107 0308 	add.w	r3, r7, #8
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fee9 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	637b      	str	r3, [r7, #52]	; 0x34
 8006862:	e034      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006864:	4b22      	ldr	r3, [pc, #136]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b02      	cmp	r3, #2
 800686e:	d10d      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006876:	d109      	bne.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006878:	4b1d      	ldr	r3, [pc, #116]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	08db      	lsrs	r3, r3, #3
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	4a1c      	ldr	r2, [pc, #112]	; (80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
 8006888:	637b      	str	r3, [r7, #52]	; 0x34
 800688a:	e020      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800688c:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006898:	d106      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068a0:	d102      	bne.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
 80068a6:	e012      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80068a8:	4b11      	ldr	r3, [pc, #68]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d107      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068bc:	d103      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80068be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
 80068c4:	e003      	b.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068ca:	f001 bb66 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068ce:	f001 bb64 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80068d2:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068d8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10b      	bne.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fc fc04 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80068e8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80068ea:	f001 bb56 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068ee:	bf00      	nop
 80068f0:	44020c00 	.word	0x44020c00
 80068f4:	03d09000 	.word	0x03d09000
 80068f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80068fc:	4ba1      	ldr	r3, [pc, #644]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006908:	d10b      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006910:	d107      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006912:	f107 0314 	add.w	r3, r7, #20
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe fd20 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	637b      	str	r3, [r7, #52]	; 0x34
 8006920:	e047      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8006922:	4b98      	ldr	r3, [pc, #608]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800692a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692e:	d10b      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006938:	f107 0308 	add.w	r3, r7, #8
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fe77 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	637b      	str	r3, [r7, #52]	; 0x34
 8006946:	e034      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006948:	4b8e      	ldr	r3, [pc, #568]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b02      	cmp	r3, #2
 8006952:	d10d      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800695a:	d109      	bne.n	8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800695c:	4b89      	ldr	r3, [pc, #548]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	08db      	lsrs	r3, r3, #3
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	4a88      	ldr	r2, [pc, #544]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006968:	fa22 f303 	lsr.w	r3, r2, r3
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
 800696e:	e020      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006970:	4b84      	ldr	r3, [pc, #528]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d106      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006984:	d102      	bne.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006986:	4b81      	ldr	r3, [pc, #516]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
 800698a:	e012      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800698c:	4b7d      	ldr	r3, [pc, #500]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800698e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b02      	cmp	r3, #2
 8006998:	d107      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80069a0:	d103      	bne.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80069a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069a6:	637b      	str	r3, [r7, #52]	; 0x34
 80069a8:	e003      	b.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ae:	f001 baf4 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069b2:	f001 baf2 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80069b6:	4b73      	ldr	r3, [pc, #460]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069bc:	f003 0307 	and.w	r3, r3, #7
 80069c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069c8:	f7fc fb92 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 80069cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80069ce:	f001 bae4 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80069d2:	4b6c      	ldr	r3, [pc, #432]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069de:	d10a      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d107      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069e6:	f107 0314 	add.w	r3, r7, #20
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fcb6 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
 80069f4:	e043      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80069f6:	4b63      	ldr	r3, [pc, #396]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a02:	d10a      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	2b02      	cmp	r3, #2
 8006a08:	d107      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a0a:	f107 0308 	add.w	r3, r7, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fe fe0e 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	637b      	str	r3, [r7, #52]	; 0x34
 8006a18:	e031      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006a1a:	4b5a      	ldr	r3, [pc, #360]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d109      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a2c:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a54      	ldr	r2, [pc, #336]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3e:	e01e      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006a40:	4b50      	ldr	r3, [pc, #320]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4c:	d105      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b04      	cmp	r3, #4
 8006a52:	d102      	bne.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006a54:	4b4d      	ldr	r3, [pc, #308]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a56:	637b      	str	r3, [r7, #52]	; 0x34
 8006a58:	e011      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006a5a:	4b4a      	ldr	r3, [pc, #296]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d106      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d103      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
 8006a74:	e003      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a7a:	f001 ba8e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a7e:	f001 ba8c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006a82:	4b40      	ldr	r3, [pc, #256]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a8c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d104      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a94:	f7fc fb2c 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006a98:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a9a:	f001 ba7e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006a9e:	4b39      	ldr	r3, [pc, #228]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aaa:	d10a      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d107      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ab2:	f107 0314 	add.w	r3, r7, #20
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7fe fc50 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	e043      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006ac2:	4b30      	ldr	r3, [pc, #192]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ace:	d10a      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	2b20      	cmp	r3, #32
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ad6:	f107 0308 	add.w	r3, r7, #8
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fda8 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ae4:	e031      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006ae6:	4b27      	ldr	r3, [pc, #156]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	2b30      	cmp	r3, #48	; 0x30
 8006af6:	d109      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006af8:	4b22      	ldr	r3, [pc, #136]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	08db      	lsrs	r3, r3, #3
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	4a21      	ldr	r2, [pc, #132]	; (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
 8006b0a:	e01e      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006b0c:	4b1d      	ldr	r3, [pc, #116]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b18:	d105      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d102      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006b20:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
 8006b24:	e011      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006b26:	4b17      	ldr	r3, [pc, #92]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d106      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2b50      	cmp	r3, #80	; 0x50
 8006b38:	d103      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b40:	e003      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b46:	f001 ba28 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b4a:	f001 ba26 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b54:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b58:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b60:	f7fc faf2 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8006b64:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b66:	f001 ba18 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b70:	d10e      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b72:	f107 0314 	add.w	r3, r7, #20
 8006b76:	4618      	mov	r0, r3
 8006b78:	f7fe fbf0 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b80:	f001 ba0b 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b84:	44020c00 	.word	0x44020c00
 8006b88:	03d09000 	.word	0x03d09000
 8006b8c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b96:	d108      	bne.n	8006baa <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fd47 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ba6:	f001 b9f8 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006baa:	4ba4      	ldr	r3, [pc, #656]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d10d      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bbc:	d109      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bbe:	4b9f      	ldr	r3, [pc, #636]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	08db      	lsrs	r3, r3, #3
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	4a9d      	ldr	r2, [pc, #628]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006bca:	fa22 f303 	lsr.w	r3, r2, r3
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd0:	e020      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006bd2:	4b9a      	ldr	r3, [pc, #616]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bde:	d106      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006be6:	d102      	bne.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006be8:	4b96      	ldr	r3, [pc, #600]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006bea:	637b      	str	r3, [r7, #52]	; 0x34
 8006bec:	e012      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006bee:	4b93      	ldr	r3, [pc, #588]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bf4:	f003 0302 	and.w	r3, r3, #2
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d107      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006c02:	d103      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c08:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0a:	e003      	b.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c10:	f001 b9c3 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c14:	f001 b9c1 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c18:	4b88      	ldr	r3, [pc, #544]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d104      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006c2a:	f7fc fa45 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8006c2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006c30:	f001 b9b3 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d104      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7fc f911 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8006c3e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c40:	f001 b9ab 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d108      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fb84 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c58:	f001 b99f 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006c5c:	4b77      	ldr	r3, [pc, #476]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c68:	d105      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d102      	bne.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006c70:	4b75      	ldr	r3, [pc, #468]	; (8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
 8006c74:	e023      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c76:	4b71      	ldr	r3, [pc, #452]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b02      	cmp	r3, #2
 8006c80:	d10c      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d109      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c88:	4b6c      	ldr	r3, [pc, #432]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	08db      	lsrs	r3, r3, #3
 8006c8e:	f003 0303 	and.w	r3, r3, #3
 8006c92:	4a6b      	ldr	r2, [pc, #428]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c94:	fa22 f303 	lsr.w	r3, r2, r3
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	e010      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006c9c:	4b67      	ldr	r3, [pc, #412]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca8:	d105      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	2b05      	cmp	r3, #5
 8006cae:	d102      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006cb0:	4b64      	ldr	r3, [pc, #400]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb4:	e003      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cba:	f001 b96e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cbe:	f001 b96c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006cc2:	4b5e      	ldr	r3, [pc, #376]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006cce:	4b5b      	ldr	r3, [pc, #364]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d106      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d103      	bne.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce8:	e012      	b.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006cea:	4b54      	ldr	r3, [pc, #336]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf8:	d106      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d103      	bne.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006d00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
 8006d06:	e003      	b.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006d0c:	f001 b945 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d10:	f001 b943 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d14:	4b49      	ldr	r3, [pc, #292]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d104      	bne.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d26:	f7fc f9e3 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006d2a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d2c:	f001 b935 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d36:	d108      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d38:	f107 0308 	add.w	r3, r7, #8
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fc77 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d46:	f001 b928 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006d4a:	4b3c      	ldr	r3, [pc, #240]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b02      	cmp	r3, #2
 8006d54:	d10d      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5c:	d109      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d5e:	4b37      	ldr	r3, [pc, #220]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	08db      	lsrs	r3, r3, #3
 8006d64:	f003 0303 	and.w	r3, r3, #3
 8006d68:	4a35      	ldr	r2, [pc, #212]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d70:	e011      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006d72:	4b32      	ldr	r3, [pc, #200]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7e:	d106      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d86:	d102      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006d88:	4b2e      	ldr	r3, [pc, #184]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8c:	e003      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d92:	f001 b902 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d96:	f001 b900 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006d9a:	4b28      	ldr	r3, [pc, #160]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006da0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006da4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d104      	bne.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fc f9a0 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006db0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006db2:	f001 b8f2 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dbe:	f107 0308 	add.w	r3, r7, #8
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fe fc34 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dcc:	f001 b8e5 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006dd0:	4b1a      	ldr	r3, [pc, #104]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d10d      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006de2:	d109      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006de4:	4b15      	ldr	r3, [pc, #84]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	08db      	lsrs	r3, r3, #3
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	4a14      	ldr	r2, [pc, #80]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
 8006df6:	e011      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006df8:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e04:	d106      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e10:	637b      	str	r3, [r7, #52]	; 0x34
 8006e12:	e003      	b.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e18:	f001 b8bf 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e1c:	f001 b8bd 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e2a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10c      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006e32:	f7fc f989 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8006e36:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e38:	f001 b8af 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e3c:	44020c00 	.word	0x44020c00
 8006e40:	03d09000 	.word	0x03d09000
 8006e44:	003d0900 	.word	0x003d0900
 8006e48:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e52:	d108      	bne.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e54:	f107 0308 	add.w	r3, r7, #8
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fe fbe9 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e62:	f001 b89a 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006e66:	4b9f      	ldr	r3, [pc, #636]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d10d      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e78:	d109      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e7a:	4b9a      	ldr	r3, [pc, #616]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	08db      	lsrs	r3, r3, #3
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	4a98      	ldr	r2, [pc, #608]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e86:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e8c:	e011      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006e8e:	4b95      	ldr	r3, [pc, #596]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e9a:	d106      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ea2:	d102      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006ea4:	4b91      	ldr	r3, [pc, #580]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea8:	e003      	b.n	8006eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eae:	f001 b874 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006eb2:	f001 b872 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006eb6:	4b8b      	ldr	r3, [pc, #556]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eb8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ebc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ec8:	f7fc f93e 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8006ecc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ece:	f001 b864 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed8:	d108      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fba6 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee8:	f001 b857 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006eec:	4b7d      	ldr	r3, [pc, #500]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d10d      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006efe:	d109      	bne.n	8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f00:	4b78      	ldr	r3, [pc, #480]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	08db      	lsrs	r3, r3, #3
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	4a77      	ldr	r2, [pc, #476]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f10:	637b      	str	r3, [r7, #52]	; 0x34
 8006f12:	e011      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006f14:	4b73      	ldr	r3, [pc, #460]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f20:	d106      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f28:	d102      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006f2a:	4b70      	ldr	r3, [pc, #448]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	e003      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f34:	f001 b831 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f38:	f001 b82f 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006f3c:	4b69      	ldr	r3, [pc, #420]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f42:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d104      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f4e:	f7fc f8cf 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8006f52:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f54:	f001 b821 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fb63 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f6e:	f001 b814 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006f72:	4b5c      	ldr	r3, [pc, #368]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d10e      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f84:	d10a      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f86:	4b57      	ldr	r3, [pc, #348]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	08db      	lsrs	r3, r3, #3
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	4a55      	ldr	r2, [pc, #340]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f92:	fa22 f303 	lsr.w	r3, r2, r3
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f98:	f000 bfff 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fa0:	f000 bffb 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006fa4:	4b4f      	ldr	r3, [pc, #316]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fa6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006faa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006fb6:	d056      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006fbe:	f200 808b 	bhi.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc8:	d03e      	beq.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd0:	f200 8082 	bhi.w	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fda:	d027      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fe2:	d879      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fea:	d017      	beq.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff2:	d871      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007000:	d004      	beq.n	800700c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007002:	e069      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007004:	f7fc f8a0 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8007008:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800700a:	e068      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe f9a3 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800701a:	e060      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800701c:	f107 0308 	add.w	r3, r7, #8
 8007020:	4618      	mov	r0, r3
 8007022:	f7fe fb05 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800702a:	e058      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800702c:	4b2d      	ldr	r3, [pc, #180]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800702e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d103      	bne.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007040:	e04d      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007046:	e04a      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007048:	4b26      	ldr	r3, [pc, #152]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800704a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800704e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007056:	d103      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007058:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800705c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800705e:	e03e      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007064:	e03b      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007066:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007068:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800706c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007072:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10c      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d109      	bne.n	8007098 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007084:	4b17      	ldr	r3, [pc, #92]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007090:	fa22 f303 	lsr.w	r3, r2, r3
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
 8007096:	e01e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a4:	d106      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ac:	d102      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80070b0:	637b      	str	r3, [r7, #52]	; 0x34
 80070b2:	e010      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070b4:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c0:	d106      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80070c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c8:	d102      	bne.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070d0:	2300      	movs	r3, #0
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80070d6:	e002      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070dc:	bf00      	nop
          }
        }
        break;
 80070de:	f000 bf5c 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070e2:	bf00      	nop
 80070e4:	44020c00 	.word	0x44020c00
 80070e8:	03d09000 	.word	0x03d09000
 80070ec:	003d0900 	.word	0x003d0900
 80070f0:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80070f4:	4b9e      	ldr	r3, [pc, #632]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070f6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80070fa:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007106:	d056      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800710e:	f200 808b 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007118:	d03e      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007120:	f200 8082 	bhi.w	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800712a:	d027      	beq.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007132:	d879      	bhi.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	d017      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007142:	d871      	bhi.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b00      	cmp	r3, #0
 8007148:	d004      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007150:	d004      	beq.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007152:	e069      	b.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007154:	f7fb ffcc 	bl	80030f0 <HAL_RCC_GetPCLK1Freq>
 8007158:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800715a:	e068      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800715c:	f107 0314 	add.w	r3, r7, #20
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe f8fb 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800716a:	e060      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800716c:	f107 0308 	add.w	r3, r7, #8
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe fa5d 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800717a:	e058      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800717c:	4b7c      	ldr	r3, [pc, #496]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800717e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b02      	cmp	r3, #2
 8007188:	d103      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800718a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007190:	e04d      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007196:	e04a      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007198:	4b75      	ldr	r3, [pc, #468]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800719a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800719e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071a6:	d103      	bne.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80071a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071ac:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071ae:	e03e      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071b4:	e03b      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071b6:	4b6e      	ldr	r3, [pc, #440]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071c0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071c2:	4b6b      	ldr	r3, [pc, #428]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d10c      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d109      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071d4:	4b66      	ldr	r3, [pc, #408]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	08db      	lsrs	r3, r3, #3
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	4a65      	ldr	r2, [pc, #404]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	e01e      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071e8:	4b61      	ldr	r3, [pc, #388]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80071f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fc:	d102      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071fe:	4b5e      	ldr	r3, [pc, #376]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	e010      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007204:	4b5a      	ldr	r3, [pc, #360]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800720c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007210:	d106      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007218:	d102      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800721a:	4b58      	ldr	r3, [pc, #352]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
 800721e:	e002      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007220:	2300      	movs	r3, #0
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007224:	e003      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007226:	e002      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800722c:	bf00      	nop
          }
        }
        break;
 800722e:	f000 beb4 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007232:	4b4f      	ldr	r3, [pc, #316]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007234:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007238:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800723c:	633b      	str	r3, [r7, #48]	; 0x30
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007244:	d056      	beq.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800724c:	f200 808b 	bhi.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007256:	d03e      	beq.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800725e:	f200 8082 	bhi.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007268:	d027      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007270:	d879      	bhi.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007278:	d017      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007280:	d871      	bhi.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007284:	2b00      	cmp	r3, #0
 8007286:	d004      	beq.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800728e:	d004      	beq.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007290:	e069      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007292:	f7fb ff59 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8007296:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007298:	e068      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800729a:	f107 0314 	add.w	r3, r7, #20
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fe f85c 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072a8:	e060      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072aa:	f107 0308 	add.w	r3, r7, #8
 80072ae:	4618      	mov	r0, r3
 80072b0:	f7fe f9be 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072b8:	e058      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072ba:	4b2d      	ldr	r3, [pc, #180]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d103      	bne.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80072c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072ce:	e04d      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80072d0:	2300      	movs	r3, #0
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072d4:	e04a      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80072d6:	4b26      	ldr	r3, [pc, #152]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072e4:	d103      	bne.n	80072ee <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80072e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072ec:	e03e      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072f2:	e03b      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072f4:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072fa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007300:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0302 	and.w	r3, r3, #2
 8007308:	2b02      	cmp	r3, #2
 800730a:	d10c      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007312:	4b17      	ldr	r3, [pc, #92]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	08db      	lsrs	r3, r3, #3
 8007318:	f003 0303 	and.w	r3, r3, #3
 800731c:	4a15      	ldr	r2, [pc, #84]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800731e:	fa22 f303 	lsr.w	r3, r2, r3
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
 8007324:	e01e      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800732e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007332:	d106      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733a:	d102      	bne.n	8007342 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800733c:	4b0e      	ldr	r3, [pc, #56]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
 8007340:	e010      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734e:	d106      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007356:	d102      	bne.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007358:	4b08      	ldr	r3, [pc, #32]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007362:	e003      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007364:	e002      	b.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800736a:	bf00      	nop
          }
        }
        break;
 800736c:	f000 be15 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007370:	44020c00 	.word	0x44020c00
 8007374:	03d09000 	.word	0x03d09000
 8007378:	003d0900 	.word	0x003d0900
 800737c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007380:	4b9e      	ldr	r3, [pc, #632]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007382:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007386:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 800738a:	633b      	str	r3, [r7, #48]	; 0x30
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007392:	d056      	beq.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800739a:	f200 808b 	bhi.w	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a4:	d03e      	beq.n	8007424 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ac:	f200 8082 	bhi.w	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073b6:	d027      	beq.n	8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073be:	d879      	bhi.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c6:	d017      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073ce:	d871      	bhi.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073dc:	d004      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80073de:	e069      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80073e0:	f7fb feb2 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 80073e4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80073e6:	e068      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e8:	f107 0314 	add.w	r3, r7, #20
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fd ffb5 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073f6:	e060      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f8:	f107 0308 	add.w	r3, r7, #8
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe f917 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007406:	e058      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007408:	4b7c      	ldr	r3, [pc, #496]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800740a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b02      	cmp	r3, #2
 8007414:	d103      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800741c:	e04d      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007422:	e04a      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007424:	4b75      	ldr	r3, [pc, #468]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800742a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800742e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007432:	d103      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007434:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007438:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800743a:	e03e      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800743c:	2300      	movs	r3, #0
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007440:	e03b      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007442:	4b6e      	ldr	r3, [pc, #440]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007444:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007448:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800744e:	4b6b      	ldr	r3, [pc, #428]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d10c      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800745a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745c:	2b00      	cmp	r3, #0
 800745e:	d109      	bne.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007460:	4b66      	ldr	r3, [pc, #408]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	08db      	lsrs	r3, r3, #3
 8007466:	f003 0303 	and.w	r3, r3, #3
 800746a:	4a65      	ldr	r2, [pc, #404]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800746c:	fa22 f303 	lsr.w	r3, r2, r3
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
 8007472:	e01e      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007474:	4b61      	ldr	r3, [pc, #388]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007480:	d106      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007488:	d102      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800748a:	4b5e      	ldr	r3, [pc, #376]	; (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
 800748e:	e010      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007490:	4b5a      	ldr	r3, [pc, #360]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800749c:	d106      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a4:	d102      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80074a6:	4b58      	ldr	r3, [pc, #352]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
 80074aa:	e002      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80074b0:	e003      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80074b2:	e002      	b.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b8:	bf00      	nop
          }
        }
        break;
 80074ba:	f000 bd6e 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80074be:	4b4f      	ldr	r3, [pc, #316]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074c0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80074c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80074c8:	633b      	str	r3, [r7, #48]	; 0x30
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80074d0:	d056      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80074d8:	f200 808b 	bhi.w	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074e2:	d03e      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074ea:	f200 8082 	bhi.w	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074f4:	d027      	beq.n	8007546 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074fc:	d879      	bhi.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007504:	d017      	beq.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800750c:	d871      	bhi.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b00      	cmp	r3, #0
 8007512:	d004      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800751a:	d004      	beq.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800751c:	e069      	b.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800751e:	f7fb fe13 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8007522:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007524:	e068      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	4618      	mov	r0, r3
 800752c:	f7fd ff16 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007534:	e060      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe f878 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007544:	e058      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007546:	4b2d      	ldr	r3, [pc, #180]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b02      	cmp	r3, #2
 8007552:	d103      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800755a:	e04d      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007560:	e04a      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007562:	4b26      	ldr	r3, [pc, #152]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800756c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007570:	d103      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007572:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007578:	e03e      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800757e:	e03b      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007580:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007586:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800758a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800758c:	4b1b      	ldr	r3, [pc, #108]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d10c      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d109      	bne.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800759e:	4b17      	ldr	r3, [pc, #92]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	08db      	lsrs	r3, r3, #3
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
 80075b0:	e01e      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075b2:	4b12      	ldr	r3, [pc, #72]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075be:	d106      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c6:	d102      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075c8:	4b0e      	ldr	r3, [pc, #56]	; (8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
 80075cc:	e010      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075ce:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075da:	d106      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075e2:	d102      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075e4:	4b08      	ldr	r3, [pc, #32]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80075ee:	e003      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80075f0:	e002      	b.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075f6:	bf00      	nop
          }
        }
        break;
 80075f8:	f000 bccf 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075fc:	44020c00 	.word	0x44020c00
 8007600:	03d09000 	.word	0x03d09000
 8007604:	003d0900 	.word	0x003d0900
 8007608:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800760c:	4b9e      	ldr	r3, [pc, #632]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800760e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007612:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007616:	633b      	str	r3, [r7, #48]	; 0x30
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761e:	d056      	beq.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007626:	f200 808b 	bhi.w	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d03e      	beq.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007638:	f200 8082 	bhi.w	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007642:	d027      	beq.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800764a:	d879      	bhi.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007652:	d017      	beq.n	8007684 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765a:	d871      	bhi.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007668:	d004      	beq.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800766a:	e069      	b.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800766c:	f7fb fd6c 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8007670:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007672:	e068      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007674:	f107 0314 	add.w	r3, r7, #20
 8007678:	4618      	mov	r0, r3
 800767a:	f7fd fe6f 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007682:	e060      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007684:	f107 0308 	add.w	r3, r7, #8
 8007688:	4618      	mov	r0, r3
 800768a:	f7fd ffd1 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007692:	e058      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007694:	4b7c      	ldr	r3, [pc, #496]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d103      	bne.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80076a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076a6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076a8:	e04d      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076ae:	e04a      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80076b0:	4b75      	ldr	r3, [pc, #468]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076be:	d103      	bne.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80076c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076c6:	e03e      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076cc:	e03b      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076ce:	4b6e      	ldr	r3, [pc, #440]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80076d8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076da:	4b6b      	ldr	r3, [pc, #428]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d10c      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80076e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d109      	bne.n	8007700 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076ec:	4b66      	ldr	r3, [pc, #408]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	08db      	lsrs	r3, r3, #3
 80076f2:	f003 0303 	and.w	r3, r3, #3
 80076f6:	4a65      	ldr	r2, [pc, #404]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
 80076fe:	e01e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007700:	4b61      	ldr	r3, [pc, #388]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800770c:	d106      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007714:	d102      	bne.n	800771c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007716:	4b5e      	ldr	r3, [pc, #376]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007718:	637b      	str	r3, [r7, #52]	; 0x34
 800771a:	e010      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800771c:	4b5a      	ldr	r3, [pc, #360]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007728:	d106      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007730:	d102      	bne.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007732:	4b58      	ldr	r3, [pc, #352]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
 8007736:	e002      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800773c:	e003      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800773e:	e002      	b.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007744:	bf00      	nop
          }
        }
        break;
 8007746:	f000 bc28 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800774a:	4b4f      	ldr	r3, [pc, #316]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800774c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007754:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007756:	4b4c      	ldr	r3, [pc, #304]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007762:	d106      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800776a:	4b4a      	ldr	r3, [pc, #296]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800776e:	f000 bc14 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007778:	d108      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800777a:	f107 0320 	add.w	r3, r7, #32
 800777e:	4618      	mov	r0, r3
 8007780:	f7fd fc82 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007786:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007788:	f000 bc07 	b.w	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007792:	d107      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007794:	f107 0314 	add.w	r3, r7, #20
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd fddf 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a2:	e3fa      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a8:	e3f7      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80077aa:	4b37      	ldr	r3, [pc, #220]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	633b      	str	r3, [r7, #48]	; 0x30
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	2b04      	cmp	r3, #4
 80077ba:	d861      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80077bc:	a201      	add	r2, pc, #4	; (adr r2, 80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80077be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c2:	bf00      	nop
 80077c4:	080077d9 	.word	0x080077d9
 80077c8:	080077e9 	.word	0x080077e9
 80077cc:	080077f9 	.word	0x080077f9
 80077d0:	08007809 	.word	0x08007809
 80077d4:	0800780f 	.word	0x0800780f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077d8:	f107 0320 	add.w	r3, r7, #32
 80077dc:	4618      	mov	r0, r3
 80077de:	f7fd fc53 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077e6:	e04e      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7fd fdb5 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077f6:	e046      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077f8:	f107 0308 	add.w	r3, r7, #8
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7fd ff17 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007806:	e03e      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007808:	4b23      	ldr	r3, [pc, #140]	; (8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800780a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800780c:	e03b      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800780e:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007814:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007818:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800781a:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b02      	cmp	r3, #2
 8007824:	d10c      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d109      	bne.n	8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800782c:	4b16      	ldr	r3, [pc, #88]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	08db      	lsrs	r3, r3, #3
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	4a15      	ldr	r2, [pc, #84]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007838:	fa22 f303 	lsr.w	r3, r2, r3
 800783c:	637b      	str	r3, [r7, #52]	; 0x34
 800783e:	e01e      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007840:	4b11      	ldr	r3, [pc, #68]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784c:	d106      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007854:	d102      	bne.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007856:	4b0e      	ldr	r3, [pc, #56]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007858:	637b      	str	r3, [r7, #52]	; 0x34
 800785a:	e010      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800785c:	4b0a      	ldr	r3, [pc, #40]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007868:	d106      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800786a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007870:	d102      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007872:	4b08      	ldr	r3, [pc, #32]	; (8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007874:	637b      	str	r3, [r7, #52]	; 0x34
 8007876:	e002      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800787c:	e003      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800787e:	e002      	b.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007884:	bf00      	nop
          }
        }
        break;
 8007886:	e388      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007888:	44020c00 	.word	0x44020c00
 800788c:	03d09000 	.word	0x03d09000
 8007890:	003d0900 	.word	0x003d0900
 8007894:	017d7840 	.word	0x017d7840
 8007898:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800789c:	4ba9      	ldr	r3, [pc, #676]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800789e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078a6:	633b      	str	r3, [r7, #48]	; 0x30
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	f200 809a 	bhi.w	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	0800793d 	.word	0x0800793d
 80078bc:	080079e5 	.word	0x080079e5
 80078c0:	080079e5 	.word	0x080079e5
 80078c4:	080079e5 	.word	0x080079e5
 80078c8:	080079e5 	.word	0x080079e5
 80078cc:	080079e5 	.word	0x080079e5
 80078d0:	080079e5 	.word	0x080079e5
 80078d4:	080079e5 	.word	0x080079e5
 80078d8:	0800794d 	.word	0x0800794d
 80078dc:	080079e5 	.word	0x080079e5
 80078e0:	080079e5 	.word	0x080079e5
 80078e4:	080079e5 	.word	0x080079e5
 80078e8:	080079e5 	.word	0x080079e5
 80078ec:	080079e5 	.word	0x080079e5
 80078f0:	080079e5 	.word	0x080079e5
 80078f4:	080079e5 	.word	0x080079e5
 80078f8:	0800795d 	.word	0x0800795d
 80078fc:	080079e5 	.word	0x080079e5
 8007900:	080079e5 	.word	0x080079e5
 8007904:	080079e5 	.word	0x080079e5
 8007908:	080079e5 	.word	0x080079e5
 800790c:	080079e5 	.word	0x080079e5
 8007910:	080079e5 	.word	0x080079e5
 8007914:	080079e5 	.word	0x080079e5
 8007918:	0800796d 	.word	0x0800796d
 800791c:	080079e5 	.word	0x080079e5
 8007920:	080079e5 	.word	0x080079e5
 8007924:	080079e5 	.word	0x080079e5
 8007928:	080079e5 	.word	0x080079e5
 800792c:	080079e5 	.word	0x080079e5
 8007930:	080079e5 	.word	0x080079e5
 8007934:	080079e5 	.word	0x080079e5
 8007938:	08007973 	.word	0x08007973
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800793c:	f107 0320 	add.w	r3, r7, #32
 8007940:	4618      	mov	r0, r3
 8007942:	f7fd fba1 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800794a:	e04e      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794c:	f107 0314 	add.w	r3, r7, #20
 8007950:	4618      	mov	r0, r3
 8007952:	f7fd fd03 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800795a:	e046      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800795c:	f107 0308 	add.w	r3, r7, #8
 8007960:	4618      	mov	r0, r3
 8007962:	f7fd fe65 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800796a:	e03e      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800796c:	4b76      	ldr	r3, [pc, #472]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007970:	e03b      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007972:	4b74      	ldr	r3, [pc, #464]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007978:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800797c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800797e:	4b71      	ldr	r3, [pc, #452]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0302 	and.w	r3, r3, #2
 8007986:	2b02      	cmp	r3, #2
 8007988:	d10c      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800798a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007990:	4b6c      	ldr	r3, [pc, #432]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	08db      	lsrs	r3, r3, #3
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	4a6c      	ldr	r2, [pc, #432]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800799c:	fa22 f303 	lsr.w	r3, r2, r3
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
 80079a2:	e01e      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079a4:	4b67      	ldr	r3, [pc, #412]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b0:	d106      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80079b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b8:	d102      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079ba:	4b65      	ldr	r3, [pc, #404]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	e010      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079c0:	4b60      	ldr	r3, [pc, #384]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079cc:	d106      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80079ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d102      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079d6:	4b5f      	ldr	r3, [pc, #380]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80079e0:	e003      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80079e2:	e002      	b.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079e8:	bf00      	nop
          }
        }
        break;
 80079ea:	e2d6      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80079ec:	4b55      	ldr	r3, [pc, #340]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079f2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80079f6:	633b      	str	r3, [r7, #48]	; 0x30
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fe:	d031      	beq.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a06:	d866      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a0c:	d027      	beq.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	2bc0      	cmp	r3, #192	; 0xc0
 8007a12:	d860      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	2b80      	cmp	r3, #128	; 0x80
 8007a18:	d019      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d85a      	bhi.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	d008      	beq.n	8007a3e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007a2c:	e053      	b.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a2e:	f107 0320 	add.w	r3, r7, #32
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fd fb28 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a3c:	e04e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a3e:	f107 0314 	add.w	r3, r7, #20
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fd fc8a 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a4c:	e046      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fd fdec 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a5c:	e03e      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a5e:	4b3a      	ldr	r3, [pc, #232]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a62:	e03b      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a64:	4b37      	ldr	r3, [pc, #220]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a6a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a70:	4b34      	ldr	r3, [pc, #208]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d10c      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a82:	4b30      	ldr	r3, [pc, #192]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	08db      	lsrs	r3, r3, #3
 8007a88:	f003 0303 	and.w	r3, r3, #3
 8007a8c:	4a2f      	ldr	r2, [pc, #188]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a92:	637b      	str	r3, [r7, #52]	; 0x34
 8007a94:	e01e      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a96:	4b2b      	ldr	r3, [pc, #172]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d106      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aaa:	d102      	bne.n	8007ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007aac:	4b28      	ldr	r3, [pc, #160]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	e010      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ab2:	4b24      	ldr	r3, [pc, #144]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007abe:	d106      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac6:	d102      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ac8:	4b22      	ldr	r3, [pc, #136]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007aca:	637b      	str	r3, [r7, #52]	; 0x34
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007ad2:	e003      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007ad4:	e002      	b.n	8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ada:	bf00      	nop
          }
        }
        break;
 8007adc:	e25d      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007ade:	4b19      	ldr	r3, [pc, #100]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ae4:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007ae8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fb fb14 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8007af4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007af6:	e250      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007af8:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b04:	d10b      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b0c:	d107      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b0e:	f107 0314 	add.w	r3, r7, #20
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fd fc22 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	e04f      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b2a:	d115      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b32:	d111      	bne.n	8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b34:	f107 0308 	add.w	r3, r7, #8
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fd fd79 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
 8007b42:	e03c      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007b44:	44020c00 	.word	0x44020c00
 8007b48:	00bb8000 	.word	0x00bb8000
 8007b4c:	03d09000 	.word	0x03d09000
 8007b50:	003d0900 	.word	0x003d0900
 8007b54:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007b58:	4b94      	ldr	r3, [pc, #592]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 0302 	and.w	r3, r3, #2
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d10d      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b6a:	d109      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b6c:	4b8f      	ldr	r3, [pc, #572]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	08db      	lsrs	r3, r3, #3
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	4a8e      	ldr	r2, [pc, #568]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7e:	e01e      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007b80:	4b8a      	ldr	r3, [pc, #552]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8c:	d106      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b94:	d102      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007b96:	4b87      	ldr	r3, [pc, #540]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	e010      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007b9c:	4b83      	ldr	r3, [pc, #524]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba8:	d106      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007bb0:	d102      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007bb2:	4b81      	ldr	r3, [pc, #516]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb6:	e002      	b.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bbc:	e1ed      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bbe:	e1ec      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007bc0:	4b7a      	ldr	r3, [pc, #488]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bc6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007bca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d103      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007bd2:	f7fb fab9 	bl	8003148 <HAL_RCC_GetPCLK3Freq>
 8007bd6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bd8:	e1df      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007bda:	4b74      	ldr	r3, [pc, #464]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007be6:	d10b      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bee:	d107      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7fd fbb1 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bfa:	69bb      	ldr	r3, [r7, #24]
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfe:	e045      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007c00:	4b6a      	ldr	r3, [pc, #424]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0c:	d10b      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c14:	d107      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c16:	f107 0308 	add.w	r3, r7, #8
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f7fd fd08 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
 8007c24:	e032      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007c26:	4b61      	ldr	r3, [pc, #388]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d10d      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c38:	d109      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c3a:	4b5c      	ldr	r3, [pc, #368]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	08db      	lsrs	r3, r3, #3
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	4a5a      	ldr	r2, [pc, #360]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c46:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4c:	e01e      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007c4e:	4b57      	ldr	r3, [pc, #348]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c5a:	d106      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c62:	d102      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007c64:	4b53      	ldr	r3, [pc, #332]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
 8007c68:	e010      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007c6a:	4b50      	ldr	r3, [pc, #320]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c76:	d106      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007c7e:	d102      	bne.n	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007c80:	4b4d      	ldr	r3, [pc, #308]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c8a:	e186      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c8c:	e185      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007c8e:	4b47      	ldr	r3, [pc, #284]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c94:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007c98:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d103      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007ca0:	f7fb fa3c 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8007ca4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007ca6:	e178      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007ca8:	4b40      	ldr	r3, [pc, #256]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb4:	d10b      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cbc:	d107      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cbe:	f107 0314 	add.w	r3, r7, #20
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f7fd fb4a 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ccc:	e045      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007cce:	4b37      	ldr	r3, [pc, #220]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cda:	d10b      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ce2:	d107      	bne.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ce4:	f107 0308 	add.w	r3, r7, #8
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fca1 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf2:	e032      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007cf4:	4b2d      	ldr	r3, [pc, #180]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d10d      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d02:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007d06:	d109      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d08:	4b28      	ldr	r3, [pc, #160]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	08db      	lsrs	r3, r3, #3
 8007d0e:	f003 0303 	and.w	r3, r3, #3
 8007d12:	4a27      	ldr	r2, [pc, #156]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007d14:	fa22 f303 	lsr.w	r3, r2, r3
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1a:	e01e      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007d1c:	4b23      	ldr	r3, [pc, #140]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d28:	d106      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d30:	d102      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
 8007d36:	e010      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007d38:	4b1c      	ldr	r3, [pc, #112]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d44:	d106      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007d4c:	d102      	bne.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
 8007d52:	e002      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d58:	e11f      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d5a:	e11e      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007d5c:	4b13      	ldr	r3, [pc, #76]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	633b      	str	r3, [r7, #48]	; 0x30
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2b03      	cmp	r3, #3
 8007d6c:	d85f      	bhi.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007d6e:	a201      	add	r2, pc, #4	; (adr r2, 8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d8d 	.word	0x08007d8d
 8007d7c:	08007d9d 	.word	0x08007d9d
 8007d80:	08007dbd 	.word	0x08007dbd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007d84:	f7fb f998 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 8007d88:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d8a:	e053      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d8c:	f107 0320 	add.w	r3, r7, #32
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fd f979 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d9a:	e04b      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d9c:	f107 0314 	add.w	r3, r7, #20
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fd fadb 	bl	800535c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007daa:	e043      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007dac:	44020c00 	.word	0x44020c00
 8007db0:	03d09000 	.word	0x03d09000
 8007db4:	003d0900 	.word	0x003d0900
 8007db8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007dbc:	4b79      	ldr	r3, [pc, #484]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dbe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dc2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc8:	4b76      	ldr	r3, [pc, #472]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b02      	cmp	r3, #2
 8007dd2:	d10c      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dda:	4b72      	ldr	r3, [pc, #456]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	08db      	lsrs	r3, r3, #3
 8007de0:	f003 0303 	and.w	r3, r3, #3
 8007de4:	4a70      	ldr	r2, [pc, #448]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007de6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
 8007dec:	e01e      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dee:	4b6d      	ldr	r3, [pc, #436]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e02:	d102      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007e04:	4b69      	ldr	r3, [pc, #420]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007e06:	637b      	str	r3, [r7, #52]	; 0x34
 8007e08:	e010      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e0a:	4b66      	ldr	r3, [pc, #408]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e16:	d106      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1e:	d102      	bne.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e20:	4b63      	ldr	r3, [pc, #396]	; (8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007e22:	637b      	str	r3, [r7, #52]	; 0x34
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e2a:	e003      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007e2c:	e002      	b.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e32:	bf00      	nop
          }
        }
        break;
 8007e34:	e0b1      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007e36:	4b5b      	ldr	r3, [pc, #364]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e40:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007e42:	4b58      	ldr	r3, [pc, #352]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b02      	cmp	r3, #2
 8007e4e:	d106      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d103      	bne.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5c:	e01f      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007e5e:	4b51      	ldr	r3, [pc, #324]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e6c:	d106      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	2b40      	cmp	r3, #64	; 0x40
 8007e72:	d103      	bne.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007e74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
 8007e7a:	e010      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007e7c:	4b49      	ldr	r3, [pc, #292]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e88:	d106      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8c:	2b80      	cmp	r3, #128	; 0x80
 8007e8e:	d103      	bne.n	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007e90:	f248 0312 	movw	r3, #32786	; 0x8012
 8007e94:	637b      	str	r3, [r7, #52]	; 0x34
 8007e96:	e002      	b.n	8007e9e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007e9c:	e07d      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e9e:	e07c      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007ea0:	4b40      	ldr	r3, [pc, #256]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ea6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007eaa:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007eac:	4b3d      	ldr	r3, [pc, #244]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb8:	d105      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007ec0:	4b3c      	ldr	r3, [pc, #240]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ec4:	e031      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007ec6:	4b37      	ldr	r3, [pc, #220]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ed2:	d10a      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d107      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eda:	f107 0320 	add.w	r3, r7, #32
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f8d2 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	e01f      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d106      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d103      	bne.n	8007f06 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007efe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
 8007f04:	e011      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007f06:	4b27      	ldr	r3, [pc, #156]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f14:	d106      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2b30      	cmp	r3, #48	; 0x30
 8007f1a:	d103      	bne.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007f1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f20:	637b      	str	r3, [r7, #52]	; 0x34
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007f28:	e037      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f2a:	e036      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d107      	bne.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f3e:	f107 0320 	add.w	r3, r7, #32
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd f8a0 	bl	8005088 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f4c:	e025      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007f4e:	4b15      	ldr	r3, [pc, #84]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f5a:	d10a      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5e:	2b20      	cmp	r3, #32
 8007f60:	d107      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fd fb62 	bl	8005630 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8007f70:	e00f      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007f72:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7e:	d105      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	2b30      	cmp	r3, #48	; 0x30
 8007f84:	d102      	bne.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007f86:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007f88:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8a:	e002      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007f90:	e003      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f92:	e002      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f98:	bf00      	nop
    }
  }

  return (frequency);
 8007f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	373c      	adds	r7, #60	; 0x3c
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd90      	pop	{r4, r7, pc}
 8007fa4:	44020c00 	.word	0x44020c00
 8007fa8:	03d09000 	.word	0x03d09000
 8007fac:	003d0900 	.word	0x003d0900
 8007fb0:	017d7840 	.word	0x017d7840
 8007fb4:	02dc6c00 	.word	0x02dc6c00

08007fb8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007fc0:	4b48      	ldr	r3, [pc, #288]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a47      	ldr	r2, [pc, #284]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8007fc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fca:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fcc:	f7f8 ff7a 	bl	8000ec4 <HAL_GetTick>
 8007fd0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fd2:	e008      	b.n	8007fe6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fd4:	f7f8 ff76 	bl	8000ec4 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d901      	bls.n	8007fe6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e07a      	b.n	80080dc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fe6:	4b3f      	ldr	r3, [pc, #252]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ff2:	4b3c      	ldr	r3, [pc, #240]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6811      	ldr	r1, [r2, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	6852      	ldr	r2, [r2, #4]
 8008006:	0212      	lsls	r2, r2, #8
 8008008:	430a      	orrs	r2, r1
 800800a:	4936      	ldr	r1, [pc, #216]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800800c:	4313      	orrs	r3, r2
 800800e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	3b01      	subs	r3, #1
 8008016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	3b01      	subs	r3, #1
 8008020:	025b      	lsls	r3, r3, #9
 8008022:	b29b      	uxth	r3, r3
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	3b01      	subs	r3, #1
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	3b01      	subs	r3, #1
 800803a:	061b      	lsls	r3, r3, #24
 800803c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008040:	4928      	ldr	r1, [pc, #160]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	f023 020c 	bic.w	r2, r3, #12
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	4924      	ldr	r1, [pc, #144]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008058:	4b22      	ldr	r3, [pc, #136]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	f023 0220 	bic.w	r2, r3, #32
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	69db      	ldr	r3, [r3, #28]
 8008064:	491f      	ldr	r1, [pc, #124]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800806a:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008072:	491c      	ldr	r1, [pc, #112]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008074:	4313      	orrs	r3, r2
 8008076:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800807a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807c:	4a19      	ldr	r2, [pc, #100]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800807e:	f023 0310 	bic.w	r3, r3, #16
 8008082:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008084:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008088:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800808c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	6a12      	ldr	r2, [r2, #32]
 8008094:	00d2      	lsls	r2, r2, #3
 8008096:	4913      	ldr	r1, [pc, #76]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 8008098:	4313      	orrs	r3, r2
 800809a:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	4a10      	ldr	r2, [pc, #64]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 80080a2:	f043 0310 	orr.w	r3, r3, #16
 80080a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80080a8:	4b0e      	ldr	r3, [pc, #56]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a0d      	ldr	r2, [pc, #52]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 80080ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080b4:	f7f8 ff06 	bl	8000ec4 <HAL_GetTick>
 80080b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080ba:	e008      	b.n	80080ce <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080bc:	f7f8 ff02 	bl	8000ec4 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d901      	bls.n	80080ce <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e006      	b.n	80080dc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080ce:	4b05      	ldr	r3, [pc, #20]	; (80080e4 <RCCEx_PLL2_Config+0x12c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d0f0      	beq.n	80080bc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80080da:	2300      	movs	r3, #0

}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	44020c00 	.word	0x44020c00

080080e8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80080f0:	4b48      	ldr	r3, [pc, #288]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a47      	ldr	r2, [pc, #284]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80080f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080fc:	f7f8 fee2 	bl	8000ec4 <HAL_GetTick>
 8008100:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008102:	e008      	b.n	8008116 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008104:	f7f8 fede 	bl	8000ec4 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d901      	bls.n	8008116 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e07a      	b.n	800820c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008116:	4b3f      	ldr	r3, [pc, #252]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008122:	4b3c      	ldr	r3, [pc, #240]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008126:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800812a:	f023 0303 	bic.w	r3, r3, #3
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6811      	ldr	r1, [r2, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6852      	ldr	r2, [r2, #4]
 8008136:	0212      	lsls	r2, r2, #8
 8008138:	430a      	orrs	r2, r1
 800813a:	4936      	ldr	r1, [pc, #216]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 800813c:	4313      	orrs	r3, r2
 800813e:	630b      	str	r3, [r1, #48]	; 0x30
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	3b01      	subs	r3, #1
 8008146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	3b01      	subs	r3, #1
 8008150:	025b      	lsls	r3, r3, #9
 8008152:	b29b      	uxth	r3, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	3b01      	subs	r3, #1
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008162:	431a      	orrs	r2, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	3b01      	subs	r3, #1
 800816a:	061b      	lsls	r3, r3, #24
 800816c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008170:	4928      	ldr	r1, [pc, #160]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008172:	4313      	orrs	r3, r2
 8008174:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008176:	4b27      	ldr	r3, [pc, #156]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f023 020c 	bic.w	r2, r3, #12
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	4924      	ldr	r1, [pc, #144]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008184:	4313      	orrs	r3, r2
 8008186:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008188:	4b22      	ldr	r3, [pc, #136]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	f023 0220 	bic.w	r2, r3, #32
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	491f      	ldr	r1, [pc, #124]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008196:	4313      	orrs	r3, r2
 8008198:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800819a:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 800819c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	491c      	ldr	r1, [pc, #112]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80081a8:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ac:	4a19      	ldr	r2, [pc, #100]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081ae:	f023 0310 	bic.w	r3, r3, #16
 80081b2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80081b4:	4b17      	ldr	r3, [pc, #92]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	6a12      	ldr	r2, [r2, #32]
 80081c4:	00d2      	lsls	r2, r2, #3
 80081c6:	4913      	ldr	r1, [pc, #76]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80081cc:	4b11      	ldr	r3, [pc, #68]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d0:	4a10      	ldr	r2, [pc, #64]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081d2:	f043 0310 	orr.w	r3, r3, #16
 80081d6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a0d      	ldr	r2, [pc, #52]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 80081de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081e4:	f7f8 fe6e 	bl	8000ec4 <HAL_GetTick>
 80081e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081ea:	e008      	b.n	80081fe <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081ec:	f7f8 fe6a 	bl	8000ec4 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d901      	bls.n	80081fe <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e006      	b.n	800820c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <RCCEx_PLL3_Config+0x12c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f0      	beq.n	80081ec <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	44020c00 	.word	0x44020c00

08008218 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d101      	bne.n	800822a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e042      	b.n	80082b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	2b00      	cmp	r3, #0
 8008232:	d106      	bne.n	8008242 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f7f8 fbaf 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2224      	movs	r2, #36	; 0x24
 8008246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0201 	bic.w	r2, r2, #1
 8008258:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fe2c 	bl	8008ec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 fc3b 	bl	8008ae4 <UART_SetConfig>
 800826e:	4603      	mov	r3, r0
 8008270:	2b01      	cmp	r3, #1
 8008272:	d101      	bne.n	8008278 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e01b      	b.n	80082b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008286:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	689a      	ldr	r2, [r3, #8]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008296:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0201 	orr.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 feab 	bl	8009004 <UART_CheckIdleState>
 80082ae:	4603      	mov	r3, r0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b08c      	sub	sp, #48	; 0x30
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 80082c6:	88fb      	ldrh	r3, [r7, #6]
 80082c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d0:	2b20      	cmp	r3, #32
 80082d2:	f040 80ad 	bne.w	8008430 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <HAL_UART_Transmit_DMA+0x2a>
 80082dc:	88fb      	ldrh	r3, [r7, #6]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d101      	bne.n	80082e6 <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e0a5      	b.n	8008432 <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	88fa      	ldrh	r2, [r7, #6]
 80082f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	88fa      	ldrh	r2, [r7, #6]
 80082f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2221      	movs	r2, #33	; 0x21
 8008308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008310:	2b00      	cmp	r3, #0
 8008312:	d06d      	beq.n	80083f0 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008318:	4a48      	ldr	r2, [pc, #288]	; (800843c <HAL_UART_Transmit_DMA+0x184>)
 800831a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008320:	4a47      	ldr	r2, [pc, #284]	; (8008440 <HAL_UART_Transmit_DMA+0x188>)
 8008322:	665a      	str	r2, [r3, #100]	; 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	4a46      	ldr	r2, [pc, #280]	; (8008444 <HAL_UART_Transmit_DMA+0x18c>)
 800832a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008330:	2200      	movs	r2, #0
 8008332:	66da      	str	r2, [r3, #108]	; 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800833c:	d106      	bne.n	800834c <HAL_UART_Transmit_DMA+0x94>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d102      	bne.n	800834c <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 8008346:	88fb      	ldrh	r3, [r7, #6]
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02d      	beq.n	80083b6 <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800835e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008360:	2b00      	cmp	r3, #0
 8008362:	d024      	beq.n	80083ae <HAL_UART_Transmit_DMA+0xf6>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01e      	beq.n	80083ae <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800837a:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f103 0228 	add.w	r2, r3, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7f9 fd3f 	bl	8001e24 <HAL_DMAEx_List_Start_IT>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083ac:	e012      	b.n	80083d4 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083b4:	e00e      	b.n	80083d4 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083be:	4619      	mov	r1, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3328      	adds	r3, #40	; 0x28
 80083c6:	461a      	mov	r2, r3
 80083c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083ca:	f7f8 ffc7 	bl	800135c <HAL_DMA_Start_IT>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }

      if (status != HAL_OK)
 80083d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d009      	beq.n	80083f0 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2210      	movs	r2, #16
 80083e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e020      	b.n	8008432 <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2240      	movs	r2, #64	; 0x40
 80083f6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3308      	adds	r3, #8
 80083fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	617b      	str	r3, [r7, #20]
   return(result);
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800840e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	3308      	adds	r3, #8
 8008416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008418:	627a      	str	r2, [r7, #36]	; 0x24
 800841a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6a39      	ldr	r1, [r7, #32]
 800841e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	61fb      	str	r3, [r7, #28]
   return(result);
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e5      	bne.n	80083f8 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	e000      	b.n	8008432 <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8008430:	2302      	movs	r3, #2
  }
}
 8008432:	4618      	mov	r0, r3
 8008434:	3730      	adds	r7, #48	; 0x30
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	08009567 	.word	0x08009567
 8008440:	080095c7 	.word	0x080095c7
 8008444:	08009713 	.word	0x08009713

08008448 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800845c:	2b20      	cmp	r3, #32
 800845e:	d13c      	bne.n	80084da <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d002      	beq.n	800846c <HAL_UART_Receive_DMA+0x24>
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d101      	bne.n	8008470 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e035      	b.n	80084dc <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a1a      	ldr	r2, [pc, #104]	; (80084e4 <HAL_UART_Receive_DMA+0x9c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d024      	beq.n	80084ca <HAL_UART_Receive_DMA+0x82>
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a18      	ldr	r2, [pc, #96]	; (80084e8 <HAL_UART_Receive_DMA+0xa0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d01f      	beq.n	80084ca <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d018      	beq.n	80084ca <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	613b      	str	r3, [r7, #16]
   return(result);
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	69f9      	ldr	r1, [r7, #28]
 80084bc:	6a3a      	ldr	r2, [r7, #32]
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80084ca:	88fb      	ldrh	r3, [r7, #6]
 80084cc:	461a      	mov	r2, r3
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 fea9 	bl	8009228 <UART_Start_Receive_DMA>
 80084d6:	4603      	mov	r3, r0
 80084d8:	e000      	b.n	80084dc <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 80084da:	2302      	movs	r3, #2
  }
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3728      	adds	r7, #40	; 0x28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	44002400 	.word	0x44002400
 80084e8:	54002400 	.word	0x54002400

080084ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b0ae      	sub	sp, #184	; 0xb8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008512:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008516:	f640 030f 	movw	r3, #2063	; 0x80f
 800851a:	4013      	ands	r3, r2
 800851c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8008520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008524:	2b00      	cmp	r3, #0
 8008526:	d11b      	bne.n	8008560 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008528:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800852c:	f003 0320 	and.w	r3, r3, #32
 8008530:	2b00      	cmp	r3, #0
 8008532:	d015      	beq.n	8008560 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008538:	f003 0320 	and.w	r3, r3, #32
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d009      	beq.n	8008560 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8293 	beq.w	8008a7c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	4798      	blx	r3
      }
      return;
 800855e:	e28d      	b.n	8008a7c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 80fd 	beq.w	8008764 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800856a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800856e:	4b7a      	ldr	r3, [pc, #488]	; (8008758 <HAL_UART_IRQHandler+0x26c>)
 8008570:	4013      	ands	r3, r2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800857a:	4b78      	ldr	r3, [pc, #480]	; (800875c <HAL_UART_IRQHandler+0x270>)
 800857c:	4013      	ands	r3, r2
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80f0 	beq.w	8008764 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008588:	f003 0301 	and.w	r3, r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	d011      	beq.n	80085b4 <HAL_UART_IRQHandler+0xc8>
 8008590:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00b      	beq.n	80085b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2201      	movs	r2, #1
 80085a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085aa:	f043 0201 	orr.w	r2, r3, #1
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085b8:	f003 0302 	and.w	r3, r3, #2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d011      	beq.n	80085e4 <HAL_UART_IRQHandler+0xf8>
 80085c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00b      	beq.n	80085e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2202      	movs	r2, #2
 80085d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	f043 0204 	orr.w	r2, r3, #4
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d011      	beq.n	8008614 <HAL_UART_IRQHandler+0x128>
 80085f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d00b      	beq.n	8008614 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2204      	movs	r2, #4
 8008602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860a:	f043 0202 	orr.w	r2, r3, #2
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008618:	f003 0308 	and.w	r3, r3, #8
 800861c:	2b00      	cmp	r3, #0
 800861e:	d017      	beq.n	8008650 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008624:	f003 0320 	and.w	r3, r3, #32
 8008628:	2b00      	cmp	r3, #0
 800862a:	d105      	bne.n	8008638 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800862c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008630:	4b49      	ldr	r3, [pc, #292]	; (8008758 <HAL_UART_IRQHandler+0x26c>)
 8008632:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2208      	movs	r2, #8
 800863e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008646:	f043 0208 	orr.w	r2, r3, #8
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008650:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008658:	2b00      	cmp	r3, #0
 800865a:	d012      	beq.n	8008682 <HAL_UART_IRQHandler+0x196>
 800865c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008660:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d00c      	beq.n	8008682 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008670:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008678:	f043 0220 	orr.w	r2, r3, #32
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 81f9 	beq.w	8008a80 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800868e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b00      	cmp	r3, #0
 8008698:	d013      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800869a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80086a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d007      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d005      	beq.n	80086e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80086da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80086de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d02e      	beq.n	8008744 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fed7 	bl	800949a <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f6:	2b40      	cmp	r3, #64	; 0x40
 80086f8:	d120      	bne.n	800873c <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008700:	2b00      	cmp	r3, #0
 8008702:	d017      	beq.n	8008734 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800870a:	4a15      	ldr	r2, [pc, #84]	; (8008760 <HAL_UART_IRQHandler+0x274>)
 800870c:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008714:	4618      	mov	r0, r3
 8008716:	f7f8 fefd 	bl	8001514 <HAL_DMA_Abort_IT>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d019      	beq.n	8008754 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800872e:	4610      	mov	r0, r2
 8008730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008732:	e00f      	b.n	8008754 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9cb 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800873a:	e00b      	b.n	8008754 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f9c7 	bl	8008ad0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008742:	e007      	b.n	8008754 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9c3 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008752:	e195      	b.n	8008a80 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008754:	bf00      	nop
    return;
 8008756:	e193      	b.n	8008a80 <HAL_UART_IRQHandler+0x594>
 8008758:	10000001 	.word	0x10000001
 800875c:	04000120 	.word	0x04000120
 8008760:	08009793 	.word	0x08009793

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008768:	2b01      	cmp	r3, #1
 800876a:	f040 8129 	bne.w	80089c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800876e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8122 	beq.w	80089c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800877c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 811b 	beq.w	80089c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2210      	movs	r2, #16
 8008790:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	f040 8091 	bne.w	80088c4 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087ac:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 80087b0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f000 8165 	beq.w	8008a84 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087c0:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80087c4:	429a      	cmp	r2, r3
 80087c6:	f080 815d 	bcs.w	8008a84 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 80087d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087dc:	2b81      	cmp	r3, #129	; 0x81
 80087de:	d060      	beq.n	80088a2 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80087ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008802:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008806:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800880a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800880e:	e841 2300 	strex	r3, r2, [r1]
 8008812:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008816:	2b00      	cmp	r3, #0
 8008818:	d1e2      	bne.n	80087e0 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3308      	adds	r3, #8
 8008820:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008824:	e853 3f00 	ldrex	r3, [r3]
 8008828:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800882a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	3308      	adds	r3, #8
 800883a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800883e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008840:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008844:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800884c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e3      	bne.n	800881a <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2220      	movs	r2, #32
 8008856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008868:	e853 3f00 	ldrex	r3, [r3]
 800886c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800886e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008870:	f023 0310 	bic.w	r3, r3, #16
 8008874:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	461a      	mov	r2, r3
 800887e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008882:	65bb      	str	r3, [r7, #88]	; 0x58
 8008884:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e4      	bne.n	8008860 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800889c:	4618      	mov	r0, r3
 800889e:	f7f8 fdbd 	bl	800141c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2202      	movs	r2, #2
 80088a6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f7 feb9 	bl	8000634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088c2:	e0df      	b.n	8008a84 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088de:	b29b      	uxth	r3, r3
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80d1 	beq.w	8008a88 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80088e6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 80cc 	beq.w	8008a88 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008904:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	461a      	mov	r2, r3
 800890e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008912:	647b      	str	r3, [r7, #68]	; 0x44
 8008914:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e4      	bne.n	80088f0 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3308      	adds	r3, #8
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	623b      	str	r3, [r7, #32]
   return(result);
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3308      	adds	r3, #8
 800894a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800894e:	633a      	str	r2, [r7, #48]	; 0x30
 8008950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e1      	bne.n	8008926 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	e853 3f00 	ldrex	r3, [r3]
 8008982:	60fb      	str	r3, [r7, #12]
   return(result);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0310 	bic.w	r3, r3, #16
 800898a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008998:	61fb      	str	r3, [r7, #28]
 800899a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	69b9      	ldr	r1, [r7, #24]
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	617b      	str	r3, [r7, #20]
   return(result);
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e4      	bne.n	8008976 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80089b2:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7f7 fe3b 	bl	8000634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089be:	e063      	b.n	8008a88 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00e      	beq.n	80089ea <HAL_UART_IRQHandler+0x4fe>
 80089cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d008      	beq.n	80089ea <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f000 ff16 	bl	8009814 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089e8:	e051      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80089ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d014      	beq.n	8008a20 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80089f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d105      	bne.n	8008a0e <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d03a      	beq.n	8008a8c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
    }
    return;
 8008a1e:	e035      	b.n	8008a8c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <HAL_UART_IRQHandler+0x554>
 8008a2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fec0 	bl	80097be <UART_EndTransmit_IT>
    return;
 8008a3e:	e026      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008a40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d009      	beq.n	8008a60 <HAL_UART_IRQHandler+0x574>
 8008a4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 feef 	bl	800983c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a5e:	e016      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008a60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d010      	beq.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
 8008a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da0c      	bge.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fed7 	bl	8009828 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a7a:	e008      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a7c:	bf00      	nop
 8008a7e:	e006      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
    return;
 8008a80:	bf00      	nop
 8008a82:	e004      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a84:	bf00      	nop
 8008a86:	e002      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a88:	bf00      	nop
 8008a8a:	e000      	b.n	8008a8e <HAL_UART_IRQHandler+0x5a2>
    return;
 8008a8c:	bf00      	nop
  }
}
 8008a8e:	37b8      	adds	r7, #184	; 0xb8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b083      	sub	sp, #12
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ad8:	bf00      	nop
 8008ada:	370c      	adds	r7, #12
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ae8:	b094      	sub	sp, #80	; 0x50
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	4b78      	ldr	r3, [pc, #480]	; (8008cdc <UART_SetConfig+0x1f8>)
 8008afa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	689a      	ldr	r2, [r3, #8]
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4971      	ldr	r1, [pc, #452]	; (8008ce0 <UART_SetConfig+0x1fc>)
 8008b1c:	4019      	ands	r1, r3
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	430b      	orrs	r3, r1
 8008b26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	68d9      	ldr	r1, [r3, #12]
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	ea40 0301 	orr.w	r3, r0, r1
 8008b3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b64      	ldr	r3, [pc, #400]	; (8008cdc <UART_SetConfig+0x1f8>)
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d009      	beq.n	8008b64 <UART_SetConfig+0x80>
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	4b63      	ldr	r3, [pc, #396]	; (8008ce4 <UART_SetConfig+0x200>)
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d004      	beq.n	8008b64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5c:	6a1a      	ldr	r2, [r3, #32]
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b60:	4313      	orrs	r3, r2
 8008b62:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008b6e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b82:	f023 000f 	bic.w	r0, r3, #15
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	ea40 0301 	orr.w	r3, r0, r1
 8008b92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b53      	ldr	r3, [pc, #332]	; (8008ce8 <UART_SetConfig+0x204>)
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d102      	bne.n	8008ba4 <UART_SetConfig+0xc0>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba2:	e066      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4b50      	ldr	r3, [pc, #320]	; (8008cec <UART_SetConfig+0x208>)
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d102      	bne.n	8008bb4 <UART_SetConfig+0xd0>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb2:	e05e      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b4d      	ldr	r3, [pc, #308]	; (8008cf0 <UART_SetConfig+0x20c>)
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d102      	bne.n	8008bc4 <UART_SetConfig+0xe0>
 8008bbe:	2304      	movs	r3, #4
 8008bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc2:	e056      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b4a      	ldr	r3, [pc, #296]	; (8008cf4 <UART_SetConfig+0x210>)
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d102      	bne.n	8008bd4 <UART_SetConfig+0xf0>
 8008bce:	2308      	movs	r3, #8
 8008bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd2:	e04e      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	4b47      	ldr	r3, [pc, #284]	; (8008cf8 <UART_SetConfig+0x214>)
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d102      	bne.n	8008be4 <UART_SetConfig+0x100>
 8008bde:	2310      	movs	r3, #16
 8008be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008be2:	e046      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b44      	ldr	r3, [pc, #272]	; (8008cfc <UART_SetConfig+0x218>)
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d102      	bne.n	8008bf4 <UART_SetConfig+0x110>
 8008bee:	2320      	movs	r3, #32
 8008bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf2:	e03e      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <UART_SetConfig+0x21c>)
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d102      	bne.n	8008c04 <UART_SetConfig+0x120>
 8008bfe:	2340      	movs	r3, #64	; 0x40
 8008c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c02:	e036      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b3e      	ldr	r3, [pc, #248]	; (8008d04 <UART_SetConfig+0x220>)
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d102      	bne.n	8008c14 <UART_SetConfig+0x130>
 8008c0e:	2380      	movs	r3, #128	; 0x80
 8008c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c12:	e02e      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <UART_SetConfig+0x224>)
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d103      	bne.n	8008c26 <UART_SetConfig+0x142>
 8008c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c24:	e025      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b38      	ldr	r3, [pc, #224]	; (8008d0c <UART_SetConfig+0x228>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d103      	bne.n	8008c38 <UART_SetConfig+0x154>
 8008c30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c36:	e01c      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	4b34      	ldr	r3, [pc, #208]	; (8008d10 <UART_SetConfig+0x22c>)
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d103      	bne.n	8008c4a <UART_SetConfig+0x166>
 8008c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c46:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c48:	e013      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b31      	ldr	r3, [pc, #196]	; (8008d14 <UART_SetConfig+0x230>)
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d103      	bne.n	8008c5c <UART_SetConfig+0x178>
 8008c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c5a:	e00a      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b1e      	ldr	r3, [pc, #120]	; (8008cdc <UART_SetConfig+0x1f8>)
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d103      	bne.n	8008c6e <UART_SetConfig+0x18a>
 8008c66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c6c:	e001      	b.n	8008c72 <UART_SetConfig+0x18e>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b19      	ldr	r3, [pc, #100]	; (8008cdc <UART_SetConfig+0x1f8>)
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d005      	beq.n	8008c88 <UART_SetConfig+0x1a4>
 8008c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b18      	ldr	r3, [pc, #96]	; (8008ce4 <UART_SetConfig+0x200>)
 8008c82:	429a      	cmp	r2, r3
 8008c84:	f040 8094 	bne.w	8008db0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	623b      	str	r3, [r7, #32]
 8008c8e:	627a      	str	r2, [r7, #36]	; 0x24
 8008c90:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c94:	f7fc fe36 	bl	8005904 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c98:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80f7 	beq.w	8008e90 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	4a1c      	ldr	r2, [pc, #112]	; (8008d18 <UART_SetConfig+0x234>)
 8008ca8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cac:	461a      	mov	r2, r3
 8008cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	005b      	lsls	r3, r3, #1
 8008cbe:	4413      	add	r3, r2
 8008cc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d305      	bcc.n	8008cd2 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d924      	bls.n	8008d1c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008cd8:	e069      	b.n	8008dae <UART_SetConfig+0x2ca>
 8008cda:	bf00      	nop
 8008cdc:	44002400 	.word	0x44002400
 8008ce0:	cfff69f3 	.word	0xcfff69f3
 8008ce4:	54002400 	.word	0x54002400
 8008ce8:	40013800 	.word	0x40013800
 8008cec:	40004400 	.word	0x40004400
 8008cf0:	40004800 	.word	0x40004800
 8008cf4:	40004c00 	.word	0x40004c00
 8008cf8:	40005000 	.word	0x40005000
 8008cfc:	40006400 	.word	0x40006400
 8008d00:	40007800 	.word	0x40007800
 8008d04:	40007c00 	.word	0x40007c00
 8008d08:	40008000 	.word	0x40008000
 8008d0c:	40006800 	.word	0x40006800
 8008d10:	40006c00 	.word	0x40006c00
 8008d14:	40008400 	.word	0x40008400
 8008d18:	08009b88 	.word	0x08009b88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1e:	2200      	movs	r2, #0
 8008d20:	61bb      	str	r3, [r7, #24]
 8008d22:	61fa      	str	r2, [r7, #28]
 8008d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d28:	4a64      	ldr	r2, [pc, #400]	; (8008ebc <UART_SetConfig+0x3d8>)
 8008d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	2200      	movs	r2, #0
 8008d32:	613b      	str	r3, [r7, #16]
 8008d34:	617a      	str	r2, [r7, #20]
 8008d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008d3e:	f7f7 faa5 	bl	800028c <__aeabi_uldivmod>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4610      	mov	r0, r2
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f04f 0200 	mov.w	r2, #0
 8008d4e:	f04f 0300 	mov.w	r3, #0
 8008d52:	020b      	lsls	r3, r1, #8
 8008d54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d58:	0202      	lsls	r2, r0, #8
 8008d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d5c:	6849      	ldr	r1, [r1, #4]
 8008d5e:	0849      	lsrs	r1, r1, #1
 8008d60:	2000      	movs	r0, #0
 8008d62:	460c      	mov	r4, r1
 8008d64:	4605      	mov	r5, r0
 8008d66:	eb12 0804 	adds.w	r8, r2, r4
 8008d6a:	eb43 0905 	adc.w	r9, r3, r5
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	60fa      	str	r2, [r7, #12]
 8008d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d7c:	4640      	mov	r0, r8
 8008d7e:	4649      	mov	r1, r9
 8008d80:	f7f7 fa84 	bl	800028c <__aeabi_uldivmod>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4613      	mov	r3, r2
 8008d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d92:	d308      	bcc.n	8008da6 <UART_SetConfig+0x2c2>
 8008d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9a:	d204      	bcs.n	8008da6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008da2:	60da      	str	r2, [r3, #12]
 8008da4:	e003      	b.n	8008dae <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008dac:	e070      	b.n	8008e90 <UART_SetConfig+0x3ac>
 8008dae:	e06f      	b.n	8008e90 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	d13c      	bne.n	8008e34 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	607a      	str	r2, [r7, #4]
 8008dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008dc6:	f7fc fd9d 	bl	8005904 <HAL_RCCEx_GetPeriphCLKFreq>
 8008dca:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d05e      	beq.n	8008e90 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	4a39      	ldr	r2, [pc, #228]	; (8008ebc <UART_SetConfig+0x3d8>)
 8008dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de4:	005a      	lsls	r2, r3, #1
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	085b      	lsrs	r3, r3, #1
 8008dec:	441a      	add	r2, r3
 8008dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfa:	2b0f      	cmp	r3, #15
 8008dfc:	d916      	bls.n	8008e2c <UART_SetConfig+0x348>
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e04:	d212      	bcs.n	8008e2c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	f023 030f 	bic.w	r3, r3, #15
 8008e0e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	f003 0307 	and.w	r3, r3, #7
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008e28:	60da      	str	r2, [r3, #12]
 8008e2a:	e031      	b.n	8008e90 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008e32:	e02d      	b.n	8008e90 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e36:	2200      	movs	r2, #0
 8008e38:	469a      	mov	sl, r3
 8008e3a:	4693      	mov	fp, r2
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	4659      	mov	r1, fp
 8008e40:	f7fc fd60 	bl	8005904 <HAL_RCCEx_GetPeriphCLKFreq>
 8008e44:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d021      	beq.n	8008e90 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e50:	4a1a      	ldr	r2, [pc, #104]	; (8008ebc <UART_SetConfig+0x3d8>)
 8008e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e56:	461a      	mov	r2, r3
 8008e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e5a:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	441a      	add	r2, r3
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e72:	2b0f      	cmp	r3, #15
 8008e74:	d909      	bls.n	8008e8a <UART_SetConfig+0x3a6>
 8008e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7c:	d205      	bcs.n	8008e8a <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60da      	str	r2, [r3, #12]
 8008e88:	e002      	b.n	8008e90 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e92:	2201      	movs	r2, #1
 8008e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008eac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3750      	adds	r7, #80	; 0x50
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eba:	bf00      	nop
 8008ebc:	08009b88 	.word	0x08009b88

08008ec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ecc:	f003 0308 	and.w	r3, r3, #8
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d00a      	beq.n	8008eea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	f003 0301 	and.w	r3, r3, #1
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	430a      	orrs	r2, r1
 8008f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f10:	f003 0302 	and.w	r3, r3, #2
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00a      	beq.n	8008f2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00a      	beq.n	8008f50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f54:	f003 0310 	and.w	r3, r3, #16
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	f003 0320 	and.w	r3, r3, #32
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00a      	beq.n	8008f94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	430a      	orrs	r2, r1
 8008f92:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d01a      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fbe:	d10a      	bne.n	8008fd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00a      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b098      	sub	sp, #96	; 0x60
 8009008:	af02      	add	r7, sp, #8
 800900a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009014:	f7f7 ff56 	bl	8000ec4 <HAL_GetTick>
 8009018:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 0308 	and.w	r3, r3, #8
 8009024:	2b08      	cmp	r3, #8
 8009026:	d12f      	bne.n	8009088 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009030:	2200      	movs	r2, #0
 8009032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f88e 	bl	8009158 <UART_WaitOnFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d022      	beq.n	8009088 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904a:	e853 3f00 	ldrex	r3, [r3]
 800904e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009056:	653b      	str	r3, [r7, #80]	; 0x50
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009060:	647b      	str	r3, [r7, #68]	; 0x44
 8009062:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009064:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009068:	e841 2300 	strex	r3, r2, [r1]
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800906e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009070:	2b00      	cmp	r3, #0
 8009072:	d1e6      	bne.n	8009042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2220      	movs	r2, #32
 8009078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e063      	b.n	8009150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0304 	and.w	r3, r3, #4
 8009092:	2b04      	cmp	r3, #4
 8009094:	d149      	bne.n	800912a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009096:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800909e:	2200      	movs	r2, #0
 80090a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f857 	bl	8009158 <UART_WaitOnFlagUntilTimeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d03c      	beq.n	800912a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	623b      	str	r3, [r7, #32]
   return(result);
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80090c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ce:	633b      	str	r3, [r7, #48]	; 0x30
 80090d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009102:	61fa      	str	r2, [r7, #28]
 8009104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	69b9      	ldr	r1, [r7, #24]
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	617b      	str	r3, [r7, #20]
   return(result);
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e5      	bne.n	80090e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2220      	movs	r2, #32
 800911a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009126:	2303      	movs	r3, #3
 8009128:	e012      	b.n	8009150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2220      	movs	r2, #32
 800912e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2220      	movs	r2, #32
 8009136:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2200      	movs	r2, #0
 8009144:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800914e:	2300      	movs	r3, #0
}
 8009150:	4618      	mov	r0, r3
 8009152:	3758      	adds	r7, #88	; 0x58
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	603b      	str	r3, [r7, #0]
 8009164:	4613      	mov	r3, r2
 8009166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009168:	e049      	b.n	80091fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009170:	d045      	beq.n	80091fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009172:	f7f7 fea7 	bl	8000ec4 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	429a      	cmp	r2, r3
 8009180:	d302      	bcc.n	8009188 <UART_WaitOnFlagUntilTimeout+0x30>
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009188:	2303      	movs	r3, #3
 800918a:	e048      	b.n	800921e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0304 	and.w	r3, r3, #4
 8009196:	2b00      	cmp	r3, #0
 8009198:	d031      	beq.n	80091fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	69db      	ldr	r3, [r3, #28]
 80091a0:	f003 0308 	and.w	r3, r3, #8
 80091a4:	2b08      	cmp	r3, #8
 80091a6:	d110      	bne.n	80091ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2208      	movs	r2, #8
 80091ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f972 	bl	800949a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2208      	movs	r2, #8
 80091ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e029      	b.n	800921e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091d8:	d111      	bne.n	80091fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 f958 	bl	800949a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2220      	movs	r2, #32
 80091ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e00f      	b.n	800921e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69da      	ldr	r2, [r3, #28]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4013      	ands	r3, r2
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	bf0c      	ite	eq
 800920e:	2301      	moveq	r3, #1
 8009210:	2300      	movne	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	461a      	mov	r2, r3
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	429a      	cmp	r2, r3
 800921a:	d0a6      	beq.n	800916a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b098      	sub	sp, #96	; 0x60
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	4613      	mov	r3, r2
 8009234:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8009236:	88fb      	ldrh	r3, [r7, #6]
 8009238:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	88fa      	ldrh	r2, [r7, #6]
 8009246:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2222      	movs	r2, #34	; 0x22
 8009256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009260:	2b00      	cmp	r3, #0
 8009262:	d07c      	beq.n	800935e <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800926a:	4a68      	ldr	r2, [pc, #416]	; (800940c <UART_Start_Receive_DMA+0x1e4>)
 800926c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009274:	4a66      	ldr	r2, [pc, #408]	; (8009410 <UART_Start_Receive_DMA+0x1e8>)
 8009276:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927e:	4a65      	ldr	r2, [pc, #404]	; (8009414 <UART_Start_Receive_DMA+0x1ec>)
 8009280:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009288:	2200      	movs	r2, #0
 800928a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009294:	d107      	bne.n	80092a6 <UART_Start_Receive_DMA+0x7e>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d103      	bne.n	80092a6 <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 800929e:	88fb      	ldrh	r3, [r7, #6]
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d034      	beq.n	8009320 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02a      	beq.n	8009318 <UART_Start_Receive_DMA+0xf0>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d023      	beq.n	8009318 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80092de:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800930a:	4618      	mov	r0, r3
 800930c:	f7f8 fd8a 	bl	8001e24 <HAL_DMAEx_List_Start_IT>
 8009310:	4603      	mov	r3, r0
 8009312:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009316:	e014      	b.n	8009342 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8009318:	2301      	movs	r3, #1
 800931a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800931e:	e010      	b.n	8009342 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3324      	adds	r3, #36	; 0x24
 800932c:	4619      	mov	r1, r3
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009332:	461a      	mov	r2, r3
 8009334:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009338:	f7f8 f810 	bl	800135c <HAL_DMA_Start_IT>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 8009342:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009346:	2b00      	cmp	r3, #0
 8009348:	d009      	beq.n	800935e <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2210      	movs	r2, #16
 800934e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2220      	movs	r2, #32
 8009356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e051      	b.n	8009402 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d018      	beq.n	8009398 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800936e:	e853 3f00 	ldrex	r3, [r3]
 8009372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800937a:	65bb      	str	r3, [r7, #88]	; 0x58
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	461a      	mov	r2, r3
 8009382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009384:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009386:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800938a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e6      	bne.n	8009366 <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a2:	e853 3f00 	ldrex	r3, [r3]
 80093a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	f043 0301 	orr.w	r3, r3, #1
 80093ae:	657b      	str	r3, [r7, #84]	; 0x54
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	3308      	adds	r3, #8
 80093b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80093ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80093be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093c0:	e841 2300 	strex	r3, r2, [r1]
 80093c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1e5      	bne.n	8009398 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3308      	adds	r3, #8
 80093d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	e853 3f00 	ldrex	r3, [r3]
 80093da:	617b      	str	r3, [r7, #20]
   return(result);
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093e2:	653b      	str	r3, [r7, #80]	; 0x50
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3308      	adds	r3, #8
 80093ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093ec:	627a      	str	r2, [r7, #36]	; 0x24
 80093ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f0:	6a39      	ldr	r1, [r7, #32]
 80093f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093f4:	e841 2300 	strex	r3, r2, [r1]
 80093f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1e5      	bne.n	80093cc <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3760      	adds	r7, #96	; 0x60
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	080095e3 	.word	0x080095e3
 8009410:	080096d5 	.word	0x080096d5
 8009414:	08009713 	.word	0x08009713

08009418 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009418:	b480      	push	{r7}
 800941a:	b08f      	sub	sp, #60	; 0x3c
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	61fb      	str	r3, [r7, #28]
   return(result);
 800942e:	69fb      	ldr	r3, [r7, #28]
 8009430:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009434:	637b      	str	r3, [r7, #52]	; 0x34
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009440:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e6      	bne.n	8009420 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3308      	adds	r3, #8
 8009458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	60bb      	str	r3, [r7, #8]
   return(result);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009468:	633b      	str	r3, [r7, #48]	; 0x30
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3308      	adds	r3, #8
 8009470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009472:	61ba      	str	r2, [r7, #24]
 8009474:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6979      	ldr	r1, [r7, #20]
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	613b      	str	r3, [r7, #16]
   return(result);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800948e:	bf00      	nop
 8009490:	373c      	adds	r7, #60	; 0x3c
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800949a:	b480      	push	{r7}
 800949c:	b095      	sub	sp, #84	; 0x54
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094aa:	e853 3f00 	ldrex	r3, [r3]
 80094ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	461a      	mov	r2, r3
 80094be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c0:	643b      	str	r3, [r7, #64]	; 0x40
 80094c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c8:	e841 2300 	strex	r3, r2, [r1]
 80094cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e6      	bne.n	80094a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	3308      	adds	r3, #8
 80094da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ea:	f023 0301 	bic.w	r3, r3, #1
 80094ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e3      	bne.n	80094d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d118      	bne.n	8009546 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	60bb      	str	r3, [r7, #8]
   return(result);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f023 0310 	bic.w	r3, r3, #16
 8009528:	647b      	str	r3, [r7, #68]	; 0x44
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6979      	ldr	r1, [r7, #20]
 8009538:	69ba      	ldr	r2, [r7, #24]
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	613b      	str	r3, [r7, #16]
   return(result);
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e6      	bne.n	8009514 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2220      	movs	r2, #32
 800954a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	675a      	str	r2, [r3, #116]	; 0x74
}
 800955a:	bf00      	nop
 800955c:	3754      	adds	r7, #84	; 0x54
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b08a      	sub	sp, #40	; 0x28
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009572:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009578:	2b81      	cmp	r3, #129	; 0x81
 800957a:	d01d      	beq.n	80095b8 <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	2200      	movs	r2, #0
 8009580:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	e853 3f00 	ldrex	r3, [r3]
 8009590:	60fb      	str	r3, [r7, #12]
   return(result);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009598:	623b      	str	r3, [r7, #32]
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	6a3b      	ldr	r3, [r7, #32]
 80095a2:	61fb      	str	r3, [r7, #28]
 80095a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a6:	69b9      	ldr	r1, [r7, #24]
 80095a8:	69fa      	ldr	r2, [r7, #28]
 80095aa:	e841 2300 	strex	r3, r2, [r1]
 80095ae:	617b      	str	r3, [r7, #20]
   return(result);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1e6      	bne.n	8009584 <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095b6:	e002      	b.n	80095be <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 80095b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095ba:	f7ff fa6b 	bl	8008a94 <HAL_UART_TxCpltCallback>
}
 80095be:	bf00      	nop
 80095c0:	3728      	adds	r7, #40	; 0x28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f7ff fa67 	bl	8008aa8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095da:	bf00      	nop
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b096      	sub	sp, #88	; 0x58
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ee:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	2b81      	cmp	r3, #129	; 0x81
 80095f6:	d057      	beq.n	80096a8 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 80095f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800960e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009614:	653b      	str	r3, [r7, #80]	; 0x50
 8009616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	647b      	str	r3, [r7, #68]	; 0x44
 8009620:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009626:	e841 2300 	strex	r3, r2, [r1]
 800962a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800962c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1e6      	bne.n	8009600 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	3308      	adds	r3, #8
 8009638:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	e853 3f00 	ldrex	r3, [r3]
 8009640:	623b      	str	r3, [r7, #32]
   return(result);
 8009642:	6a3b      	ldr	r3, [r7, #32]
 8009644:	f023 0301 	bic.w	r3, r3, #1
 8009648:	64fb      	str	r3, [r7, #76]	; 0x4c
 800964a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	3308      	adds	r3, #8
 8009650:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009652:	633a      	str	r2, [r7, #48]	; 0x30
 8009654:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009656:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800965a:	e841 2300 	strex	r3, r2, [r1]
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1e5      	bne.n	8009632 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009668:	2220      	movs	r2, #32
 800966a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009672:	2b01      	cmp	r3, #1
 8009674:	d118      	bne.n	80096a8 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60fb      	str	r3, [r7, #12]
   return(result);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f023 0310 	bic.w	r3, r3, #16
 800968a:	64bb      	str	r3, [r7, #72]	; 0x48
 800968c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009694:	61fb      	str	r3, [r7, #28]
 8009696:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009698:	69b9      	ldr	r1, [r7, #24]
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	e841 2300 	strex	r3, r2, [r1]
 80096a0:	617b      	str	r3, [r7, #20]
   return(result);
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d1e6      	bne.n	8009676 <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096aa:	2200      	movs	r2, #0
 80096ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d107      	bne.n	80096c6 <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096bc:	4619      	mov	r1, r3
 80096be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80096c0:	f7f6 ffb8 	bl	8000634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096c4:	e002      	b.n	80096cc <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 80096c6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80096c8:	f7f6 ff70 	bl	80005ac <HAL_UART_RxCpltCallback>
}
 80096cc:	bf00      	nop
 80096ce:	3758      	adds	r7, #88	; 0x58
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	2201      	movs	r2, #1
 80096e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096ec:	2b01      	cmp	r3, #1
 80096ee:	d109      	bne.n	8009704 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096f6:	085b      	lsrs	r3, r3, #1
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	4619      	mov	r1, r3
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7f6 ff99 	bl	8000634 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009702:	e002      	b.n	800970a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff f9d9 	bl	8008abc <HAL_UART_RxHalfCpltCallback>
}
 800970a:	bf00      	nop
 800970c:	3710      	adds	r7, #16
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b086      	sub	sp, #24
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800971e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009726:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973a:	2b80      	cmp	r3, #128	; 0x80
 800973c:	d109      	bne.n	8009752 <UART_DMAError+0x40>
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	2b21      	cmp	r3, #33	; 0x21
 8009742:	d106      	bne.n	8009752 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2200      	movs	r2, #0
 8009748:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800974c:	6978      	ldr	r0, [r7, #20]
 800974e:	f7ff fe63 	bl	8009418 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b40      	cmp	r3, #64	; 0x40
 800975e:	d109      	bne.n	8009774 <UART_DMAError+0x62>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2b22      	cmp	r3, #34	; 0x22
 8009764:	d106      	bne.n	8009774 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2200      	movs	r2, #0
 800976a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800976e:	6978      	ldr	r0, [r7, #20]
 8009770:	f7ff fe93 	bl	800949a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800977a:	f043 0210 	orr.w	r2, r3, #16
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009784:	6978      	ldr	r0, [r7, #20]
 8009786:	f7ff f9a3 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800978a:	bf00      	nop
 800978c:	3718      	adds	r7, #24
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800979e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff f98d 	bl	8008ad0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b088      	sub	sp, #32
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	e853 3f00 	ldrex	r3, [r3]
 80097d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	461a      	mov	r2, r3
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	61bb      	str	r3, [r7, #24]
 80097e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e8:	6979      	ldr	r1, [r7, #20]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	e841 2300 	strex	r3, r2, [r1]
 80097f0:	613b      	str	r3, [r7, #16]
   return(result);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1e6      	bne.n	80097c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7ff f944 	bl	8008a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3720      	adds	r7, #32
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_UARTEx_DisableFifoMode+0x16>
 8009862:	2302      	movs	r3, #2
 8009864:	e027      	b.n	80098b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2224      	movs	r2, #36	; 0x24
 8009872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0201 	bic.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009894:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098b4:	2300      	movs	r3, #0
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3714      	adds	r7, #20
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d101      	bne.n	80098da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80098d6:	2302      	movs	r3, #2
 80098d8:	e02d      	b.n	8009936 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2224      	movs	r2, #36	; 0x24
 80098e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f022 0201 	bic.w	r2, r2, #1
 8009900:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 f8a4 	bl	8009a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2220      	movs	r2, #32
 8009928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800994e:	2b01      	cmp	r3, #1
 8009950:	d101      	bne.n	8009956 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009952:	2302      	movs	r3, #2
 8009954:	e02d      	b.n	80099b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2224      	movs	r2, #36	; 0x24
 8009962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0201 	bic.w	r2, r2, #1
 800997c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	683a      	ldr	r2, [r7, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f866 	bl	8009a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68fa      	ldr	r2, [r7, #12]
 800999e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b08c      	sub	sp, #48	; 0x30
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	4613      	mov	r3, r2
 80099c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80099ce:	2b20      	cmp	r3, #32
 80099d0:	d142      	bne.n	8009a58 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d002      	beq.n	80099de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e03b      	b.n	8009a5a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80099ee:	88fb      	ldrh	r3, [r7, #6]
 80099f0:	461a      	mov	r2, r3
 80099f2:	68b9      	ldr	r1, [r7, #8]
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff fc17 	bl	8009228 <UART_Start_Receive_DMA>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009a00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d124      	bne.n	8009a52 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d11d      	bne.n	8009a4c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2210      	movs	r2, #16
 8009a16:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	e853 3f00 	ldrex	r3, [r3]
 8009a24:	617b      	str	r3, [r7, #20]
   return(result);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f043 0310 	orr.w	r3, r3, #16
 8009a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	461a      	mov	r2, r3
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	627b      	str	r3, [r7, #36]	; 0x24
 8009a38:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3a:	6a39      	ldr	r1, [r7, #32]
 8009a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a3e:	e841 2300 	strex	r3, r2, [r1]
 8009a42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d1e6      	bne.n	8009a18 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009a4a:	e002      	b.n	8009a52 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8009a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a56:	e000      	b.n	8009a5a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009a58:	2302      	movs	r3, #2
  }
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3730      	adds	r7, #48	; 0x30
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d108      	bne.n	8009a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009a84:	e031      	b.n	8009aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009a86:	2308      	movs	r3, #8
 8009a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a8a:	2308      	movs	r3, #8
 8009a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	0e5b      	lsrs	r3, r3, #25
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	0f5b      	lsrs	r3, r3, #29
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	f003 0307 	and.w	r3, r3, #7
 8009aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009aae:	7bbb      	ldrb	r3, [r7, #14]
 8009ab0:	7b3a      	ldrb	r2, [r7, #12]
 8009ab2:	4911      	ldr	r1, [pc, #68]	; (8009af8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ab4:	5c8a      	ldrb	r2, [r1, r2]
 8009ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009aba:	7b3a      	ldrb	r2, [r7, #12]
 8009abc:	490f      	ldr	r1, [pc, #60]	; (8009afc <UARTEx_SetNbDataToProcess+0x98>)
 8009abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009acc:	7bfb      	ldrb	r3, [r7, #15]
 8009ace:	7b7a      	ldrb	r2, [r7, #13]
 8009ad0:	4909      	ldr	r1, [pc, #36]	; (8009af8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ad2:	5c8a      	ldrb	r2, [r1, r2]
 8009ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ad8:	7b7a      	ldrb	r2, [r7, #13]
 8009ada:	4908      	ldr	r1, [pc, #32]	; (8009afc <UARTEx_SetNbDataToProcess+0x98>)
 8009adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ae2:	b29a      	uxth	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009aea:	bf00      	nop
 8009aec:	3714      	adds	r7, #20
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	08009ba0 	.word	0x08009ba0
 8009afc:	08009ba8 	.word	0x08009ba8

08009b00 <memset>:
 8009b00:	4402      	add	r2, r0
 8009b02:	4603      	mov	r3, r0
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d100      	bne.n	8009b0a <memset+0xa>
 8009b08:	4770      	bx	lr
 8009b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b0e:	e7f9      	b.n	8009b04 <memset+0x4>

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	; (8009b48 <__libc_init_array+0x38>)
 8009b14:	2600      	movs	r6, #0
 8009b16:	4c0d      	ldr	r4, [pc, #52]	; (8009b4c <__libc_init_array+0x3c>)
 8009b18:	1b64      	subs	r4, r4, r5
 8009b1a:	10a4      	asrs	r4, r4, #2
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	; (8009b50 <__libc_init_array+0x40>)
 8009b22:	2600      	movs	r6, #0
 8009b24:	4c0b      	ldr	r4, [pc, #44]	; (8009b54 <__libc_init_array+0x44>)
 8009b26:	f000 f817 	bl	8009b58 <_init>
 8009b2a:	1b64      	subs	r4, r4, r5
 8009b2c:	10a4      	asrs	r4, r4, #2
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	3601      	adds	r6, #1
 8009b3a:	4798      	blx	r3
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	3601      	adds	r6, #1
 8009b44:	4798      	blx	r3
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	08009bb8 	.word	0x08009bb8
 8009b4c:	08009bb8 	.word	0x08009bb8
 8009b50:	08009bb8 	.word	0x08009bb8
 8009b54:	08009bbc 	.word	0x08009bbc

08009b58 <_init>:
 8009b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5a:	bf00      	nop
 8009b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b5e:	bc08      	pop	{r3}
 8009b60:	469e      	mov	lr, r3
 8009b62:	4770      	bx	lr

08009b64 <_fini>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	bf00      	nop
 8009b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6a:	bc08      	pop	{r3}
 8009b6c:	469e      	mov	lr, r3
 8009b6e:	4770      	bx	lr
