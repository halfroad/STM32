
GlimpseOnRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b4  08000250  08000250  00010250  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800478c  0800478c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800478c  0800478c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800478c  0800478c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ba4  20000014  080047a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bb8  080047a8  00022bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016130  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ee  00000000  00000000  000361bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  000392b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001027  00000000  00000000  0003a7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032c91  00000000  00000000  0003b807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001770a  00000000  00000000  0006e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001422df  00000000  00000000  00085ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000570c  00000000  00000000  001c7e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001cd590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000014 	.word	0x20000014
 800026c:	00000000 	.word	0x00000000
 8000270:	080046ec 	.word	0x080046ec

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000018 	.word	0x20000018
 800028c:	080046ec 	.word	0x080046ec

08000290 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */
	/* creation of task_1 */
	task_1Handle = osThreadNew(task_1_entry_function, NULL, &task_1_attributes);
 8000294:	4a08      	ldr	r2, [pc, #32]	; (80002b8 <MX_FREERTOS_Init+0x28>)
 8000296:	2100      	movs	r1, #0
 8000298:	4808      	ldr	r0, [pc, #32]	; (80002bc <MX_FREERTOS_Init+0x2c>)
 800029a:	f002 f973 	bl	8002584 <osThreadNew>
 800029e:	4603      	mov	r3, r0
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <MX_FREERTOS_Init+0x30>)
 80002a2:	6013      	str	r3, [r2, #0]

	/* creation of task_2 */
	task_2Handle = osThreadNew(task_2_entry_function, NULL, &task_2_attributes);
 80002a4:	4a07      	ldr	r2, [pc, #28]	; (80002c4 <MX_FREERTOS_Init+0x34>)
 80002a6:	2100      	movs	r1, #0
 80002a8:	4807      	ldr	r0, [pc, #28]	; (80002c8 <MX_FREERTOS_Init+0x38>)
 80002aa:	f002 f96b 	bl	8002584 <osThreadNew>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4a06      	ldr	r2, [pc, #24]	; (80002cc <MX_FREERTOS_Init+0x3c>)
 80002b2:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	0800472c 	.word	0x0800472c
 80002bc:	080002d1 	.word	0x080002d1
 80002c0:	20000030 	.word	0x20000030
 80002c4:	08004750 	.word	0x08004750
 80002c8:	080002f1 	.word	0x080002f1
 80002cc:	20000034 	.word	0x20000034

080002d0 <task_1_entry_function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_task_1_entry_function */
void task_1_entry_function(void *argument)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN task_1 */
	/* Infinite loop */
	for (;;)
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80002d8:	2101      	movs	r1, #1
 80002da:	4804      	ldr	r0, [pc, #16]	; (80002ec <task_1_entry_function+0x1c>)
 80002dc:	f000 fce2 	bl	8000ca4 <HAL_GPIO_TogglePin>
		osDelay(500);
 80002e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002e4:	f002 f9df 	bl	80026a6 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80002e8:	e7f6      	b.n	80002d8 <task_1_entry_function+0x8>
 80002ea:	bf00      	nop
 80002ec:	42020400 	.word	0x42020400

080002f0 <task_2_entry_function>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_task_2_entry_function */
void task_2_entry_function(void *argument)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN task_2 */
	/* Infinite loop */
	for (;;)
	{

		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 80002f8:	2110      	movs	r1, #16
 80002fa:	4803      	ldr	r0, [pc, #12]	; (8000308 <task_2_entry_function+0x18>)
 80002fc:	f000 fcd2 	bl	8000ca4 <HAL_GPIO_TogglePin>
		osDelay(250);
 8000300:	20fa      	movs	r0, #250	; 0xfa
 8000302:	f002 f9d0 	bl	80026a6 <osDelay>
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_4);
 8000306:	e7f7      	b.n	80002f8 <task_2_entry_function+0x8>
 8000308:	42021400 	.word	0x42021400

0800030c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b088      	sub	sp, #32
 8000310:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000322:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <MX_GPIO_Init+0xa8>)
 8000324:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000328:	4a22      	ldr	r2, [pc, #136]	; (80003b4 <MX_GPIO_Init+0xa8>)
 800032a:	f043 0320 	orr.w	r3, r3, #32
 800032e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000332:	4b20      	ldr	r3, [pc, #128]	; (80003b4 <MX_GPIO_Init+0xa8>)
 8000334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000338:	f003 0320 	and.w	r3, r3, #32
 800033c:	60bb      	str	r3, [r7, #8]
 800033e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_GPIO_Init+0xa8>)
 8000342:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000346:	4a1b      	ldr	r2, [pc, #108]	; (80003b4 <MX_GPIO_Init+0xa8>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_GPIO_Init+0xa8>)
 8000352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000356:	f003 0302 	and.w	r3, r3, #2
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <MX_GPIO_Init+0xac>)
 8000364:	f000 fc86 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2101      	movs	r1, #1
 800036c:	4813      	ldr	r0, [pc, #76]	; (80003bc <MX_GPIO_Init+0xb0>)
 800036e:	f000 fc81 	bl	8000c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000372:	2310      	movs	r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000376:	2301      	movs	r3, #1
 8000378:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037e:	2300      	movs	r3, #0
 8000380:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4619      	mov	r1, r3
 8000388:	480b      	ldr	r0, [pc, #44]	; (80003b8 <MX_GPIO_Init+0xac>)
 800038a:	f000 fb21 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800038e:	2301      	movs	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2300      	movs	r3, #0
 800039c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800039e:	f107 030c 	add.w	r3, r7, #12
 80003a2:	4619      	mov	r1, r3
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <MX_GPIO_Init+0xb0>)
 80003a6:	f000 fb13 	bl	80009d0 <HAL_GPIO_Init>

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	44020c00 	.word	0x44020c00
 80003b8:	42021400 	.word	0x42021400
 80003bc:	42020400 	.word	0x42020400

080003c0 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 80003c4:	2000      	movs	r0, #0
 80003c6:	f000 fc87 	bl	8000cd8 <HAL_ICACHE_ConfigAssociativityMode>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 80003d0:	f000 f886 	bl	80004e0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 80003d4:	f000 fca0 	bl	8000d18 <HAL_ICACHE_Enable>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80003de:	f000 f87f 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003e6:	b580      	push	{r7, lr}
 80003e8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ea:	f000 f9cb 	bl	8000784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003ee:	f000 f80d 	bl	800040c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003f2:	f7ff ff8b 	bl	800030c <MX_GPIO_Init>
	MX_MEMORYMAP_Init();
 80003f6:	f000 f878 	bl	80004ea <MX_MEMORYMAP_Init>
	MX_ICACHE_Init();
 80003fa:	f7ff ffe1 	bl	80003c0 <MX_ICACHE_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize(); /* Call init function for freertos objects (in freertos.c) */
 80003fe:	f002 f871 	bl	80024e4 <osKernelInitialize>
	MX_FREERTOS_Init();
 8000402:	f7ff ff45 	bl	8000290 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000406:	f002 f893 	bl	8002530 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800040a:	e7fe      	b.n	800040a <main+0x24>

0800040c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b09c      	sub	sp, #112	; 0x70
 8000410:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000412:	f107 0320 	add.w	r3, r7, #32
 8000416:	2250      	movs	r2, #80	; 0x50
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f004 f92c 	bl	8004678 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
 8000430:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000432:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <SystemClock_Config+0xac>)
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	4a20      	ldr	r2, [pc, #128]	; (80004b8 <SystemClock_Config+0xac>)
 8000438:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800043c:	6113      	str	r3, [r2, #16]
 800043e:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <SystemClock_Config+0xac>)
 8000440:	691b      	ldr	r3, [r3, #16]
 8000442:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000446:	607b      	str	r3, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800044a:	bf00      	nop
 800044c:	4b1a      	ldr	r3, [pc, #104]	; (80004b8 <SystemClock_Config+0xac>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	2b08      	cmp	r3, #8
 8000456:	d1f9      	bne.n	800044c <SystemClock_Config+0x40>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000458:	2302      	movs	r3, #2
 800045a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	2301      	movs	r3, #1
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000460:	2308      	movs	r3, #8
 8000462:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000464:	2340      	movs	r3, #64	; 0x40
 8000466:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000468:	2300      	movs	r3, #0
 800046a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800046c:	f107 0320 	add.w	r3, r7, #32
 8000470:	4618      	mov	r0, r3
 8000472:	f000 fc61 	bl	8000d38 <HAL_RCC_OscConfig>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x74>
		Error_Handler();
 800047c:	f000 f830 	bl	80004e0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000480:	231f      	movs	r3, #31
 8000482:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000484:	2300      	movs	r3, #0
 8000486:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000488:	2300      	movs	r3, #0
 800048a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048c:	2300      	movs	r3, #0
 800048e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000494:	2300      	movs	r3, #0
 8000496:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	2101      	movs	r1, #1
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 f882 	bl	80015a8 <HAL_RCC_ClockConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xa2>
		Error_Handler();
 80004aa:	f000 f819 	bl	80004e0 <Error_Handler>
	}
}
 80004ae:	bf00      	nop
 80004b0:	3770      	adds	r7, #112	; 0x70
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	44020800 	.word	0x44020800

080004bc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a04      	ldr	r2, [pc, #16]	; (80004dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d101      	bne.n	80004d2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80004ce:	f000 f97f 	bl	80007d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40001000 	.word	0x40001000

080004e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80004e8:	e7fe      	b.n	80004e8 <Error_Handler+0x8>

080004ea <MX_MEMORYMAP_Init>:

/* USER CODE END 0 */

/* MEMORYMAP init function */
void MX_MEMORYMAP_Init(void)
{
 80004ea:	b480      	push	{r7}
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fc:	2200      	movs	r2, #0
 80004fe:	210f      	movs	r1, #15
 8000500:	f06f 0001 	mvn.w	r0, #1
 8000504:	f000 fa3c 	bl	8000980 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}

0800050c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08e      	sub	sp, #56	; 0x38
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <HAL_InitTick+0xd8>)
 8000516:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800051a:	4a32      	ldr	r2, [pc, #200]	; (80005e4 <HAL_InitTick+0xd8>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000524:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <HAL_InitTick+0xd8>)
 8000526:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800052a:	f003 0310 	and.w	r3, r3, #16
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000532:	f107 020c 	add.w	r2, r7, #12
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4611      	mov	r1, r2
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fb49 	bl	8001bd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000548:	2b00      	cmp	r3, #0
 800054a:	d103      	bne.n	8000554 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800054c:	f001 fb2c 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000550:	6378      	str	r0, [r7, #52]	; 0x34
 8000552:	e004      	b.n	800055e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000554:	f001 fb28 	bl	8001ba8 <HAL_RCC_GetPCLK1Freq>
 8000558:	4603      	mov	r3, r0
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 100KHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800055e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000560:	095b      	lsrs	r3, r3, #5
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <HAL_InitTick+0xdc>)
 8000564:	fba2 2303 	umull	r2, r3, r2, r3
 8000568:	09db      	lsrs	r3, r3, #7
 800056a:	3b01      	subs	r3, #1
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800056e:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <HAL_InitTick+0xe0>)
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <HAL_InitTick+0xe4>)
 8000572:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/100000 - 1) to have a 100KHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <HAL_InitTick+0xe0>)
 8000576:	2263      	movs	r2, #99	; 0x63
 8000578:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <HAL_InitTick+0xe0>)
 800057c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800057e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000580:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <HAL_InitTick+0xe0>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <HAL_InitTick+0xe0>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <HAL_InitTick+0xe0>)
 800058e:	f001 fb59 	bl	8001c44 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800059c:	2b00      	cmp	r3, #0
 800059e:	d118      	bne.n	80005d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005a0:	4812      	ldr	r0, [pc, #72]	; (80005ec <HAL_InitTick+0xe0>)
 80005a2:	f001 fbb1 	bl	8001d08 <HAL_TIM_Base_Start_IT>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80005ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d10e      	bne.n	80005d2 <HAL_InitTick+0xc6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d808      	bhi.n	80005cc <HAL_InitTick+0xc0>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80005ba:	2200      	movs	r2, #0
 80005bc:	6879      	ldr	r1, [r7, #4]
 80005be:	2031      	movs	r0, #49	; 0x31
 80005c0:	f000 f9de 	bl	8000980 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <HAL_InitTick+0xe8>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
 80005ca:	e002      	b.n	80005d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80005d2:	2031      	movs	r0, #49	; 0x31
 80005d4:	f000 f9ee 	bl	80009b4 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
 80005d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3738      	adds	r7, #56	; 0x38
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	44020c00 	.word	0x44020c00
 80005e8:	0a7c5ac5 	.word	0x0a7c5ac5
 80005ec:	20000038 	.word	0x20000038
 80005f0:	40001000 	.word	0x40001000
 80005f4:	20000004 	.word	0x20000004

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000628:	4802      	ldr	r0, [pc, #8]	; (8000634 <TIM6_IRQHandler+0x10>)
 800062a:	f001 fc1b 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000038 	.word	0x20000038

08000638 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <SystemInit+0xdc>)
 8000640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000644:	4a33      	ldr	r2, [pc, #204]	; (8000714 <SystemInit+0xdc>)
 8000646:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800064a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800064e:	4b32      	ldr	r3, [pc, #200]	; (8000718 <SystemInit+0xe0>)
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000654:	4b30      	ldr	r3, [pc, #192]	; (8000718 <SystemInit+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800065a:	4b2f      	ldr	r3, [pc, #188]	; (8000718 <SystemInit+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <SystemInit+0xe0>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	492c      	ldr	r1, [pc, #176]	; (8000718 <SystemInit+0xe0>)
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <SystemInit+0xe4>)
 8000668:	4013      	ands	r3, r2
 800066a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800066c:	4b2a      	ldr	r3, [pc, #168]	; (8000718 <SystemInit+0xe0>)
 800066e:	2200      	movs	r2, #0
 8000670:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000672:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemInit+0xe0>)
 8000674:	2200      	movs	r2, #0
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000678:	4b27      	ldr	r3, [pc, #156]	; (8000718 <SystemInit+0xe0>)
 800067a:	2200      	movs	r2, #0
 800067c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800067e:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemInit+0xe0>)
 8000680:	4a27      	ldr	r2, [pc, #156]	; (8000720 <SystemInit+0xe8>)
 8000682:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SystemInit+0xe0>)
 8000686:	2200      	movs	r2, #0
 8000688:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800068a:	4b23      	ldr	r3, [pc, #140]	; (8000718 <SystemInit+0xe0>)
 800068c:	4a24      	ldr	r2, [pc, #144]	; (8000720 <SystemInit+0xe8>)
 800068e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemInit+0xe0>)
 8000692:	2200      	movs	r2, #0
 8000694:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <SystemInit+0xe0>)
 8000698:	4a21      	ldr	r2, [pc, #132]	; (8000720 <SystemInit+0xe8>)
 800069a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <SystemInit+0xe0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <SystemInit+0xe0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <SystemInit+0xe0>)
 80006a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <SystemInit+0xe0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <SystemInit+0xdc>)
 80006b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006ba:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <SystemInit+0xec>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80006c4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 80006cc:	d003      	beq.n	80006d6 <SystemInit+0x9e>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80006d4:	d117      	bne.n	8000706 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <SystemInit+0xec>)
 80006d8:	69db      	ldr	r3, [r3, #28]
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d005      	beq.n	80006ee <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80006e2:	4b10      	ldr	r3, [pc, #64]	; (8000724 <SystemInit+0xec>)
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <SystemInit+0xf0>)
 80006e6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <SystemInit+0xec>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <SystemInit+0xf4>)
 80006ec:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80006ee:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <SystemInit+0xec>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <SystemInit+0xec>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80006fa:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <SystemInit+0xec>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <SystemInit+0xec>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	61d3      	str	r3, [r2, #28]
  }
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	e000ed00 	.word	0xe000ed00
 8000718:	44020c00 	.word	0x44020c00
 800071c:	eae2eae3 	.word	0xeae2eae3
 8000720:	01010280 	.word	0x01010280
 8000724:	40022000 	.word	0x40022000
 8000728:	08192a3b 	.word	0x08192a3b
 800072c:	4c5d6e7f 	.word	0x4c5d6e7f

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000730:	480d      	ldr	r0, [pc, #52]	; (8000768 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000732:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000734:	f7ff ff80 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075e:	f003 ff93 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fe40 	bl	80003e6 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   r0, =_estack
 8000768:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000774:	08004794 	.word	0x08004794
  ldr r2, =_sbss
 8000778:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800077c:	20002bb8 	.word	0x20002bb8

08000780 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_IRQHandler>
	...

08000784 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f8ee 	bl	800096a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800078e:	f001 f8c3 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8000792:	4602      	mov	r2, r0
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_Init+0x40>)
 8000796:	6a1b      	ldr	r3, [r3, #32]
 8000798:	f003 030f 	and.w	r3, r3, #15
 800079c:	490a      	ldr	r1, [pc, #40]	; (80007c8 <HAL_Init+0x44>)
 800079e:	5ccb      	ldrb	r3, [r1, r3]
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_Init+0x48>)
 80007a6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007a8:	200f      	movs	r0, #15
 80007aa:	f7ff feaf 	bl	800050c <HAL_InitTick>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e002      	b.n	80007be <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe9e 	bl	80004f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	44020c00 	.word	0x44020c00
 80007c8:	08004774 	.word	0x08004774
 80007cc:	20000000 	.word	0x20000000

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_IncTick+0x20>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_IncTick+0x24>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_IncTick+0x24>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000008 	.word	0x20000008
 80007f4:	20000084 	.word	0x20000084

080007f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <HAL_GetTick+0x14>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	20000084 	.word	0x20000084

08000810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800082c:	4013      	ands	r3, r2
 800082e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800083c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000842:	4a04      	ldr	r2, [pc, #16]	; (8000854 <__NVIC_SetPriorityGrouping+0x44>)
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	60d3      	str	r3, [r2, #12]
}
 8000848:	bf00      	nop
 800084a:	3714      	adds	r7, #20
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800085c:	4b04      	ldr	r3, [pc, #16]	; (8000870 <__NVIC_GetPriorityGrouping+0x18>)
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	0a1b      	lsrs	r3, r3, #8
 8000862:	f003 0307 	and.w	r3, r3, #7
}
 8000866:	4618      	mov	r0, r3
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800087e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000882:	2b00      	cmp	r3, #0
 8000884:	db0b      	blt.n	800089e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f003 021f 	and.w	r2, r3, #31
 800088c:	4907      	ldr	r1, [pc, #28]	; (80008ac <__NVIC_EnableIRQ+0x38>)
 800088e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	2001      	movs	r0, #1
 8000896:	fa00 f202 	lsl.w	r2, r0, r2
 800089a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100

080008b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	6039      	str	r1, [r7, #0]
 80008ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db0a      	blt.n	80008da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <__NVIC_SetPriority+0x4c>)
 80008ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008ce:	0112      	lsls	r2, r2, #4
 80008d0:	b2d2      	uxtb	r2, r2
 80008d2:	440b      	add	r3, r1
 80008d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d8:	e00a      	b.n	80008f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4908      	ldr	r1, [pc, #32]	; (8000900 <__NVIC_SetPriority+0x50>)
 80008e0:	88fb      	ldrh	r3, [r7, #6]
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	3b04      	subs	r3, #4
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	440b      	add	r3, r1
 80008ee:	761a      	strb	r2, [r3, #24]
}
 80008f0:	bf00      	nop
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr
 80008fc:	e000e100 	.word	0xe000e100
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000904:	b480      	push	{r7}
 8000906:	b089      	sub	sp, #36	; 0x24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	f1c3 0307 	rsb	r3, r3, #7
 800091e:	2b04      	cmp	r3, #4
 8000920:	bf28      	it	cs
 8000922:	2304      	movcs	r3, #4
 8000924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3304      	adds	r3, #4
 800092a:	2b06      	cmp	r3, #6
 800092c:	d902      	bls.n	8000934 <NVIC_EncodePriority+0x30>
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3b03      	subs	r3, #3
 8000932:	e000      	b.n	8000936 <NVIC_EncodePriority+0x32>
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000938:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43da      	mvns	r2, r3
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	401a      	ands	r2, r3
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800094c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43d9      	mvns	r1, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	4313      	orrs	r3, r2
         );
}
 800095e:	4618      	mov	r0, r3
 8000960:	3724      	adds	r7, #36	; 0x24
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ff4c 	bl	8000810 <__NVIC_SetPriorityGrouping>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800098e:	f7ff ff63 	bl	8000858 <__NVIC_GetPriorityGrouping>
 8000992:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	68b9      	ldr	r1, [r7, #8]
 8000998:	6978      	ldr	r0, [r7, #20]
 800099a:	f7ff ffb3 	bl	8000904 <NVIC_EncodePriority>
 800099e:	4602      	mov	r2, r0
 80009a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ff82 	bl	80008b0 <__NVIC_SetPriority>
}
 80009ac:	bf00      	nop
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff56 	bl	8000874 <__NVIC_EnableIRQ>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80009de:	e136      	b.n	8000c4e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	2101      	movs	r1, #1
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	4013      	ands	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 8128 	beq.w	8000c48 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d003      	beq.n	8000a08 <HAL_GPIO_Init+0x38>
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	2b12      	cmp	r3, #18
 8000a06:	d125      	bne.n	8000a54 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3208      	adds	r2, #8
 8000a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a14:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	f003 0307 	and.w	r3, r3, #7
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	220f      	movs	r2, #15
 8000a20:	fa02 f303 	lsl.w	r3, r2, r3
 8000a24:	43db      	mvns	r3, r3
 8000a26:	697a      	ldr	r2, [r7, #20]
 8000a28:	4013      	ands	r3, r2
 8000a2a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f003 020f 	and.w	r2, r3, #15
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	6979      	ldr	r1, [r7, #20]
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0203 	and.w	r2, r3, #3
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d00b      	beq.n	8000aa8 <HAL_GPIO_Init+0xd8>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9c:	2b11      	cmp	r3, #17
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b12      	cmp	r3, #18
 8000aa6:	d130      	bne.n	8000b0a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	697a      	ldr	r2, [r7, #20]
 8000abc:	4013      	ands	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68da      	ldr	r2, [r3, #12]
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ade:	2201      	movs	r2, #1
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	43db      	mvns	r3, r3
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	4013      	ands	r3, r2
 8000aec:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	091b      	lsrs	r3, r3, #4
 8000af4:	f003 0201 	and.w	r2, r3, #1
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	697a      	ldr	r2, [r7, #20]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	697a      	ldr	r2, [r7, #20]
 8000b08:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d017      	beq.n	8000b42 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	4013      	ands	r3, r2
 8000b28:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d07c      	beq.n	8000c48 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000b4e:	4a47      	ldr	r2, [pc, #284]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3318      	adds	r3, #24
 8000b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	f003 0303 	and.w	r3, r3, #3
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	220f      	movs	r2, #15
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	697a      	ldr	r2, [r7, #20]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	0a9a      	lsrs	r2, r3, #10
 8000b76:	4b3e      	ldr	r3, [pc, #248]	; (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000b78:	4013      	ands	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	f002 0203 	and.w	r2, r2, #3
 8000b80:	00d2      	lsls	r2, r2, #3
 8000b82:	4093      	lsls	r3, r2
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000b8a:	4938      	ldr	r1, [pc, #224]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	089b      	lsrs	r3, r3, #2
 8000b90:	3318      	adds	r3, #24
 8000b92:	697a      	ldr	r2, [r7, #20]
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000b98:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	697a      	ldr	r2, [r7, #20]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d003      	beq.n	8000bbc <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000bbc:	4a2b      	ldr	r2, [pc, #172]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d003      	beq.n	8000be6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000be6:	4a21      	ldr	r2, [pc, #132]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000bf2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000c12:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c20:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_GPIO_Init+0x29c>)
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fa22 f303 	lsr.w	r3, r2, r3
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	f47f aec1 	bne.w	80009e0 <HAL_GPIO_Init+0x10>
  }
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	44022000 	.word	0x44022000
 8000c70:	002f7f7f 	.word	0x002f7f7f

08000c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
 8000c80:	4613      	mov	r3, r2
 8000c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c84:	787b      	ldrb	r3, [r7, #1]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c8a:	887a      	ldrh	r2, [r7, #2]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c92:	887a      	ldrh	r2, [r7, #2]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb6:	887a      	ldrh	r2, [r7, #2]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	041a      	lsls	r2, r3, #16
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43d9      	mvns	r1, r3
 8000cc2:	887b      	ldrh	r3, [r7, #2]
 8000cc4:	400b      	ands	r3, r1
 8000cc6:	431a      	orrs	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	619a      	str	r2, [r3, #24]
}
 8000ccc:	bf00      	nop
 8000cce:	3714      	adds	r7, #20
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000ce4:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e007      	b.n	8000d06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f023 0204 	bic.w	r2, r3, #4
 8000cfe:	4905      	ldr	r1, [pc, #20]	; (8000d14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	40030400 	.word	0x40030400

08000d18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_ICACHE_Enable+0x1c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_ICACHE_Enable+0x1c>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40030400 	.word	0x40030400

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d102      	bne.n	8000d4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f000 bc28 	b.w	800159c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d4c:	4b94      	ldr	r3, [pc, #592]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	f003 0318 	and.w	r3, r3, #24
 8000d54:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8000d56:	4b92      	ldr	r3, [pc, #584]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d5a:	f003 0303 	and.w	r3, r3, #3
 8000d5e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 0310 	and.w	r3, r3, #16
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d05b      	beq.n	8000e24 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d005      	beq.n	8000d7e <HAL_RCC_OscConfig+0x46>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	2b18      	cmp	r3, #24
 8000d76:	d114      	bne.n	8000da2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d111      	bne.n	8000da2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f000 bc08 	b.w	800159c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000d8c:	4b84      	ldr	r3, [pc, #528]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	041b      	lsls	r3, r3, #16
 8000d9a:	4981      	ldr	r1, [pc, #516]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8000da0:	e040      	b.n	8000e24 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000daa:	4b7d      	ldr	r3, [pc, #500]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a7c      	ldr	r2, [pc, #496]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db6:	f7ff fd1f 	bl	80007f8 <HAL_GetTick>
 8000dba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000dbc:	e008      	b.n	8000dd0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000dbe:	f7ff fd1b 	bl	80007f8 <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d901      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	e3e5      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8000dd0:	4b73      	ldr	r3, [pc, #460]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f0      	beq.n	8000dbe <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8000ddc:	4b70      	ldr	r3, [pc, #448]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	041b      	lsls	r3, r3, #16
 8000dea:	496d      	ldr	r1, [pc, #436]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000dec:	4313      	orrs	r3, r2
 8000dee:	618b      	str	r3, [r1, #24]
 8000df0:	e018      	b.n	8000e24 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8000df2:	4b6b      	ldr	r3, [pc, #428]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6a      	ldr	r2, [pc, #424]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dfe:	f7ff fcfb 	bl	80007f8 <HAL_GetTick>
 8000e02:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000e04:	e008      	b.n	8000e18 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8000e06:	f7ff fcf7 	bl	80007f8 <HAL_GetTick>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d901      	bls.n	8000e18 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8000e14:	2303      	movs	r3, #3
 8000e16:	e3c1      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8000e18:	4b61      	ldr	r3, [pc, #388]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d1f0      	bne.n	8000e06 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f000 80a0 	beq.w	8000f72 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d005      	beq.n	8000e44 <HAL_RCC_OscConfig+0x10c>
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b18      	cmp	r3, #24
 8000e3c:	d109      	bne.n	8000e52 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e3a4      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e5a:	d106      	bne.n	8000e6a <HAL_RCC_OscConfig+0x132>
 8000e5c:	4b50      	ldr	r3, [pc, #320]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e058      	b.n	8000f1c <HAL_RCC_OscConfig+0x1e4>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d112      	bne.n	8000e98 <HAL_RCC_OscConfig+0x160>
 8000e72:	4b4b      	ldr	r3, [pc, #300]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a4a      	ldr	r2, [pc, #296]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	4b48      	ldr	r3, [pc, #288]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a47      	ldr	r2, [pc, #284]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a44      	ldr	r2, [pc, #272]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e041      	b.n	8000f1c <HAL_RCC_OscConfig+0x1e4>
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea0:	d112      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x190>
 8000ea2:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a3e      	ldr	r2, [pc, #248]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b3c      	ldr	r3, [pc, #240]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a3b      	ldr	r2, [pc, #236]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000eb4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a38      	ldr	r2, [pc, #224]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e029      	b.n	8000f1c <HAL_RCC_OscConfig+0x1e4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8000ed0:	d112      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1c0>
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ee4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2c      	ldr	r2, [pc, #176]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e011      	b.n	8000f1c <HAL_RCC_OscConfig+0x1e4>
 8000ef8:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b26      	ldr	r3, [pc, #152]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a25      	ldr	r2, [pc, #148]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f16:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f24:	f7ff fc68 	bl	80007f8 <HAL_GetTick>
 8000f28:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f2a:	e008      	b.n	8000f3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f2c:	f7ff fc64 	bl	80007f8 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b64      	cmp	r3, #100	; 0x64
 8000f38:	d901      	bls.n	8000f3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e32e      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f0      	beq.n	8000f2c <HAL_RCC_OscConfig+0x1f4>
 8000f4a:	e012      	b.n	8000f72 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fc54 	bl	80007f8 <HAL_GetTick>
 8000f50:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fc50 	bl	80007f8 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e31a      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_RCC_OscConfig+0x268>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 809a 	beq.w	80010b4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <HAL_RCC_OscConfig+0x25a>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	2b18      	cmp	r3, #24
 8000f8a:	d149      	bne.n	8001020 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d146      	bne.n	8001020 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d104      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e2fe      	b.n	800159c <HAL_RCC_OscConfig+0x864>
 8000f9e:	bf00      	nop
 8000fa0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d11c      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8000faa:	4b9a      	ldr	r3, [pc, #616]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0218 	and.w	r2, r3, #24
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d014      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8000fba:	4b96      	ldr	r3, [pc, #600]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f023 0218 	bic.w	r2, r3, #24
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	4993      	ldr	r1, [pc, #588]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8000fcc:	f000 fdd0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000fd0:	4b91      	ldr	r3, [pc, #580]	; (8001218 <HAL_RCC_OscConfig+0x4e0>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa99 	bl	800050c <HAL_InitTick>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e2db      	b.n	800159c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fc08 	bl	80007f8 <HAL_GetTick>
 8000fe8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fc04 	bl	80007f8 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e2ce      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000ffe:	4b85      	ldr	r3, [pc, #532]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800100a:	4b82      	ldr	r3, [pc, #520]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	497e      	ldr	r1, [pc, #504]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800101a:	4313      	orrs	r3, r2
 800101c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800101e:	e049      	b.n	80010b4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d02c      	beq.n	8001082 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001028:	4b7a      	ldr	r3, [pc, #488]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f023 0218 	bic.w	r2, r3, #24
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	691b      	ldr	r3, [r3, #16]
 8001034:	4977      	ldr	r1, [pc, #476]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800103a:	4b76      	ldr	r3, [pc, #472]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a75      	ldr	r2, [pc, #468]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001046:	f7ff fbd7 	bl	80007f8 <HAL_GetTick>
 800104a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800104e:	f7ff fbd3 	bl	80007f8 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e29d      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001060:	4b6c      	ldr	r3, [pc, #432]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800106c:	4b69      	ldr	r3, [pc, #420]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	041b      	lsls	r3, r3, #16
 800107a:	4966      	ldr	r1, [pc, #408]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800107c:	4313      	orrs	r3, r2
 800107e:	610b      	str	r3, [r1, #16]
 8001080:	e018      	b.n	80010b4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001082:	4b64      	ldr	r3, [pc, #400]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a63      	ldr	r2, [pc, #396]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800108e:	f7ff fbb3 	bl	80007f8 <HAL_GetTick>
 8001092:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001096:	f7ff fbaf 	bl	80007f8 <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e279      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80010a8:	4b5a      	ldr	r3, [pc, #360]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1f0      	bne.n	8001096 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0308 	and.w	r3, r3, #8
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d03c      	beq.n	800113a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d01c      	beq.n	8001102 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c8:	4b52      	ldr	r3, [pc, #328]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80010ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010ce:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80010d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb8e 	bl	80007f8 <HAL_GetTick>
 80010dc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80010de:	e008      	b.n	80010f2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fb8a 	bl	80007f8 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e254      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80010f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80010f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0ef      	beq.n	80010e0 <HAL_RCC_OscConfig+0x3a8>
 8001100:	e01b      	b.n	800113a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001108:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800110a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800110e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001112:	f7ff fb71 	bl	80007f8 <HAL_GetTick>
 8001116:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800111a:	f7ff fb6d 	bl	80007f8 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e237      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800112c:	4b39      	ldr	r3, [pc, #228]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800112e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1ef      	bne.n	800111a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 80d2 	beq.w	80012ec <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001148:	4b34      	ldr	r3, [pc, #208]	; (800121c <HAL_RCC_OscConfig+0x4e4>)
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b00      	cmp	r3, #0
 8001152:	d118      	bne.n	8001186 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <HAL_RCC_OscConfig+0x4e4>)
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	4a30      	ldr	r2, [pc, #192]	; (800121c <HAL_RCC_OscConfig+0x4e4>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001160:	f7ff fb4a 	bl	80007f8 <HAL_GetTick>
 8001164:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001168:	f7ff fb46 	bl	80007f8 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e210      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800117a:	4b28      	ldr	r3, [pc, #160]	; (800121c <HAL_RCC_OscConfig+0x4e4>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d108      	bne.n	80011a0 <HAL_RCC_OscConfig+0x468>
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800119e:	e074      	b.n	800128a <HAL_RCC_OscConfig+0x552>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d118      	bne.n	80011da <HAL_RCC_OscConfig+0x4a2>
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ae:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011d0:	f023 0304 	bic.w	r3, r3, #4
 80011d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011d8:	e057      	b.n	800128a <HAL_RCC_OscConfig+0x552>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b05      	cmp	r3, #5
 80011e0:	d11e      	bne.n	8001220 <HAL_RCC_OscConfig+0x4e8>
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011e8:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80011f2:	4b08      	ldr	r3, [pc, #32]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 80011fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 8001204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001208:	4a02      	ldr	r2, [pc, #8]	; (8001214 <HAL_RCC_OscConfig+0x4dc>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001212:	e03a      	b.n	800128a <HAL_RCC_OscConfig+0x552>
 8001214:	44020c00 	.word	0x44020c00
 8001218:	20000004 	.word	0x20000004
 800121c:	44020800 	.word	0x44020800
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	2b85      	cmp	r3, #133	; 0x85
 8001226:	d118      	bne.n	800125a <HAL_RCC_OscConfig+0x522>
 8001228:	4ba2      	ldr	r3, [pc, #648]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800122a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800122e:	4aa1      	ldr	r2, [pc, #644]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001238:	4b9e      	ldr	r3, [pc, #632]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800123a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800123e:	4a9d      	ldr	r2, [pc, #628]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001248:	4b9a      	ldr	r3, [pc, #616]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800124a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800124e:	4a99      	ldr	r2, [pc, #612]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001258:	e017      	b.n	800128a <HAL_RCC_OscConfig+0x552>
 800125a:	4b96      	ldr	r3, [pc, #600]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800125c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001260:	4a94      	ldr	r2, [pc, #592]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800126a:	4b92      	ldr	r3, [pc, #584]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800126c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001270:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001272:	f023 0304 	bic.w	r3, r3, #4
 8001276:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800127a:	4b8e      	ldr	r3, [pc, #568]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800127c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001280:	4a8c      	ldr	r2, [pc, #560]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d016      	beq.n	80012c0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001292:	f7ff fab1 	bl	80007f8 <HAL_GetTick>
 8001296:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001298:	e00a      	b.n	80012b0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff faad 	bl	80007f8 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e175      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80012b0:	4b80      	ldr	r3, [pc, #512]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 80012b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ed      	beq.n	800129a <HAL_RCC_OscConfig+0x562>
 80012be:	e015      	b.n	80012ec <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c0:	f7ff fa9a 	bl	80007f8 <HAL_GetTick>
 80012c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fa96 	bl	80007f8 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e15e      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80012de:	4b75      	ldr	r3, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 80012e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ed      	bne.n	80012c8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d036      	beq.n	8001366 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d019      	beq.n	8001334 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001300:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a6b      	ldr	r2, [pc, #428]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800130a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130c:	f7ff fa74 	bl	80007f8 <HAL_GetTick>
 8001310:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001314:	f7ff fa70 	bl	80007f8 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e13a      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001326:	4b63      	ldr	r3, [pc, #396]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x5dc>
 8001332:	e018      	b.n	8001366 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001334:	4b5f      	ldr	r3, [pc, #380]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001340:	f7ff fa5a 	bl	80007f8 <HAL_GetTick>
 8001344:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001348:	f7ff fa56 	bl	80007f8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e120      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8115 	beq.w	800159a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b18      	cmp	r3, #24
 8001374:	f000 80af 	beq.w	80014d6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137c:	2b02      	cmp	r3, #2
 800137e:	f040 8086 	bne.w	800148e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001382:	4b4c      	ldr	r3, [pc, #304]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138e:	f7ff fa33 	bl	80007f8 <HAL_GetTick>
 8001392:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001396:	f7ff fa2f 	bl	80007f8 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0f9      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80013a8:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f0      	bne.n	8001396 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80013b4:	4b3f      	ldr	r3, [pc, #252]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 80013b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80013bc:	f023 0303 	bic.w	r3, r3, #3
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013c8:	0212      	lsls	r2, r2, #8
 80013ca:	430a      	orrs	r2, r1
 80013cc:	4939      	ldr	r1, [pc, #228]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	628b      	str	r3, [r1, #40]	; 0x28
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	3b01      	subs	r3, #1
 80013e2:	025b      	lsls	r3, r3, #9
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	431a      	orrs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	3b01      	subs	r3, #1
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001402:	492c      	ldr	r1, [pc, #176]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001404:	4313      	orrs	r3, r2
 8001406:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001408:	4b2a      	ldr	r3, [pc, #168]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	4a29      	ldr	r2, [pc, #164]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800140e:	f023 0310 	bic.w	r3, r3, #16
 8001412:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800141e:	4b25      	ldr	r3, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	4a24      	ldr	r2, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	f023 020c 	bic.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	491f      	ldr	r1, [pc, #124]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	f023 0220 	bic.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001448:	491a      	ldr	r1, [pc, #104]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800144a:	4313      	orrs	r3, r2
 800144c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001458:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001460:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f9c7 	bl	80007f8 <HAL_GetTick>
 800146a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800146e:	f7ff f9c3 	bl	80007f8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e08d      	b.n	800159c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x736>
 800148c:	e085      	b.n	800159a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800148e:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a08      	ldr	r2, [pc, #32]	; (80014b4 <HAL_RCC_OscConfig+0x77c>)
 8001494:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149a:	f7ff f9ad 	bl	80007f8 <HAL_GetTick>
 800149e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80014a0:	e00a      	b.n	80014b8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80014a2:	f7ff f9a9 	bl	80007f8 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d903      	bls.n	80014b8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e073      	b.n	800159c <HAL_RCC_OscConfig+0x864>
 80014b4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80014b8:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1ee      	bne.n	80014a2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80014c4:	4b37      	ldr	r3, [pc, #220]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	4a36      	ldr	r2, [pc, #216]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 80014ca:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80014ce:	f023 0303 	bic.w	r3, r3, #3
 80014d2:	6293      	str	r3, [r2, #40]	; 0x28
 80014d4:	e061      	b.n	800159a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80014d6:	4b33      	ldr	r3, [pc, #204]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80014dc:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d031      	beq.n	800154e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d12a      	bne.n	800154e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d122      	bne.n	800154e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001512:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d11a      	bne.n	800154e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	0a5b      	lsrs	r3, r3, #9
 800151c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001524:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d111      	bne.n	800154e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	0c1b      	lsrs	r3, r3, #16
 800152e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001536:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d108      	bne.n	800154e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	0e1b      	lsrs	r3, r3, #24
 8001540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800154a:	429a      	cmp	r2, r3
 800154c:	d001      	beq.n	8001552 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e024      	b.n	800159c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001552:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001560:	429a      	cmp	r2, r3
 8001562:	d01a      	beq.n	800159a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 8001566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001568:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 800156a:	f023 0310 	bic.w	r3, r3, #16
 800156e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001570:	f7ff f942 	bl	80007f8 <HAL_GetTick>
 8001574:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001576:	bf00      	nop
 8001578:	f7ff f93e 	bl	80007f8 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4293      	cmp	r3, r2
 8001582:	d0f9      	beq.n	8001578 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a06      	ldr	r2, [pc, #24]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 8001590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_RCC_OscConfig+0x86c>)
 8001594:	f043 0310 	orr.w	r3, r3, #16
 8001598:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	44020c00 	.word	0x44020c00

080015a8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e19e      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b83      	ldr	r3, [pc, #524]	; (80017cc <HAL_RCC_ClockConfig+0x224>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 030f 	and.w	r3, r3, #15
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d910      	bls.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b80      	ldr	r3, [pc, #512]	; (80017cc <HAL_RCC_ClockConfig+0x224>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 020f 	bic.w	r2, r3, #15
 80015d2:	497e      	ldr	r1, [pc, #504]	; (80017cc <HAL_RCC_ClockConfig+0x224>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_RCC_ClockConfig+0x224>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e186      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d012      	beq.n	800161e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	695a      	ldr	r2, [r3, #20]
 80015fc:	4b74      	ldr	r3, [pc, #464]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001606:	429a      	cmp	r2, r3
 8001608:	d909      	bls.n	800161e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800160a:	4b71      	ldr	r3, [pc, #452]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	496d      	ldr	r1, [pc, #436]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800161a:	4313      	orrs	r3, r2
 800161c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d012      	beq.n	8001650 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691a      	ldr	r2, [r3, #16]
 800162e:	4b68      	ldr	r3, [pc, #416]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001638:	429a      	cmp	r2, r3
 800163a:	d909      	bls.n	8001650 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800163c:	4b64      	ldr	r3, [pc, #400]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	4961      	ldr	r1, [pc, #388]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800164c:	4313      	orrs	r3, r2
 800164e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d010      	beq.n	800167e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68da      	ldr	r2, [r3, #12]
 8001660:	4b5b      	ldr	r3, [pc, #364]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001668:	429a      	cmp	r2, r3
 800166a:	d908      	bls.n	800167e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800166c:	4b58      	ldr	r3, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4955      	ldr	r1, [pc, #340]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800167a:	4313      	orrs	r3, r2
 800167c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d010      	beq.n	80016ac <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	429a      	cmp	r2, r3
 8001698:	d908      	bls.n	80016ac <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800169a:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	f023 020f 	bic.w	r2, r3, #15
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	494a      	ldr	r1, [pc, #296]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8093 	beq.w	80017e0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d107      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80016c2:	4b43      	ldr	r3, [pc, #268]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d121      	bne.n	8001712 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e113      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d107      	bne.n	80016ea <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016da:	4b3d      	ldr	r3, [pc, #244]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d115      	bne.n	8001712 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e107      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d109      	bne.n	8001712 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e0fb      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001702:	4b33      	ldr	r3, [pc, #204]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0f3      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001712:	4b2f      	ldr	r3, [pc, #188]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f023 0203 	bic.w	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	492c      	ldr	r1, [pc, #176]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 8001720:	4313      	orrs	r3, r2
 8001722:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001724:	f7ff f868 	bl	80007f8 <HAL_GetTick>
 8001728:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d112      	bne.n	8001758 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001732:	e00a      	b.n	800174a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001734:	f7ff f860 	bl	80007f8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001742:	4293      	cmp	r3, r2
 8001744:	d901      	bls.n	800174a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e0d7      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0318 	and.w	r3, r3, #24
 8001752:	2b18      	cmp	r3, #24
 8001754:	d1ee      	bne.n	8001734 <HAL_RCC_ClockConfig+0x18c>
 8001756:	e043      	b.n	80017e0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d112      	bne.n	8001786 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001760:	e00a      	b.n	8001778 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001762:	f7ff f849 	bl	80007f8 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e0c0      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f003 0318 	and.w	r3, r3, #24
 8001780:	2b10      	cmp	r3, #16
 8001782:	d1ee      	bne.n	8001762 <HAL_RCC_ClockConfig+0x1ba>
 8001784:	e02c      	b.n	80017e0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d122      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7ff f832 	bl	80007f8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0a9      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_RCC_ClockConfig+0x228>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0318 	and.w	r3, r3, #24
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d1ee      	bne.n	8001790 <HAL_RCC_ClockConfig+0x1e8>
 80017b2:	e015      	b.n	80017e0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f820 	bl	80007f8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d906      	bls.n	80017d4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e097      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
 80017ca:	bf00      	nop
 80017cc:	40022000 	.word	0x40022000
 80017d0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d4:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	f003 0318 	and.w	r3, r3, #24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e9      	bne.n	80017b4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d010      	beq.n	800180e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d208      	bcs.n	800180e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80017fc:	4b41      	ldr	r3, [pc, #260]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f023 020f 	bic.w	r2, r3, #15
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	493e      	ldr	r1, [pc, #248]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180e:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_ClockConfig+0x360>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d210      	bcs.n	800183e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181c:	4b3a      	ldr	r3, [pc, #232]	; (8001908 <HAL_RCC_ClockConfig+0x360>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 020f 	bic.w	r2, r3, #15
 8001824:	4938      	ldr	r1, [pc, #224]	; (8001908 <HAL_RCC_ClockConfig+0x360>)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182c:	4b36      	ldr	r3, [pc, #216]	; (8001908 <HAL_RCC_ClockConfig+0x360>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e05d      	b.n	80018fa <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001856:	429a      	cmp	r2, r3
 8001858:	d208      	bcs.n	800186c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	4927      	ldr	r1, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001886:	429a      	cmp	r2, r3
 8001888:	d209      	bcs.n	800189e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800188a:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	491a      	ldr	r1, [pc, #104]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d012      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695a      	ldr	r2, [r3, #20]
 80018ae:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d209      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	490e      	ldr	r1, [pc, #56]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80018d0:	f000 f822 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <HAL_RCC_ClockConfig+0x35c>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	490b      	ldr	r1, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x364>)
 80018e0:	5ccb      	ldrb	r3, [r1, r3]
 80018e2:	fa22 f303 	lsr.w	r3, r2, r3
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <HAL_RCC_ClockConfig+0x368>)
 80018e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x36c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe fe0c 	bl	800050c <HAL_InitTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80018f8:	7afb      	ldrb	r3, [r7, #11]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	44020c00 	.word	0x44020c00
 8001908:	40022000 	.word	0x40022000
 800190c:	08004774 	.word	0x08004774
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b089      	sub	sp, #36	; 0x24
 800191c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800191e:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0318 	and.w	r3, r3, #24
 8001926:	2b08      	cmp	r3, #8
 8001928:	d102      	bne.n	8001930 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800192a:	4b8a      	ldr	r3, [pc, #552]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x23c>)
 800192c:	61fb      	str	r3, [r7, #28]
 800192e:	e107      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001930:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	f003 0318 	and.w	r3, r3, #24
 8001938:	2b00      	cmp	r3, #0
 800193a:	d112      	bne.n	8001962 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800193c:	4b84      	ldr	r3, [pc, #528]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b00      	cmp	r3, #0
 8001946:	d009      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001948:	4b81      	ldr	r3, [pc, #516]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	08db      	lsrs	r3, r3, #3
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	4a81      	ldr	r2, [pc, #516]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x240>)
 8001954:	fa22 f303 	lsr.w	r3, r2, r3
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e0f1      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 800195c:	4b7e      	ldr	r3, [pc, #504]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x240>)
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	e0ee      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001962:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 0318 	and.w	r3, r3, #24
 800196a:	2b10      	cmp	r3, #16
 800196c:	d102      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800196e:	4b7b      	ldr	r3, [pc, #492]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x244>)
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e0e5      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b76      	ldr	r3, [pc, #472]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	f003 0318 	and.w	r3, r3, #24
 800197c:	2b18      	cmp	r3, #24
 800197e:	f040 80dd 	bne.w	8001b3c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001982:	4b73      	ldr	r3, [pc, #460]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800198c:	4b70      	ldr	r3, [pc, #448]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001996:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001998:	4b6d      	ldr	r3, [pc, #436]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 800199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 80019a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019bc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 80b7 	beq.w	8001b36 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_GetSysClockFreq+0xbe>
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	2b03      	cmp	r3, #3
 80019d2:	d056      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x16a>
 80019d4:	e077      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80019d6:	4b5e      	ldr	r3, [pc, #376]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d02d      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80019e2:	4b5b      	ldr	r3, [pc, #364]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	08db      	lsrs	r3, r3, #3
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x240>)
 80019ee:	fa22 f303 	lsr.w	r3, r2, r3
 80019f2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a0c:	4b50      	ldr	r3, [pc, #320]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a14:	ee07 3a90 	vmov	s15, r3
 8001a18:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a1c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a20:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001b60 <HAL_RCC_GetSysClockFreq+0x248>
 8001a24:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a28:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a30:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001a3c:	e065      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a48:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x24c>
 8001a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a58:	ee07 3a90 	vmov	s15, r3
 8001a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a60:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a64:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001b60 <HAL_RCC_GetSysClockFreq+0x248>
 8001a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001a80:	e043      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001b68 <HAL_RCC_GetSysClockFreq+0x250>
 8001a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001aa4:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aa8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001b60 <HAL_RCC_GetSysClockFreq+0x248>
 8001aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001ac4:	e021      	b.n	8001b0a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad0:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001b6c <HAL_RCC_GetSysClockFreq+0x254>
 8001ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ae8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aec:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001b60 <HAL_RCC_GetSysClockFreq+0x248>
 8001af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b04:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001b08:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_RCC_GetSysClockFreq+0x238>)
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	0a5b      	lsrs	r3, r3, #9
 8001b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b14:	3301      	adds	r3, #1
 8001b16:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b22:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b2e:	ee17 3a90 	vmov	r3, s15
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	e004      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e001      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x240>)
 8001b3e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001b40:	69fb      	ldr	r3, [r7, #28]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	; 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	44020c00 	.word	0x44020c00
 8001b54:	003d0900 	.word	0x003d0900
 8001b58:	03d09000 	.word	0x03d09000
 8001b5c:	017d7840 	.word	0x017d7840
 8001b60:	46000000 	.word	0x46000000
 8001b64:	4c742400 	.word	0x4c742400
 8001b68:	4bbebc20 	.word	0x4bbebc20
 8001b6c:	4a742400 	.word	0x4a742400

08001b70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001b74:	f7ff fed0 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001b7e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001b82:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <HAL_RCC_GetHCLKFreq+0x30>)
 8001b84:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001b86:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x34>)
 8001b90:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_RCC_GetHCLKFreq+0x34>)
 8001b94:	681b      	ldr	r3, [r3, #0]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	44020c00 	.word	0x44020c00
 8001ba0:	08004774 	.word	0x08004774
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bbe:	5ccb      	ldrb	r3, [r1, r3]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	44020c00 	.word	0x44020c00
 8001bd0:	08004784 	.word	0x08004784

08001bd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t *pFLatency)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	221f      	movs	r2, #31
 8001be2:	601a      	str	r2, [r3, #0]
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_GetClockConfig+0x68>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_GetClockConfig+0x68>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	60fb      	str	r3, [r7, #12]
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f003 020f 	and.w	r2, r3, #15
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	0a1b      	lsrs	r3, r3, #8
 8001c1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c22:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <HAL_RCC_GetClockConfig+0x6c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 020f 	and.w	r2, r3, #15
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	601a      	str	r2, [r3, #0]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	44020c00 	.word	0x44020c00
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e049      	b.n	8001cea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f841 	bl	8001cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3304      	adds	r3, #4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f000 fa60 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e07c      	b.n	8001e1a <HAL_TIM_Base_Start_IT+0x112>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <HAL_TIM_Base_Start_IT+0x120>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04a      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a39      	ldr	r2, [pc, #228]	; (8001e2c <HAL_TIM_Base_Start_IT+0x124>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d045      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d54:	d040      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d5e:	d03b      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a32      	ldr	r2, [pc, #200]	; (8001e30 <HAL_TIM_Base_Start_IT+0x128>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d036      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a31      	ldr	r2, [pc, #196]	; (8001e34 <HAL_TIM_Base_Start_IT+0x12c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d031      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <HAL_TIM_Base_Start_IT+0x130>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02c      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_TIM_Base_Start_IT+0x134>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d027      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2c      	ldr	r2, [pc, #176]	; (8001e40 <HAL_TIM_Base_Start_IT+0x138>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d022      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2b      	ldr	r2, [pc, #172]	; (8001e44 <HAL_TIM_Base_Start_IT+0x13c>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a29      	ldr	r2, [pc, #164]	; (8001e48 <HAL_TIM_Base_Start_IT+0x140>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d018      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_TIM_Base_Start_IT+0x144>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a26      	ldr	r2, [pc, #152]	; (8001e50 <HAL_TIM_Base_Start_IT+0x148>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a25      	ldr	r2, [pc, #148]	; (8001e54 <HAL_TIM_Base_Start_IT+0x14c>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a23      	ldr	r2, [pc, #140]	; (8001e58 <HAL_TIM_Base_Start_IT+0x150>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xd0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a22      	ldr	r2, [pc, #136]	; (8001e5c <HAL_TIM_Base_Start_IT+0x154>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d115      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0xfc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_TIM_Base_Start_IT+0x158>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d015      	beq.n	8001e16 <HAL_TIM_Base_Start_IT+0x10e>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df0:	d011      	beq.n	8001e16 <HAL_TIM_Base_Start_IT+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e008      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e000      	b.n	8001e18 <HAL_TIM_Base_Start_IT+0x110>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	50012c00 	.word	0x50012c00
 8001e30:	40000400 	.word	0x40000400
 8001e34:	50000400 	.word	0x50000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	50000800 	.word	0x50000800
 8001e40:	40000c00 	.word	0x40000c00
 8001e44:	50000c00 	.word	0x50000c00
 8001e48:	40013400 	.word	0x40013400
 8001e4c:	50013400 	.word	0x50013400
 8001e50:	40001800 	.word	0x40001800
 8001e54:	50001800 	.word	0x50001800
 8001e58:	40014000 	.word	0x40014000
 8001e5c:	50014000 	.word	0x50014000
 8001e60:	00010007 	.word	0x00010007

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d020      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01b      	beq.n	8001ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0202 	mvn.w	r2, #2
 8001e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f92c 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001eb4:	e005      	b.n	8001ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f91e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f92f 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0204 	mvn.w	r2, #4
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f906 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8f8 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f909 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0308 	and.w	r3, r3, #8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0208 	mvn.w	r2, #8
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2204      	movs	r2, #4
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8e0 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8d2 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8e3 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0210 	mvn.w	r2, #16
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2208      	movs	r2, #8
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8ba 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8ac 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8bd 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00c      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d007      	beq.n	8001fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0201 	mvn.w	r2, #1
 8001fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7fe fa76 	bl	80004bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d007      	beq.n	8001ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f9d2 	bl	8002398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f9ca 	bl	80023ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f87c 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0220 	mvn.w	r2, #32
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f992 	bl	8002384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x220>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x220>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f99e 	bl	80023c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x244>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x244>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f996 	bl	80023d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x268>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x268>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f98e 	bl	80023e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x28c>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x28c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f986 	bl	80023fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a74      	ldr	r2, [pc, #464]	; (800232c <TIM_Base_SetConfig+0x1e4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d02b      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a73      	ldr	r2, [pc, #460]	; (8002330 <TIM_Base_SetConfig+0x1e8>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d027      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216e:	d023      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002176:	d01f      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <TIM_Base_SetConfig+0x1ec>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d01b      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a6d      	ldr	r2, [pc, #436]	; (8002338 <TIM_Base_SetConfig+0x1f0>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d017      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a6c      	ldr	r2, [pc, #432]	; (800233c <TIM_Base_SetConfig+0x1f4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a6b      	ldr	r2, [pc, #428]	; (8002340 <TIM_Base_SetConfig+0x1f8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <TIM_Base_SetConfig+0x1fc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <TIM_Base_SetConfig+0x200>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a68      	ldr	r2, [pc, #416]	; (800234c <TIM_Base_SetConfig+0x204>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x70>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a67      	ldr	r2, [pc, #412]	; (8002350 <TIM_Base_SetConfig+0x208>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a57      	ldr	r2, [pc, #348]	; (800232c <TIM_Base_SetConfig+0x1e4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d05b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a56      	ldr	r2, [pc, #344]	; (8002330 <TIM_Base_SetConfig+0x1e8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d057      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d053      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e8:	d04f      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <TIM_Base_SetConfig+0x1ec>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d04b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <TIM_Base_SetConfig+0x1f0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d047      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <TIM_Base_SetConfig+0x1f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d043      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <TIM_Base_SetConfig+0x1f8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d03f      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <TIM_Base_SetConfig+0x1fc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d03b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <TIM_Base_SetConfig+0x200>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d037      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a4b      	ldr	r2, [pc, #300]	; (800234c <TIM_Base_SetConfig+0x204>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d033      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <TIM_Base_SetConfig+0x208>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d02f      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <TIM_Base_SetConfig+0x20c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a48      	ldr	r2, [pc, #288]	; (8002358 <TIM_Base_SetConfig+0x210>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d027      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a47      	ldr	r2, [pc, #284]	; (800235c <TIM_Base_SetConfig+0x214>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d023      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a46      	ldr	r2, [pc, #280]	; (8002360 <TIM_Base_SetConfig+0x218>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d01f      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a45      	ldr	r2, [pc, #276]	; (8002364 <TIM_Base_SetConfig+0x21c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a44      	ldr	r2, [pc, #272]	; (8002368 <TIM_Base_SetConfig+0x220>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d017      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a43      	ldr	r2, [pc, #268]	; (800236c <TIM_Base_SetConfig+0x224>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a42      	ldr	r2, [pc, #264]	; (8002370 <TIM_Base_SetConfig+0x228>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d00f      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a41      	ldr	r2, [pc, #260]	; (8002374 <TIM_Base_SetConfig+0x22c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00b      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a40      	ldr	r2, [pc, #256]	; (8002378 <TIM_Base_SetConfig+0x230>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a3f      	ldr	r2, [pc, #252]	; (800237c <TIM_Base_SetConfig+0x234>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_Base_SetConfig+0x142>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a3e      	ldr	r2, [pc, #248]	; (8002380 <TIM_Base_SetConfig+0x238>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d108      	bne.n	800229c <TIM_Base_SetConfig+0x154>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1a      	ldr	r2, [pc, #104]	; (800232c <TIM_Base_SetConfig+0x1e4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d023      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <TIM_Base_SetConfig+0x1e8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d01f      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a1e      	ldr	r2, [pc, #120]	; (800234c <TIM_Base_SetConfig+0x204>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01b      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <TIM_Base_SetConfig+0x208>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d017      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a22      	ldr	r2, [pc, #136]	; (800236c <TIM_Base_SetConfig+0x224>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d013      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <TIM_Base_SetConfig+0x228>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00f      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a20      	ldr	r2, [pc, #128]	; (8002374 <TIM_Base_SetConfig+0x22c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a1f      	ldr	r2, [pc, #124]	; (8002378 <TIM_Base_SetConfig+0x230>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a1e      	ldr	r2, [pc, #120]	; (800237c <TIM_Base_SetConfig+0x234>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0x1c8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <TIM_Base_SetConfig+0x238>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d103      	bne.n	8002318 <TIM_Base_SetConfig+0x1d0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	615a      	str	r2, [r3, #20]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00
 8002330:	50012c00 	.word	0x50012c00
 8002334:	40000400 	.word	0x40000400
 8002338:	50000400 	.word	0x50000400
 800233c:	40000800 	.word	0x40000800
 8002340:	50000800 	.word	0x50000800
 8002344:	40000c00 	.word	0x40000c00
 8002348:	50000c00 	.word	0x50000c00
 800234c:	40013400 	.word	0x40013400
 8002350:	50013400 	.word	0x50013400
 8002354:	40001800 	.word	0x40001800
 8002358:	50001800 	.word	0x50001800
 800235c:	40001c00 	.word	0x40001c00
 8002360:	50001c00 	.word	0x50001c00
 8002364:	40002000 	.word	0x40002000
 8002368:	50002000 	.word	0x50002000
 800236c:	40014000 	.word	0x40014000
 8002370:	50014000 	.word	0x50014000
 8002374:	40014400 	.word	0x40014400
 8002378:	50014400 	.word	0x50014400
 800237c:	40014800 	.word	0x40014800
 8002380:	50014800 	.word	0x50014800

08002384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <__NVIC_SetPriority>:
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	; (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	; (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
#if (configUSE_TICKLESS_IDLE == 0)
  /* Clear overflow flag */
  SysTick->CTRL;
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <SysTick_Handler+0x1c>)
 800246a:	681b      	ldr	r3, [r3, #0]
#endif

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800246c:	f001 fb8c 	bl	8003b88 <xTaskGetSchedulerState>
 8002470:	4603      	mov	r3, r0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d001      	beq.n	800247a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002476:	f001 ff2f 	bl	80042d8 <xPortSysTickHandler>
  }
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000e010 	.word	0xe000e010

08002484 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start      */
  /* and when its priority is lower or equal to BASEPRI, svc instruction */
  /* causes a Hard Fault.                                                */
  NVIC_SetPriority (SVCall_IRQn, 0U);
 8002488:	2100      	movs	r1, #0
 800248a:	f06f 0004 	mvn.w	r0, #4
 800248e:	f7ff ffbf 	bl	8002410 <__NVIC_SetPriority>
#endif
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}

08002496 <IRQ_Context>:
#endif

/*
  Determine if CPU executes from interrupt context or if interrupts are masked.
*/
__STATIC_INLINE uint32_t IRQ_Context (void) {
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
  uint32_t irq;
  BaseType_t state;

  irq = 0U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024a0:	f3ef 8305 	mrs	r3, IPSR
 80024a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80024a6:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ_MODE()) {
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <IRQ_Context+0x1c>
    /* Called from interrupt context */
    irq = 1U;
 80024ac:	2301      	movs	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	e013      	b.n	80024da <IRQ_Context+0x44>
  }
  else {
    /* Get FreeRTOS scheduler state */
    state = xTaskGetSchedulerState();
 80024b2:	f001 fb69 	bl	8003b88 <xTaskGetSchedulerState>
 80024b6:	6138      	str	r0, [r7, #16]

    if (state != taskSCHEDULER_NOT_STARTED) {
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d00d      	beq.n	80024da <IRQ_Context+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024be:	f3ef 8310 	mrs	r3, PRIMASK
 80024c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80024c4:	68bb      	ldr	r3, [r7, #8]
      /* Scheduler was started */
      if (IS_IRQ_MASKED()) {
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d105      	bne.n	80024d6 <IRQ_Context+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ca:	f3ef 8311 	mrs	r3, BASEPRI
 80024ce:	607b      	str	r3, [r7, #4]
  return(result);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <IRQ_Context+0x44>
        /* Interrupts are masked */
        irq = 1U;
 80024d6:	2301      	movs	r3, #1
 80024d8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return context, 0: thread context, 1: IRQ context */
  return (irq);
 80024da:	697b      	ldr	r3, [r7, #20]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <osKernelInitialize>:
/* ==== Kernel Management Functions ==== */

/*
  Initialize the RTOS Kernel.
*/
osStatus_t osKernelInitialize (void) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 80024ea:	f7ff ffd4 	bl	8002496 <IRQ_Context>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <osKernelInitialize+0x18>
    stat = osErrorISR;
 80024f4:	f06f 0305 	mvn.w	r3, #5
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	e012      	b.n	8002522 <osKernelInitialize+0x3e>
  }
  else {
    state = xTaskGetSchedulerState();
 80024fc:	f001 fb44 	bl	8003b88 <xTaskGetSchedulerState>
 8002500:	6038      	str	r0, [r7, #0]

    /* Initialize if scheduler not started and not initialized before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelInactive)) {
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d109      	bne.n	800251c <osKernelInitialize+0x38>
 8002508:	4b08      	ldr	r3, [pc, #32]	; (800252c <osKernelInitialize+0x48>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d105      	bne.n	800251c <osKernelInitialize+0x38>
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        /* Initialize the memory regions when using heap_5 variant */
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <osKernelInitialize+0x48>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002516:	2300      	movs	r3, #0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	e002      	b.n	8002522 <osKernelInitialize+0x3e>
    } else {
      stat = osError;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002520:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8002522:	687b      	ldr	r3, [r7, #4]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20000088 	.word	0x20000088

08002530 <osKernelStart>:
}

/*
  Start the RTOS Kernel scheduler.
*/
osStatus_t osKernelStart (void) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
  osStatus_t stat;
  BaseType_t state;

  if (IRQ_Context() != 0U) {
 8002536:	f7ff ffae 	bl	8002496 <IRQ_Context>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <osKernelStart+0x18>
    stat = osErrorISR;
 8002540:	f06f 0305 	mvn.w	r3, #5
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e016      	b.n	8002576 <osKernelStart+0x46>
  }
  else {
    state = xTaskGetSchedulerState();
 8002548:	f001 fb1e 	bl	8003b88 <xTaskGetSchedulerState>
 800254c:	6038      	str	r0, [r7, #0]

    /* Start scheduler if initialized and not started before */
    if ((state == taskSCHEDULER_NOT_STARTED) && (KernelState == osKernelReady)) {
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <osKernelStart+0x40>
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <osKernelStart+0x50>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d109      	bne.n	8002570 <osKernelStart+0x40>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800255c:	f7ff ff92 	bl	8002484 <SVC_Setup>
      /* Change state to ensure correct API flow */
      KernelState = osKernelRunning;
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <osKernelStart+0x50>)
 8002562:	2202      	movs	r2, #2
 8002564:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002566:	f000 fde5 	bl	8003134 <vTaskStartScheduler>
      stat = osOK;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	e002      	b.n	8002576 <osKernelStart+0x46>
    } else {
      stat = osError;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002574:	607b      	str	r3, [r7, #4]
    }
  }

  /* Return execution status */
  return (stat);
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000088 	.word	0x20000088

08002584 <osThreadNew>:
  Limitations:
  - The memory for control block and stack must be provided in the osThreadAttr_t
    structure in order to allocate object statically.
  - Attribute osThreadJoinable is not supported, NULL is returned if used.
*/
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b08e      	sub	sp, #56	; 0x38
 8002588:	af04      	add	r7, sp, #16
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  if ((IRQ_Context() == 0U) && (func != NULL)) {
 8002594:	f7ff ff7f 	bl	8002496 <IRQ_Context>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d17e      	bne.n	800269c <osThreadNew+0x118>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d07b      	beq.n	800269c <osThreadNew+0x118>
    stack = configMINIMAL_STACK_SIZE;
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80025a8:	2318      	movs	r3, #24
 80025aa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80025b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d045      	beq.n	8002648 <osThreadNew+0xc4>
      if (attr->name != NULL) {
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <osThreadNew+0x46>
        name = attr->name;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <osThreadNew+0x54>
        prio = (UBaseType_t)attr->priority;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <osThreadNew+0x6c>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	2b38      	cmp	r3, #56	; 0x38
 80025e2:	d805      	bhi.n	80025f0 <osThreadNew+0x6c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <osThreadNew+0x70>
        /* Invalid priority or unsupported osThreadJoinable attribute used */
        return (NULL);
 80025f0:	2300      	movs	r3, #0
 80025f2:	e054      	b.n	800269e <osThreadNew+0x11a>
      }

      if (attr->stack_size > 0U) {
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <osThreadNew+0x80>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00e      	beq.n	800262a <osThreadNew+0xa6>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b5b      	cmp	r3, #91	; 0x5b
 8002612:	d90a      	bls.n	800262a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002618:	2b00      	cmp	r3, #0
 800261a:	d006      	beq.n	800262a <osThreadNew+0xa6>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <osThreadNew+0xa6>
        /* The memory for control block and stack is provided, use static object */
        mem = 1;
 8002624:	2301      	movs	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e010      	b.n	800264c <osThreadNew+0xc8>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10c      	bne.n	800264c <osThreadNew+0xc8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d108      	bne.n	800264c <osThreadNew+0xc8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d104      	bne.n	800264c <osThreadNew+0xc8>
          /* Control block and stack memory will be allocated from the dynamic pool */
          mem = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	e001      	b.n	800264c <osThreadNew+0xc8>
        }
      }
    }
    else {
      mem = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d110      	bne.n	8002674 <osThreadNew+0xf0>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800265a:	9202      	str	r2, [sp, #8]
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb9b 	bl	8002da4 <xTaskCreateStatic>
 800266e:	4603      	mov	r3, r0
 8002670:	617b      	str	r3, [r7, #20]
 8002672:	e013      	b.n	800269c <osThreadNew+0x118>
      #endif
    }
    else {
      if (mem == 0) {
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d110      	bne.n	800269c <osThreadNew+0x118>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (configSTACK_DEPTH_TYPE)stack, argument, prio, &hTask) != pdPASS) {
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	b29a      	uxth	r2, r3
 800267e:	f107 0314 	add.w	r3, r7, #20
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f000 fbd3 	bl	8002e38 <xTaskCreate>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <osThreadNew+0x118>
            hTask = NULL;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return thread ID */
  return ((osThreadId_t)hTask);
 800269c:	697b      	ldr	r3, [r7, #20]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <osDelay>:
/* ==== Generic Wait Functions ==== */

/*
  Wait for Timeout (Time Delay).
*/
osStatus_t osDelay (uint32_t ticks) {
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  osStatus_t stat;

  if (IRQ_Context() != 0U) {
 80026ae:	f7ff fef2 	bl	8002496 <IRQ_Context>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <osDelay+0x1a>
    stat = osErrorISR;
 80026b8:	f06f 0305 	mvn.w	r3, #5
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e007      	b.n	80026d0 <osDelay+0x2a>
  }
  else {
    stat = osOK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <osDelay+0x2a>
      vTaskDelay(ticks);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fd0e 	bl	80030ec <vTaskDelay>
    }
  }

  /* Return execution status */
  return (stat);
 80026d0:	68fb      	ldr	r3, [r7, #12]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <vApplicationGetIdleTaskMemory>:
#if (configSUPPORT_STATIC_ALLOCATION == 1)
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4a07      	ldr	r2, [pc, #28]	; (8002708 <vApplicationGetIdleTaskMemory+0x2c>)
 80026ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	4a06      	ldr	r2, [pc, #24]	; (800270c <vApplicationGetIdleTaskMemory+0x30>)
 80026f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	2000008c 	.word	0x2000008c
 800270c:	200000e8 	.word	0x200000e8

08002710 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <vApplicationGetTimerTaskMemory+0x2c>)
 8002720:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <vApplicationGetTimerTaskMemory+0x30>)
 8002726:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	601a      	str	r2, [r3, #0]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	200002e8 	.word	0x200002e8
 8002740:	20000344 	.word	0x20000344

08002744 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f103 0208 	add.w	r2, r3, #8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800275c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f103 0208 	add.w	r2, r3, #8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f103 0208 	add.w	r2, r3, #8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027b4:	d103      	bne.n	80027be <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e00c      	b.n	80027d8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3308      	adds	r3, #8
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	e002      	b.n	80027cc <vListInsert+0x2e>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68ba      	ldr	r2, [r7, #8]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d2f6      	bcs.n	80027c6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	601a      	str	r2, [r3, #0]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6852      	ldr	r2, [r2, #4]
 8002830:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d103      	bne.n	8002844 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800286e:	2301      	movs	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <xQueueGenericReset+0x1e>
 800287c:	f001 fe3c 	bl	80044f8 <ulSetInterruptMask>
 8002880:	e7fe      	b.n	8002880 <xQueueGenericReset+0x1c>

    if( ( pxQueue != NULL ) &&
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d057      	beq.n	8002938 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d053      	beq.n	8002938 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	2100      	movs	r1, #0
 800289a:	fba3 2302 	umull	r2, r3, r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d000      	beq.n	80028a4 <xQueueGenericReset+0x40>
 80028a2:	2101      	movs	r1, #1
 80028a4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d146      	bne.n	8002938 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80028aa:	f001 fce9 	bl	8004280 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b6:	68b9      	ldr	r1, [r7, #8]
 80028b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	441a      	add	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	3b01      	subs	r3, #1
 80028dc:	68b9      	ldr	r1, [r7, #8]
 80028de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	441a      	add	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	22ff      	movs	r2, #255	; 0xff
 80028ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	22ff      	movs	r2, #255	; 0xff
 80028f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10e      	bne.n	800291e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	3310      	adds	r3, #16
 800290c:	4618      	mov	r0, r3
 800290e:	f000 ff33 	bl	8003778 <xTaskRemoveFromEventList>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00c      	beq.n	8002932 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002918:	f001 fca0 	bl	800425c <vPortYield>
 800291c:	e009      	b.n	8002932 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3310      	adds	r3, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff0e 	bl	8002744 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	3324      	adds	r3, #36	; 0x24
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff09 	bl	8002744 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002932:	f001 fcb7 	bl	80042a4 <vPortExitCritical>
 8002936:	e001      	b.n	800293c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8002938:	2300      	movs	r3, #0
 800293a:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <xQueueGenericReset+0xe4>
 8002942:	f001 fdd9 	bl	80044f8 <ulSetInterruptMask>
 8002946:	e7fe      	b.n	8002946 <xQueueGenericReset+0xe2>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002948:	68fb      	ldr	r3, [r7, #12]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002952:	b580      	push	{r7, lr}
 8002954:	b088      	sub	sp, #32
 8002956:	af02      	add	r7, sp, #8
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	617b      	str	r3, [r7, #20]

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d102      	bne.n	8002970 <xQueueGenericCreateStatic+0x1e>
 800296a:	f001 fdc5 	bl	80044f8 <ulSetInterruptMask>
 800296e:	e7fe      	b.n	800296e <xQueueGenericCreateStatic+0x1c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d028      	beq.n	80029c8 <xQueueGenericCreateStatic+0x76>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d025      	beq.n	80029c8 <xQueueGenericCreateStatic+0x76>
            ( pxStaticQueue != NULL ) &&
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <xQueueGenericCreateStatic+0x36>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) ) &&
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d01f      	beq.n	80029c8 <xQueueGenericCreateStatic+0x76>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d102      	bne.n	8002994 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) ) )
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d119      	bne.n	80029c8 <xQueueGenericCreateStatic+0x76>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002994:	2350      	movs	r3, #80	; 0x50
 8002996:	613b      	str	r3, [r7, #16]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b50      	cmp	r3, #80	; 0x50
 800299c:	d002      	beq.n	80029a4 <xQueueGenericCreateStatic+0x52>
 800299e:	f001 fdab 	bl	80044f8 <ulSetInterruptMask>
 80029a2:	e7fe      	b.n	80029a2 <xQueueGenericCreateStatic+0x50>
                ( void ) xSize;                             /* Keeps lint quiet when configASSERT() is not defined. */
 80029a4:	693b      	ldr	r3, [r7, #16]
            #endif /* configASSERT_DEFINED */

            /* The address of a statically allocated queue was passed in, use it.
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	4613      	mov	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f80c 	bl	80029de <prvInitialiseNewQueue>
 80029c6:	e005      	b.n	80029d4 <xQueueGenericCreateStatic+0x82>
        }
        else
        {
            configASSERT( pxNewQueue );
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <xQueueGenericCreateStatic+0x82>
 80029ce:	f001 fd93 	bl	80044f8 <ulSetInterruptMask>
 80029d2:	e7fe      	b.n	80029d2 <xQueueGenericCreateStatic+0x80>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029d4:	697b      	ldr	r3, [r7, #20]
    }
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d103      	bne.n	80029fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e002      	b.n	8002a00 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	69b8      	ldr	r0, [r7, #24]
 8002a10:	f7ff ff28 	bl	8002864 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a1c:	bf00      	nop
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	; 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <xQueueReceive+0x20>
 8002a3e:	f001 fd5b 	bl	80044f8 <ulSetInterruptMask>
 8002a42:	e7fe      	b.n	8002a42 <xQueueReceive+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <xQueueReceive+0x2e>
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <xQueueReceive+0x32>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueReceive+0x34>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d102      	bne.n	8002a62 <xQueueReceive+0x3e>
 8002a5c:	f001 fd4c 	bl	80044f8 <ulSetInterruptMask>
 8002a60:	e7fe      	b.n	8002a60 <xQueueReceive+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a62:	f001 f891 	bl	8003b88 <xTaskGetSchedulerState>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <xQueueReceive+0x4e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <xQueueReceive+0x52>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <xQueueReceive+0x54>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d102      	bne.n	8002a82 <xQueueReceive+0x5e>
 8002a7c:	f001 fd3c 	bl	80044f8 <ulSetInterruptMask>
 8002a80:	e7fe      	b.n	8002a80 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a82:	f001 fbfd 	bl	8004280 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8a:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <xQueueReceive+0xa2>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	6a38      	ldr	r0, [r7, #32]
 8002a96:	f000 f87e 	bl	8002b96 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	1e5a      	subs	r2, r3, #1
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d009      	beq.n	8002abe <xQueueReceive+0x9a>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	3310      	adds	r3, #16
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 fe62 	bl	8003778 <xTaskRemoveFromEventList>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <xQueueReceive+0x9a>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002aba:	f001 fbcf 	bl	800425c <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002abe:	f001 fbf1 	bl	80042a4 <vPortExitCritical>
                return pdPASS;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e063      	b.n	8002b8e <xQueueReceive+0x16a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <xQueueReceive+0xb0>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002acc:	f001 fbea 	bl	80042a4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e05c      	b.n	8002b8e <xQueueReceive+0x16a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <xQueueReceive+0xc4>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ada:	f107 0314 	add.w	r3, r7, #20
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 ff18 	bl	8003914 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ae8:	f001 fbdc 	bl	80042a4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002aec:	f000 fb7c 	bl	80031e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002af0:	f001 fbc6 	bl	8004280 <vPortEnterCritical>
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0xe6>
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b10:	b25b      	sxtb	r3, r3
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b16:	d103      	bne.n	8002b20 <xQueueReceive+0xfc>
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b20:	f001 fbc0 	bl	80042a4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b24:	1d3a      	adds	r2, r7, #4
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ff07 	bl	8003940 <xTaskCheckForTimeOut>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d11d      	bne.n	8002b74 <xQueueReceive+0x150>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b38:	6a38      	ldr	r0, [r7, #32]
 8002b3a:	f000 f8a4 	bl	8002c86 <prvIsQueueEmpty>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d011      	beq.n	8002b68 <xQueueReceive+0x144>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	3324      	adds	r3, #36	; 0x24
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fdb9 	bl	80036c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b52:	6a38      	ldr	r0, [r7, #32]
 8002b54:	f000 f845 	bl	8002be2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b58:	f000 fb54 	bl	8003204 <xTaskResumeAll>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d18f      	bne.n	8002a82 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8002b62:	f001 fb7b 	bl	800425c <vPortYield>
 8002b66:	e78c      	b.n	8002a82 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002b68:	6a38      	ldr	r0, [r7, #32]
 8002b6a:	f000 f83a 	bl	8002be2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b6e:	f000 fb49 	bl	8003204 <xTaskResumeAll>
 8002b72:	e786      	b.n	8002a82 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002b74:	6a38      	ldr	r0, [r7, #32]
 8002b76:	f000 f834 	bl	8002be2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002b7a:	f000 fb43 	bl	8003204 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b7e:	6a38      	ldr	r0, [r7, #32]
 8002b80:	f000 f881 	bl	8002c86 <prvIsQueueEmpty>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f43f af7b 	beq.w	8002a82 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002b8c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3728      	adds	r7, #40	; 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b082      	sub	sp, #8
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d018      	beq.n	8002bda <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d303      	bcc.n	8002bca <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68d9      	ldr	r1, [r3, #12]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	6838      	ldr	r0, [r7, #0]
 8002bd6:	f001 fd7b 	bl	80046d0 <memcpy>
    }
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b084      	sub	sp, #16
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002bea:	f001 fb49 	bl	8004280 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bf6:	e011      	b.n	8002c1c <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3324      	adds	r3, #36	; 0x24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fdb7 	bl	8003778 <xTaskRemoveFromEventList>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002c10:	f000 feec 	bl	80039ec <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	dce9      	bgt.n	8002bf8 <prvUnlockQueue+0x16>
 8002c24:	e000      	b.n	8002c28 <prvUnlockQueue+0x46>
                    break;
 8002c26:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002c30:	f001 fb38 	bl	80042a4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002c34:	f001 fb24 	bl	8004280 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c3e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c40:	e011      	b.n	8002c66 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fd92 	bl	8003778 <xTaskRemoveFromEventList>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c5a:	f000 fec7 	bl	80039ec <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	dce9      	bgt.n	8002c42 <prvUnlockQueue+0x60>
 8002c6e:	e000      	b.n	8002c72 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c70:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	22ff      	movs	r2, #255	; 0xff
 8002c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002c7a:	f001 fb13 	bl	80042a4 <vPortExitCritical>
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c8e:	f001 faf7 	bl	8004280 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d102      	bne.n	8002ca0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e001      	b.n	8002ca4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ca4:	f001 fafe 	bl	80042a4 <vPortExitCritical>

    return xReturn;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d102      	bne.n	8002cce <vQueueAddToRegistry+0x1a>
 8002cc8:	f001 fc16 	bl	80044f8 <ulSetInterruptMask>
 8002ccc:	e7fe      	b.n	8002ccc <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d024      	beq.n	8002d1e <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	e01e      	b.n	8002d18 <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <vQueueAddToRegistry+0x84>)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d105      	bne.n	8002cf6 <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4a12      	ldr	r2, [pc, #72]	; (8002d38 <vQueueAddToRegistry+0x84>)
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
                    break;
 8002cf4:	e013      	b.n	8002d1e <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10a      	bne.n	8002d12 <vQueueAddToRegistry+0x5e>
 8002cfc:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <vQueueAddToRegistry+0x84>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <vQueueAddToRegistry+0x84>)
 8002d0e:	4413      	add	r3, r2
 8002d10:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b07      	cmp	r3, #7
 8002d1c:	d9dd      	bls.n	8002cda <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000544 	.word	0x20000544

08002d3c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d4c:	f001 fa98 	bl	8004280 <vPortEnterCritical>
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d5c:	d103      	bne.n	8002d66 <vQueueWaitForMessageRestricted+0x2a>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6c:	b25b      	sxtb	r3, r3
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d72:	d103      	bne.n	8002d7c <vQueueWaitForMessageRestricted+0x40>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d7c:	f001 fa92 	bl	80042a4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3324      	adds	r3, #36	; 0x24
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fcb3 	bl	80036fc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d96:	6978      	ldr	r0, [r7, #20]
 8002d98:	f7ff ff23 	bl	8002be2 <prvUnlockQueue>
    }
 8002d9c:	bf00      	nop
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08c      	sub	sp, #48	; 0x30
 8002da8:	af04      	add	r7, sp, #16
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <xTaskCreateStatic+0x1a>
 8002db8:	f001 fb9e 	bl	80044f8 <ulSetInterruptMask>
 8002dbc:	e7fe      	b.n	8002dbc <xTaskCreateStatic+0x18>
        configASSERT( pxTaskBuffer != NULL );
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <xTaskCreateStatic+0x26>
 8002dc4:	f001 fb98 	bl	80044f8 <ulSetInterruptMask>
 8002dc8:	e7fe      	b.n	8002dc8 <xTaskCreateStatic+0x24>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002dca:	235c      	movs	r3, #92	; 0x5c
 8002dcc:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	2b5c      	cmp	r3, #92	; 0x5c
 8002dd2:	d002      	beq.n	8002dda <xTaskCreateStatic+0x36>
 8002dd4:	f001 fb90 	bl	80044f8 <ulSetInterruptMask>
 8002dd8:	e7fe      	b.n	8002dd8 <xTaskCreateStatic+0x34>
            ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dda:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d023      	beq.n	8002e2a <xTaskCreateStatic+0x86>
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <xTaskCreateStatic+0x86>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dea:	61fb      	str	r3, [r7, #28]
            memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002dec:	225c      	movs	r2, #92	; 0x5c
 8002dee:	2100      	movs	r1, #0
 8002df0:	69f8      	ldr	r0, [r7, #28]
 8002df2:	f001 fc41 	bl	8004678 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dfa:	631a      	str	r2, [r3, #48]	; 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002e04:	2300      	movs	r3, #0
 8002e06:	9303      	str	r3, [sp, #12]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	f107 0318 	add.w	r3, r7, #24
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f000 f855 	bl	8002ecc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e22:	69f8      	ldr	r0, [r7, #28]
 8002e24:	f000 f8d2 	bl	8002fcc <prvAddNewTaskToReadyList>
 8002e28:	e001      	b.n	8002e2e <xTaskCreateStatic+0x8a>
        }
        else
        {
            xReturn = NULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
    }
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	; 0x30
 8002e3c:	af04      	add	r7, sp, #16
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e48:	88fb      	ldrh	r3, [r7, #6]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f001 fbb3 	bl	80045b8 <pvPortMalloc>
 8002e52:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d013      	beq.n	8002e82 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e5a:	205c      	movs	r0, #92	; 0x5c
 8002e5c:	f001 fbac 	bl	80045b8 <pvPortMalloc>
 8002e60:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002e68:	225c      	movs	r2, #92	; 0x5c
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	69f8      	ldr	r0, [r7, #28]
 8002e6e:	f001 fc03 	bl	8004678 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
 8002e78:	e005      	b.n	8002e86 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f001 fbee 	bl	800465c <vPortFree>
 8002e80:	e001      	b.n	8002e86 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d017      	beq.n	8002ebc <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e94:	88fa      	ldrh	r2, [r7, #6]
 8002e96:	2300      	movs	r3, #0
 8002e98:	9303      	str	r3, [sp, #12]
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68b9      	ldr	r1, [r7, #8]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f80e 	bl	8002ecc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002eb0:	69f8      	ldr	r0, [r7, #28]
 8002eb2:	f000 f88b 	bl	8002fcc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e002      	b.n	8002ec2 <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
    }
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	21a5      	movs	r1, #165	; 0xa5
 8002ee6:	f001 fbc7 	bl	8004678 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f023 0307 	bic.w	r3, r3, #7
 8002f02:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <prvInitialiseNewTask+0x48>
 8002f0e:	f001 faf3 	bl	80044f8 <ulSetInterruptMask>
 8002f12:	e7fe      	b.n	8002f12 <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d01e      	beq.n	8002f58 <prvInitialiseNewTask+0x8c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	e012      	b.n	8002f46 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	4413      	add	r3, r2
 8002f26:	7819      	ldrb	r1, [r3, #0]
 8002f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3334      	adds	r3, #52	; 0x34
 8002f30:	460a      	mov	r2, r1
 8002f32:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	4413      	add	r3, r2
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d006      	beq.n	8002f4e <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d9e9      	bls.n	8002f20 <prvInitialiseNewTask+0x54>
 8002f4c:	e000      	b.n	8002f50 <prvInitialiseNewTask+0x84>
            {
                break;
 8002f4e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2b37      	cmp	r3, #55	; 0x37
 8002f5c:	d902      	bls.n	8002f64 <prvInitialiseNewTask+0x98>
 8002f5e:	f001 facb 	bl	80044f8 <ulSetInterruptMask>
 8002f62:	e7fe      	b.n	8002f62 <prvInitialiseNewTask+0x96>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b37      	cmp	r3, #55	; 0x37
 8002f68:	d901      	bls.n	8002f6e <prvInitialiseNewTask+0xa2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f6a:	2337      	movs	r3, #55	; 0x37
 8002f6c:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	6a3a      	ldr	r2, [r7, #32]
 8002f78:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fc00 	bl	8002784 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f86:	3318      	adds	r3, #24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fbfb 	bl	8002784 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f92:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	625a      	str	r2, [r3, #36]	; 0x24
         * function as well. */
        #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
        {
            #if ( portSTACK_GROWTH < 0 )
            {
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 8002fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6938      	ldr	r0, [r7, #16]
 8002fae:	f001 f9c3 	bl	8004338 <pxPortInitialiseStack>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <prvInitialiseNewTask+0xf8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fc2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fc4:	bf00      	nop
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002fd4:	f001 f954 	bl	8004280 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <prvAddNewTaskToReadyList+0x108>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	4a3d      	ldr	r2, [pc, #244]	; (80030d4 <prvAddNewTaskToReadyList+0x108>)
 8002fe0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	; (80030d8 <prvAddNewTaskToReadyList+0x10c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002fea:	4a3b      	ldr	r2, [pc, #236]	; (80030d8 <prvAddNewTaskToReadyList+0x10c>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ff0:	4b38      	ldr	r3, [pc, #224]	; (80030d4 <prvAddNewTaskToReadyList+0x108>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d110      	bne.n	800301a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ff8:	f000 fd14 	bl	8003a24 <prvInitialiseTaskLists>
 8002ffc:	e00d      	b.n	800301a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ffe:	4b37      	ldr	r3, [pc, #220]	; (80030dc <prvAddNewTaskToReadyList+0x110>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <prvAddNewTaskToReadyList+0x10c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	429a      	cmp	r2, r3
 8003012:	d802      	bhi.n	800301a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003014:	4a30      	ldr	r2, [pc, #192]	; (80030d8 <prvAddNewTaskToReadyList+0x10c>)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800301a:	4b31      	ldr	r3, [pc, #196]	; (80030e0 <prvAddNewTaskToReadyList+0x114>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	4a2f      	ldr	r2, [pc, #188]	; (80030e0 <prvAddNewTaskToReadyList+0x114>)
 8003022:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003024:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <prvAddNewTaskToReadyList+0x114>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <prvAddNewTaskToReadyList+0x118>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d903      	bls.n	8003040 <prvAddNewTaskToReadyList+0x74>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <prvAddNewTaskToReadyList+0x118>)
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003044:	4928      	ldr	r1, [pc, #160]	; (80030e8 <prvAddNewTaskToReadyList+0x11c>)
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3304      	adds	r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	3204      	adds	r2, #4
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4a19      	ldr	r2, [pc, #100]	; (80030e8 <prvAddNewTaskToReadyList+0x11c>)
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	615a      	str	r2, [r3, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	4916      	ldr	r1, [pc, #88]	; (80030e8 <prvAddNewTaskToReadyList+0x11c>)
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	1c59      	adds	r1, r3, #1
 800309e:	4812      	ldr	r0, [pc, #72]	; (80030e8 <prvAddNewTaskToReadyList+0x11c>)
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4403      	add	r3, r0
 80030aa:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80030ac:	f001 f8fa 	bl	80042a4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <prvAddNewTaskToReadyList+0x110>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <prvAddNewTaskToReadyList+0xfe>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <prvAddNewTaskToReadyList+0x10c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d201      	bcs.n	80030ca <prvAddNewTaskToReadyList+0xfe>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030c6:	f001 f8c9 	bl	800425c <vPortYield>
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000a58 	.word	0x20000a58
 80030d8:	20000584 	.word	0x20000584
 80030dc:	20000a64 	.word	0x20000a64
 80030e0:	20000a74 	.word	0x20000a74
 80030e4:	20000a60 	.word	0x20000a60
 80030e8:	20000588 	.word	0x20000588

080030ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00f      	beq.n	800311e <vTaskDelay+0x32>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <vTaskDelay+0x44>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <vTaskDelay+0x20>
 8003106:	f001 f9f7 	bl	80044f8 <ulSetInterruptMask>
 800310a:	e7fe      	b.n	800310a <vTaskDelay+0x1e>
            vTaskSuspendAll();
 800310c:	f000 f86c 	bl	80031e8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003110:	2100      	movs	r1, #0
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 fd56 	bl	8003bc4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003118:	f000 f874 	bl	8003204 <xTaskResumeAll>
 800311c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <vTaskDelay+0x3c>
        {
            portYIELD_WITHIN_API();
 8003124:	f001 f89a 	bl	800425c <vPortYield>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000a80 	.word	0x20000a80

08003134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
    {
        StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
        StackType_t * pxIdleTaskStackBuffer = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
        uint32_t ulIdleTaskStackSize;

        /* The Idle task is created using user provided RAM - obtain the
         * address of the RAM then create the idle task. */
        vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003142:	463a      	mov	r2, r7
 8003144:	1d39      	adds	r1, r7, #4
 8003146:	f107 0308 	add.w	r3, r7, #8
 800314a:	4618      	mov	r0, r3
 800314c:	f7ff fac6 	bl	80026dc <vApplicationGetIdleTaskMemory>
        xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8003150:	6839      	ldr	r1, [r7, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	9202      	str	r2, [sp, #8]
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2300      	movs	r3, #0
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	2300      	movs	r3, #0
 8003160:	460a      	mov	r2, r1
 8003162:	491a      	ldr	r1, [pc, #104]	; (80031cc <vTaskStartScheduler+0x98>)
 8003164:	481a      	ldr	r0, [pc, #104]	; (80031d0 <vTaskStartScheduler+0x9c>)
 8003166:	f7ff fe1d 	bl	8002da4 <xTaskCreateStatic>
 800316a:	4603      	mov	r3, r0
 800316c:	4a19      	ldr	r2, [pc, #100]	; (80031d4 <vTaskStartScheduler+0xa0>)
 800316e:	6013      	str	r3, [r2, #0]
                                             ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                             portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                             pxIdleTaskStackBuffer,
                                             pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

        if( xIdleTaskHandle != NULL )
 8003170:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <vTaskStartScheduler+0xa0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d002      	beq.n	800317e <vTaskStartScheduler+0x4a>
        {
            xReturn = pdPASS;
 8003178:	2301      	movs	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e001      	b.n	8003182 <vTaskStartScheduler+0x4e>
        }
        else
        {
            xReturn = pdFAIL;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d102      	bne.n	800318e <vTaskStartScheduler+0x5a>
        {
            xReturn = xTimerCreateTimerTask();
 8003188:	f000 fd8a 	bl	8003ca0 <xTimerCreateTimerTask>
 800318c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d10e      	bne.n	80031b2 <vTaskStartScheduler+0x7e>
        /* Interrupts are turned off here, to ensure a tick does not occur
         * before or during the call to xPortStartScheduler().  The stacks of
         * the created tasks contain a status word with interrupts switched on
         * so interrupts will automatically get re-enabled when the first task
         * starts to run. */
        portDISABLE_INTERRUPTS();
 8003194:	f001 f9b0 	bl	80044f8 <ulSetInterruptMask>
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <vTaskStartScheduler+0xa4>)
 800319a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319e:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031a0:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <vTaskStartScheduler+0xa8>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <vTaskStartScheduler+0xac>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80031ac:	f001 f94e 	bl	800444c <xPortStartScheduler>
 80031b0:	e006      	b.n	80031c0 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031b8:	d102      	bne.n	80031c0 <vTaskStartScheduler+0x8c>
 80031ba:	f001 f99d 	bl	80044f8 <ulSetInterruptMask>
 80031be:	e7fe      	b.n	80031be <vTaskStartScheduler+0x8a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <vTaskStartScheduler+0xb0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	08004714 	.word	0x08004714
 80031d0:	08003a05 	.word	0x08003a05
 80031d4:	20000a7c 	.word	0x20000a7c
 80031d8:	20000a78 	.word	0x20000a78
 80031dc:	20000a64 	.word	0x20000a64
 80031e0:	20000a5c 	.word	0x20000a5c
 80031e4:	2000000c 	.word	0x2000000c

080031e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <vTaskSuspendAll+0x18>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	4a03      	ldr	r2, [pc, #12]	; (8003200 <vTaskSuspendAll+0x18>)
 80031f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	20000a80 	.word	0x20000a80

08003204 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003212:	4b6a      	ldr	r3, [pc, #424]	; (80033bc <xTaskResumeAll+0x1b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <xTaskResumeAll+0x1c>
 800321a:	f001 f96d 	bl	80044f8 <ulSetInterruptMask>
 800321e:	e7fe      	b.n	800321e <xTaskResumeAll+0x1a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003220:	f001 f82e 	bl	8004280 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003224:	4b65      	ldr	r3, [pc, #404]	; (80033bc <xTaskResumeAll+0x1b8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	4a64      	ldr	r2, [pc, #400]	; (80033bc <xTaskResumeAll+0x1b8>)
 800322c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322e:	4b63      	ldr	r3, [pc, #396]	; (80033bc <xTaskResumeAll+0x1b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 80bb 	bne.w	80033ae <xTaskResumeAll+0x1aa>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <xTaskResumeAll+0x1bc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80b6 	beq.w	80033ae <xTaskResumeAll+0x1aa>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003242:	e08b      	b.n	800335c <xTaskResumeAll+0x158>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003244:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <xTaskResumeAll+0x1c0>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	6a12      	ldr	r2, [r2, #32]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	69d2      	ldr	r2, [r2, #28]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	3318      	adds	r3, #24
 800326e:	429a      	cmp	r2, r3
 8003270:	d103      	bne.n	800327a <xTaskResumeAll+0x76>
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	6a1a      	ldr	r2, [r3, #32]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	629a      	str	r2, [r3, #40]	; 0x28
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	607b      	str	r3, [r7, #4]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	68d2      	ldr	r2, [r2, #12]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	3304      	adds	r3, #4
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d103      	bne.n	80032b8 <xTaskResumeAll+0xb4>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	1e5a      	subs	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032cc:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <xTaskResumeAll+0x1c4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d903      	bls.n	80032dc <xTaskResumeAll+0xd8>
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d8:	4a3b      	ldr	r2, [pc, #236]	; (80033c8 <xTaskResumeAll+0x1c4>)
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032e0:	493a      	ldr	r1, [pc, #232]	; (80033cc <xTaskResumeAll+0x1c8>)
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3304      	adds	r3, #4
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	60da      	str	r2, [r3, #12]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	3204      	adds	r2, #4
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	609a      	str	r2, [r3, #8]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <xTaskResumeAll+0x1c8>)
 8003320:	441a      	add	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332a:	4928      	ldr	r1, [pc, #160]	; (80033cc <xTaskResumeAll+0x1c8>)
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	1c59      	adds	r1, r3, #1
 800333a:	4824      	ldr	r0, [pc, #144]	; (80033cc <xTaskResumeAll+0x1c8>)
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4403      	add	r3, r0
 8003346:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <xTaskResumeAll+0x1cc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <xTaskResumeAll+0x158>
                    {
                        xYieldPending = pdTRUE;
 8003356:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <xTaskResumeAll+0x1d0>)
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800335c:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <xTaskResumeAll+0x1c0>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	f47f af6f 	bne.w	8003244 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <xTaskResumeAll+0x16c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800336c:	f000 fbf0 	bl	8003b50 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003370:	4b19      	ldr	r3, [pc, #100]	; (80033d8 <xTaskResumeAll+0x1d4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d010      	beq.n	800339e <xTaskResumeAll+0x19a>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800337c:	f000 f83e 	bl	80033fc <xTaskIncrementTick>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <xTaskResumeAll+0x188>
                            {
                                xYieldPending = pdTRUE;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <xTaskResumeAll+0x1d0>)
 8003388:	2201      	movs	r2, #1
 800338a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	3b01      	subs	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1f1      	bne.n	800337c <xTaskResumeAll+0x178>

                        xPendedTicks = 0;
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <xTaskResumeAll+0x1d4>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <xTaskResumeAll+0x1d0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <xTaskResumeAll+0x1aa>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80033a6:	2301      	movs	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80033aa:	f000 ff57 	bl	800425c <vPortYield>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80033ae:	f000 ff79 	bl	80042a4 <vPortExitCritical>

    return xAlreadyYielded;
 80033b2:	693b      	ldr	r3, [r7, #16]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000a80 	.word	0x20000a80
 80033c0:	20000a58 	.word	0x20000a58
 80033c4:	20000a18 	.word	0x20000a18
 80033c8:	20000a60 	.word	0x20000a60
 80033cc:	20000588 	.word	0x20000588
 80033d0:	20000584 	.word	0x20000584
 80033d4:	20000a6c 	.word	0x20000a6c
 80033d8:	20000a68 	.word	0x20000a68

080033dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033e2:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <xTaskGetTickCount+0x1c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033e8:	687b      	ldr	r3, [r7, #4]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000a5c 	.word	0x20000a5c

080033fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003406:	4b7a      	ldr	r3, [pc, #488]	; (80035f0 <xTaskIncrementTick+0x1f4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 80e5 	bne.w	80035da <xTaskIncrementTick+0x1de>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003410:	4b78      	ldr	r3, [pc, #480]	; (80035f4 <xTaskIncrementTick+0x1f8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3301      	adds	r3, #1
 8003416:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003418:	4a76      	ldr	r2, [pc, #472]	; (80035f4 <xTaskIncrementTick+0x1f8>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d118      	bne.n	8003456 <xTaskIncrementTick+0x5a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003424:	4b74      	ldr	r3, [pc, #464]	; (80035f8 <xTaskIncrementTick+0x1fc>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <xTaskIncrementTick+0x38>
 800342e:	f001 f863 	bl	80044f8 <ulSetInterruptMask>
 8003432:	e7fe      	b.n	8003432 <xTaskIncrementTick+0x36>
 8003434:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <xTaskIncrementTick+0x1fc>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <xTaskIncrementTick+0x200>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6e      	ldr	r2, [pc, #440]	; (80035f8 <xTaskIncrementTick+0x1fc>)
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4a6e      	ldr	r2, [pc, #440]	; (80035fc <xTaskIncrementTick+0x200>)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <xTaskIncrementTick+0x204>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3301      	adds	r3, #1
 800344e:	4a6c      	ldr	r2, [pc, #432]	; (8003600 <xTaskIncrementTick+0x204>)
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	f000 fb7d 	bl	8003b50 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003456:	4b6b      	ldr	r3, [pc, #428]	; (8003604 <xTaskIncrementTick+0x208>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	429a      	cmp	r2, r3
 800345e:	f0c0 80a7 	bcc.w	80035b0 <xTaskIncrementTick+0x1b4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <xTaskIncrementTick+0x1fc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <xTaskIncrementTick+0x7a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800346c:	4b65      	ldr	r3, [pc, #404]	; (8003604 <xTaskIncrementTick+0x208>)
 800346e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003472:	601a      	str	r2, [r3, #0]
                    break;
 8003474:	e09c      	b.n	80035b0 <xTaskIncrementTick+0x1b4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003476:	4b60      	ldr	r3, [pc, #384]	; (80035f8 <xTaskIncrementTick+0x1fc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	429a      	cmp	r2, r3
 800348c:	d203      	bcs.n	8003496 <xTaskIncrementTick+0x9a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800348e:	4a5d      	ldr	r2, [pc, #372]	; (8003604 <xTaskIncrementTick+0x208>)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003494:	e08c      	b.n	80035b0 <xTaskIncrementTick+0x1b4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	68d2      	ldr	r2, [r2, #12]
 80034a4:	609a      	str	r2, [r3, #8]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	605a      	str	r2, [r3, #4]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3304      	adds	r3, #4
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d103      	bne.n	80034c4 <xTaskIncrementTick+0xc8>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	2200      	movs	r2, #0
 80034c8:	615a      	str	r2, [r3, #20]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	1e5a      	subs	r2, r3, #1
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01e      	beq.n	800351a <xTaskIncrementTick+0x11e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	6a12      	ldr	r2, [r2, #32]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	69d2      	ldr	r2, [r2, #28]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	3318      	adds	r3, #24
 80034fe:	429a      	cmp	r2, r3
 8003500:	d103      	bne.n	800350a <xTaskIncrementTick+0x10e>
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6a1a      	ldr	r2, [r3, #32]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2200      	movs	r2, #0
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <xTaskIncrementTick+0x20c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d903      	bls.n	800352e <xTaskIncrementTick+0x132>
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	4a37      	ldr	r2, [pc, #220]	; (8003608 <xTaskIncrementTick+0x20c>)
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003532:	4936      	ldr	r1, [pc, #216]	; (800360c <xTaskIncrementTick+0x210>)
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3304      	adds	r3, #4
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	3204      	adds	r2, #4
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1d1a      	adds	r2, r3, #4
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <xTaskIncrementTick+0x210>)
 8003572:	441a      	add	r2, r3
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	615a      	str	r2, [r3, #20]
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800357c:	4923      	ldr	r1, [pc, #140]	; (800360c <xTaskIncrementTick+0x210>)
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	1c59      	adds	r1, r3, #1
 800358c:	481f      	ldr	r0, [pc, #124]	; (800360c <xTaskIncrementTick+0x210>)
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4403      	add	r3, r0
 8003598:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <xTaskIncrementTick+0x214>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	f67f af5c 	bls.w	8003462 <xTaskIncrementTick+0x66>
                        {
                            xSwitchRequired = pdTRUE;
 80035aa:	2301      	movs	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035ae:	e758      	b.n	8003462 <xTaskIncrementTick+0x66>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <xTaskIncrementTick+0x214>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	4915      	ldr	r1, [pc, #84]	; (800360c <xTaskIncrementTick+0x210>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d901      	bls.n	80035cc <xTaskIncrementTick+0x1d0>
            {
                xSwitchRequired = pdTRUE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	61fb      	str	r3, [r7, #28]
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80035cc:	4b11      	ldr	r3, [pc, #68]	; (8003614 <xTaskIncrementTick+0x218>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d007      	beq.n	80035e4 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 80035d4:	2301      	movs	r3, #1
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e004      	b.n	80035e4 <xTaskIncrementTick+0x1e8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <xTaskIncrementTick+0x21c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <xTaskIncrementTick+0x21c>)
 80035e2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80035e4:	69fb      	ldr	r3, [r7, #28]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000a80 	.word	0x20000a80
 80035f4:	20000a5c 	.word	0x20000a5c
 80035f8:	20000a10 	.word	0x20000a10
 80035fc:	20000a14 	.word	0x20000a14
 8003600:	20000a70 	.word	0x20000a70
 8003604:	20000a78 	.word	0x20000a78
 8003608:	20000a60 	.word	0x20000a60
 800360c:	20000588 	.word	0x20000588
 8003610:	20000584 	.word	0x20000584
 8003614:	20000a6c 	.word	0x20000a6c
 8003618:	20000a68 	.word	0x20000a68

0800361c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <vTaskSwitchContext+0x94>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <vTaskSwitchContext+0x98>)
 800362c:	2201      	movs	r2, #1
 800362e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003630:	e039      	b.n	80036a6 <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 8003632:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <vTaskSwitchContext+0x98>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <vTaskSwitchContext+0x9c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	e008      	b.n	8003652 <vTaskSwitchContext+0x36>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <vTaskSwitchContext+0x30>
 8003646:	f000 ff57 	bl	80044f8 <ulSetInterruptMask>
 800364a:	e7fe      	b.n	800364a <vTaskSwitchContext+0x2e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	3b01      	subs	r3, #1
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	491a      	ldr	r1, [pc, #104]	; (80036bc <vTaskSwitchContext+0xa0>)
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0ec      	beq.n	8003640 <vTaskSwitchContext+0x24>
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4a12      	ldr	r2, [pc, #72]	; (80036bc <vTaskSwitchContext+0xa0>)
 8003672:	4413      	add	r3, r2
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	3308      	adds	r3, #8
 8003688:	429a      	cmp	r2, r3
 800368a:	d104      	bne.n	8003696 <vTaskSwitchContext+0x7a>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a08      	ldr	r2, [pc, #32]	; (80036c0 <vTaskSwitchContext+0xa4>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4a05      	ldr	r2, [pc, #20]	; (80036b8 <vTaskSwitchContext+0x9c>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6013      	str	r3, [r2, #0]
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	20000a80 	.word	0x20000a80
 80036b4:	20000a6c 	.word	0x20000a6c
 80036b8:	20000a60 	.word	0x20000a60
 80036bc:	20000588 	.word	0x20000588
 80036c0:	20000584 	.word	0x20000584

080036c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <vTaskPlaceOnEventList+0x16>
 80036d4:	f000 ff10 	bl	80044f8 <ulSetInterruptMask>
 80036d8:	e7fe      	b.n	80036d8 <vTaskPlaceOnEventList+0x14>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036da:	4b07      	ldr	r3, [pc, #28]	; (80036f8 <vTaskPlaceOnEventList+0x34>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	3318      	adds	r3, #24
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff f85b 	bl	800279e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80036e8:	2101      	movs	r1, #1
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	f000 fa6a 	bl	8003bc4 <prvAddCurrentTaskToDelayedList>
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000584 	.word	0x20000584

080036fc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <vTaskPlaceOnEventListRestricted+0x18>
 800370e:	f000 fef3 	bl	80044f8 <ulSetInterruptMask>
 8003712:	e7fe      	b.n	8003712 <vTaskPlaceOnEventListRestricted+0x16>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	4b16      	ldr	r3, [pc, #88]	; (8003774 <vTaskPlaceOnEventListRestricted+0x78>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	61da      	str	r2, [r3, #28]
 8003722:	4b14      	ldr	r3, [pc, #80]	; (8003774 <vTaskPlaceOnEventListRestricted+0x78>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	6892      	ldr	r2, [r2, #8]
 800372a:	621a      	str	r2, [r3, #32]
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <vTaskPlaceOnEventListRestricted+0x78>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	3218      	adds	r2, #24
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <vTaskPlaceOnEventListRestricted+0x78>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f103 0218 	add.w	r2, r3, #24
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <vTaskPlaceOnEventListRestricted+0x78>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	1c5a      	adds	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <vTaskPlaceOnEventListRestricted+0x66>
        {
            xTicksToWait = portMAX_DELAY;
 800375c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003760:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	68b8      	ldr	r0, [r7, #8]
 8003766:	f000 fa2d 	bl	8003bc4 <prvAddCurrentTaskToDelayedList>
    }
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000584 	.word	0x20000584

08003778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <xTaskRemoveFromEventList+0x1c>
 800378e:	f000 feb3 	bl	80044f8 <ulSetInterruptMask>
 8003792:	e7fe      	b.n	8003792 <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	6a12      	ldr	r2, [r2, #32]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	69d2      	ldr	r2, [r2, #28]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	3318      	adds	r3, #24
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d103      	bne.n	80037c2 <xTaskRemoveFromEventList+0x4a>
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2200      	movs	r2, #0
 80037c6:	629a      	str	r2, [r3, #40]	; 0x28
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d2:	4b4a      	ldr	r3, [pc, #296]	; (80038fc <xTaskRemoveFromEventList+0x184>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d15f      	bne.n	800389a <xTaskRemoveFromEventList+0x122>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	68d2      	ldr	r2, [r2, #12]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	3304      	adds	r3, #4
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d103      	bne.n	8003808 <xTaskRemoveFromEventList+0x90>
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381c:	4b38      	ldr	r3, [pc, #224]	; (8003900 <xTaskRemoveFromEventList+0x188>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d903      	bls.n	800382c <xTaskRemoveFromEventList+0xb4>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4a35      	ldr	r2, [pc, #212]	; (8003900 <xTaskRemoveFromEventList+0x188>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003830:	4934      	ldr	r1, [pc, #208]	; (8003904 <xTaskRemoveFromEventList+0x18c>)
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3304      	adds	r3, #4
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	3204      	adds	r2, #4
 8003858:	605a      	str	r2, [r3, #4]
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	1d1a      	adds	r2, r3, #4
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	4613      	mov	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4a25      	ldr	r2, [pc, #148]	; (8003904 <xTaskRemoveFromEventList+0x18c>)
 8003870:	441a      	add	r2, r3
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	615a      	str	r2, [r3, #20]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800387a:	4922      	ldr	r1, [pc, #136]	; (8003904 <xTaskRemoveFromEventList+0x18c>)
 800387c:	4613      	mov	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1c59      	adds	r1, r3, #1
 800388a:	481e      	ldr	r0, [pc, #120]	; (8003904 <xTaskRemoveFromEventList+0x18c>)
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4403      	add	r3, r0
 8003896:	6019      	str	r1, [r3, #0]
 8003898:	e01b      	b.n	80038d2 <xTaskRemoveFromEventList+0x15a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <xTaskRemoveFromEventList+0x190>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	61da      	str	r2, [r3, #28]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	621a      	str	r2, [r3, #32]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	3218      	adds	r2, #24
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f103 0218 	add.w	r2, r3, #24
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	4a10      	ldr	r2, [pc, #64]	; (8003908 <xTaskRemoveFromEventList+0x190>)
 80038c6:	629a      	str	r2, [r3, #40]	; 0x28
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <xTaskRemoveFromEventList+0x190>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3301      	adds	r3, #1
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <xTaskRemoveFromEventList+0x190>)
 80038d0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <xTaskRemoveFromEventList+0x194>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	429a      	cmp	r2, r3
 80038de:	d905      	bls.n	80038ec <xTaskRemoveFromEventList+0x174>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <xTaskRemoveFromEventList+0x198>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	e001      	b.n	80038f0 <xTaskRemoveFromEventList+0x178>
    }
    else
    {
        xReturn = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 80038f0:	69fb      	ldr	r3, [r7, #28]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3720      	adds	r7, #32
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000a80 	.word	0x20000a80
 8003900:	20000a60 	.word	0x20000a60
 8003904:	20000588 	.word	0x20000588
 8003908:	20000a18 	.word	0x20000a18
 800390c:	20000584 	.word	0x20000584
 8003910:	20000a6c 	.word	0x20000a6c

08003914 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <vTaskInternalSetTimeOutState+0x24>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <vTaskInternalSetTimeOutState+0x28>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	605a      	str	r2, [r3, #4]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000a70 	.word	0x20000a70
 800393c:	20000a5c 	.word	0x20000a5c

08003940 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <xTaskCheckForTimeOut+0x16>
 8003950:	f000 fdd2 	bl	80044f8 <ulSetInterruptMask>
 8003954:	e7fe      	b.n	8003954 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <xTaskCheckForTimeOut+0x22>
 800395c:	f000 fdcc 	bl	80044f8 <ulSetInterruptMask>
 8003960:	e7fe      	b.n	8003960 <xTaskCheckForTimeOut+0x20>

    taskENTER_CRITICAL();
 8003962:	f000 fc8d 	bl	8004280 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003966:	4b1f      	ldr	r3, [pc, #124]	; (80039e4 <xTaskCheckForTimeOut+0xa4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800397e:	d102      	bne.n	8003986 <xTaskCheckForTimeOut+0x46>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e026      	b.n	80039d4 <xTaskCheckForTimeOut+0x94>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	4b17      	ldr	r3, [pc, #92]	; (80039e8 <xTaskCheckForTimeOut+0xa8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d00a      	beq.n	80039a8 <xTaskCheckForTimeOut+0x68>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d305      	bcc.n	80039a8 <xTaskCheckForTimeOut+0x68>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800399c:	2301      	movs	r3, #1
 800399e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e015      	b.n	80039d4 <xTaskCheckForTimeOut+0x94>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20b      	bcs.n	80039ca <xTaskCheckForTimeOut+0x8a>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad2      	subs	r2, r2, r3
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ffa8 	bl	8003914 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e004      	b.n	80039d4 <xTaskCheckForTimeOut+0x94>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039d0:	2301      	movs	r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80039d4:	f000 fc66 	bl	80042a4 <vPortExitCritical>

    return xReturn;
 80039d8:	697b      	ldr	r3, [r7, #20]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000a5c 	.word	0x20000a5c
 80039e8:	20000a70 	.word	0x20000a70

080039ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <vTaskMissedYield+0x14>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
}
 80039f6:	bf00      	nop
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	20000a6c 	.word	0x20000a6c

08003a04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003a0c:	f000 f84a 	bl	8003aa4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <prvIdleTask+0x1c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d9f9      	bls.n	8003a0c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003a18:	f000 fc20 	bl	800425c <vPortYield>
        prvCheckTasksWaitingTermination();
 8003a1c:	e7f6      	b.n	8003a0c <prvIdleTask+0x8>
 8003a1e:	bf00      	nop
 8003a20:	20000588 	.word	0x20000588

08003a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e00c      	b.n	8003a4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4a12      	ldr	r2, [pc, #72]	; (8003a84 <prvInitialiseTaskLists+0x60>)
 8003a3c:	4413      	add	r3, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fe80 	bl	8002744 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	607b      	str	r3, [r7, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b37      	cmp	r3, #55	; 0x37
 8003a4e:	d9ef      	bls.n	8003a30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a50:	480d      	ldr	r0, [pc, #52]	; (8003a88 <prvInitialiseTaskLists+0x64>)
 8003a52:	f7fe fe77 	bl	8002744 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a56:	480d      	ldr	r0, [pc, #52]	; (8003a8c <prvInitialiseTaskLists+0x68>)
 8003a58:	f7fe fe74 	bl	8002744 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a5c:	480c      	ldr	r0, [pc, #48]	; (8003a90 <prvInitialiseTaskLists+0x6c>)
 8003a5e:	f7fe fe71 	bl	8002744 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a62:	480c      	ldr	r0, [pc, #48]	; (8003a94 <prvInitialiseTaskLists+0x70>)
 8003a64:	f7fe fe6e 	bl	8002744 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a68:	480b      	ldr	r0, [pc, #44]	; (8003a98 <prvInitialiseTaskLists+0x74>)
 8003a6a:	f7fe fe6b 	bl	8002744 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <prvInitialiseTaskLists+0x78>)
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <prvInitialiseTaskLists+0x64>)
 8003a72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvInitialiseTaskLists+0x7c>)
 8003a76:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <prvInitialiseTaskLists+0x68>)
 8003a78:	601a      	str	r2, [r3, #0]
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000588 	.word	0x20000588
 8003a88:	200009e8 	.word	0x200009e8
 8003a8c:	200009fc 	.word	0x200009fc
 8003a90:	20000a18 	.word	0x20000a18
 8003a94:	20000a2c 	.word	0x20000a2c
 8003a98:	20000a44 	.word	0x20000a44
 8003a9c:	20000a10 	.word	0x20000a10
 8003aa0:	20000a14 	.word	0x20000a14

08003aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aaa:	e019      	b.n	8003ae0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003aac:	f000 fbe8 	bl	8004280 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab0:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <prvCheckTasksWaitingTermination+0x50>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fea7 	bl	8002810 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <prvCheckTasksWaitingTermination+0x54>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	4a0b      	ldr	r2, [pc, #44]	; (8003af8 <prvCheckTasksWaitingTermination+0x54>)
 8003aca:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003acc:	4b0b      	ldr	r3, [pc, #44]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ad4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ad6:	f000 fbe5 	bl	80042a4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f810 	bl	8003b00 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <prvCheckTasksWaitingTermination+0x58>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e1      	bne.n	8003aac <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000a2c 	.word	0x20000a2c
 8003af8:	20000a58 	.word	0x20000a58
 8003afc:	20000a40 	.word	0x20000a40

08003b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d108      	bne.n	8003b24 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 fda0 	bl	800465c <vPortFree>
                vPortFree( pxTCB );
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fd9d 	bl	800465c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b22:	e010      	b.n	8003b46 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d103      	bne.n	8003b36 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fd94 	bl	800465c <vPortFree>
    }
 8003b34:	e007      	b.n	8003b46 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d002      	beq.n	8003b46 <prvDeleteTCB+0x46>
 8003b40:	f000 fcda 	bl	80044f8 <ulSetInterruptMask>
 8003b44:	e7fe      	b.n	8003b44 <prvDeleteTCB+0x44>
    }
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
	...

08003b50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvResetNextTaskUnblockTime+0x30>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d104      	bne.n	8003b68 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <prvResetNextTaskUnblockTime+0x34>)
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b64:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b66:	e005      	b.n	8003b74 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b68:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <prvResetNextTaskUnblockTime+0x30>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <prvResetNextTaskUnblockTime+0x34>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000a10 	.word	0x20000a10
 8003b84:	20000a78 	.word	0x20000a78

08003b88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <xTaskGetSchedulerState+0x34>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d102      	bne.n	8003b9c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b96:	2301      	movs	r3, #1
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	e008      	b.n	8003bae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <xTaskGetSchedulerState+0x38>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d102      	bne.n	8003baa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003baa:	2300      	movs	r3, #0
 8003bac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003bae:	687b      	ldr	r3, [r7, #4]
    }
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	20000a64 	.word	0x20000a64
 8003bc0:	20000a80 	.word	0x20000a80

08003bc4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd4:	4b2d      	ldr	r3, [pc, #180]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fe18 	bl	8002810 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	d124      	bne.n	8003c32 <prvAddCurrentTaskToDelayedList+0x6e>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d021      	beq.n	8003c32 <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bee:	4b28      	ldr	r3, [pc, #160]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	4b23      	ldr	r3, [pc, #140]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	6892      	ldr	r2, [r2, #8]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	3204      	adds	r2, #4
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	4b1e      	ldr	r3, [pc, #120]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1d1a      	adds	r2, r3, #4
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a1b      	ldr	r2, [pc, #108]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c22:	615a      	str	r2, [r3, #20]
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a19      	ldr	r2, [pc, #100]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003c30:	e026      	b.n	8003c80 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d209      	bcs.n	8003c5e <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3304      	adds	r3, #4
 8003c54:	4619      	mov	r1, r3
 8003c56:	4610      	mov	r0, r2
 8003c58:	f7fe fda1 	bl	800279e <vListInsert>
}
 8003c5c:	e010      	b.n	8003c80 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b0a      	ldr	r3, [pc, #40]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f7fe fd97 	bl	800279e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003c70:	4b0a      	ldr	r3, [pc, #40]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d202      	bcs.n	8003c80 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6013      	str	r3, [r2, #0]
}
 8003c80:	bf00      	nop
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000a5c 	.word	0x20000a5c
 8003c8c:	20000584 	.word	0x20000584
 8003c90:	20000a44 	.word	0x20000a44
 8003c94:	20000a14 	.word	0x20000a14
 8003c98:	20000a10 	.word	0x20000a10
 8003c9c:	20000a78 	.word	0x20000a78

08003ca0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003caa:	f000 fa59 	bl	8004160 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <xTimerCreateTimerTask+0x70>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d020      	beq.n	8003cf8 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
            {
                StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
                StackType_t * pxTimerTaskStackBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
                uint32_t ulTimerTaskStackSize;

                vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	1d39      	adds	r1, r7, #4
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fd22 	bl	8002710 <vApplicationGetTimerTaskMemory>
                xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	9202      	str	r2, [sp, #8]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	460a      	mov	r2, r1
 8003cde:	490d      	ldr	r1, [pc, #52]	; (8003d14 <xTimerCreateTimerTask+0x74>)
 8003ce0:	480d      	ldr	r0, [pc, #52]	; (8003d18 <xTimerCreateTimerTask+0x78>)
 8003ce2:	f7ff f85f 	bl	8002da4 <xTaskCreateStatic>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a0c      	ldr	r2, [pc, #48]	; (8003d1c <xTimerCreateTimerTask+0x7c>)
 8003cea:	6013      	str	r3, [r2, #0]
                                                      NULL,
                                                      ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                      pxTimerTaskStackBuffer,
                                                      pxTimerTaskTCBBuffer );

                if( xTimerTaskHandle != NULL )
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <xTimerCreateTimerTask+0x7c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <xTimerCreateTimerTask+0x58>
                {
                    xReturn = pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <xTimerCreateTimerTask+0x64>
 8003cfe:	f000 fbfb 	bl	80044f8 <ulSetInterruptMask>
 8003d02:	e7fe      	b.n	8003d02 <xTimerCreateTimerTask+0x62>
        return xReturn;
 8003d04:	68fb      	ldr	r3, [r7, #12]
    }
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000ab4 	.word	0x20000ab4
 8003d14:	0800471c 	.word	0x0800471c
 8003d18:	08003dc5 	.word	0x08003dc5
 8003d1c:	20000ab8 	.word	0x20000ab8

08003d20 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d2c:	e008      	b.n	8003d40 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	18d1      	adds	r1, r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f8d5 	bl	8003efc <prvInsertTimerInActiveList>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ea      	bne.n	8003d2e <prvReloadTimer+0xe>
        }
    }
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d6e:	4b14      	ldr	r3, [pc, #80]	; (8003dc0 <prvProcessExpiredTimer+0x5c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f7fe fd47 	bl	8002810 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f7ff ffc3 	bl	8003d20 <prvReloadTimer>
 8003d9a:	e008      	b.n	8003dae <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	4798      	blx	r3
    }
 8003db6:	bf00      	nop
 8003db8:	3710      	adds	r7, #16
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000aac 	.word	0x20000aac

08003dc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dcc:	f107 0308 	add.w	r3, r7, #8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f84f 	bl	8003e74 <prvGetNextExpireTime>
 8003dd6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4619      	mov	r1, r3
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f803 	bl	8003de8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003de2:	f000 f8cd 	bl	8003f80 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003de6:	e7f1      	b.n	8003dcc <prvTimerTask+0x8>

08003de8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003df2:	f7ff f9f9 	bl	80031e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003df6:	f107 0308 	add.w	r3, r7, #8
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 f85e 	bl	8003ebc <prvSampleTimeNow>
 8003e00:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d12a      	bne.n	8003e5e <prvProcessTimerOrBlockTask+0x76>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <prvProcessTimerOrBlockTask+0x3c>
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d806      	bhi.n	8003e24 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003e16:	f7ff f9f5 	bl	8003204 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ffa1 	bl	8003d64 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e22:	e01e      	b.n	8003e62 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <prvProcessTimerOrBlockTask+0x84>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <prvProcessTimerOrBlockTask+0x50>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <prvProcessTimerOrBlockTask+0x52>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <prvProcessTimerOrBlockTask+0x88>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f7fe ff77 	bl	8002d3c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e4e:	f7ff f9d9 	bl	8003204 <xTaskResumeAll>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 8003e58:	f000 fa00 	bl	800425c <vPortYield>
    }
 8003e5c:	e001      	b.n	8003e62 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8003e5e:	f7ff f9d1 	bl	8003204 <xTaskResumeAll>
    }
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000ab0 	.word	0x20000ab0
 8003e70:	20000ab4 	.word	0x20000ab4

08003e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e7c:	4b0e      	ldr	r3, [pc, #56]	; (8003eb8 <prvGetNextExpireTime+0x44>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <prvGetNextExpireTime+0x16>
 8003e86:	2201      	movs	r2, #1
 8003e88:	e000      	b.n	8003e8c <prvGetNextExpireTime+0x18>
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d105      	bne.n	8003ea4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <prvGetNextExpireTime+0x44>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e001      	b.n	8003ea8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
    }
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000aac 	.word	0x20000aac

08003ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003ec4:	f7ff fa8a 	bl	80033dc <xTaskGetTickCount>
 8003ec8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <prvSampleTimeNow+0x3c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d205      	bcs.n	8003ee0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ed4:	f000 f91e 	bl	8004114 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	e002      	b.n	8003ee6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ee6:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <prvSampleTimeNow+0x3c>)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003eec:	68fb      	ldr	r3, [r7, #12]
    }
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20000abc 	.word	0x20000abc

08003efc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d812      	bhi.n	8003f48 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	1ad2      	subs	r2, r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	e01b      	b.n	8003f6e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <prvInsertTimerInActiveList+0x7c>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f7fe fc2c 	bl	800279e <vListInsert>
 8003f46:	e012      	b.n	8003f6e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d206      	bcs.n	8003f5e <prvInsertTimerInActiveList+0x62>
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d302      	bcc.n	8003f5e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	e007      	b.n	8003f6e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <prvInsertTimerInActiveList+0x80>)
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	3304      	adds	r3, #4
 8003f66:	4619      	mov	r1, r3
 8003f68:	4610      	mov	r0, r2
 8003f6a:	f7fe fc18 	bl	800279e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f6e:	697b      	ldr	r3, [r7, #20]
    }
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000ab0 	.word	0x20000ab0
 8003f7c:	20000aac 	.word	0x20000aac

08003f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b088      	sub	sp, #32
 8003f84:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f86:	e0b2      	b.n	80040ee <prvProcessReceivedCommands+0x16e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	da10      	bge.n	8003fb0 <prvProcessReceivedCommands+0x30>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f8e:	1d3b      	adds	r3, r7, #4
 8003f90:	3304      	adds	r3, #4
 8003f92:	61fb      	str	r3, [r7, #28]

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <prvProcessReceivedCommands+0x20>
 8003f9a:	f000 faad 	bl	80044f8 <ulSetInterruptMask>
 8003f9e:	e7fe      	b.n	8003f9e <prvProcessReceivedCommands+0x1e>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69fa      	ldr	r2, [r7, #28]
 8003fa6:	6850      	ldr	r0, [r2, #4]
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	6892      	ldr	r2, [r2, #8]
 8003fac:	4611      	mov	r1, r2
 8003fae:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f2c0 809b 	blt.w	80040ee <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	61bb      	str	r3, [r7, #24]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <prvProcessReceivedCommands+0x4e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fc21 	bl	8002810 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fce:	463b      	mov	r3, r7
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ff73 	bl	8003ebc <prvSampleTimeNow>
 8003fd6:	6178      	str	r0, [r7, #20]

                switch( xMessage.xMessageID )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	f200 8085 	bhi.w	80040ec <prvProcessReceivedCommands+0x16c>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <prvProcessReceivedCommands+0x68>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	0800400d 	.word	0x0800400d
 8003ff0:	08004075 	.word	0x08004075
 8003ff4:	08004089 	.word	0x08004089
 8003ff8:	080040c3 	.word	0x080040c3
 8003ffc:	0800400d 	.word	0x0800400d
 8004000:	0800400d 	.word	0x0800400d
 8004004:	08004075 	.word	0x08004075
 8004008:	08004089 	.word	0x08004089
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	b2da      	uxtb	r2, r3
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	18d1      	adds	r1, r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	69b8      	ldr	r0, [r7, #24]
 800402c:	f7ff ff66 	bl	8003efc <prvInsertTimerInActiveList>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d05b      	beq.n	80040ee <prvProcessReceivedCommands+0x16e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d009      	beq.n	8004058 <prvProcessReceivedCommands+0xd8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	4413      	add	r3, r2
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4619      	mov	r1, r3
 8004050:	69b8      	ldr	r0, [r7, #24]
 8004052:	f7ff fe65 	bl	8003d20 <prvReloadTimer>
 8004056:	e008      	b.n	800406a <prvProcessReceivedCommands+0xea>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405e:	f023 0301 	bic.w	r3, r3, #1
 8004062:	b2da      	uxtb	r2, r3
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	69b8      	ldr	r0, [r7, #24]
 8004070:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004072:	e03c      	b.n	80040ee <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004086:	e032      	b.n	80040ee <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	b2da      	uxtb	r2, r3
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <prvProcessReceivedCommands+0x12e>
 80040a8:	f000 fa26 	bl	80044f8 <ulSetInterruptMask>
 80040ac:	e7fe      	b.n	80040ac <prvProcessReceivedCommands+0x12c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	18d1      	adds	r1, r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	69b8      	ldr	r0, [r7, #24]
 80040bc:	f7ff ff1e 	bl	8003efc <prvInsertTimerInActiveList>
                        break;
 80040c0:	e015      	b.n	80040ee <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <prvProcessReceivedCommands+0x158>
                            {
                                vPortFree( pxTimer );
 80040d0:	69b8      	ldr	r0, [r7, #24]
 80040d2:	f000 fac3 	bl	800465c <vPortFree>
 80040d6:	e00a      	b.n	80040ee <prvProcessReceivedCommands+0x16e>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040de:	f023 0301 	bic.w	r3, r3, #1
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040ea:	e000      	b.n	80040ee <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80040ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040ee:	4b08      	ldr	r3, [pc, #32]	; (8004110 <prvProcessReceivedCommands+0x190>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1d39      	adds	r1, r7, #4
 80040f4:	2200      	movs	r2, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fc94 	bl	8002a24 <xQueueReceive>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f47f af42 	bne.w	8003f88 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	20000ab4 	.word	0x20000ab4

08004114 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800411a:	e009      	b.n	8004130 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800411c:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <prvSwitchTimerLists+0x44>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004126:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800412a:	6838      	ldr	r0, [r7, #0]
 800412c:	f7ff fe1a 	bl	8003d64 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <prvSwitchTimerLists+0x44>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1f0      	bne.n	800411c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800413a:	4b07      	ldr	r3, [pc, #28]	; (8004158 <prvSwitchTimerLists+0x44>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004140:	4b06      	ldr	r3, [pc, #24]	; (800415c <prvSwitchTimerLists+0x48>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <prvSwitchTimerLists+0x44>)
 8004146:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004148:	4a04      	ldr	r2, [pc, #16]	; (800415c <prvSwitchTimerLists+0x48>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6013      	str	r3, [r2, #0]
    }
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000aac 	.word	0x20000aac
 800415c:	20000ab0 	.word	0x20000ab0

08004160 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004166:	f000 f88b 	bl	8004280 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <prvCheckForValidListAndQueue+0x60>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d120      	bne.n	80041b4 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8004172:	4814      	ldr	r0, [pc, #80]	; (80041c4 <prvCheckForValidListAndQueue+0x64>)
 8004174:	f7fe fae6 	bl	8002744 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004178:	4813      	ldr	r0, [pc, #76]	; (80041c8 <prvCheckForValidListAndQueue+0x68>)
 800417a:	f7fe fae3 	bl	8002744 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800417e:	4b13      	ldr	r3, [pc, #76]	; (80041cc <prvCheckForValidListAndQueue+0x6c>)
 8004180:	4a10      	ldr	r2, [pc, #64]	; (80041c4 <prvCheckForValidListAndQueue+0x64>)
 8004182:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004184:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <prvCheckForValidListAndQueue+0x70>)
 8004186:	4a10      	ldr	r2, [pc, #64]	; (80041c8 <prvCheckForValidListAndQueue+0x68>)
 8004188:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800418a:	2300      	movs	r3, #0
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <prvCheckForValidListAndQueue+0x74>)
 8004190:	4a11      	ldr	r2, [pc, #68]	; (80041d8 <prvCheckForValidListAndQueue+0x78>)
 8004192:	2110      	movs	r1, #16
 8004194:	200a      	movs	r0, #10
 8004196:	f7fe fbdc 	bl	8002952 <xQueueGenericCreateStatic>
 800419a:	4603      	mov	r3, r0
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <prvCheckForValidListAndQueue+0x60>)
 800419e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <prvCheckForValidListAndQueue+0x60>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <prvCheckForValidListAndQueue+0x60>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	490b      	ldr	r1, [pc, #44]	; (80041dc <prvCheckForValidListAndQueue+0x7c>)
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fe fd80 	bl	8002cb4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041b4:	f000 f876 	bl	80042a4 <vPortExitCritical>
    }
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000ab4 	.word	0x20000ab4
 80041c4:	20000a84 	.word	0x20000a84
 80041c8:	20000a98 	.word	0x20000a98
 80041cc:	20000aac 	.word	0x20000aac
 80041d0:	20000ab0 	.word	0x20000ab0
 80041d4:	20000b60 	.word	0x20000b60
 80041d8:	20000ac0 	.word	0x20000ac0
 80041dc:	08004724 	.word	0x08004724

080041e0 <vPortSetupTimerInterrupt>:
    }
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and reset the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041e4:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <vPortSetupTimerInterrupt+0x34>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <vPortSetupTimerInterrupt+0x38>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041f0:	4b0a      	ldr	r3, [pc, #40]	; (800421c <vPortSetupTimerInterrupt+0x3c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <vPortSetupTimerInterrupt+0x40>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	099b      	lsrs	r3, r3, #6
 80041fc:	4a09      	ldr	r2, [pc, #36]	; (8004224 <vPortSetupTimerInterrupt+0x44>)
 80041fe:	3b01      	subs	r3, #1
 8004200:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004202:	4b04      	ldr	r3, [pc, #16]	; (8004214 <vPortSetupTimerInterrupt+0x34>)
 8004204:	2207      	movs	r2, #7
 8004206:	601a      	str	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	e000e010 	.word	0xe000e010
 8004218:	e000e018 	.word	0xe000e018
 800421c:	20000000 	.word	0x20000000
 8004220:	10624dd3 	.word	0x10624dd3
 8004224:	e000e014 	.word	0xe000e014

08004228 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800422e:	2300      	movs	r3, #0
 8004230:	607b      	str	r3, [r7, #4]
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <prvTaskExitError+0x30>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423a:	d002      	beq.n	8004242 <prvTaskExitError+0x1a>
 800423c:	f000 f95c 	bl	80044f8 <ulSetInterruptMask>
 8004240:	e7fe      	b.n	8004240 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8004242:	f000 f959 	bl	80044f8 <ulSetInterruptMask>

    while( ulDummy == 0 )
 8004246:	bf00      	nop
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d0fc      	beq.n	8004248 <prvTaskExitError+0x20>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000010 	.word	0x20000010

0800425c <vPortYield>:
    }
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <vPortYield+0x20>)
 8004262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004266:	601a      	str	r2, [r3, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004268:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 800426c:	f3bf 8f6f 	isb	sy
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	e000ed04 	.word	0xe000ed04

08004280 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004284:	f000 f938 	bl	80044f8 <ulSetInterruptMask>
    ulCriticalNesting++;
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <vPortEnterCritical+0x20>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <vPortEnterCritical+0x20>)
 8004290:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8004292:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004296:	f3bf 8f6f 	isb	sy
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000010 	.word	0x20000010

080042a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <vPortExitCritical+0x30>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <vPortExitCritical+0x12>
 80042b0:	f000 f922 	bl	80044f8 <ulSetInterruptMask>
 80042b4:	e7fe      	b.n	80042b4 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 80042b6:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <vPortExitCritical+0x30>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	4a05      	ldr	r2, [pc, #20]	; (80042d4 <vPortExitCritical+0x30>)
 80042be:	6013      	str	r3, [r2, #0]

    if( ulCriticalNesting == 0 )
 80042c0:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <vPortExitCritical+0x30>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <vPortExitCritical+0x2a>
    {
        portENABLE_INTERRUPTS();
 80042c8:	2000      	movs	r0, #0
 80042ca:	f000 f922 	bl	8004512 <vClearInterruptMask>
    }
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000010 	.word	0x20000010

080042d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80042de:	f000 f90b 	bl	80044f8 <ulSetInterruptMask>
 80042e2:	6078      	str	r0, [r7, #4]
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042e4:	f7ff f88a 	bl	80033fc <xTaskIncrementTick>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <xPortSysTickHandler+0x1e>
        {
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <xPortSysTickHandler+0x2c>)
 80042f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f4:	601a      	str	r2, [r3, #0]
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f90b 	bl	8004512 <vClearInterruptMask>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
    #endif /* configENABLE_TRUSTZONE */
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ 6 ];
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b02      	subs	r3, #2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	72fb      	strb	r3, [r7, #11]

    switch( ucSVCNumber )
 800431e:	7afb      	ldrb	r3, [r7, #11]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d102      	bne.n	800432a <vPortSVCHandler_C+0x22>
            }
            #endif /* configENABLE_FPU */

            /* Setup the context of the first task so that the first task starts
             * executing. */
            vRestoreContextOfFirstTask();
 8004324:	f000 f8b4 	bl	8004490 <vRestoreContextOfFirstTask>
            break;
 8004328:	e002      	b.n	8004330 <vPortSVCHandler_C+0x28>
                    break;
            #endif /* configENABLE_MPU */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 800432a:	f000 f8e5 	bl	80044f8 <ulSetInterruptMask>
 800432e:	e7fe      	b.n	800432e <vPortSVCHandler_C+0x26>
    }
}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
 8004344:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b04      	subs	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004352:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b04      	subs	r3, #4
 8004358:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3b04      	subs	r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004366:	4a38      	ldr	r2, [pc, #224]	; (8004448 <pxPortInitialiseStack+0x110>)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	3b04      	subs	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8004378:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3b04      	subs	r3, #4
 800437e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8004386:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b04      	subs	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8004394:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3b04      	subs	r3, #4
 800439a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80043a2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	3b04      	subs	r3, #4
 80043a8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b04      	subs	r3, #4
 80043b4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80043bc:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 80043ca:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	3b04      	subs	r3, #4
 80043d0:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 80043d8:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3b04      	subs	r3, #4
 80043de:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 80043e6:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3b04      	subs	r3, #4
 80043ec:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80043f4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3b04      	subs	r3, #4
 80043fa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8004402:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b04      	subs	r3, #4
 8004408:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8004410:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3b04      	subs	r3, #4
 8004416:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800441e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b04      	subs	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800442c:	601a      	str	r2, [r3, #0]
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr
 8004448:	08004229 	.word	0x08004229

0800444c <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <xPortStartScheduler+0x38>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0b      	ldr	r2, [pc, #44]	; (8004484 <xPortStartScheduler+0x38>)
 8004456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800445a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800445c:	4b09      	ldr	r3, [pc, #36]	; (8004484 <xPortStartScheduler+0x38>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a08      	ldr	r2, [pc, #32]	; (8004484 <xPortStartScheduler+0x38>)
 8004462:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004466:	6013      	str	r3, [r2, #0]
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004468:	f7ff feba 	bl	80041e0 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <xPortStartScheduler+0x3c>)
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8004472:	f000 f82d 	bl	80044d0 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004476:	f7ff f8d1 	bl	800361c <vTaskSwitchContext>
    prvTaskExitError();
 800447a:	f7ff fed5 	bl	8004228 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	e000ed20 	.word	0xe000ed20
 8004488:	20000010 	.word	0x20000010
 800448c:	00000000 	.word	0x00000000

08004490 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004490:	4a0b      	ldr	r2, [pc, #44]	; (80044c0 <pxCurrentTCBConst2>)
 8004492:	6811      	ldr	r1, [r2, #0]
 8004494:	6808      	ldr	r0, [r1, #0]
 8004496:	c806      	ldmia	r0!, {r1, r2}
 8004498:	f381 880b 	msr	PSPLIM, r1
 800449c:	2102      	movs	r1, #2
 800449e:	f381 8814 	msr	CONTROL, r1
 80044a2:	3020      	adds	r0, #32
 80044a4:	f380 8809 	msr	PSP, r0
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f04f 0000 	mov.w	r0, #0
 80044b0:	f380 8811 	msr	BASEPRI, r0
 80044b4:	4710      	bx	r2
 80044b6:	bf00      	nop
 80044b8:	f3af 8000 	nop.w
 80044bc:	f3af 8000 	nop.w

080044c0 <pxCurrentTCBConst2>:
 80044c0:	20000584 	.word	0x20000584
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
	...

080044d0 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80044d0:	4807      	ldr	r0, [pc, #28]	; (80044f0 <xVTORConst>)
 80044d2:	6800      	ldr	r0, [r0, #0]
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	f380 8808 	msr	MSP, r0
 80044da:	b662      	cpsie	i
 80044dc:	b661      	cpsie	f
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	df02      	svc	2
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	f3af 8000 	nop.w

080044f0 <xVTORConst>:
 80044f0:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80044f8:	f3ef 8011 	mrs	r0, BASEPRI
 80044fc:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004500:	f381 8811 	msr	BASEPRI, r1
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800450e:	bf00      	nop
 8004510:	4618      	mov	r0, r3

08004512 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004512:	f380 8811 	msr	BASEPRI, r0
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8004520:	bf00      	nop
	...

08004530 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004530:	f3ef 8009 	mrs	r0, PSP
 8004534:	f3ef 820b 	mrs	r2, PSPLIM
 8004538:	4673      	mov	r3, lr
 800453a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <pxCurrentTCBConst>)
 8004540:	6811      	ldr	r1, [r2, #0]
 8004542:	6008      	str	r0, [r1, #0]
 8004544:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f7ff f862 	bl	800361c <vTaskSwitchContext>
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f380 8811 	msr	BASEPRI, r0
 8004560:	4a07      	ldr	r2, [pc, #28]	; (8004580 <pxCurrentTCBConst>)
 8004562:	6811      	ldr	r1, [r2, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800456a:	f382 880b 	msr	PSPLIM, r2
 800456e:	f380 8809 	msr	PSP, r0
 8004572:	4718      	bx	r3
 8004574:	f3af 8000 	nop.w
 8004578:	f3af 8000 	nop.w
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst>:
 8004580:	20000584 	.word	0x20000584
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
	...

08004590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004590:	f01e 0f04 	tst.w	lr, #4
 8004594:	bf0c      	ite	eq
 8004596:	f3ef 8008 	mrseq	r0, MSP
 800459a:	f3ef 8009 	mrsne	r0, PSP
 800459e:	4904      	ldr	r1, [pc, #16]	; (80045b0 <svchandler_address_const>)
 80045a0:	4708      	bx	r1
 80045a2:	bf00      	nop
 80045a4:	f3af 8000 	nop.w
 80045a8:	f3af 8000 	nop.w
 80045ac:	f3af 8000 	nop.w

080045b0 <svchandler_address_const>:
 80045b0:	08004309 	.word	0x08004309
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
    void * pvReturn = NULL;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
    static uint8_t * pucAlignedHeap = NULL;

    /* Ensure that blocks are always aligned. */
    #if ( portBYTE_ALIGNMENT != 1 )
    {
        if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <pvPortMalloc+0x34>
        {
            /* Byte alignment required. Check for overflow. */
            if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) > xWantedSize )
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f023 0307 	bic.w	r3, r3, #7
 80045d4:	3308      	adds	r3, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d205      	bcs.n	80045e8 <pvPortMalloc+0x30>
            {
                xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f023 0307 	bic.w	r3, r3, #7
 80045e2:	3308      	adds	r3, #8
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	e001      	b.n	80045ec <pvPortMalloc+0x34>
            }
            else
            {
                xWantedSize = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
 80045ec:	f7fe fdfc 	bl	80031e8 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
 80045f0:	4b17      	ldr	r3, [pc, #92]	; (8004650 <pvPortMalloc+0x98>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d105      	bne.n	8004604 <pvPortMalloc+0x4c>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <pvPortMalloc+0x9c>)
 80045fa:	f023 0307 	bic.w	r3, r3, #7
 80045fe:	461a      	mov	r2, r3
 8004600:	4b13      	ldr	r3, [pc, #76]	; (8004650 <pvPortMalloc+0x98>)
 8004602:	601a      	str	r2, [r3, #0]
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01b      	beq.n	8004642 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 800460a:	4b13      	ldr	r3, [pc, #76]	; (8004658 <pvPortMalloc+0xa0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4413      	add	r3, r2
        if( ( xWantedSize > 0 ) &&                                /* valid size */
 8004612:	f641 72f7 	movw	r2, #8183	; 0x1ff7
 8004616:	4293      	cmp	r3, r2
 8004618:	d813      	bhi.n	8004642 <pvPortMalloc+0x8a>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
 800461a:	4b0f      	ldr	r3, [pc, #60]	; (8004658 <pvPortMalloc+0xa0>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	441a      	add	r2, r3
 8004622:	4b0d      	ldr	r3, [pc, #52]	; (8004658 <pvPortMalloc+0xa0>)
 8004624:	681b      	ldr	r3, [r3, #0]
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8004626:	429a      	cmp	r2, r3
 8004628:	d90b      	bls.n	8004642 <pvPortMalloc+0x8a>
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <pvPortMalloc+0x98>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <pvPortMalloc+0xa0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4413      	add	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]
            xNextFreeByte += xWantedSize;
 8004636:	4b08      	ldr	r3, [pc, #32]	; (8004658 <pvPortMalloc+0xa0>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	4a06      	ldr	r2, [pc, #24]	; (8004658 <pvPortMalloc+0xa0>)
 8004640:	6013      	str	r3, [r2, #0]
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004642:	f7fe fddf 	bl	8003204 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8004646:	68fb      	ldr	r3, [r7, #12]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20002bb4 	.word	0x20002bb4
 8004654:	20000bb7 	.word	0x20000bb7
 8004658:	20002bb0 	.word	0x20002bb0

0800465c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
     * heap_4.c for alternative implementations, and the memory management pages of
     * https://www.FreeRTOS.org for more information. */
    ( void ) pv;

    /* Force an assert as it is invalid to call this function. */
    configASSERT( pv == NULL );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <vPortFree+0x14>
 800466a:	f7ff ff45 	bl	80044f8 <ulSetInterruptMask>
 800466e:	e7fe      	b.n	800466e <vPortFree+0x12>
}
 8004670:	bf00      	nop
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <memset>:
 8004678:	4402      	add	r2, r0
 800467a:	4603      	mov	r3, r0
 800467c:	4293      	cmp	r3, r2
 800467e:	d100      	bne.n	8004682 <memset+0xa>
 8004680:	4770      	bx	lr
 8004682:	f803 1b01 	strb.w	r1, [r3], #1
 8004686:	e7f9      	b.n	800467c <memset+0x4>

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	2600      	movs	r6, #0
 800468e:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 8004690:	1b64      	subs	r4, r4, r5
 8004692:	10a4      	asrs	r4, r4, #2
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	2600      	movs	r6, #0
 800469c:	4c0b      	ldr	r4, [pc, #44]	; (80046cc <__libc_init_array+0x44>)
 800469e:	f000 f825 	bl	80046ec <_init>
 80046a2:	1b64      	subs	r4, r4, r5
 80046a4:	10a4      	asrs	r4, r4, #2
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	3601      	adds	r6, #1
 80046b2:	4798      	blx	r3
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	3601      	adds	r6, #1
 80046bc:	4798      	blx	r3
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	0800478c 	.word	0x0800478c
 80046c4:	0800478c 	.word	0x0800478c
 80046c8:	0800478c 	.word	0x0800478c
 80046cc:	08004790 	.word	0x08004790

080046d0 <memcpy>:
 80046d0:	440a      	add	r2, r1
 80046d2:	1e43      	subs	r3, r0, #1
 80046d4:	4291      	cmp	r1, r2
 80046d6:	d100      	bne.n	80046da <memcpy+0xa>
 80046d8:	4770      	bx	lr
 80046da:	b510      	push	{r4, lr}
 80046dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046e0:	4291      	cmp	r1, r2
 80046e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046e6:	d1f9      	bne.n	80046dc <memcpy+0xc>
 80046e8:	bd10      	pop	{r4, pc}
	...

080046ec <_init>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	bf00      	nop
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr

080046f8 <_fini>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr
