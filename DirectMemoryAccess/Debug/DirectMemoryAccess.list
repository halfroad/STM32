
DirectMemoryAccess.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009830  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009a7c  08009a7c  00019a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009abc  08009abc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ac4  08009ac4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac8  08009ac8  00019ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08009ad8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08009ad8  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010dc3  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e3c  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000931  00000000  00000000  00033858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f7b0  00000000  00000000  00034189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e2c  00000000  00000000  00063939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012c23c  00000000  00000000  00074765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003120  00000000  00000000  001a09a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  001a3ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009a64 	.word	0x08009a64

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08009a64 	.word	0x08009a64

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	HAL_UART_Transmit_DMA(&huart3, receivedData, 2);
 80005b4:	2202      	movs	r2, #2
 80005b6:	491a      	ldr	r1, [pc, #104]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 80005ba:	f007 fe4b 	bl	8008254 <HAL_UART_Transmit_DMA>

	GPIO_PinState state = GPIO_PIN_SET;
 80005be:	2301      	movs	r3, #1
 80005c0:	73fb      	strb	r3, [r7, #15]

	if (receivedData[1] == '0')
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005c4:	785b      	ldrb	r3, [r3, #1]
 80005c6:	2b30      	cmp	r3, #48	; 0x30
 80005c8:	d101      	bne.n	80005ce <HAL_UART_RxCpltCallback+0x22>
		state = GPIO_PIN_RESET;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]

	if (receivedData[0] == 'R')
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b52      	cmp	r3, #82	; 0x52
 80005d4:	d106      	bne.n	80005e4 <HAL_UART_RxCpltCallback+0x38>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	461a      	mov	r2, r3
 80005da:	2110      	movs	r1, #16
 80005dc:	4812      	ldr	r0, [pc, #72]	; (8000628 <HAL_UART_RxCpltCallback+0x7c>)
 80005de:	f001 fe05 	bl	80021ec <HAL_GPIO_WritePin>
 80005e2:	e014      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'G')
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b47      	cmp	r3, #71	; 0x47
 80005ea:	d106      	bne.n	80005fa <HAL_UART_RxCpltCallback+0x4e>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	461a      	mov	r2, r3
 80005f0:	2101      	movs	r1, #1
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <HAL_UART_RxCpltCallback+0x80>)
 80005f4:	f001 fdfa 	bl	80021ec <HAL_GPIO_WritePin>
 80005f8:	e009      	b.n	800060e <HAL_UART_RxCpltCallback+0x62>
	else if (receivedData[0] == 'Y')
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b59      	cmp	r3, #89	; 0x59
 8000600:	d105      	bne.n	800060e <HAL_UART_RxCpltCallback+0x62>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	461a      	mov	r2, r3
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_UART_RxCpltCallback+0x84>)
 800060a:	f001 fdef 	bl	80021ec <HAL_GPIO_WritePin>

	HAL_UART_Receive_DMA(&huart3, receivedData, 2);
 800060e:	2202      	movs	r2, #2
 8000610:	4903      	ldr	r1, [pc, #12]	; (8000620 <HAL_UART_RxCpltCallback+0x74>)
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x78>)
 8000614:	f007 fee6 	bl	80083e4 <HAL_UART_Receive_DMA>
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200001ac 	.word	0x200001ac
 8000624:	20000028 	.word	0x20000028
 8000628:	42021800 	.word	0x42021800
 800062c:	42020400 	.word	0x42020400
 8000630:	42021400 	.word	0x42021400

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fba2 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f812 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f000 f8e4 	bl	800080c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000644:	f000 f866 	bl	8000714 <MX_GPDMA1_Init>
  MX_MEMORYMAP_Init();
 8000648:	f000 f88c 	bl	8000764 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 800064c:	f000 f892 	bl	8000774 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart3, receivedData, 2);
 8000650:	2202      	movs	r2, #2
 8000652:	4902      	ldr	r1, [pc, #8]	; (800065c <main+0x28>)
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <main+0x2c>)
 8000656:	f007 fec5 	bl	80083e4 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x26>
 800065c:	200001ac 	.word	0x200001ac
 8000660:	20000028 	.word	0x20000028

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	; 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2250      	movs	r2, #80	; 0x50
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 f9ca 	bl	8009a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068a:	4b21      	ldr	r3, [pc, #132]	; (8000710 <SystemClock_Config+0xac>)
 800068c:	691b      	ldr	r3, [r3, #16]
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xac>)
 8000690:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000694:	6113      	str	r3, [r2, #16]
 8000696:	4b1e      	ldr	r3, [pc, #120]	; (8000710 <SystemClock_Config+0xac>)
 8000698:	691b      	ldr	r3, [r3, #16]
 800069a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <SystemClock_Config+0xac>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0308 	and.w	r3, r3, #8
 80006ac:	2b08      	cmp	r3, #8
 80006ae:	d1f9      	bne.n	80006a4 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006b8:	2308      	movs	r3, #8
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fda7 	bl	800221c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006d4:	f000 f926 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	231f      	movs	r3, #31
 80006da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2101      	movs	r1, #1
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f9c8 	bl	8002a8c <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000702:	f000 f90f 	bl	8000924 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3770      	adds	r7, #112	; 0x70
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	44020800 	.word	0x44020800

08000714 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_GPDMA1_Init+0x4c>)
 800071c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000720:	4a0f      	ldr	r2, [pc, #60]	; (8000760 <MX_GPDMA1_Init+0x4c>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_GPDMA1_Init+0x4c>)
 800072c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2021      	movs	r0, #33	; 0x21
 800073e:	f000 fc76 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8000742:	2021      	movs	r0, #33	; 0x21
 8000744:	f000 fc8d 	bl	8001062 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2022      	movs	r0, #34	; 0x22
 800074e:	f000 fc6e 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8000752:	2022      	movs	r0, #34	; 0x22
 8000754:	f000 fc85 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	44020c00 	.word	0x44020c00

08000764 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_USART3_UART_Init+0x90>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_USART3_UART_Init+0x94>)
 800077c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_USART3_UART_Init+0x90>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_USART3_UART_Init+0x90>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_USART3_UART_Init+0x90>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_USART3_UART_Init+0x90>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007bc:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007be:	f007 fcf9 	bl	80081b4 <HAL_UART_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f8ac 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007d0:	f009 f851 	bl	8009876 <HAL_UARTEx_SetTxFifoThreshold>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007da:	f000 f8a3 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	4808      	ldr	r0, [pc, #32]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007e2:	f009 f886 	bl	80098f2 <HAL_UARTEx_SetRxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007ec:	f000 f89a 	bl	8000924 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_USART3_UART_Init+0x90>)
 80007f2:	f009 f807 	bl	8009804 <HAL_UARTEx_DisableFifoMode>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 f892 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000028 	.word	0x20000028
 8000808:	40004800 	.word	0x40004800

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_GPIO_Init+0x108>)
 8000824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000828:	4a3a      	ldr	r2, [pc, #232]	; (8000914 <MX_GPIO_Init+0x108>)
 800082a:	f043 0320 	orr.w	r3, r3, #32
 800082e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000832:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_GPIO_Init+0x108>)
 8000834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000838:	f003 0320 	and.w	r3, r3, #32
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000840:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x108>)
 8000842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <MX_GPIO_Init+0x108>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000850:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0x108>)
 8000852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x108>)
 8000860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000864:	4a2b      	ldr	r2, [pc, #172]	; (8000914 <MX_GPIO_Init+0x108>)
 8000866:	f043 0308 	orr.w	r3, r3, #8
 800086a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0x108>)
 8000870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000874:	f003 0308 	and.w	r3, r3, #8
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087c:	4b25      	ldr	r3, [pc, #148]	; (8000914 <MX_GPIO_Init+0x108>)
 800087e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000882:	4a24      	ldr	r2, [pc, #144]	; (8000914 <MX_GPIO_Init+0x108>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_GPIO_Init+0x108>)
 800088e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2110      	movs	r1, #16
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <MX_GPIO_Init+0x10c>)
 80008a0:	f001 fca4 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x110>)
 80008aa:	f001 fc9f 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2110      	movs	r1, #16
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x114>)
 80008b4:	f001 fc9a 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4812      	ldr	r0, [pc, #72]	; (8000918 <MX_GPIO_Init+0x10c>)
 80008d0:	f001 fb3a 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80008d4:	2301      	movs	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_GPIO_Init+0x110>)
 80008ec:	f001 fb2c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80008f0:	2310      	movs	r3, #16
 80008f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_GPIO_Init+0x114>)
 8000908:	f001 fb1e 	bl	8001f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	44020c00 	.word	0x44020c00
 8000918:	42021400 	.word	0x42021400
 800091c:	42020400 	.word	0x42020400
 8000920:	42021800 	.word	0x42021800

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>

0800092e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092e:	b480      	push	{r7}
 8000930:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b0cc      	sub	sp, #304	; 0x130
 8000940:	af00      	add	r7, sp, #0
 8000942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000946:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800094a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000960:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000964:	4618      	mov	r0, r3
 8000966:	f44f 7384 	mov.w	r3, #264	; 0x108
 800096a:	461a      	mov	r2, r3
 800096c:	2100      	movs	r1, #0
 800096e:	f009 f84d 	bl	8009a0c <memset>
  if(huart->Instance==USART3)
 8000972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a82      	ldr	r2, [pc, #520]	; (8000b88 <HAL_UART_MspInit+0x24c>)
 8000980:	4293      	cmp	r3, r2
 8000982:	f040 80fb 	bne.w	8000b7c <HAL_UART_MspInit+0x240>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800098a:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800098e:	f04f 0204 	mov.w	r2, #4
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800099a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800099e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80009a2:	2200      	movs	r2, #0
 80009a4:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4618      	mov	r0, r3
 80009ac:	f002 fbb0 	bl	8003110 <HAL_RCCEx_PeriphCLKConfig>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80009b6:	f7ff ffb5 	bl	8000924 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ba:	4b74      	ldr	r3, [pc, #464]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80009c0:	4a72      	ldr	r2, [pc, #456]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80009ca:	4b70      	ldr	r3, [pc, #448]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80009d0:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80009d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80009e6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e8:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009ee:	4a67      	ldr	r2, [pc, #412]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80009f8:	4b64      	ldr	r3, [pc, #400]	; (8000b8c <HAL_UART_MspInit+0x250>)
 80009fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80009fe:	f003 0208 	and.w	r2, r3, #8
 8000a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000a14:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a30:	2307      	movs	r3, #7
 8000a32:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4854      	ldr	r0, [pc, #336]	; (8000b90 <HAL_UART_MspInit+0x254>)
 8000a3e:	f001 fa83 	bl	8001f48 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* GPDMA1_REQUEST_USART3_TX Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8000a42:	4b54      	ldr	r3, [pc, #336]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a44:	4a54      	ldr	r2, [pc, #336]	; (8000b98 <HAL_UART_MspInit+0x25c>)
 8000a46:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART3_TX;
 8000a48:	4b52      	ldr	r3, [pc, #328]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a4a:	221a      	movs	r2, #26
 8000a4c:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000a4e:	4b51      	ldr	r3, [pc, #324]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a54:	4b4f      	ldr	r3, [pc, #316]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_INCREMENTED;
 8000a5c:	4b4d      	ldr	r3, [pc, #308]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_FIXED;
 8000a62:	4b4c      	ldr	r3, [pc, #304]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000a68:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000a6e:	4b49      	ldr	r3, [pc, #292]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a74:	4b47      	ldr	r3, [pc, #284]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8000a7a:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8000a80:	4b44      	ldr	r3, [pc, #272]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000a86:	4b43      	ldr	r3, [pc, #268]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a8c:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8000a98:	483e      	ldr	r0, [pc, #248]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000a9a:	f000 fafd 	bl	8001098 <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8000aa4:	f7ff ff3e 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel7);
 8000aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000aac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000ab4:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ab6:	4a37      	ldr	r2, [pc, #220]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000abc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000ac4:	2110      	movs	r1, #16
 8000ac6:	4833      	ldr	r0, [pc, #204]	; (8000b94 <HAL_UART_MspInit+0x258>)
 8000ac8:	f000 fe95 	bl	80017f6 <HAL_DMA_ConfigChannelAttributes>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_UART_MspInit+0x19a>
    {
      Error_Handler();
 8000ad2:	f7ff ff27 	bl	8000924 <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART3_RX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000ad8:	4a31      	ldr	r2, [pc, #196]	; (8000ba0 <HAL_UART_MspInit+0x264>)
 8000ada:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART3_RX;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000ade:	2219      	movs	r2, #25
 8000ae0:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel6.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000ae2:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel6.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ae8:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_FIXED;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_INCREMENTED;
 8000af4:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000af6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000afa:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel6.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 8000b14:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8000b2c:	481b      	ldr	r0, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b2e:	f000 fab3 	bl	8001098 <HAL_DMA_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x200>
    {
      Error_Handler();
 8000b38:	f7ff fef4 	bl	8000924 <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel6);
 8000b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	480f      	ldr	r0, [pc, #60]	; (8000b9c <HAL_UART_MspInit+0x260>)
 8000b5e:	f000 fe4a 	bl	80017f6 <HAL_DMA_ConfigChannelAttributes>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_UART_MspInit+0x230>
    {
      Error_Handler();
 8000b68:	f7ff fedc 	bl	8000924 <Error_Handler>
    }

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	203c      	movs	r0, #60	; 0x3c
 8000b72:	f000 fa5c 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b76:	203c      	movs	r0, #60	; 0x3c
 8000b78:	f000 fa73 	bl	8001062 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b7c:	bf00      	nop
 8000b7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40004800 	.word	0x40004800
 8000b8c:	44020c00 	.word	0x44020c00
 8000b90:	42020c00 	.word	0x42020c00
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	400203d0 	.word	0x400203d0
 8000b9c:	20000134 	.word	0x20000134
 8000ba0:	40020350 	.word	0x40020350

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf0:	f000 f922 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <GPDMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 6 global interrupt.
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 8000bfc:	4802      	ldr	r0, [pc, #8]	; (8000c08 <GPDMA1_Channel6_IRQHandler+0x10>)
 8000bfe:	f000 fc80 	bl	8001502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 1 */

  /* USER CODE END GPDMA1_Channel6_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000134 	.word	0x20000134

08000c0c <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <GPDMA1_Channel7_IRQHandler+0x10>)
 8000c12:	f000 fc76 	bl	8001502 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000bc 	.word	0x200000bc

08000c20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <USART3_IRQHandler+0x10>)
 8000c26:	f007 fc2f 	bl	8008488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000028 	.word	0x20000028

08000c34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c3a:	4b35      	ldr	r3, [pc, #212]	; (8000d10 <SystemInit+0xdc>)
 8000c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c40:	4a33      	ldr	r2, [pc, #204]	; (8000d10 <SystemInit+0xdc>)
 8000c42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000c4a:	4b32      	ldr	r3, [pc, #200]	; (8000d14 <SystemInit+0xe0>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <SystemInit+0xe0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000c56:	4b2f      	ldr	r3, [pc, #188]	; (8000d14 <SystemInit+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <SystemInit+0xe0>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	492c      	ldr	r1, [pc, #176]	; (8000d14 <SystemInit+0xe0>)
 8000c62:	4b2d      	ldr	r3, [pc, #180]	; (8000d18 <SystemInit+0xe4>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <SystemInit+0xe0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <SystemInit+0xe0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <SystemInit+0xe0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <SystemInit+0xe0>)
 8000c7c:	4a27      	ldr	r2, [pc, #156]	; (8000d1c <SystemInit+0xe8>)
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <SystemInit+0xe0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <SystemInit+0xe0>)
 8000c88:	4a24      	ldr	r2, [pc, #144]	; (8000d1c <SystemInit+0xe8>)
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <SystemInit+0xe0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000c92:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <SystemInit+0xe0>)
 8000c94:	4a21      	ldr	r2, [pc, #132]	; (8000d1c <SystemInit+0xe8>)
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <SystemInit+0xe0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <SystemInit+0xe0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <SystemInit+0xe0>)
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <SystemInit+0xe0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cb0:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <SystemInit+0xdc>)
 8000cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cb6:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <SystemInit+0xec>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000cc0:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000cc8:	d003      	beq.n	8000cd2 <SystemInit+0x9e>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000cd0:	d117      	bne.n	8000d02 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <SystemInit+0xec>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d005      	beq.n	8000cea <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <SystemInit+0xec>)
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <SystemInit+0xf0>)
 8000ce2:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <SystemInit+0xec>)
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <SystemInit+0xf4>)
 8000ce8:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <SystemInit+0xec>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <SystemInit+0xec>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <SystemInit+0xec>)
 8000cf8:	69db      	ldr	r3, [r3, #28]
 8000cfa:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <SystemInit+0xec>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	61d3      	str	r3, [r2, #28]
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000ed00 	.word	0xe000ed00
 8000d14:	44020c00 	.word	0x44020c00
 8000d18:	eae2eae3 	.word	0xeae2eae3
 8000d1c:	01010280 	.word	0x01010280
 8000d20:	40022000 	.word	0x40022000
 8000d24:	08192a3b 	.word	0x08192a3b
 8000d28:	4c5d6e7f 	.word	0x4c5d6e7f

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d2c:	480d      	ldr	r0, [pc, #52]	; (8000d64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d30:	f7ff ff80 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d5a:	f008 fe5f 	bl	8009a1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d5e:	f7ff fc69 	bl	8000634 <main>

08000d62 <LoopForever>:

LoopForever:
    b LoopForever
 8000d62:	e7fe      	b.n	8000d62 <LoopForever>
  ldr   r0, =_estack
 8000d64:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d70:	08009acc 	.word	0x08009acc
  ldr r2, =_sbss
 8000d74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d78:	200001b4 	.word	0x200001b4

08000d7c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f947 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000d8a:	f002 f837 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_Init+0x40>)
 8000d92:	6a1b      	ldr	r3, [r3, #32]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	490a      	ldr	r1, [pc, #40]	; (8000dc4 <HAL_Init+0x44>)
 8000d9a:	5ccb      	ldrb	r3, [r1, r3]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_Init+0x48>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 f811 	bl	8000dcc <HAL_InitTick>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e002      	b.n	8000dba <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000db4:	f7ff fdbb 	bl	800092e <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	44020c00 	.word	0x44020c00
 8000dc4:	08009a7c 	.word	0x08009a7c
 8000dc8:	20000000 	.word	0x20000000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_InitTick+0x60>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d101      	bne.n	8000de0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e021      	b.n	8000e24 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <HAL_InitTick+0x64>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_InitTick+0x60>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f941 	bl	800107e <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e14:	f000 f90b 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_InitTick+0x68>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200001b0 	.word	0x200001b0

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200001b0 	.word	0x200001b0

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	; (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff40 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff33 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa4 	bl	8000fd4 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80010a0:	f7ff fede 	bl	8000e60 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e0df      	b.n	8001270 <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a6e      	ldr	r2, [pc, #440]	; (8001278 <HAL_DMA_Init+0x1e0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	f000 809f 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a6c      	ldr	r2, [pc, #432]	; (800127c <HAL_DMA_Init+0x1e4>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f000 8099 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_DMA_Init+0x1e8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	f000 8093 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a68      	ldr	r2, [pc, #416]	; (8001284 <HAL_DMA_Init+0x1ec>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f000 808d 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a66      	ldr	r2, [pc, #408]	; (8001288 <HAL_DMA_Init+0x1f0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	f000 8087 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a64      	ldr	r2, [pc, #400]	; (800128c <HAL_DMA_Init+0x1f4>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f000 8081 	beq.w	8001202 <HAL_DMA_Init+0x16a>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a62      	ldr	r2, [pc, #392]	; (8001290 <HAL_DMA_Init+0x1f8>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d07b      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a61      	ldr	r2, [pc, #388]	; (8001294 <HAL_DMA_Init+0x1fc>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d076      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a5f      	ldr	r2, [pc, #380]	; (8001298 <HAL_DMA_Init+0x200>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d071      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a5e      	ldr	r2, [pc, #376]	; (800129c <HAL_DMA_Init+0x204>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d06c      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a5c      	ldr	r2, [pc, #368]	; (80012a0 <HAL_DMA_Init+0x208>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d067      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a5b      	ldr	r2, [pc, #364]	; (80012a4 <HAL_DMA_Init+0x20c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d062      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a59      	ldr	r2, [pc, #356]	; (80012a8 <HAL_DMA_Init+0x210>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d05d      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_DMA_Init+0x214>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d058      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_DMA_Init+0x218>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d053      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a55      	ldr	r2, [pc, #340]	; (80012b4 <HAL_DMA_Init+0x21c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d04e      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a53      	ldr	r2, [pc, #332]	; (80012b8 <HAL_DMA_Init+0x220>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d049      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_DMA_Init+0x224>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d044      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a50      	ldr	r2, [pc, #320]	; (80012c0 <HAL_DMA_Init+0x228>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d03f      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a4f      	ldr	r2, [pc, #316]	; (80012c4 <HAL_DMA_Init+0x22c>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d03a      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a4d      	ldr	r2, [pc, #308]	; (80012c8 <HAL_DMA_Init+0x230>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d035      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a4c      	ldr	r2, [pc, #304]	; (80012cc <HAL_DMA_Init+0x234>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d030      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a4a      	ldr	r2, [pc, #296]	; (80012d0 <HAL_DMA_Init+0x238>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d02b      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_DMA_Init+0x23c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d026      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a47      	ldr	r2, [pc, #284]	; (80012d8 <HAL_DMA_Init+0x240>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d021      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a46      	ldr	r2, [pc, #280]	; (80012dc <HAL_DMA_Init+0x244>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d01c      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a44      	ldr	r2, [pc, #272]	; (80012e0 <HAL_DMA_Init+0x248>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d017      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a43      	ldr	r2, [pc, #268]	; (80012e4 <HAL_DMA_Init+0x24c>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d012      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a41      	ldr	r2, [pc, #260]	; (80012e8 <HAL_DMA_Init+0x250>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d00d      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a40      	ldr	r2, [pc, #256]	; (80012ec <HAL_DMA_Init+0x254>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d008      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a3e      	ldr	r2, [pc, #248]	; (80012f0 <HAL_DMA_Init+0x258>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_DMA_Init+0x16a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	; (80012f4 <HAL_DMA_Init+0x25c>)
 8001200:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0206 	orr.w	r2, r2, #6
 8001220:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001222:	e00f      	b.n	8001244 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001224:	f7ff fe1c 	bl	8000e60 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b05      	cmp	r3, #5
 8001230:	d908      	bls.n	8001244 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2210      	movs	r2, #16
 8001236:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2203      	movs	r2, #3
 800123c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e015      	b.n	8001270 <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1e8      	bne.n	8001224 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fb30 	bl	80018b8 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020050 	.word	0x40020050
 800127c:	50020050 	.word	0x50020050
 8001280:	400200d0 	.word	0x400200d0
 8001284:	500200d0 	.word	0x500200d0
 8001288:	40020150 	.word	0x40020150
 800128c:	50020150 	.word	0x50020150
 8001290:	400201d0 	.word	0x400201d0
 8001294:	500201d0 	.word	0x500201d0
 8001298:	40020250 	.word	0x40020250
 800129c:	50020250 	.word	0x50020250
 80012a0:	400202d0 	.word	0x400202d0
 80012a4:	500202d0 	.word	0x500202d0
 80012a8:	40020350 	.word	0x40020350
 80012ac:	50020350 	.word	0x50020350
 80012b0:	400203d0 	.word	0x400203d0
 80012b4:	500203d0 	.word	0x500203d0
 80012b8:	40021050 	.word	0x40021050
 80012bc:	50021050 	.word	0x50021050
 80012c0:	400210d0 	.word	0x400210d0
 80012c4:	500210d0 	.word	0x500210d0
 80012c8:	40021150 	.word	0x40021150
 80012cc:	50021150 	.word	0x50021150
 80012d0:	400211d0 	.word	0x400211d0
 80012d4:	500211d0 	.word	0x500211d0
 80012d8:	40021250 	.word	0x40021250
 80012dc:	50021250 	.word	0x50021250
 80012e0:	400212d0 	.word	0x400212d0
 80012e4:	500212d0 	.word	0x500212d0
 80012e8:	40021350 	.word	0x40021350
 80012ec:	50021350 	.word	0x50021350
 80012f0:	400213d0 	.word	0x400213d0
 80012f4:	500213d0 	.word	0x500213d0

080012f8 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e04f      	b.n	80013b0 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_DMA_Start_IT+0x26>
 800131a:	2302      	movs	r3, #2
 800131c:	e048      	b.n	80013b0 <HAL_DMA_Start_IT+0xb8>
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b01      	cmp	r3, #1
 8001330:	d136      	bne.n	80013a0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2202      	movs	r2, #2
 8001336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fa91 	bl	800186e <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 800135a:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001360:	2b00      	cmp	r3, #0
 8001362:	d007      	beq.n	8001374 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	695a      	ldr	r2, [r3, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001372:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001378:	2b00      	cmp	r3, #0
 800137a:	d007      	beq.n	800138c <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800138a:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	695a      	ldr	r2, [r3, #20]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f042 0201 	orr.w	r2, r2, #1
 800139a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e007      	b.n	80013b0 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2240      	movs	r2, #64	; 0x40
 80013a4:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80013c0:	f7ff fd4e 	bl	8000e60 <HAL_GetTick>
 80013c4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e06b      	b.n	80014a8 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d008      	beq.n	80013ee <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2220      	movs	r2, #32
 80013e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e05c      	b.n	80014a8 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2205      	movs	r2, #5
 8001402:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001406:	e020      	b.n	800144a <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001408:	f7ff fd2a 	bl	8000e60 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b05      	cmp	r3, #5
 8001414:	d919      	bls.n	800144a <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	f043 0210 	orr.w	r2, r3, #16
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2203      	movs	r2, #3
 8001426:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800143a:	2201      	movs	r2, #1
 800143c:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e02e      	b.n	80014a8 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0d7      	beq.n	8001408 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0202 	orr.w	r2, r2, #2
 8001466:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2204      	movs	r2, #4
 800146c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001478:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	2201      	movs	r2, #1
 8001494:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2200      	movs	r2, #0
 800149c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e019      	b.n	80014f6 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d004      	beq.n	80014d8 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2220      	movs	r2, #32
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e00e      	b.n	80014f6 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2204      	movs	r2, #4
 80014dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001512:	f023 030f 	bic.w	r3, r3, #15
 8001516:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001520:	3b50      	subs	r3, #80	; 0x50
 8001522:	09db      	lsrs	r3, r3, #7
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2201      	movs	r2, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	f000 8154 	beq.w	80017ea <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d011      	beq.n	8001574 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00a      	beq.n	8001574 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001566:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800157e:	2b00      	cmp	r3, #0
 8001580:	d011      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00a      	beq.n	80015a6 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001598:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	f043 0202 	orr.w	r2, r3, #2
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d011      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00a      	beq.n	80015d8 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ca:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d0:	f043 0204 	orr.w	r2, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d011      	beq.n	800160a <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00a      	beq.n	800160a <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fc:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f043 0208 	orr.w	r2, r3, #8
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001614:	2b00      	cmp	r3, #0
 8001616:	d013      	beq.n	8001640 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00c      	beq.n	8001640 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162e:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d059      	beq.n	8001702 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d052      	beq.n	8001702 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001664:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b04      	cmp	r3, #4
 8001670:	d13b      	bne.n	80016ea <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695a      	ldr	r2, [r3, #20]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001680:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0202 	orr.w	r2, r2, #2
 8001690:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80016a8:	e003      	b.n	80016b2 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2201      	movs	r2, #1
 80016ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c2:	2201      	movs	r2, #1
 80016c4:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2200      	movs	r2, #0
 80016cc:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8087 	beq.w	80017ee <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	4798      	blx	r3
        }

        return;
 80016e8:	e081      	b.n	80017ee <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2205      	movs	r2, #5
 80016ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170c:	2b00      	cmp	r3, #0
 800170e:	d039      	beq.n	8001784 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d032      	beq.n	8001784 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001726:	2b00      	cmp	r3, #0
 8001728:	d012      	beq.n	8001750 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	2b00      	cmp	r3, #0
 800173c:	d111      	bne.n	8001762 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174a:	2201      	movs	r2, #1
 800174c:	731a      	strb	r2, [r3, #12]
 800174e:	e008      	b.n	8001762 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f44f 7240 	mov.w	r2, #768	; 0x300
 800176a:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001788:	2b00      	cmp	r3, #0
 800178a:	d031      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	695a      	ldr	r2, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f042 0202 	orr.w	r2, r2, #2
 800179a:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2203      	movs	r2, #3
 80017ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80017b2:	e003      	b.n	80017bc <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017cc:	2201      	movs	r2, #1
 80017ce:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
 80017e8:	e002      	b.n	80017f0 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 80017ea:	bf00      	nop
 80017ec:	e000      	b.n	80017f0 <HAL_DMA_IRQHandler+0x2ee>
        return;
 80017ee:	bf00      	nop
    }
  }
}
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b085      	sub	sp, #20
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e02b      	b.n	8001862 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001812:	f023 030f 	bic.w	r3, r3, #15
 8001816:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001820:	3b50      	subs	r3, #80	; 0x50
 8001822:	09db      	lsrs	r3, r3, #7
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	2201      	movs	r2, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	2b00      	cmp	r3, #0
 8001838:	d012      	beq.n	8001860 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f003 0311 	and.w	r3, r3, #17
 8001840:	2b11      	cmp	r3, #17
 8001842:	d106      	bne.n	8001852 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	431a      	orrs	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	e006      	b.n	8001860 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	43db      	mvns	r3, r3
 800185a:	401a      	ands	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr

0800186e <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 800186e:	b480      	push	{r7}
 8001870:	b085      	sub	sp, #20
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001882:	0c1b      	lsrs	r3, r3, #16
 8001884:	041b      	lsls	r3, r3, #16
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	b291      	uxth	r1, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	430b      	orrs	r3, r1
 8001890:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800189a:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a53      	ldr	r2, [pc, #332]	; (8001a44 <DMA_Init+0x18c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f000 80a0 	beq.w	8001a3e <DMA_Init+0x186>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <DMA_Init+0x190>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f000 809a 	beq.w	8001a3e <DMA_Init+0x186>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <DMA_Init+0x194>)
 8001910:	4293      	cmp	r3, r2
 8001912:	f000 8094 	beq.w	8001a3e <DMA_Init+0x186>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a4d      	ldr	r2, [pc, #308]	; (8001a50 <DMA_Init+0x198>)
 800191c:	4293      	cmp	r3, r2
 800191e:	f000 808e 	beq.w	8001a3e <DMA_Init+0x186>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a4b      	ldr	r2, [pc, #300]	; (8001a54 <DMA_Init+0x19c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	f000 8088 	beq.w	8001a3e <DMA_Init+0x186>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <DMA_Init+0x1a0>)
 8001934:	4293      	cmp	r3, r2
 8001936:	f000 8082 	beq.w	8001a3e <DMA_Init+0x186>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <DMA_Init+0x1a4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d07c      	beq.n	8001a3e <DMA_Init+0x186>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <DMA_Init+0x1a8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d077      	beq.n	8001a3e <DMA_Init+0x186>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a44      	ldr	r2, [pc, #272]	; (8001a64 <DMA_Init+0x1ac>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d072      	beq.n	8001a3e <DMA_Init+0x186>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a42      	ldr	r2, [pc, #264]	; (8001a68 <DMA_Init+0x1b0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d06d      	beq.n	8001a3e <DMA_Init+0x186>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <DMA_Init+0x1b4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d068      	beq.n	8001a3e <DMA_Init+0x186>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <DMA_Init+0x1b8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d063      	beq.n	8001a3e <DMA_Init+0x186>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a3e      	ldr	r2, [pc, #248]	; (8001a74 <DMA_Init+0x1bc>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d05e      	beq.n	8001a3e <DMA_Init+0x186>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a3c      	ldr	r2, [pc, #240]	; (8001a78 <DMA_Init+0x1c0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d059      	beq.n	8001a3e <DMA_Init+0x186>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a3b      	ldr	r2, [pc, #236]	; (8001a7c <DMA_Init+0x1c4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d054      	beq.n	8001a3e <DMA_Init+0x186>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a39      	ldr	r2, [pc, #228]	; (8001a80 <DMA_Init+0x1c8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d04f      	beq.n	8001a3e <DMA_Init+0x186>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a38      	ldr	r2, [pc, #224]	; (8001a84 <DMA_Init+0x1cc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04a      	beq.n	8001a3e <DMA_Init+0x186>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a36      	ldr	r2, [pc, #216]	; (8001a88 <DMA_Init+0x1d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d045      	beq.n	8001a3e <DMA_Init+0x186>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a35      	ldr	r2, [pc, #212]	; (8001a8c <DMA_Init+0x1d4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d040      	beq.n	8001a3e <DMA_Init+0x186>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <DMA_Init+0x1d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d03b      	beq.n	8001a3e <DMA_Init+0x186>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <DMA_Init+0x1dc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d036      	beq.n	8001a3e <DMA_Init+0x186>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a30      	ldr	r2, [pc, #192]	; (8001a98 <DMA_Init+0x1e0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <DMA_Init+0x186>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2f      	ldr	r2, [pc, #188]	; (8001a9c <DMA_Init+0x1e4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <DMA_Init+0x186>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <DMA_Init+0x1e8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <DMA_Init+0x186>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <DMA_Init+0x1ec>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <DMA_Init+0x186>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a2a      	ldr	r2, [pc, #168]	; (8001aa8 <DMA_Init+0x1f0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01d      	beq.n	8001a3e <DMA_Init+0x186>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a29      	ldr	r2, [pc, #164]	; (8001aac <DMA_Init+0x1f4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d018      	beq.n	8001a3e <DMA_Init+0x186>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a27      	ldr	r2, [pc, #156]	; (8001ab0 <DMA_Init+0x1f8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <DMA_Init+0x186>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <DMA_Init+0x1fc>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <DMA_Init+0x186>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <DMA_Init+0x200>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <DMA_Init+0x186>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a23      	ldr	r2, [pc, #140]	; (8001abc <DMA_Init+0x204>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <DMA_Init+0x186>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a21      	ldr	r2, [pc, #132]	; (8001ac0 <DMA_Init+0x208>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d142      	bne.n	8001ac4 <DMA_Init+0x20c>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e041      	b.n	8001ac6 <DMA_Init+0x20e>
 8001a42:	bf00      	nop
 8001a44:	40020050 	.word	0x40020050
 8001a48:	50020050 	.word	0x50020050
 8001a4c:	400200d0 	.word	0x400200d0
 8001a50:	500200d0 	.word	0x500200d0
 8001a54:	40020150 	.word	0x40020150
 8001a58:	50020150 	.word	0x50020150
 8001a5c:	400201d0 	.word	0x400201d0
 8001a60:	500201d0 	.word	0x500201d0
 8001a64:	40020250 	.word	0x40020250
 8001a68:	50020250 	.word	0x50020250
 8001a6c:	400202d0 	.word	0x400202d0
 8001a70:	500202d0 	.word	0x500202d0
 8001a74:	40020350 	.word	0x40020350
 8001a78:	50020350 	.word	0x50020350
 8001a7c:	400203d0 	.word	0x400203d0
 8001a80:	500203d0 	.word	0x500203d0
 8001a84:	40021050 	.word	0x40021050
 8001a88:	50021050 	.word	0x50021050
 8001a8c:	400210d0 	.word	0x400210d0
 8001a90:	500210d0 	.word	0x500210d0
 8001a94:	40021150 	.word	0x40021150
 8001a98:	50021150 	.word	0x50021150
 8001a9c:	400211d0 	.word	0x400211d0
 8001aa0:	500211d0 	.word	0x500211d0
 8001aa4:	40021250 	.word	0x40021250
 8001aa8:	50021250 	.word	0x50021250
 8001aac:	400212d0 	.word	0x400212d0
 8001ab0:	500212d0 	.word	0x500212d0
 8001ab4:	40021350 	.word	0x40021350
 8001ab8:	50021350 	.word	0x50021350
 8001abc:	400213d0 	.word	0x400213d0
 8001ac0:	500213d0 	.word	0x500213d0
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d012      	beq.n	8001af0 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	051b      	lsls	r3, r3, #20
 8001ad6:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001ada:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001ae8:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* defined (DMA_CTR1_SSEC) */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4313      	orrs	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b20:	f040 80b0 	bne.w	8001c84 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a84      	ldr	r2, [pc, #528]	; (8001d3c <DMA_Init+0x484>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	f000 80a0 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a82      	ldr	r2, [pc, #520]	; (8001d40 <DMA_Init+0x488>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	f000 809a 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a80      	ldr	r2, [pc, #512]	; (8001d44 <DMA_Init+0x48c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	f000 8094 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7e      	ldr	r2, [pc, #504]	; (8001d48 <DMA_Init+0x490>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	f000 808e 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <DMA_Init+0x494>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	f000 8088 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a7a      	ldr	r2, [pc, #488]	; (8001d50 <DMA_Init+0x498>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	f000 8082 	beq.w	8001c70 <DMA_Init+0x3b8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a78      	ldr	r2, [pc, #480]	; (8001d54 <DMA_Init+0x49c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d07c      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a77      	ldr	r2, [pc, #476]	; (8001d58 <DMA_Init+0x4a0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d077      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <DMA_Init+0x4a4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d072      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a74      	ldr	r2, [pc, #464]	; (8001d60 <DMA_Init+0x4a8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d06d      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a72      	ldr	r2, [pc, #456]	; (8001d64 <DMA_Init+0x4ac>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d068      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a71      	ldr	r2, [pc, #452]	; (8001d68 <DMA_Init+0x4b0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d063      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a6f      	ldr	r2, [pc, #444]	; (8001d6c <DMA_Init+0x4b4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d05e      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <DMA_Init+0x4b8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d059      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a6c      	ldr	r2, [pc, #432]	; (8001d74 <DMA_Init+0x4bc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d054      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6b      	ldr	r2, [pc, #428]	; (8001d78 <DMA_Init+0x4c0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04f      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a69      	ldr	r2, [pc, #420]	; (8001d7c <DMA_Init+0x4c4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d04a      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a68      	ldr	r2, [pc, #416]	; (8001d80 <DMA_Init+0x4c8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d045      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a66      	ldr	r2, [pc, #408]	; (8001d84 <DMA_Init+0x4cc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d040      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <DMA_Init+0x4d0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d03b      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a63      	ldr	r2, [pc, #396]	; (8001d8c <DMA_Init+0x4d4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d036      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a62      	ldr	r2, [pc, #392]	; (8001d90 <DMA_Init+0x4d8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d031      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a60      	ldr	r2, [pc, #384]	; (8001d94 <DMA_Init+0x4dc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d02c      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	; (8001d98 <DMA_Init+0x4e0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d027      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a5d      	ldr	r2, [pc, #372]	; (8001d9c <DMA_Init+0x4e4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d022      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a5c      	ldr	r2, [pc, #368]	; (8001da0 <DMA_Init+0x4e8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01d      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a5a      	ldr	r2, [pc, #360]	; (8001da4 <DMA_Init+0x4ec>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d018      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a59      	ldr	r2, [pc, #356]	; (8001da8 <DMA_Init+0x4f0>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a57      	ldr	r2, [pc, #348]	; (8001dac <DMA_Init+0x4f4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00e      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a56      	ldr	r2, [pc, #344]	; (8001db0 <DMA_Init+0x4f8>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a54      	ldr	r2, [pc, #336]	; (8001db4 <DMA_Init+0x4fc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d004      	beq.n	8001c70 <DMA_Init+0x3b8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a53      	ldr	r2, [pc, #332]	; (8001db8 <DMA_Init+0x500>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d101      	bne.n	8001c74 <DMA_Init+0x3bc>
 8001c70:	2301      	movs	r3, #1
 8001c72:	e000      	b.n	8001c76 <DMA_Init+0x3be>
 8001c74:	2300      	movs	r3, #0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	e008      	b.n	8001c96 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c8c:	d103      	bne.n	8001c96 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c94:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <DMA_Init+0x504>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	68f9      	ldr	r1, [r7, #12]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a2a      	ldr	r2, [pc, #168]	; (8001d6c <DMA_Init+0x4b4>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <DMA_Init+0x454>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <DMA_Init+0x4b8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <DMA_Init+0x454>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a27      	ldr	r2, [pc, #156]	; (8001d74 <DMA_Init+0x4bc>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <DMA_Init+0x454>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a26      	ldr	r2, [pc, #152]	; (8001d78 <DMA_Init+0x4c0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <DMA_Init+0x454>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a30      	ldr	r2, [pc, #192]	; (8001dac <DMA_Init+0x4f4>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <DMA_Init+0x454>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <DMA_Init+0x4f8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <DMA_Init+0x454>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2d      	ldr	r2, [pc, #180]	; (8001db4 <DMA_Init+0x4fc>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <DMA_Init+0x454>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a2c      	ldr	r2, [pc, #176]	; (8001db8 <DMA_Init+0x500>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <DMA_Init+0x458>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <DMA_Init+0x45a>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d007      	beq.n	8001d26 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40020050 	.word	0x40020050
 8001d40:	50020050 	.word	0x50020050
 8001d44:	400200d0 	.word	0x400200d0
 8001d48:	500200d0 	.word	0x500200d0
 8001d4c:	40020150 	.word	0x40020150
 8001d50:	50020150 	.word	0x50020150
 8001d54:	400201d0 	.word	0x400201d0
 8001d58:	500201d0 	.word	0x500201d0
 8001d5c:	40020250 	.word	0x40020250
 8001d60:	50020250 	.word	0x50020250
 8001d64:	400202d0 	.word	0x400202d0
 8001d68:	500202d0 	.word	0x500202d0
 8001d6c:	40020350 	.word	0x40020350
 8001d70:	50020350 	.word	0x50020350
 8001d74:	400203d0 	.word	0x400203d0
 8001d78:	500203d0 	.word	0x500203d0
 8001d7c:	40021050 	.word	0x40021050
 8001d80:	50021050 	.word	0x50021050
 8001d84:	400210d0 	.word	0x400210d0
 8001d88:	500210d0 	.word	0x500210d0
 8001d8c:	40021150 	.word	0x40021150
 8001d90:	50021150 	.word	0x50021150
 8001d94:	400211d0 	.word	0x400211d0
 8001d98:	500211d0 	.word	0x500211d0
 8001d9c:	40021250 	.word	0x40021250
 8001da0:	50021250 	.word	0x50021250
 8001da4:	400212d0 	.word	0x400212d0
 8001da8:	500212d0 	.word	0x500212d0
 8001dac:	40021350 	.word	0x40021350
 8001db0:	50021350 	.word	0x50021350
 8001db4:	400213d0 	.word	0x400213d0
 8001db8:	500213d0 	.word	0x500213d0
 8001dbc:	3cc02100 	.word	0x3cc02100

08001dc0 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_DMAEx_List_Start_IT+0x16>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e082      	b.n	8001ee0 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001de0:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001dee:	7dfb      	ldrb	r3, [r7, #23]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_DMAEx_List_Start_IT+0x40>
 8001df4:	7dfb      	ldrb	r3, [r7, #23]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d16a      	bne.n	8001ed0 <HAL_DMAEx_List_Start_IT+0x110>
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d067      	beq.n	8001ed0 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d157      	bne.n	8001ebc <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_DMAEx_List_Start_IT+0x5a>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e062      	b.n	8001ee0 <HAL_DMAEx_List_Start_IT+0x120>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2202      	movs	r2, #2
 8001e26:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2e:	2202      	movs	r2, #2
 8001e30:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8001e4e:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695a      	ldr	r2, [r3, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d007      	beq.n	8001e80 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7e:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f107 010c 	add.w	r1, r7, #12
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 f82b 	bl	8001ee8 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	0c0b      	lsrs	r3, r1, #16
 8001ea0:	041b      	lsls	r3, r3, #16
 8001ea2:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	68f9      	ldr	r1, [r7, #12]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695a      	ldr	r2, [r3, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e007      	b.n	8001ee0 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2240      	movs	r2, #64	; 0x40
 8001ed4:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00c      	beq.n	8001f1a <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d002      	beq.n	8001f0c <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <DMA_List_GetCLLRNodeInfo+0x58>)
 8001f0a:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00f      	beq.n	8001f32 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8001f18:	e00b      	b.n	8001f32 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8001f24:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2205      	movs	r2, #5
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	fe010000 	.word	0xfe010000
 8001f44:	f8010000 	.word	0xf8010000

08001f48 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f56:	e136      	b.n	80021c6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 8128 	beq.w	80021c0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x38>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b12      	cmp	r3, #18
 8001f7e:	d125      	bne.n	8001fcc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	08da      	lsrs	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3208      	adds	r2, #8
 8001f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	6979      	ldr	r1, [r7, #20]
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0203 	and.w	r2, r3, #3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d00b      	beq.n	8002020 <HAL_GPIO_Init+0xd8>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d007      	beq.n	8002020 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002014:	2b11      	cmp	r3, #17
 8002016:	d003      	beq.n	8002020 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b12      	cmp	r3, #18
 800201e:	d130      	bne.n	8002082 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4013      	ands	r3, r2
 8002036:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002056:	2201      	movs	r2, #1
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	4013      	ands	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	f003 0201 	and.w	r2, r3, #1
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4313      	orrs	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b03      	cmp	r3, #3
 8002088:	d017      	beq.n	80020ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4013      	ands	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07c      	beq.n	80021c0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80020c6:	4a47      	ldr	r2, [pc, #284]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	089b      	lsrs	r3, r3, #2
 80020cc:	3318      	adds	r3, #24
 80020ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	220f      	movs	r2, #15
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	4013      	ands	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0a9a      	lsrs	r2, r3, #10
 80020ee:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	00d2      	lsls	r2, r2, #3
 80020fa:	4093      	lsls	r3, r2
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002102:	4938      	ldr	r1, [pc, #224]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3318      	adds	r3, #24
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	43db      	mvns	r3, r3
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002134:	4a2b      	ldr	r2, [pc, #172]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800213a:	4b2a      	ldr	r3, [pc, #168]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4013      	ands	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002156:	697a      	ldr	r2, [r7, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800215e:	4a21      	ldr	r2, [pc, #132]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002164:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800216a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4013      	ands	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800218a:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002192:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 8002194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002198:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_GPIO_Init+0x29c>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3301      	adds	r3, #1
 80021c4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f47f aec1 	bne.w	8001f58 <HAL_GPIO_Init+0x10>
  }
}
 80021d6:	bf00      	nop
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	44022000 	.word	0x44022000
 80021e8:	002f7f7f 	.word	0x002f7f7f

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002208:	e002      	b.n	8002210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f000 bc28 	b.w	8002a80 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	f003 0318 	and.w	r3, r3, #24
 8002238:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800223a:	4b92      	ldr	r3, [pc, #584]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d05b      	beq.n	8002308 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b08      	cmp	r3, #8
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x46>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b18      	cmp	r3, #24
 800225a:	d114      	bne.n	8002286 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d111      	bne.n	8002286 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	f000 bc08 	b.w	8002a80 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002270:	4b84      	ldr	r3, [pc, #528]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	4981      	ldr	r1, [pc, #516]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002280:	4313      	orrs	r3, r2
 8002282:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002284:	e040      	b.n	8002308 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d023      	beq.n	80022d6 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800228e:	4b7d      	ldr	r3, [pc, #500]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7c      	ldr	r2, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe fde1 	bl	8000e60 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022a2:	f7fe fddd 	bl	8000e60 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e3e5      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	041b      	lsls	r3, r3, #16
 80022ce:	496d      	ldr	r1, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	618b      	str	r3, [r1, #24]
 80022d4:	e018      	b.n	8002308 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022d6:	4b6b      	ldr	r3, [pc, #428]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a6a      	ldr	r2, [pc, #424]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e2:	f7fe fdbd 	bl	8000e60 <HAL_GetTick>
 80022e6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022ea:	f7fe fdb9 	bl	8000e60 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e3c1      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80022fc:	4b61      	ldr	r3, [pc, #388]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80a0 	beq.w	8002456 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	2b10      	cmp	r3, #16
 800231a:	d005      	beq.n	8002328 <HAL_RCC_OscConfig+0x10c>
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b18      	cmp	r3, #24
 8002320:	d109      	bne.n	8002336 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 8092 	bne.w	8002456 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e3a4      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d106      	bne.n	800234e <HAL_RCC_OscConfig+0x132>
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a4f      	ldr	r2, [pc, #316]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	e058      	b.n	8002400 <HAL_RCC_OscConfig+0x1e4>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d112      	bne.n	800237c <HAL_RCC_OscConfig+0x160>
 8002356:	4b4b      	ldr	r3, [pc, #300]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a4a      	ldr	r2, [pc, #296]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002368:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a44      	ldr	r2, [pc, #272]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e041      	b.n	8002400 <HAL_RCC_OscConfig+0x1e4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0x190>
 8002386:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3e      	ldr	r2, [pc, #248]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b3c      	ldr	r3, [pc, #240]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002398:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a38      	ldr	r2, [pc, #224]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e029      	b.n	8002400 <HAL_RCC_OscConfig+0x1e4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80023b4:	d112      	bne.n	80023dc <HAL_RCC_OscConfig+0x1c0>
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a2f      	ldr	r2, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e011      	b.n	8002400 <HAL_RCC_OscConfig+0x1e4>
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a28      	ldr	r2, [pc, #160]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a25      	ldr	r2, [pc, #148]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 80023fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fd2a 	bl	8000e60 <HAL_GetTick>
 800240c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002410:	f7fe fd26 	bl	8000e60 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e32e      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002422:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x1f4>
 800242e:	e012      	b.n	8002456 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fd16 	bl	8000e60 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002438:	f7fe fd12 	bl	8000e60 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e31a      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800244a:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <HAL_RCC_OscConfig+0x268>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 809a 	beq.w	8002598 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x25a>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	2b18      	cmp	r3, #24
 800246e:	d149      	bne.n	8002504 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d146      	bne.n	8002504 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d104      	bne.n	8002488 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e2fe      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
 8002482:	bf00      	nop
 8002484:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800248e:	4b9a      	ldr	r3, [pc, #616]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0218 	and.w	r2, r3, #24
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	429a      	cmp	r2, r3
 800249c:	d014      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800249e:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f023 0218 	bic.w	r2, r3, #24
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	4993      	ldr	r1, [pc, #588]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80024b0:	f000 fdd0 	bl	8003054 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024b4:	4b91      	ldr	r3, [pc, #580]	; (80026fc <HAL_RCC_OscConfig+0x4e0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fc87 	bl	8000dcc <HAL_InitTick>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e2db      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7fe fcca 	bl	8000e60 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80024d0:	f7fe fcc6 	bl	8000e60 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e2ce      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80024ee:	4b82      	ldr	r3, [pc, #520]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	497e      	ldr	r1, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002502:	e049      	b.n	8002598 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d02c      	beq.n	8002566 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800250c:	4b7a      	ldr	r3, [pc, #488]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 0218 	bic.w	r2, r3, #24
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	4977      	ldr	r1, [pc, #476]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a75      	ldr	r2, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fc99 	bl	8000e60 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002532:	f7fe fc95 	bl	8000e60 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e29d      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002544:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002550:	4b69      	ldr	r3, [pc, #420]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	4966      	ldr	r1, [pc, #408]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	610b      	str	r3, [r1, #16]
 8002564:	e018      	b.n	8002598 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002566:	4b64      	ldr	r3, [pc, #400]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a63      	ldr	r2, [pc, #396]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fc75 	bl	8000e60 <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800257a:	f7fe fc71 	bl	8000e60 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e279      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800258c:	4b5a      	ldr	r3, [pc, #360]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d03c      	beq.n	800261e <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ac:	4b52      	ldr	r3, [pc, #328]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025b2:	4a51      	ldr	r2, [pc, #324]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80025b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025bc:	f7fe fc50 	bl	8000e60 <HAL_GetTick>
 80025c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025c4:	f7fe fc4c 	bl	8000e60 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e254      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80025d6:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80025d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d0ef      	beq.n	80025c4 <HAL_RCC_OscConfig+0x3a8>
 80025e4:	e01b      	b.n	800261e <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e6:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80025e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025ec:	4a42      	ldr	r2, [pc, #264]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80025ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fc33 	bl	8000e60 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fc2f 	bl	8000e60 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e237      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002616:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1ef      	bne.n	80025fe <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 80d2 	beq.w	80027d0 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800262c:	4b34      	ldr	r3, [pc, #208]	; (8002700 <HAL_RCC_OscConfig+0x4e4>)
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d118      	bne.n	800266a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002638:	4b31      	ldr	r3, [pc, #196]	; (8002700 <HAL_RCC_OscConfig+0x4e4>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	4a30      	ldr	r2, [pc, #192]	; (8002700 <HAL_RCC_OscConfig+0x4e4>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fc0c 	bl	8000e60 <HAL_GetTick>
 8002648:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fc08 	bl	8000e60 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e210      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HAL_RCC_OscConfig+0x4e4>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x468>
 8002672:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002678:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002682:	e074      	b.n	800276e <HAL_RCC_OscConfig+0x552>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <HAL_RCC_OscConfig+0x4a2>
 800268c:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800268e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002692:	4a19      	ldr	r2, [pc, #100]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 800269e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026ac:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026b2:	4a11      	ldr	r2, [pc, #68]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026bc:	e057      	b.n	800276e <HAL_RCC_OscConfig+0x552>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d11e      	bne.n	8002704 <HAL_RCC_OscConfig+0x4e8>
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026e6:	4b04      	ldr	r3, [pc, #16]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ec:	4a02      	ldr	r2, [pc, #8]	; (80026f8 <HAL_RCC_OscConfig+0x4dc>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x552>
 80026f8:	44020c00 	.word	0x44020c00
 80026fc:	20000004 	.word	0x20000004
 8002700:	44020800 	.word	0x44020800
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b85      	cmp	r3, #133	; 0x85
 800270a:	d118      	bne.n	800273e <HAL_RCC_OscConfig+0x522>
 800270c:	4ba2      	ldr	r3, [pc, #648]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800270e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002712:	4aa1      	ldr	r2, [pc, #644]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800271c:	4b9e      	ldr	r3, [pc, #632]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800271e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002722:	4a9d      	ldr	r2, [pc, #628]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800272c:	4b9a      	ldr	r3, [pc, #616]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800272e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002732:	4a99      	ldr	r2, [pc, #612]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800273c:	e017      	b.n	800276e <HAL_RCC_OscConfig+0x552>
 800273e:	4b96      	ldr	r3, [pc, #600]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002744:	4a94      	ldr	r2, [pc, #592]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002746:	f023 0301 	bic.w	r3, r3, #1
 800274a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800274e:	4b92      	ldr	r3, [pc, #584]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002750:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002754:	4a90      	ldr	r2, [pc, #576]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800275e:	4b8e      	ldr	r3, [pc, #568]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002764:	4a8c      	ldr	r2, [pc, #560]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7fe fb73 	bl	8000e60 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fb6f 	bl	8000e60 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e175      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002794:	4b80      	ldr	r3, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ed      	beq.n	800277e <HAL_RCC_OscConfig+0x562>
 80027a2:	e015      	b.n	80027d0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f7fe fb5c 	bl	8000e60 <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ac:	f7fe fb58 	bl	8000e60 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e15e      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c2:	4b75      	ldr	r3, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ed      	bne.n	80027ac <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d036      	beq.n	800284a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d019      	beq.n	8002818 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e4:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a6b      	ldr	r2, [pc, #428]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80027ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fb36 	bl	8000e60 <HAL_GetTick>
 80027f4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80027f8:	f7fe fb32 	bl	8000e60 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e13a      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x5dc>
 8002816:	e018      	b.n	800284a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002818:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a5e      	ldr	r2, [pc, #376]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800281e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002822:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fb1c 	bl	8000e60 <HAL_GetTick>
 8002828:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800282c:	f7fe fb18 	bl	8000e60 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e120      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800283e:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8115 	beq.w	8002a7e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	2b18      	cmp	r3, #24
 8002858:	f000 80af 	beq.w	80029ba <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2b02      	cmp	r3, #2
 8002862:	f040 8086 	bne.w	8002972 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002866:	4b4c      	ldr	r3, [pc, #304]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4b      	ldr	r2, [pc, #300]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800286c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002870:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe faf5 	bl	8000e60 <HAL_GetTick>
 8002876:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800287a:	f7fe faf1 	bl	8000e60 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e0f9      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f0      	bne.n	800287a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8002898:	4b3f      	ldr	r3, [pc, #252]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028a0:	f023 0303 	bic.w	r3, r3, #3
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ac:	0212      	lsls	r2, r2, #8
 80028ae:	430a      	orrs	r2, r1
 80028b0:	4939      	ldr	r1, [pc, #228]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	628b      	str	r3, [r1, #40]	; 0x28
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	3b01      	subs	r3, #1
 80028bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	3b01      	subs	r3, #1
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d0:	3b01      	subs	r3, #1
 80028d2:	041b      	lsls	r3, r3, #16
 80028d4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	3b01      	subs	r3, #1
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028e6:	492c      	ldr	r1, [pc, #176]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80028ec:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f0:	4a29      	ldr	r2, [pc, #164]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80028f2:	f023 0310 	bic.w	r3, r3, #16
 80028f6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fc:	4a26      	ldr	r2, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f023 020c 	bic.w	r2, r3, #12
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291a:	491f      	ldr	r1, [pc, #124]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800291c:	4313      	orrs	r3, r2
 800291e:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8002920:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	f023 0220 	bic.w	r2, r3, #32
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292c:	491a      	ldr	r1, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	4a18      	ldr	r2, [pc, #96]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe fa89 	bl	8000e60 <HAL_GetTick>
 800294e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002952:	f7fe fa85 	bl	8000e60 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e08d      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002964:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_OscConfig+0x736>
 8002970:	e085      	b.n	8002a7e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_RCC_OscConfig+0x77c>)
 8002978:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fa6f 	bl	8000e60 <HAL_GetTick>
 8002982:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8002986:	f7fe fa6b 	bl	8000e60 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d903      	bls.n	800299c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e073      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
 8002998:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800299c:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ee      	bne.n	8002986 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80029a8:	4b37      	ldr	r3, [pc, #220]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	4a36      	ldr	r2, [pc, #216]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 80029ae:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80029b2:	f023 0303 	bic.w	r3, r3, #3
 80029b6:	6293      	str	r3, [r2, #40]	; 0x28
 80029b8:	e061      	b.n	8002a7e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80029ba:	4b33      	ldr	r3, [pc, #204]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029c0:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 80029c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029c4:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d031      	beq.n	8002a32 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d12a      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	0a1b      	lsrs	r3, r3, #8
 80029e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d122      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d11a      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0a5b      	lsrs	r3, r3, #9
 8002a00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a08:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d111      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	0c1b      	lsrs	r3, r3, #16
 8002a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d108      	bne.n	8002a32 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	0e1b      	lsrs	r3, r3, #24
 8002a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e024      	b.n	8002a80 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3a:	08db      	lsrs	r3, r3, #3
 8002a3c:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d01a      	beq.n	8002a7e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002a48:	4b0f      	ldr	r3, [pc, #60]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a4e:	f023 0310 	bic.w	r3, r3, #16
 8002a52:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a54:	f7fe fa04 	bl	8000e60 <HAL_GetTick>
 8002a58:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002a5a:	bf00      	nop
 8002a5c:	f7fe fa00 	bl	8000e60 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d0f9      	beq.n	8002a5c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6c:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <HAL_RCC_OscConfig+0x86c>)
 8002a78:	f043 0310 	orr.w	r3, r3, #16
 8002a7c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	44020c00 	.word	0x44020c00

08002a8c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e19e      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b83      	ldr	r3, [pc, #524]	; (8002cb0 <HAL_RCC_ClockConfig+0x224>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d910      	bls.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b80      	ldr	r3, [pc, #512]	; (8002cb0 <HAL_RCC_ClockConfig+0x224>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	497e      	ldr	r1, [pc, #504]	; (8002cb0 <HAL_RCC_ClockConfig+0x224>)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b7c      	ldr	r3, [pc, #496]	; (8002cb0 <HAL_RCC_ClockConfig+0x224>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e186      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	4b74      	ldr	r3, [pc, #464]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d909      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002aee:	4b71      	ldr	r3, [pc, #452]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	496d      	ldr	r1, [pc, #436]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	4b68      	ldr	r3, [pc, #416]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d909      	bls.n	8002b34 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b20:	4b64      	ldr	r3, [pc, #400]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	4961      	ldr	r1, [pc, #388]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d010      	beq.n	8002b62 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d908      	bls.n	8002b62 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4955      	ldr	r1, [pc, #340]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d010      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d908      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002b7e:	4b4d      	ldr	r3, [pc, #308]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f023 020f 	bic.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	494a      	ldr	r1, [pc, #296]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8093 	beq.w	8002cc4 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e113      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d115      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e107      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002bd6:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0fb      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0f3      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002bf6:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	492c      	ldr	r1, [pc, #176]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c08:	f7fe f92a 	bl	8000e60 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d112      	bne.n	8002c3c <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c16:	e00a      	b.n	8002c2e <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c18:	f7fe f922 	bl	8000e60 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0d7      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f003 0318 	and.w	r3, r3, #24
 8002c36:	2b18      	cmp	r3, #24
 8002c38:	d1ee      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x18c>
 8002c3a:	e043      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d112      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c44:	e00a      	b.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c46:	f7fe f90b 	bl	8000e60 <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e0c0      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c5c:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 0318 	and.w	r3, r3, #24
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d1ee      	bne.n	8002c46 <HAL_RCC_ClockConfig+0x1ba>
 8002c68:	e02c      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d122      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe f8f4 	bl	8000e60 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0a9      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002c8a:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <HAL_RCC_ClockConfig+0x228>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0318 	and.w	r3, r3, #24
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x1e8>
 8002c96:	e015      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe f8e2 	bl	8000e60 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d906      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e097      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
 8002cae:	bf00      	nop
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cb8:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 0318 	and.w	r3, r3, #24
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1e9      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d010      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	4b44      	ldr	r3, [pc, #272]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d208      	bcs.n	8002cf2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002ce0:	4b41      	ldr	r3, [pc, #260]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 020f 	bic.w	r2, r3, #15
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	493e      	ldr	r1, [pc, #248]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 030f 	and.w	r3, r3, #15
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d210      	bcs.n	8002d22 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 020f 	bic.w	r2, r3, #15
 8002d08:	4938      	ldr	r1, [pc, #224]	; (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d10:	4b36      	ldr	r3, [pc, #216]	; (8002dec <HAL_RCC_ClockConfig+0x360>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e05d      	b.n	8002dde <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68da      	ldr	r2, [r3, #12]
 8002d32:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d208      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	4927      	ldr	r1, [pc, #156]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d012      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d209      	bcs.n	8002d82 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	491a      	ldr	r1, [pc, #104]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d209      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	490e      	ldr	r1, [pc, #56]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002db4:	f000 f822 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <HAL_RCC_ClockConfig+0x35c>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	490b      	ldr	r1, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x364>)
 8002dc4:	5ccb      	ldrb	r3, [r1, r3]
 8002dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x368>)
 8002dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_ClockConfig+0x36c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fffa 	bl	8000dcc <HAL_InitTick>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	44020c00 	.word	0x44020c00
 8002dec:	40022000 	.word	0x40022000
 8002df0:	08009a7c 	.word	0x08009a7c
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b089      	sub	sp, #36	; 0x24
 8002e00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e02:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f003 0318 	and.w	r3, r3, #24
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d102      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e0e:	4b8a      	ldr	r3, [pc, #552]	; (8003038 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e10:	61fb      	str	r3, [r7, #28]
 8002e12:	e107      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f003 0318 	and.w	r3, r3, #24
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d112      	bne.n	8002e46 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e20:	4b84      	ldr	r3, [pc, #528]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e2c:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	08db      	lsrs	r3, r3, #3
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	4a81      	ldr	r2, [pc, #516]	; (800303c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e0f1      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e40:	4b7e      	ldr	r3, [pc, #504]	; (800303c <HAL_RCC_GetSysClockFreq+0x240>)
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	e0ee      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e46:	4b7b      	ldr	r3, [pc, #492]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0318 	and.w	r3, r3, #24
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d102      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e52:	4b7b      	ldr	r3, [pc, #492]	; (8003040 <HAL_RCC_GetSysClockFreq+0x244>)
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e0e5      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e58:	4b76      	ldr	r3, [pc, #472]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f003 0318 	and.w	r3, r3, #24
 8002e60:	2b18      	cmp	r3, #24
 8002e62:	f040 80dd 	bne.w	8003020 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002e70:	4b70      	ldr	r3, [pc, #448]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002e7c:	4b6d      	ldr	r3, [pc, #436]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	091b      	lsrs	r3, r3, #4
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e88:	4b6a      	ldr	r3, [pc, #424]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	fb02 f303 	mul.w	r3, r2, r3
 8002e98:	ee07 3a90 	vmov	s15, r3
 8002e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea0:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80b7 	beq.w	800301a <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0xbe>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b03      	cmp	r3, #3
 8002eb6:	d056      	beq.n	8002f66 <HAL_RCC_GetSysClockFreq+0x16a>
 8002eb8:	e077      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002eba:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d02d      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002ec6:	4b5b      	ldr	r3, [pc, #364]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	08db      	lsrs	r3, r3, #3
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_RCC_GetSysClockFreq+0x240>)
 8002ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed6:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	ee07 3a90 	vmov	s15, r3
 8002ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ef0:	4b50      	ldr	r3, [pc, #320]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f00:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f04:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003044 <HAL_RCC_GetSysClockFreq+0x248>
 8002f08:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f14:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1c:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f20:	e065      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f2c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003048 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f44:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f48:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003044 <HAL_RCC_GetSysClockFreq+0x248>
 8002f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002f64:	e043      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	ee07 3a90 	vmov	s15, r3
 8002f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f70:	eddf 6a36 	vldr	s13, [pc, #216]	; 800304c <HAL_RCC_GetSysClockFreq+0x250>
 8002f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f78:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f88:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f8c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003044 <HAL_RCC_GetSysClockFreq+0x248>
 8002f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa4:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8002fa8:	e021      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	ee07 3a90 	vmov	s15, r3
 8002fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb4:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003050 <HAL_RCC_GetSysClockFreq+0x254>
 8002fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fcc:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fd0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003044 <HAL_RCC_GetSysClockFreq+0x248>
 8002fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002fec:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8002fee:	4b11      	ldr	r3, [pc, #68]	; (8003034 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	0a5b      	lsrs	r3, r3, #9
 8002ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003006:	edd7 6a06 	vldr	s13, [r7, #24]
 800300a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800300e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	61fb      	str	r3, [r7, #28]
 8003018:	e004      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e001      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCC_GetSysClockFreq+0x240>)
 8003022:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003024:	69fb      	ldr	r3, [r7, #28]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	44020c00 	.word	0x44020c00
 8003038:	003d0900 	.word	0x003d0900
 800303c:	03d09000 	.word	0x03d09000
 8003040:	017d7840 	.word	0x017d7840
 8003044:	46000000 	.word	0x46000000
 8003048:	4c742400 	.word	0x4c742400
 800304c:	4bbebc20 	.word	0x4bbebc20
 8003050:	4a742400 	.word	0x4a742400

08003054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003058:	f7ff fed0 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003062:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003066:	4907      	ldr	r1, [pc, #28]	; (8003084 <HAL_RCC_GetHCLKFreq+0x30>)
 8003068:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800306a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800306e:	fa22 f303 	lsr.w	r3, r2, r3
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <HAL_RCC_GetHCLKFreq+0x34>)
 8003074:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <HAL_RCC_GetHCLKFreq+0x34>)
 8003078:	681b      	ldr	r3, [r3, #0]
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	44020c00 	.word	0x44020c00
 8003084:	08009a7c 	.word	0x08009a7c
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003090:	f7ff ffe0 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	44020c00 	.word	0x44020c00
 80030b4:	08009a8c 	.word	0x08009a8c

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80030bc:	f7ff ffca 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	0a1b      	lsrs	r3, r3, #8
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4904      	ldr	r1, [pc, #16]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	44020c00 	.word	0x44020c00
 80030e0:	08009a8c 	.word	0x08009a8c

080030e4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80030e8:	f7ff ffb4 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetPCLK3Freq+0x24>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	0b1b      	lsrs	r3, r3, #12
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <HAL_RCC_GetPCLK3Freq+0x28>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	44020c00 	.word	0x44020c00
 800310c:	08009a8c 	.word	0x08009a8c

08003110 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003114:	b0d8      	sub	sp, #352	; 0x160
 8003116:	af00      	add	r7, sp, #0
 8003118:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800311c:	2300      	movs	r3, #0
 800311e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003122:	2300      	movs	r3, #0
 8003124:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003130:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003134:	2500      	movs	r5, #0
 8003136:	ea54 0305 	orrs.w	r3, r4, r5
 800313a:	d00b      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800313c:	4bcd      	ldr	r3, [pc, #820]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800313e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003142:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003146:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	4ac9      	ldr	r2, [pc, #804]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800314e:	430b      	orrs	r3, r1
 8003150:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003154:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f002 0801 	and.w	r8, r2, #1
 8003160:	f04f 0900 	mov.w	r9, #0
 8003164:	ea58 0309 	orrs.w	r3, r8, r9
 8003168:	d042      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800316a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	2b05      	cmp	r3, #5
 8003172:	d823      	bhi.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	080031c5 	.word	0x080031c5
 8003180:	08003195 	.word	0x08003195
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031c5 	.word	0x080031c5
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031c5 	.word	0x080031c5
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003194:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003198:	3308      	adds	r3, #8
 800319a:	4618      	mov	r0, r3
 800319c:	f004 feda 	bl	8007f54 <RCCEx_PLL2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80031a6:	e00e      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ac:	3330      	adds	r3, #48	; 0x30
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 ff68 	bl	8008084 <RCCEx_PLL3_Config>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80031ba:	e004      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031c2:	e000      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80031c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80031ce:	4ba9      	ldr	r3, [pc, #676]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031d4:	f023 0107 	bic.w	r1, r3, #7
 80031d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	4aa5      	ldr	r2, [pc, #660]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031e6:	e003      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f002 0a02 	and.w	sl, r2, #2
 80031fc:	f04f 0b00 	mov.w	fp, #0
 8003200:	ea5a 030b 	orrs.w	r3, sl, fp
 8003204:	f000 8088 	beq.w	8003318 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800320c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320e:	2b28      	cmp	r3, #40	; 0x28
 8003210:	d868      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	080032ed 	.word	0x080032ed
 800321c:	080032e5 	.word	0x080032e5
 8003220:	080032e5 	.word	0x080032e5
 8003224:	080032e5 	.word	0x080032e5
 8003228:	080032e5 	.word	0x080032e5
 800322c:	080032e5 	.word	0x080032e5
 8003230:	080032e5 	.word	0x080032e5
 8003234:	080032e5 	.word	0x080032e5
 8003238:	080032bd 	.word	0x080032bd
 800323c:	080032e5 	.word	0x080032e5
 8003240:	080032e5 	.word	0x080032e5
 8003244:	080032e5 	.word	0x080032e5
 8003248:	080032e5 	.word	0x080032e5
 800324c:	080032e5 	.word	0x080032e5
 8003250:	080032e5 	.word	0x080032e5
 8003254:	080032e5 	.word	0x080032e5
 8003258:	080032d1 	.word	0x080032d1
 800325c:	080032e5 	.word	0x080032e5
 8003260:	080032e5 	.word	0x080032e5
 8003264:	080032e5 	.word	0x080032e5
 8003268:	080032e5 	.word	0x080032e5
 800326c:	080032e5 	.word	0x080032e5
 8003270:	080032e5 	.word	0x080032e5
 8003274:	080032e5 	.word	0x080032e5
 8003278:	080032ed 	.word	0x080032ed
 800327c:	080032e5 	.word	0x080032e5
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	080032e5 	.word	0x080032e5
 800328c:	080032e5 	.word	0x080032e5
 8003290:	080032e5 	.word	0x080032e5
 8003294:	080032e5 	.word	0x080032e5
 8003298:	080032ed 	.word	0x080032ed
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032e5 	.word	0x080032e5
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080032e5 	.word	0x080032e5
 80032b8:	080032ed 	.word	0x080032ed
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80032bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032c0:	3308      	adds	r3, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 fe46 	bl	8007f54 <RCCEx_PLL2_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80032ce:	e00e      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d4:	3330      	adds	r3, #48	; 0x30
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fed4 	bl	8008084 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80032f6:	4b5f      	ldr	r3, [pc, #380]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80032f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80032fc:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003306:	4a5b      	ldr	r2, [pc, #364]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003308:	430b      	orrs	r3, r1
 800330a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800330e:	e003      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003310:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003314:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003318:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	f002 0304 	and.w	r3, r2, #4
 8003324:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003328:	2300      	movs	r3, #0
 800332a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800332e:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003332:	460b      	mov	r3, r1
 8003334:	4313      	orrs	r3, r2
 8003336:	d04e      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003338:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800333c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800333e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003342:	d02c      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003344:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003348:	d825      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	d028      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003354:	d81f      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003356:	2bc0      	cmp	r3, #192	; 0xc0
 8003358:	d025      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800335a:	2bc0      	cmp	r3, #192	; 0xc0
 800335c:	d81b      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800335e:	2b80      	cmp	r3, #128	; 0x80
 8003360:	d00f      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003362:	2b80      	cmp	r3, #128	; 0x80
 8003364:	d817      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d01f      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	d113      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800336e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003372:	3308      	adds	r3, #8
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fded 	bl	8007f54 <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003380:	e014      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003382:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003386:	3330      	adds	r3, #48	; 0x30
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fe7b 	bl	8008084 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003394:	e00a      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800339c:	e006      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800339e:	bf00      	nop
 80033a0:	e004      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033a2:	bf00      	nop
 80033a4:	e002      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033a6:	bf00      	nop
 80033a8:	e000      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10c      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80033b4:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033ba:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80033be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c4:	4a2b      	ldr	r2, [pc, #172]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80033c6:	430b      	orrs	r3, r1
 80033c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80033cc:	e003      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033d2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f002 0308 	and.w	r3, r2, #8
 80033e2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80033e6:	2300      	movs	r3, #0
 80033e8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80033ec:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80033f0:	460b      	mov	r3, r1
 80033f2:	4313      	orrs	r3, r2
 80033f4:	d056      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80033f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033fc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003400:	d031      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003402:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003406:	d82a      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340c:	d02d      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800340e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003412:	d824      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003414:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003418:	d029      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800341a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800341e:	d81e      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d011      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d818      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d023      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003434:	d113      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003436:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800343a:	3308      	adds	r3, #8
 800343c:	4618      	mov	r0, r3
 800343e:	f004 fd89 	bl	8007f54 <RCCEx_PLL2_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003448:	e017      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800344a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800344e:	3330      	adds	r3, #48	; 0x30
 8003450:	4618      	mov	r0, r3
 8003452:	f004 fe17 	bl	8008084 <RCCEx_PLL3_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800345c:	e00d      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003464:	e009      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003466:	bf00      	nop
 8003468:	e007      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800346a:	bf00      	nop
 800346c:	e005      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800346e:	bf00      	nop
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003472:	bf00      	nop
 8003474:	44020c00 	.word	0x44020c00
        break;
 8003478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800347a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10c      	bne.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003482:	4bbb      	ldr	r3, [pc, #748]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003488:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800348c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003492:	4ab7      	ldr	r2, [pc, #732]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003494:	430b      	orrs	r3, r1
 8003496:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800349a:	e003      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034a0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ac:	f002 0310 	and.w	r3, r2, #16
 80034b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80034ba:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80034be:	460b      	mov	r3, r1
 80034c0:	4313      	orrs	r3, r2
 80034c2:	d053      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80034c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ca:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034ce:	d031      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80034d0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80034d4:	d82a      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80034d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034da:	d02d      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80034dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034e0:	d824      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80034e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034e6:	d029      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80034e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ec:	d81e      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80034ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f2:	d011      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f8:	d818      	bhi.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80034fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003502:	d113      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003508:	3308      	adds	r3, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f004 fd22 	bl	8007f54 <RCCEx_PLL2_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003516:	e014      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800351c:	3330      	adds	r3, #48	; 0x30
 800351e:	4618      	mov	r0, r3
 8003520:	f004 fdb0 	bl	8008084 <RCCEx_PLL3_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800352a:	e00a      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003532:	e006      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003534:	bf00      	nop
 8003536:	e004      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003538:	bf00      	nop
 800353a:	e002      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800353c:	bf00      	nop
 800353e:	e000      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003542:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800354a:	4b89      	ldr	r3, [pc, #548]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800354c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003550:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003554:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355a:	4a85      	ldr	r2, [pc, #532]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800355c:	430b      	orrs	r3, r1
 800355e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003564:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003568:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800356c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f002 0320 	and.w	r3, r2, #32
 8003578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003582:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003586:	460b      	mov	r3, r1
 8003588:	4313      	orrs	r3, r2
 800358a:	d053      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800358c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003596:	d031      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003598:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800359c:	d82a      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800359e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a2:	d02d      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80035a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a8:	d824      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035aa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80035ae:	d029      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80035b0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80035b4:	d81e      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ba:	d011      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80035bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c0:	d818      	bhi.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80035c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ca:	d113      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035d0:	3308      	adds	r3, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 fcbe 	bl	8007f54 <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80035de:	e014      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80035e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035e4:	3330      	adds	r3, #48	; 0x30
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fd4c 	bl	8008084 <RCCEx_PLL3_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80035f2:	e00a      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80035fa:	e006      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80035fc:	bf00      	nop
 80035fe:	e004      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003600:	bf00      	nop
 8003602:	e002      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003604:	bf00      	nop
 8003606:	e000      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003608:	bf00      	nop
    }

    if (ret == HAL_OK)
 800360a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003612:	4b57      	ldr	r3, [pc, #348]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003614:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003618:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 800361c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003622:	4a53      	ldr	r2, [pc, #332]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003624:	430b      	orrs	r3, r1
 8003626:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800362a:	e003      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800362c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003630:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003640:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800364a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800364e:	460b      	mov	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	d053      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8003654:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800365e:	d031      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8003660:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003664:	d82a      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d02d      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800366c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003670:	d824      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8003672:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003676:	d029      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003678:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800367c:	d81e      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800367e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003682:	d011      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003684:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003688:	d818      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800368e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003692:	d113      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003694:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003698:	3308      	adds	r3, #8
 800369a:	4618      	mov	r0, r3
 800369c:	f004 fc5a 	bl	8007f54 <RCCEx_PLL2_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80036a6:	e014      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80036a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036ac:	3330      	adds	r3, #48	; 0x30
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 fce8 	bl	8008084 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80036ba:	e00a      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80036c2:	e006      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80036c4:	bf00      	nop
 80036c6:	e004      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80036c8:	bf00      	nop
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80036d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80036da:	4b25      	ldr	r3, [pc, #148]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80036dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80036e0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80036e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ea:	4a21      	ldr	r2, [pc, #132]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80036f2:	e003      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003708:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800370c:	2300      	movs	r3, #0
 800370e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003712:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003716:	460b      	mov	r3, r1
 8003718:	4313      	orrs	r3, r2
 800371a:	d055      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 800371c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003722:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003726:	d033      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003728:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800372c:	d82c      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800372e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003732:	d02f      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003738:	d826      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800373a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800373e:	d02b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8003740:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003744:	d820      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374a:	d013      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d81a      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d022      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8003756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800375a:	d115      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800375c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003760:	3308      	adds	r3, #8
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fbf6 	bl	8007f54 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800376e:	e016      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8003770:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003774:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003778:	3330      	adds	r3, #48	; 0x30
 800377a:	4618      	mov	r0, r3
 800377c:	f004 fc82 	bl	8008084 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8003786:	e00a      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800378e:	e006      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10c      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80037a6:	4bbb      	ldr	r3, [pc, #748]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80037ac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80037b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b6:	4ab7      	ldr	r2, [pc, #732]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80037be:	e003      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80037c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80037d4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80037d8:	2300      	movs	r3, #0
 80037da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037de:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80037e2:	460b      	mov	r3, r1
 80037e4:	4313      	orrs	r3, r2
 80037e6:	d053      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80037e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037f2:	d031      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80037f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80037f8:	d82a      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037fe:	d02d      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8003800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003804:	d824      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003806:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800380a:	d029      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x750>
 800380c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003810:	d81e      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003812:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003816:	d011      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381c:	d818      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d020      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8003822:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003826:	d113      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382c:	3308      	adds	r3, #8
 800382e:	4618      	mov	r0, r3
 8003830:	f004 fb90 	bl	8007f54 <RCCEx_PLL2_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800383a:	e014      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800383c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003840:	3330      	adds	r3, #48	; 0x30
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fc1e 	bl	8008084 <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800384e:	e00a      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003856:	e006      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003858:	bf00      	nop
 800385a:	e004      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800385c:	bf00      	nop
 800385e:	e002      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003874:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800387c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800387e:	4a85      	ldr	r2, [pc, #532]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003880:	430b      	orrs	r3, r1
 8003882:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003886:	e003      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003888:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800388c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003890:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003898:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800389c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038a6:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038aa:	460b      	mov	r3, r1
 80038ac:	4313      	orrs	r3, r2
 80038ae:	d055      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80038b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038b8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80038bc:	d031      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x812>
 80038be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80038c2:	d82a      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80038c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038c8:	d02d      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038ce:	d824      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80038d0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038d4:	d029      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80038d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80038da:	d81e      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80038dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e0:	d011      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038e6:	d818      	bhi.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80038ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038f0:	d113      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80038f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f6:	3308      	adds	r3, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f004 fb2b 	bl	8007f54 <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003904:	e014      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800390a:	3330      	adds	r3, #48	; 0x30
 800390c:	4618      	mov	r0, r3
 800390e:	f004 fbb9 	bl	8008084 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003918:	e00a      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003920:	e006      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003922:	bf00      	nop
 8003924:	e004      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003926:	bf00      	nop
 8003928:	e002      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800392a:	bf00      	nop
 800392c:	e000      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800392e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003930:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003938:	4b56      	ldr	r3, [pc, #344]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800393a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800393e:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8003942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394a:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003952:	e003      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003958:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800395c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003968:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003972:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d044      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800397c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003984:	2b05      	cmp	r3, #5
 8003986:	d823      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039d9 	.word	0x080039d9
 8003994:	080039a9 	.word	0x080039a9
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039d9 	.word	0x080039d9
 80039a0:	080039d9 	.word	0x080039d9
 80039a4:	080039d9 	.word	0x080039d9
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ac:	3308      	adds	r3, #8
 80039ae:	4618      	mov	r0, r3
 80039b0:	f004 fad0 	bl	8007f54 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80039ba:	e00e      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039c0:	3330      	adds	r3, #48	; 0x30
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 fb5e 	bl	8008084 <RCCEx_PLL3_Config>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80039ce:	e004      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039d6:	e000      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80039d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10d      	bne.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80039e2:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80039e8:	f023 0107 	bic.w	r1, r3, #7
 80039ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f4:	4a27      	ldr	r2, [pc, #156]	; (8003a94 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80039fc:	e003      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a02:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a16:	2300      	movs	r3, #0
 8003a18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a1c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a20:	460b      	mov	r3, r1
 8003a22:	4313      	orrs	r3, r2
 8003a24:	d04f      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	2b50      	cmp	r3, #80	; 0x50
 8003a30:	d029      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003a32:	2b50      	cmp	r3, #80	; 0x50
 8003a34:	d823      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a36:	2b40      	cmp	r3, #64	; 0x40
 8003a38:	d027      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003a3a:	2b40      	cmp	r3, #64	; 0x40
 8003a3c:	d81f      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a3e:	2b30      	cmp	r3, #48	; 0x30
 8003a40:	d025      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003a42:	2b30      	cmp	r3, #48	; 0x30
 8003a44:	d81b      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00f      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d817      	bhi.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d022      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d113      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f004 fa79 	bl	8007f54 <RCCEx_PLL2_Config>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003a68:	e017      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a6e:	3330      	adds	r3, #48	; 0x30
 8003a70:	4618      	mov	r0, r3
 8003a72:	f004 fb07 	bl	8008084 <RCCEx_PLL3_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003a7c:	e00d      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a84:	e009      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a86:	bf00      	nop
 8003a88:	e007      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e005      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e003      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003a92:	bf00      	nop
 8003a94:	44020c00 	.word	0x44020c00
        break;
 8003a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10d      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003aa2:	4baf      	ldr	r3, [pc, #700]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003aa4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003aa8:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003aac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	4aaa      	ldr	r2, [pc, #680]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ab6:	430b      	orrs	r3, r1
 8003ab8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ac2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003adc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	d055      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003ae6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003af2:	d031      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003af4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003af8:	d82a      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003afa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003afe:	d02d      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003b00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b04:	d824      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b0a:	d029      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003b0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b10:	d81e      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b16:	d011      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b1c:	d818      	bhi.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003b22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b26:	d113      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b2c:	3308      	adds	r3, #8
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 fa10 	bl	8007f54 <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b3a:	e014      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b40:	3330      	adds	r3, #48	; 0x30
 8003b42:	4618      	mov	r0, r3
 8003b44:	f004 fa9e 	bl	8008084 <RCCEx_PLL3_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b56:	e006      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e004      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10d      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003b6e:	4b7c      	ldr	r3, [pc, #496]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003b78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b80:	4a77      	ldr	r2, [pc, #476]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b82:	430b      	orrs	r3, r1
 8003b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b88:	e003      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003ba8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d03d      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bc4:	d814      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bca:	d017      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bd0:	d80e      	bhi.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d014      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be0:	3330      	adds	r3, #48	; 0x30
 8003be2:	4618      	mov	r0, r3
 8003be4:	f004 fa4e 	bl	8008084 <RCCEx_PLL3_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003bee:	e008      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003bf8:	bf00      	nop
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10d      	bne.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003c0a:	4b55      	ldr	r3, [pc, #340]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c10:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	4a50      	ldr	r2, [pc, #320]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c1e:	430b      	orrs	r3, r1
 8003c20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c24:	e003      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c2a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c44:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	d03d      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c56:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c5a:	d01b      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003c5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c60:	d814      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003c62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c66:	d017      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003c68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c6c:	d80e      	bhi.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c76:	d109      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c7c:	3330      	adds	r3, #48	; 0x30
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 fa00 	bl	8008084 <RCCEx_PLL3_Config>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003c8a:	e008      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c94:	bf00      	nop
 8003c96:	e002      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c98:	bf00      	nop
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003cac:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003cb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb8:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003cc0:	e003      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cc6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ce0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	d040      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cf2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cf6:	d01b      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003cf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cfc:	d814      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003cfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d02:	d017      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d08:	d80e      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d12:	d109      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d18:	3330      	adds	r3, #48	; 0x30
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f004 f9b2 	bl	8008084 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003d26:	e008      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d2e:	e004      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d110      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d48:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d54:	4a02      	ldr	r2, [pc, #8]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003d5e:	bf00      	nop
 8003d60:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d68:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	2100      	movs	r1, #0
 8003d76:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d03d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003d8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d98:	d01b      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003d9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003d9e:	d814      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003da4:	d017      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003da6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003daa:	d80e      	bhi.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d014      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db4:	d109      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dba:	3330      	adds	r3, #48	; 0x30
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f004 f961 	bl	8008084 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003dc8:	e008      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ddc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003de4:	4bbe      	ldr	r3, [pc, #760]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003de6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003dea:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df6:	4aba      	ldr	r2, [pc, #744]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003df8:	430b      	orrs	r3, r1
 8003dfa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d035      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e34:	d015      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e3a:	d80e      	bhi.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e44:	d109      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e4a:	3330      	adds	r3, #48	; 0x30
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f004 f919 	bl	8008084 <RCCEx_PLL3_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003e58:	e006      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d10d      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003e70:	4b9b      	ldr	r3, [pc, #620]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e72:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e76:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003e7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e82:	4a97      	ldr	r2, [pc, #604]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e90:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003eaa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d00e      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003eb4:	4b8a      	ldr	r3, [pc, #552]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	4a89      	ldr	r2, [pc, #548]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003eba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ebe:	61d3      	str	r3, [r2, #28]
 8003ec0:	4b87      	ldr	r3, [pc, #540]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ec2:	69d9      	ldr	r1, [r3, #28]
 8003ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ec8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003ecc:	4a84      	ldr	r2, [pc, #528]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ece:	430b      	orrs	r3, r1
 8003ed0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003ede:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ee8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003eec:	460b      	mov	r3, r1
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	d055      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003ef2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003efa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003efe:	d031      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003f00:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f04:	d82a      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f0a:	d02d      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f10:	d824      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f16:	d029      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1c:	d81e      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f22:	d011      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f28:	d818      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d020      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f32:	d113      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f38:	3308      	adds	r3, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 f80a 	bl	8007f54 <RCCEx_PLL2_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003f46:	e014      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003f48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f4c:	3330      	adds	r3, #48	; 0x30
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 f898 	bl	8008084 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003f62:	e006      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f64:	bf00      	nop
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f68:	bf00      	nop
 8003f6a:	e002      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f6c:	bf00      	nop
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10d      	bne.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003f80:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f8c:	4a54      	ldr	r2, [pc, #336]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003f94:	e003      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003faa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fb4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d055      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8003fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fc6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fca:	d031      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8003fcc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003fd0:	d82a      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d02d      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d824      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe2:	d029      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8003fe4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe8:	d81e      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fee:	d011      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8003ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff4:	d818      	bhi.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d020      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d113      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004000:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004004:	3308      	adds	r3, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f003 ffa4 	bl	8007f54 <RCCEx_PLL2_Config>
 800400c:	4603      	mov	r3, r0
 800400e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004012:	e014      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004018:	3330      	adds	r3, #48	; 0x30
 800401a:	4618      	mov	r0, r3
 800401c:	f004 f832 	bl	8008084 <RCCEx_PLL3_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004026:	e00a      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800402e:	e006      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004030:	bf00      	nop
 8004032:	e004      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004034:	bf00      	nop
 8004036:	e002      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004038:	bf00      	nop
 800403a:	e000      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800403c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800403e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10d      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004046:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004048:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800404c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004050:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004054:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004058:	4a21      	ldr	r2, [pc, #132]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800405a:	430b      	orrs	r3, r1
 800405c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004060:	e003      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004066:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800406a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	2100      	movs	r1, #0
 8004074:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004080:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d057      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 800408a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004096:	d033      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d82c      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800409e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a2:	d02f      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80040a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040a8:	d826      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040ae:	d02b      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80040b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040b4:	d820      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040ba:	d013      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80040bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040c0:	d81a      	bhi.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d022      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d115      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040d0:	3308      	adds	r3, #8
 80040d2:	4618      	mov	r0, r3
 80040d4:	f003 ff3e 	bl	8007f54 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80040de:	e016      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
 80040e0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80040e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e8:	3330      	adds	r3, #48	; 0x30
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 ffca 	bl	8008084 <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 80040f6:	e00a      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800410c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800410e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004116:	4bbb      	ldr	r3, [pc, #748]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004118:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800411c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004120:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004124:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004128:	4ab6      	ldr	r2, [pc, #728]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800412a:	430b      	orrs	r3, r1
 800412c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004136:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800413a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	2100      	movs	r1, #0
 8004144:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004150:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004154:	460b      	mov	r3, r1
 8004156:	4313      	orrs	r3, r2
 8004158:	d055      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800415a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800415e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004162:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004166:	d031      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004168:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800416c:	d82a      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800416e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004172:	d02d      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004178:	d824      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800417a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417e:	d029      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004180:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004184:	d81e      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418a:	d011      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800418c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004190:	d818      	bhi.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004192:	2b00      	cmp	r3, #0
 8004194:	d020      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800419a:	d113      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800419c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041a0:	3308      	adds	r3, #8
 80041a2:	4618      	mov	r0, r3
 80041a4:	f003 fed6 	bl	8007f54 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80041ae:	e014      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b4:	3330      	adds	r3, #48	; 0x30
 80041b6:	4618      	mov	r0, r3
 80041b8:	f003 ff64 	bl	8008084 <RCCEx_PLL3_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80041c2:	e00a      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80041ca:	e006      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80041cc:	bf00      	nop
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80041d0:	bf00      	nop
 80041d2:	e002      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80041d4:	bf00      	nop
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10d      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80041e8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80041ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041f4:	4a83      	ldr	r2, [pc, #524]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80041f6:	430b      	orrs	r3, r1
 80041f8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004202:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	2100      	movs	r1, #0
 8004210:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800421c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d055      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004226:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800422a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800422e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004232:	d031      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004234:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004238:	d82a      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800423a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800423e:	d02d      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004240:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004244:	d824      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800424a:	d029      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 800424c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004250:	d81e      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004256:	d011      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800425c:	d818      	bhi.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d020      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004262:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004266:	d113      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800426c:	3308      	adds	r3, #8
 800426e:	4618      	mov	r0, r3
 8004270:	f003 fe70 	bl	8007f54 <RCCEx_PLL2_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800427a:	e014      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800427c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004280:	3330      	adds	r3, #48	; 0x30
 8004282:	4618      	mov	r0, r3
 8004284:	f003 fefe 	bl	8008084 <RCCEx_PLL3_Config>
 8004288:	4603      	mov	r3, r0
 800428a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800428e:	e00a      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004296:	e006      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004298:	bf00      	nop
 800429a:	e004      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10d      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80042ae:	4b55      	ldr	r3, [pc, #340]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80042b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80042b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042c0:	4a50      	ldr	r2, [pc, #320]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80042c2:	430b      	orrs	r3, r1
 80042c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80042d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	2100      	movs	r1, #0
 80042dc:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042e8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d055      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80042f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80042fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042fe:	d031      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004304:	d82a      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d02d      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d824      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004316:	d029      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800431c:	d81e      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800431e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004322:	d011      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004328:	d818      	bhi.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d020      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800432e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004332:	d113      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004334:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004338:	3308      	adds	r3, #8
 800433a:	4618      	mov	r0, r3
 800433c:	f003 fe0a 	bl	8007f54 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004346:	e014      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800434c:	3330      	adds	r3, #48	; 0x30
 800434e:	4618      	mov	r0, r3
 8004350:	f003 fe98 	bl	8008084 <RCCEx_PLL3_Config>
 8004354:	4603      	mov	r3, r0
 8004356:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800435a:	e00a      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004362:	e006      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004364:	bf00      	nop
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004368:	bf00      	nop
 800436a:	e002      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004372:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10d      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800437a:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800437c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004380:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004384:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800438c:	4a1d      	ldr	r2, [pc, #116]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800438e:	430b      	orrs	r3, r1
 8004390:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800439a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800439e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043b8:	460b      	mov	r3, r1
 80043ba:	4313      	orrs	r3, r2
 80043bc:	d055      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80043be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043ca:	d035      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80043cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043d0:	d82e      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80043d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043d6:	d031      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80043d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043dc:	d828      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80043de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e2:	d01b      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80043e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043e8:	d822      	bhi.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80043ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f2:	d009      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80043f4:	e01c      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f6:	4b03      	ldr	r3, [pc, #12]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	4a02      	ldr	r2, [pc, #8]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004400:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004402:	e01c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004404:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004408:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800440c:	3308      	adds	r3, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fda0 	bl	8007f54 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800441a:	e010      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800441c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004420:	3330      	adds	r3, #48	; 0x30
 8004422:	4618      	mov	r0, r3
 8004424:	f003 fe2e 	bl	8008084 <RCCEx_PLL3_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800442e:	e006      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004436:	e002      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004438:	bf00      	nop
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 800443c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800443e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004446:	4bc3      	ldr	r3, [pc, #780]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004448:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800444c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004458:	4abe      	ldr	r2, [pc, #760]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800445a:	430b      	orrs	r3, r1
 800445c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004460:	e003      	b.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004466:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800446a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004480:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004484:	460b      	mov	r3, r1
 8004486:	4313      	orrs	r3, r2
 8004488:	d051      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800448a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004496:	d033      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004498:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449c:	d82c      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800449e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044a2:	d02d      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80044a4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044a8:	d826      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ae:	d019      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80044b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044b4:	d820      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80044ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044be:	d007      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80044c0:	e01a      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c2:	4ba4      	ldr	r3, [pc, #656]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	4aa3      	ldr	r2, [pc, #652]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044cc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044ce:	e018      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d4:	3308      	adds	r3, #8
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 fd3c 	bl	8007f54 <RCCEx_PLL2_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044e2:	e00e      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e8:	3330      	adds	r3, #48	; 0x30
 80044ea:	4618      	mov	r0, r3
 80044ec:	f003 fdca 	bl	8008084 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10d      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800450a:	4b92      	ldr	r3, [pc, #584]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800450c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004510:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004514:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004518:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800451c:	4a8d      	ldr	r2, [pc, #564]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800451e:	430b      	orrs	r3, r1
 8004520:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004524:	e003      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800452a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800452e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800453a:	67bb      	str	r3, [r7, #120]	; 0x78
 800453c:	2300      	movs	r3, #0
 800453e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004540:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d032      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800454a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800454e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004552:	2b05      	cmp	r3, #5
 8004554:	d80f      	bhi.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004556:	2b03      	cmp	r3, #3
 8004558:	d211      	bcs.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800455a:	2b01      	cmp	r3, #1
 800455c:	d911      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800455e:	2b02      	cmp	r3, #2
 8004560:	d109      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004562:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004566:	3308      	adds	r3, #8
 8004568:	4618      	mov	r0, r3
 800456a:	f003 fcf3 	bl	8007f54 <RCCEx_PLL2_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800457c:	e002      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800457e:	bf00      	nop
 8004580:	e000      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004582:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004584:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10d      	bne.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800458c:	4b71      	ldr	r3, [pc, #452]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800458e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004592:	f023 0107 	bic.w	r1, r3, #7
 8004596:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800459a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800459e:	4a6d      	ldr	r2, [pc, #436]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045a0:	430b      	orrs	r3, r1
 80045a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80045b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	2100      	movs	r1, #0
 80045ba:	6739      	str	r1, [r7, #112]	; 0x70
 80045bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c0:	677b      	str	r3, [r7, #116]	; 0x74
 80045c2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d024      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80045cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d005      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045e2:	e002      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80045e4:	bf00      	nop
 80045e6:	e000      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80045e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80045f2:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045f8:	f023 0108 	bic.w	r1, r3, #8
 80045fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004604:	4a53      	ldr	r2, [pc, #332]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004606:	430b      	orrs	r3, r1
 8004608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004612:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004622:	66bb      	str	r3, [r7, #104]	; 0x68
 8004624:	2300      	movs	r3, #0
 8004626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004628:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	f000 80b9 	beq.w	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004634:	4b48      	ldr	r3, [pc, #288]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	4a47      	ldr	r2, [pc, #284]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800463a:	f043 0301 	orr.w	r3, r3, #1
 800463e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004640:	f7fc fc0e 	bl	8000e60 <HAL_GetTick>
 8004644:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004648:	e00b      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fc fc09 	bl	8000e60 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d903      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004660:	e005      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004662:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ed      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800466e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 8093 	bne.w	800479e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004678:	4b36      	ldr	r3, [pc, #216]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800467a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004686:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800468a:	2b00      	cmp	r3, #0
 800468c:	d023      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800468e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004692:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8004696:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800469a:	4293      	cmp	r3, r2
 800469c:	d01b      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800469e:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b2:	4a28      	ldr	r2, [pc, #160]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b25      	ldr	r3, [pc, #148]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046c2:	4a24      	ldr	r2, [pc, #144]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a21      	ldr	r2, [pc, #132]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d019      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fc fbbd 	bl	8000e60 <HAL_GetTick>
 80046e6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ea:	e00d      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fc fbb8 	bl	8000e60 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d903      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004706:	e006      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004708:	4b12      	ldr	r3, [pc, #72]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800470a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0ea      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004716:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800471a:	2b00      	cmp	r3, #0
 800471c:	d13a      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800471e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004722:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800472e:	d115      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8004730:	4b08      	ldr	r3, [pc, #32]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004738:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800473c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004746:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800474a:	4a02      	ldr	r2, [pc, #8]	; (8004754 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800474c:	430b      	orrs	r3, r1
 800474e:	61d3      	str	r3, [r2, #28]
 8004750:	e00a      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8004752:	bf00      	nop
 8004754:	44020c00 	.word	0x44020c00
 8004758:	44020800 	.word	0x44020800
 800475c:	4b9f      	ldr	r3, [pc, #636]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	4a9e      	ldr	r2, [pc, #632]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004762:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004766:	61d3      	str	r3, [r2, #28]
 8004768:	4b9c      	ldr	r3, [pc, #624]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800476a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476e:	4a9b      	ldr	r2, [pc, #620]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004778:	4b98      	ldr	r3, [pc, #608]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800477a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800477e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004782:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800478a:	4a94      	ldr	r2, [pc, #592]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800478c:	430b      	orrs	r3, r1
 800478e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004792:	e008      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004794:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004798:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047a2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80047b2:	663b      	str	r3, [r7, #96]	; 0x60
 80047b4:	2300      	movs	r3, #0
 80047b6:	667b      	str	r3, [r7, #100]	; 0x64
 80047b8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80047bc:	460b      	mov	r3, r1
 80047be:	4313      	orrs	r3, r2
 80047c0:	d035      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80047c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80047ca:	2b30      	cmp	r3, #48	; 0x30
 80047cc:	d014      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80047ce:	2b30      	cmp	r3, #48	; 0x30
 80047d0:	d80e      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d012      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d80a      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80047de:	2b10      	cmp	r3, #16
 80047e0:	d106      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047e2:	4b7e      	ldr	r3, [pc, #504]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	4a7d      	ldr	r2, [pc, #500]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047ec:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047f6:	e004      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80047f8:	bf00      	nop
 80047fa:	e002      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80047fc:	bf00      	nop
 80047fe:	e000      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004802:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800480a:	4b74      	ldr	r3, [pc, #464]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800480c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004810:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004814:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004818:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800481c:	4a6f      	ldr	r2, [pc, #444]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800481e:	430b      	orrs	r3, r1
 8004820:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004824:	e003      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800482a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800482e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800483a:	65bb      	str	r3, [r7, #88]	; 0x58
 800483c:	2300      	movs	r3, #0
 800483e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004840:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d033      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800484a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800484e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d007      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800485a:	e010      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800485c:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	4a5e      	ldr	r2, [pc, #376]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004866:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8004868:	e00d      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800486a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800486e:	3308      	adds	r3, #8
 8004870:	4618      	mov	r0, r3
 8004872:	f003 fb6f 	bl	8007f54 <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800487c:	e003      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004886:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10d      	bne.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800488e:	4b53      	ldr	r3, [pc, #332]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004890:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004894:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8004898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800489c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80048a0:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048a2:	430b      	orrs	r3, r1
 80048a4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80048a8:	e003      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80048b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ba:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80048be:	653b      	str	r3, [r7, #80]	; 0x50
 80048c0:	2300      	movs	r3, #0
 80048c2:	657b      	str	r3, [r7, #84]	; 0x54
 80048c4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80048c8:	460b      	mov	r3, r1
 80048ca:	4313      	orrs	r3, r2
 80048cc:	d033      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80048ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048d2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d002      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d007      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80048de:	e010      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e4:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ea:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80048ec:	e00d      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f2:	3308      	adds	r3, #8
 80048f4:	4618      	mov	r0, r3
 80048f6:	f003 fb2d 	bl	8007f54 <RCCEx_PLL2_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004900:	e003      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004908:	bf00      	nop
    }

    if (ret == HAL_OK)
 800490a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8004912:	4b32      	ldr	r3, [pc, #200]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004914:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004918:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800491c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004920:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004926:	430b      	orrs	r3, r1
 8004928:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800492c:	e003      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004932:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8004942:	64bb      	str	r3, [r7, #72]	; 0x48
 8004944:	2300      	movs	r3, #0
 8004946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004948:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800494c:	460b      	mov	r3, r1
 800494e:	4313      	orrs	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8004952:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800495a:	2b04      	cmp	r3, #4
 800495c:	d827      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004979 	.word	0x08004979
 8004968:	08004987 	.word	0x08004987
 800496c:	0800499b 	.word	0x0800499b
 8004970:	080049b7 	.word	0x080049b7
 8004974:	080049b7 	.word	0x080049b7
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b18      	ldr	r3, [pc, #96]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004982:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004984:	e018      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004986:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800498a:	3308      	adds	r3, #8
 800498c:	4618      	mov	r0, r3
 800498e:	f003 fae1 	bl	8007f54 <RCCEx_PLL2_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004998:	e00e      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800499a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499e:	3330      	adds	r3, #48	; 0x30
 80049a0:	4618      	mov	r0, r3
 80049a2:	f003 fb6f 	bl	8008084 <RCCEx_PLL3_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049ac:	e004      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049b4:	e000      	b.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80049b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10f      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049c6:	f023 0107 	bic.w	r1, r3, #7
 80049ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049d2:	4a02      	ldr	r2, [pc, #8]	; (80049dc <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049d4:	430b      	orrs	r3, r1
 80049d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80049dc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80049e4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80049e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80049f4:	643b      	str	r3, [r7, #64]	; 0x40
 80049f6:	2300      	movs	r3, #0
 80049f8:	647b      	str	r3, [r7, #68]	; 0x44
 80049fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f000 8081 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004a06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d85f      	bhi.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a9d 	.word	0x08004a9d
 8004a1c:	08004ad3 	.word	0x08004ad3
 8004a20:	08004ad3 	.word	0x08004ad3
 8004a24:	08004ad3 	.word	0x08004ad3
 8004a28:	08004ad3 	.word	0x08004ad3
 8004a2c:	08004ad3 	.word	0x08004ad3
 8004a30:	08004ad3 	.word	0x08004ad3
 8004a34:	08004ad3 	.word	0x08004ad3
 8004a38:	08004aab 	.word	0x08004aab
 8004a3c:	08004ad3 	.word	0x08004ad3
 8004a40:	08004ad3 	.word	0x08004ad3
 8004a44:	08004ad3 	.word	0x08004ad3
 8004a48:	08004ad3 	.word	0x08004ad3
 8004a4c:	08004ad3 	.word	0x08004ad3
 8004a50:	08004ad3 	.word	0x08004ad3
 8004a54:	08004ad3 	.word	0x08004ad3
 8004a58:	08004abf 	.word	0x08004abf
 8004a5c:	08004ad3 	.word	0x08004ad3
 8004a60:	08004ad3 	.word	0x08004ad3
 8004a64:	08004ad3 	.word	0x08004ad3
 8004a68:	08004ad3 	.word	0x08004ad3
 8004a6c:	08004ad3 	.word	0x08004ad3
 8004a70:	08004ad3 	.word	0x08004ad3
 8004a74:	08004ad3 	.word	0x08004ad3
 8004a78:	08004adb 	.word	0x08004adb
 8004a7c:	08004ad3 	.word	0x08004ad3
 8004a80:	08004ad3 	.word	0x08004ad3
 8004a84:	08004ad3 	.word	0x08004ad3
 8004a88:	08004ad3 	.word	0x08004ad3
 8004a8c:	08004ad3 	.word	0x08004ad3
 8004a90:	08004ad3 	.word	0x08004ad3
 8004a94:	08004ad3 	.word	0x08004ad3
 8004a98:	08004adb 	.word	0x08004adb
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a9c:	4bab      	ldr	r3, [pc, #684]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	4aaa      	ldr	r2, [pc, #680]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa6:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004aa8:	e018      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aae:	3308      	adds	r3, #8
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f003 fa4f 	bl	8007f54 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004abc:	e00e      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ac2:	3330      	adds	r3, #48	; 0x30
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fadd 	bl	8008084 <RCCEx_PLL3_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004ad0:	e004      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ad8:	e000      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ae4:	4b99      	ldr	r3, [pc, #612]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004aea:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004aee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004af6:	4a95      	ldr	r2, [pc, #596]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b14:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b16:	2300      	movs	r3, #0
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d04e      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004b24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b30:	d02e      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d827      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b38:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3a:	d02b      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004b3c:	2bc0      	cmp	r3, #192	; 0xc0
 8004b3e:	d823      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d017      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004b44:	2b80      	cmp	r3, #128	; 0x80
 8004b46:	d81f      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004b4c:	2b40      	cmp	r3, #64	; 0x40
 8004b4e:	d007      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004b50:	e01a      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b52:	4b7e      	ldr	r3, [pc, #504]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b56:	4a7d      	ldr	r2, [pc, #500]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b5c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b5e:	e01a      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b64:	3308      	adds	r3, #8
 8004b66:	4618      	mov	r0, r3
 8004b68:	f003 f9f4 	bl	8007f54 <RCCEx_PLL2_Config>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b72:	e010      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b78:	3330      	adds	r3, #48	; 0x30
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f003 fa82 	bl	8008084 <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004b86:	e006      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10d      	bne.n	8004bba <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004b9e:	4b6b      	ldr	r3, [pc, #428]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ba4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004ba8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bb0:	4a66      	ldr	r2, [pc, #408]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bb8:	e003      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bbe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004bc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004bce:	633b      	str	r3, [r7, #48]	; 0x30
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d055      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004be2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004be6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004bea:	d031      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004bec:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004bf0:	d82a      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf6:	d02d      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bfc:	d824      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004bfe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c02:	d029      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004c04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c08:	d81e      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d011      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c14:	d818      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d020      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c1e:	d113      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c24:	3308      	adds	r3, #8
 8004c26:	4618      	mov	r0, r3
 8004c28:	f003 f994 	bl	8007f54 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c32:	e014      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c38:	3330      	adds	r3, #48	; 0x30
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f003 fa22 	bl	8008084 <RCCEx_PLL3_Config>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c46:	e00a      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c4e:	e006      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c50:	bf00      	nop
 8004c52:	e004      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c54:	bf00      	nop
 8004c56:	e002      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e000      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c6c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c74:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004c78:	4a34      	ldr	r2, [pc, #208]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c80:	e003      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	d058      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004cae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004cb2:	d031      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004cb4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004cb8:	d82a      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbe:	d02d      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc4:	d824      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004cc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cca:	d029      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004ccc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cd0:	d81e      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd6:	d011      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cdc:	d818      	bhi.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d020      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce6:	d113      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cec:	3308      	adds	r3, #8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f003 f930 	bl	8007f54 <RCCEx_PLL2_Config>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004cfa:	e014      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d00:	3330      	adds	r3, #48	; 0x30
 8004d02:	4618      	mov	r0, r3
 8004d04:	f003 f9be 	bl	8008084 <RCCEx_PLL3_Config>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d16:	e006      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d18:	bf00      	nop
 8004d1a:	e004      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d1c:	bf00      	nop
 8004d1e:	e002      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d20:	bf00      	nop
 8004d22:	e000      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d26:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d110      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004d2e:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d40:	4902      	ldr	r1, [pc, #8]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004d48:	e006      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004d4a:	bf00      	nop
 8004d4c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d54:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	2100      	movs	r1, #0
 8004d62:	6239      	str	r1, [r7, #32]
 8004d64:	f003 0301 	and.w	r3, r3, #1
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	d055      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d7c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004d80:	d031      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004d82:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004d86:	d82a      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d8c:	d02d      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d92:	d824      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004d94:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004d98:	d029      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004d9a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004d9e:	d81e      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da4:	d011      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004daa:	d818      	bhi.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d020      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db4:	d113      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dba:	3308      	adds	r3, #8
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f003 f8c9 	bl	8007f54 <RCCEx_PLL2_Config>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004dc8:	e014      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dce:	3330      	adds	r3, #48	; 0x30
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f003 f957 	bl	8008084 <RCCEx_PLL3_Config>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ddc:	e00a      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004de4:	e006      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004de6:	bf00      	nop
 8004de8:	e004      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004dea:	bf00      	nop
 8004dec:	e002      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004dee:	bf00      	nop
 8004df0:	e000      	b.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004dfc:	4b88      	ldr	r3, [pc, #544]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e02:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004e06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e0e:	4984      	ldr	r1, [pc, #528]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004e16:	e003      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e1c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	2100      	movs	r1, #0
 8004e2a:	61b9      	str	r1, [r7, #24]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e36:	460b      	mov	r3, r1
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	d03d      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d81c      	bhi.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e8b 	.word	0x08004e8b
 8004e54:	08004e61 	.word	0x08004e61
 8004e58:	08004e6f 	.word	0x08004e6f
 8004e5c:	08004e8b 	.word	0x08004e8b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e60:	4b6f      	ldr	r3, [pc, #444]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	4a6e      	ldr	r2, [pc, #440]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004e6c:	e00e      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e72:	3308      	adds	r3, #8
 8004e74:	4618      	mov	r0, r3
 8004e76:	f003 f86d 	bl	8007f54 <RCCEx_PLL2_Config>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004e80:	e004      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10d      	bne.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004e94:	4b62      	ldr	r3, [pc, #392]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ea2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ea6:	495e      	ldr	r1, [pc, #376]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004eae:	e003      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eb4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	6139      	str	r1, [r7, #16]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	d03a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee0:	d00e      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ee6:	d815      	bhi.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d017      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004eec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef0:	d110      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef6:	4a4a      	ldr	r2, [pc, #296]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004efe:	e00e      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f04:	3308      	adds	r3, #8
 8004f06:	4618      	mov	r0, r3
 8004f08:	f003 f824 	bl	8007f54 <RCCEx_PLL2_Config>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f12:	e004      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f1a:	e000      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004f26:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f38:	4939      	ldr	r1, [pc, #228]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f42:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f46:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	2100      	movs	r1, #0
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f60:	460b      	mov	r3, r1
 8004f62:	4313      	orrs	r3, r2
 8004f64:	d038      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004f66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004f6e:	2b30      	cmp	r3, #48	; 0x30
 8004f70:	d01b      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004f72:	2b30      	cmp	r3, #48	; 0x30
 8004f74:	d815      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d002      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d007      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004f7e:	e010      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f84:	4a26      	ldr	r2, [pc, #152]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f8a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004f8c:	e00e      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f92:	3330      	adds	r3, #48	; 0x30
 8004f94:	4618      	mov	r0, r3
 8004f96:	f003 f875 	bl	8008084 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004fa0:	e004      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fa8:	e000      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8004faa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004fc6:	4916      	ldr	r1, [pc, #88]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004fce:	e003      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	6039      	str	r1, [r7, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	d00c      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ffa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ffe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005002:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005006:	4906      	ldr	r1, [pc, #24]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800500e:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005012:	4618      	mov	r0, r3
 8005014:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	44020c00 	.word	0x44020c00

08005024 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005024:	b480      	push	{r7}
 8005026:	b08b      	sub	sp, #44	; 0x2c
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800502c:	4bad      	ldr	r3, [pc, #692]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800502e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005034:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005036:	4bab      	ldr	r3, [pc, #684]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005040:	4ba8      	ldr	r3, [pc, #672]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	0a1b      	lsrs	r3, r3, #8
 8005046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800504a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800504c:	4ba5      	ldr	r3, [pc, #660]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005056:	4ba3      	ldr	r3, [pc, #652]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	fb02 f303 	mul.w	r3, r2, r3
 8005066:	ee07 3a90 	vmov	s15, r3
 800506a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800506e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8126 	beq.w	80052c6 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d053      	beq.n	8005128 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b03      	cmp	r3, #3
 8005084:	d86f      	bhi.n	8005166 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d003      	beq.n	8005094 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d02b      	beq.n	80050ea <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005092:	e068      	b.n	8005166 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005094:	4b93      	ldr	r3, [pc, #588]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	08db      	lsrs	r3, r3, #3
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	4a92      	ldr	r2, [pc, #584]	; (80052e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
 80050a4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	ee07 3a90 	vmov	s15, r3
 80050ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	ee07 3a90 	vmov	s15, r3
 80050c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80050cc:	eddf 5a87 	vldr	s11, [pc, #540]	; 80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80050d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80050e8:	e068      	b.n	80051bc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	ee07 3a90 	vmov	s15, r3
 80050f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80052f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80050f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005106:	ed97 6a04 	vldr	s12, [r7, #16]
 800510a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800510e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800511a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005122:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005126:	e049      	b.n	80051bc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005132:	eddf 6a70 	vldr	s13, [pc, #448]	; 80052f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	ee07 3a90 	vmov	s15, r3
 8005140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005144:	ed97 6a04 	vldr	s12, [r7, #16]
 8005148:	eddf 5a68 	vldr	s11, [pc, #416]	; 80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800514c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005160:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005164:	e02a      	b.n	80051bc <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005166:	4b5f      	ldr	r3, [pc, #380]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	08db      	lsrs	r3, r3, #3
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	4a5d      	ldr	r2, [pc, #372]	; (80052e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005172:	fa22 f303 	lsr.w	r3, r2, r3
 8005176:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	ee07 3a90 	vmov	s15, r3
 8005188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a04 	vldr	s12, [r7, #16]
 800519e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80052ec <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80051ba:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051bc:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051c8:	d121      	bne.n	800520e <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80051ca:	4b46      	ldr	r3, [pc, #280]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80051d6:	4b43      	ldr	r3, [pc, #268]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051da:	0a5b      	lsrs	r3, r3, #9
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80051e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80051f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80051f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e006      	b.n	8005214 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e002      	b.n	8005214 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005214:	4b33      	ldr	r3, [pc, #204]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005220:	d121      	bne.n	8005266 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005222:	4b30      	ldr	r3, [pc, #192]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d017      	beq.n	800525e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800522e:	4b2d      	ldr	r3, [pc, #180]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005232:	0c1b      	lsrs	r3, r3, #16
 8005234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005238:	ee07 3a90 	vmov	s15, r3
 800523c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005244:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005248:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800524c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005254:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	605a      	str	r2, [r3, #4]
 800525c:	e006      	b.n	800526c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	605a      	str	r2, [r3, #4]
 8005264:	e002      	b.n	800526c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005278:	d121      	bne.n	80052be <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d017      	beq.n	80052b6 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528a:	0e1b      	lsrs	r3, r3, #24
 800528c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005290:	ee07 3a90 	vmov	s15, r3
 8005294:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800529c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80052a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052ac:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052b4:	e010      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	e00c      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	e008      	b.n	80052d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	372c      	adds	r7, #44	; 0x2c
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr
 80052e4:	44020c00 	.word	0x44020c00
 80052e8:	03d09000 	.word	0x03d09000
 80052ec:	46000000 	.word	0x46000000
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4bbebc20 	.word	0x4bbebc20

080052f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b08b      	sub	sp, #44	; 0x2c
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005300:	4bad      	ldr	r3, [pc, #692]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005308:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800530a:	4bab      	ldr	r3, [pc, #684]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005314:	4ba8      	ldr	r3, [pc, #672]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	0a1b      	lsrs	r3, r3, #8
 800531a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800531e:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005320:	4ba5      	ldr	r3, [pc, #660]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800532a:	4ba3      	ldr	r3, [pc, #652]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8126 	beq.w	800559a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d053      	beq.n	80053fc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d86f      	bhi.n	800543a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d003      	beq.n	8005368 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d02b      	beq.n	80053be <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005366:	e068      	b.n	800543a <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005368:	4b93      	ldr	r3, [pc, #588]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	08db      	lsrs	r3, r3, #3
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	4a92      	ldr	r2, [pc, #584]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
 8005378:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	ee07 3a90 	vmov	s15, r3
 8005380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800538e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005392:	6a3b      	ldr	r3, [r7, #32]
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800539c:	ed97 6a04 	vldr	s12, [r7, #16]
 80053a0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80053a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80053bc:	e068      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	ee07 3a90 	vmov	s15, r3
 80053c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80055c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80053cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a04 	vldr	s12, [r7, #16]
 80053de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80053fa:	e049      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a70 	vldr	s13, [pc, #448]	; 80055c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	ee07 3a90 	vmov	s15, r3
 8005414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005418:	ed97 6a04 	vldr	s12, [r7, #16]
 800541c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800542c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005434:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005438:	e02a      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800543a:	4b5f      	ldr	r3, [pc, #380]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	f003 0303 	and.w	r3, r3, #3
 8005444:	4a5d      	ldr	r2, [pc, #372]	; (80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	ee07 3a90 	vmov	s15, r3
 8005452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	ee07 3a90 	vmov	s15, r3
 800546a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005472:	eddf 5a53 	vldr	s11, [pc, #332]	; 80055c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005476:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005482:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800548e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005490:	4b49      	ldr	r3, [pc, #292]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800549c:	d121      	bne.n	80054e2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800549e:	4b46      	ldr	r3, [pc, #280]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054aa:	4b43      	ldr	r3, [pc, #268]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ae:	0a5b      	lsrs	r3, r3, #9
 80054b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80054bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80054c4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80054c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e006      	b.n	80054e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	e002      	b.n	80054e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054e8:	4b33      	ldr	r3, [pc, #204]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f4:	d121      	bne.n	800553a <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80054f6:	4b30      	ldr	r3, [pc, #192]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d017      	beq.n	8005532 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005502:	4b2d      	ldr	r3, [pc, #180]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005506:	0c1b      	lsrs	r3, r3, #16
 8005508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005514:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005518:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800551c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005528:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	605a      	str	r2, [r3, #4]
 8005530:	e006      	b.n	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	605a      	str	r2, [r3, #4]
 8005538:	e002      	b.n	8005540 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005548:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800554c:	d121      	bne.n	8005592 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800554e:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d017      	beq.n	800558a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800555a:	4b17      	ldr	r3, [pc, #92]	; (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800555c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555e:	0e1b      	lsrs	r3, r3, #24
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	ee07 3a90 	vmov	s15, r3
 8005568:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800556c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005570:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005574:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005578:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005580:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005588:	e010      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	e00c      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
}
 8005598:	e008      	b.n	80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	609a      	str	r2, [r3, #8]
}
 80055ac:	bf00      	nop
 80055ae:	372c      	adds	r7, #44	; 0x2c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	44020c00 	.word	0x44020c00
 80055bc:	03d09000 	.word	0x03d09000
 80055c0:	46000000 	.word	0x46000000
 80055c4:	4a742400 	.word	0x4a742400
 80055c8:	4bbebc20 	.word	0x4bbebc20

080055cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b08b      	sub	sp, #44	; 0x2c
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80055d4:	4bad      	ldr	r3, [pc, #692]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055dc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80055de:	4bab      	ldr	r3, [pc, #684]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80055e8:	4ba8      	ldr	r3, [pc, #672]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	0a1b      	lsrs	r3, r3, #8
 80055ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80055f4:	4ba5      	ldr	r3, [pc, #660]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80055fe:	4ba3      	ldr	r3, [pc, #652]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005602:	08db      	lsrs	r3, r3, #3
 8005604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	fb02 f303 	mul.w	r3, r2, r3
 800560e:	ee07 3a90 	vmov	s15, r3
 8005612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005616:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8126 	beq.w	800586e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b03      	cmp	r3, #3
 8005626:	d053      	beq.n	80056d0 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	2b03      	cmp	r3, #3
 800562c:	d86f      	bhi.n	800570e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d003      	beq.n	800563c <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d02b      	beq.n	8005692 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 800563a:	e068      	b.n	800570e <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800563c:	4b93      	ldr	r3, [pc, #588]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	08db      	lsrs	r3, r3, #3
 8005642:	f003 0303 	and.w	r3, r3, #3
 8005646:	4a92      	ldr	r2, [pc, #584]	; (8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005648:	fa22 f303 	lsr.w	r3, r2, r3
 800564c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	ee07 3a90 	vmov	s15, r3
 800565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005670:	ed97 6a04 	vldr	s12, [r7, #16]
 8005674:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005690:	e068      	b.n	8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005898 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a4:	6a3b      	ldr	r3, [r7, #32]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	ed97 6a04 	vldr	s12, [r7, #16]
 80056b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80056b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80056ce:	e049      	b.n	8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	ee07 3a90 	vmov	s15, r3
 80056d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056da:	eddf 6a70 	vldr	s13, [pc, #448]	; 800589c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80056de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ec:	ed97 6a04 	vldr	s12, [r7, #16]
 80056f0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80056f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005708:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800570c:	e02a      	b.n	8005764 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800570e:	4b5f      	ldr	r3, [pc, #380]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	08db      	lsrs	r3, r3, #3
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	4a5d      	ldr	r2, [pc, #372]	; (8005890 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800571a:	fa22 f303 	lsr.w	r3, r2, r3
 800571e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	ee07 3a90 	vmov	s15, r3
 8005730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005742:	ed97 6a04 	vldr	s12, [r7, #16]
 8005746:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005894 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800574a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800574e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800575a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005762:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005764:	4b49      	ldr	r3, [pc, #292]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005770:	d121      	bne.n	80057b6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005772:	4b46      	ldr	r3, [pc, #280]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d017      	beq.n	80057ae <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8005790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005794:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005798:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800579c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a4:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057c8:	d121      	bne.n	800580e <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80057ca:	4b30      	ldr	r3, [pc, #192]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d017      	beq.n	8005806 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057d6:	4b2d      	ldr	r3, [pc, #180]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057da:	0c1b      	lsrs	r3, r3, #16
 80057dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e0:	ee07 3a90 	vmov	s15, r3
 80057e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80057e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057ec:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80057f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80057f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057fc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	e006      	b.n	8005814 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	605a      	str	r2, [r3, #4]
 800580c:	e002      	b.n	8005814 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005814:	4b1d      	ldr	r3, [pc, #116]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800581c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005820:	d121      	bne.n	8005866 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005822:	4b1a      	ldr	r3, [pc, #104]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d017      	beq.n	800585e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800582e:	4b17      	ldr	r3, [pc, #92]	; (800588c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	0e1b      	lsrs	r3, r3, #24
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8005840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005844:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8005848:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005854:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800585c:	e010      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	e00c      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
}
 800586c:	e008      	b.n	8005880 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	609a      	str	r2, [r3, #8]
}
 8005880:	bf00      	nop
 8005882:	372c      	adds	r7, #44	; 0x2c
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	44020c00 	.word	0x44020c00
 8005890:	03d09000 	.word	0x03d09000
 8005894:	46000000 	.word	0x46000000
 8005898:	4a742400 	.word	0x4a742400
 800589c:	4bbebc20 	.word	0x4bbebc20

080058a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b08f      	sub	sp, #60	; 0x3c
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80058aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80058ae:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80058b2:	4321      	orrs	r1, r4
 80058b4:	d150      	bne.n	8005958 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80058b6:	4b26      	ldr	r3, [pc, #152]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d108      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d6:	d104      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80058d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058dc:	637b      	str	r3, [r7, #52]	; 0x34
 80058de:	f002 bb2a 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80058e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f0:	d108      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f8:	d104      	bne.n	8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80058fa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	f002 bb19 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005910:	d119      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005918:	d115      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800591c:	69db      	ldr	r3, [r3, #28]
 800591e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8005922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005926:	d30a      	bcc.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	0a1b      	lsrs	r3, r3, #8
 800592e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005932:	4a08      	ldr	r2, [pc, #32]	; (8005954 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800593a:	f002 bafc 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005942:	f002 baf8 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	637b      	str	r3, [r7, #52]	; 0x34
 800594a:	f002 baf4 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800594e:	bf00      	nop
 8005950:	44020c00 	.word	0x44020c00
 8005954:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8005958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800595c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8005960:	ea50 0104 	orrs.w	r1, r0, r4
 8005964:	f001 8275 	beq.w	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8005968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800596c:	2801      	cmp	r0, #1
 800596e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8005972:	f082 82dd 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005976:	e9d7 0100 	ldrd	r0, r1, [r7]
 800597a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800597e:	ea50 0104 	orrs.w	r1, r0, r4
 8005982:	f001 816c 	beq.w	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8005986:	e9d7 0100 	ldrd	r0, r1, [r7]
 800598a:	2801      	cmp	r0, #1
 800598c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8005990:	f082 82ce 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005994:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005998:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800599c:	ea50 0104 	orrs.w	r1, r0, r4
 80059a0:	f001 8602 	beq.w	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80059a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059a8:	2801      	cmp	r0, #1
 80059aa:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80059ae:	f082 82bf 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b6:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 80059ba:	ea50 0104 	orrs.w	r1, r0, r4
 80059be:	f001 854c 	beq.w	800745a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80059c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c6:	2801      	cmp	r0, #1
 80059c8:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80059cc:	f082 82b0 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d4:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80059d8:	ea50 0104 	orrs.w	r1, r0, r4
 80059dc:	f001 849e 	beq.w	800731c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80059e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e4:	2801      	cmp	r0, #1
 80059e6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80059ea:	f082 82a1 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f2:	f1a1 0420 	sub.w	r4, r1, #32
 80059f6:	ea50 0104 	orrs.w	r1, r0, r4
 80059fa:	f001 83e8 	beq.w	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80059fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a02:	2801      	cmp	r0, #1
 8005a04:	f171 0120 	sbcs.w	r1, r1, #32
 8005a08:	f082 8292 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a10:	f1a1 0410 	sub.w	r4, r1, #16
 8005a14:	ea50 0104 	orrs.w	r1, r0, r4
 8005a18:	f002 8256 	beq.w	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a20:	2801      	cmp	r0, #1
 8005a22:	f171 0110 	sbcs.w	r1, r1, #16
 8005a26:	f082 8283 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a2e:	f1a1 0408 	sub.w	r4, r1, #8
 8005a32:	ea50 0104 	orrs.w	r1, r0, r4
 8005a36:	f002 81cc 	beq.w	8007dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005a3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a3e:	2801      	cmp	r0, #1
 8005a40:	f171 0108 	sbcs.w	r1, r1, #8
 8005a44:	f082 8274 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4c:	1f0c      	subs	r4, r1, #4
 8005a4e:	ea50 0104 	orrs.w	r1, r0, r4
 8005a52:	f001 8648 	beq.w	80076e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5a:	2801      	cmp	r0, #1
 8005a5c:	f171 0104 	sbcs.w	r1, r1, #4
 8005a60:	f082 8266 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a68:	1e8c      	subs	r4, r1, #2
 8005a6a:	ea50 0104 	orrs.w	r1, r0, r4
 8005a6e:	f002 8143 	beq.w	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a76:	2801      	cmp	r0, #1
 8005a78:	f171 0102 	sbcs.w	r1, r1, #2
 8005a7c:	f082 8258 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a84:	1e4c      	subs	r4, r1, #1
 8005a86:	ea50 0104 	orrs.w	r1, r0, r4
 8005a8a:	f002 80ce 	beq.w	8007c2a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a92:	2801      	cmp	r0, #1
 8005a94:	f171 0101 	sbcs.w	r1, r1, #1
 8005a98:	f082 824a 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005aa4:	4321      	orrs	r1, r4
 8005aa6:	f002 8059 	beq.w	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aae:	4cd9      	ldr	r4, [pc, #868]	; (8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	f171 0100 	sbcs.w	r1, r1, #0
 8005ab6:	f082 823b 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005abe:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005ac2:	4321      	orrs	r1, r4
 8005ac4:	f001 87d9 	beq.w	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005acc:	4cd2      	ldr	r4, [pc, #840]	; (8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005ace:	42a0      	cmp	r0, r4
 8005ad0:	f171 0100 	sbcs.w	r1, r1, #0
 8005ad4:	f082 822c 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005adc:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005ae0:	4321      	orrs	r1, r4
 8005ae2:	f001 8751 	beq.w	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005ae6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aea:	4ccc      	ldr	r4, [pc, #816]	; (8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	f171 0100 	sbcs.w	r1, r1, #0
 8005af2:	f082 821d 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005af6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afa:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005afe:	4321      	orrs	r1, r4
 8005b00:	f001 869a 	beq.w	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b08:	4cc5      	ldr	r4, [pc, #788]	; (8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b0a:	42a0      	cmp	r0, r4
 8005b0c:	f171 0100 	sbcs.w	r1, r1, #0
 8005b10:	f082 820e 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b18:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005b1c:	4321      	orrs	r1, r4
 8005b1e:	f001 8612 	beq.w	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b26:	4cbf      	ldr	r4, [pc, #764]	; (8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005b28:	42a0      	cmp	r0, r4
 8005b2a:	f171 0100 	sbcs.w	r1, r1, #0
 8005b2e:	f082 81ff 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b36:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005b3a:	4321      	orrs	r1, r4
 8005b3c:	f002 817e 	beq.w	8007e3c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b44:	4cb8      	ldr	r4, [pc, #736]	; (8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005b46:	42a0      	cmp	r0, r4
 8005b48:	f171 0100 	sbcs.w	r1, r1, #0
 8005b4c:	f082 81f0 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b54:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8005b58:	4321      	orrs	r1, r4
 8005b5a:	f000 829e 	beq.w	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b62:	4cb2      	ldr	r4, [pc, #712]	; (8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005b64:	42a0      	cmp	r0, r4
 8005b66:	f171 0100 	sbcs.w	r1, r1, #0
 8005b6a:	f082 81e1 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b72:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005b76:	4321      	orrs	r1, r4
 8005b78:	f000 826d 	beq.w	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005b7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b80:	4cab      	ldr	r4, [pc, #684]	; (8005e30 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005b82:	42a0      	cmp	r0, r4
 8005b84:	f171 0100 	sbcs.w	r1, r1, #0
 8005b88:	f082 81d2 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b90:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005b94:	4321      	orrs	r1, r4
 8005b96:	f001 800d 	beq.w	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b9e:	4ca5      	ldr	r4, [pc, #660]	; (8005e34 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005ba0:	42a0      	cmp	r0, r4
 8005ba2:	f171 0100 	sbcs.w	r1, r1, #0
 8005ba6:	f082 81c3 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005baa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bae:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005bb2:	4321      	orrs	r1, r4
 8005bb4:	f000 81d0 	beq.w	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbc:	4c9e      	ldr	r4, [pc, #632]	; (8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005bbe:	42a0      	cmp	r0, r4
 8005bc0:	f171 0100 	sbcs.w	r1, r1, #0
 8005bc4:	f082 81b4 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bcc:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005bd0:	4321      	orrs	r1, r4
 8005bd2:	f000 8142 	beq.w	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005bd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bda:	4c98      	ldr	r4, [pc, #608]	; (8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	f171 0100 	sbcs.w	r1, r1, #0
 8005be2:	f082 81a5 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bea:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005bee:	4321      	orrs	r1, r4
 8005bf0:	f001 824e 	beq.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bf8:	4c91      	ldr	r4, [pc, #580]	; (8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005bfa:	42a0      	cmp	r0, r4
 8005bfc:	f171 0100 	sbcs.w	r1, r1, #0
 8005c00:	f082 8196 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c08:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005c0c:	4321      	orrs	r1, r4
 8005c0e:	f001 8197 	beq.w	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c16:	4c8b      	ldr	r4, [pc, #556]	; (8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	f171 0100 	sbcs.w	r1, r1, #0
 8005c1e:	f082 8187 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c26:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005c2a:	4321      	orrs	r1, r4
 8005c2c:	f001 8154 	beq.w	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005c30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c34:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005c38:	f171 0100 	sbcs.w	r1, r1, #0
 8005c3c:	f082 8178 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c44:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005c48:	4321      	orrs	r1, r4
 8005c4a:	f001 80b7 	beq.w	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005c4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c52:	f248 0401 	movw	r4, #32769	; 0x8001
 8005c56:	42a0      	cmp	r0, r4
 8005c58:	f171 0100 	sbcs.w	r1, r1, #0
 8005c5c:	f082 8168 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c64:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005c68:	4321      	orrs	r1, r4
 8005c6a:	f001 8064 	beq.w	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c72:	f244 0401 	movw	r4, #16385	; 0x4001
 8005c76:	42a0      	cmp	r0, r4
 8005c78:	f171 0100 	sbcs.w	r1, r1, #0
 8005c7c:	f082 8158 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c84:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005c88:	4321      	orrs	r1, r4
 8005c8a:	f001 8011 	beq.w	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005c8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c92:	f242 0401 	movw	r4, #8193	; 0x2001
 8005c96:	42a0      	cmp	r0, r4
 8005c98:	f171 0100 	sbcs.w	r1, r1, #0
 8005c9c:	f082 8148 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca4:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005ca8:	4321      	orrs	r1, r4
 8005caa:	f000 871e 	beq.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cb2:	f241 0401 	movw	r4, #4097	; 0x1001
 8005cb6:	42a0      	cmp	r0, r4
 8005cb8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cbc:	f082 8138 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc4:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005cc8:	4321      	orrs	r1, r4
 8005cca:	f000 86a8 	beq.w	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005cce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cd2:	f640 0401 	movw	r4, #2049	; 0x801
 8005cd6:	42a0      	cmp	r0, r4
 8005cd8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cdc:	f082 8128 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005ce8:	4321      	orrs	r1, r4
 8005cea:	f000 8632 	beq.w	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005cee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cf2:	f240 4401 	movw	r4, #1025	; 0x401
 8005cf6:	42a0      	cmp	r0, r4
 8005cf8:	f171 0100 	sbcs.w	r1, r1, #0
 8005cfc:	f082 8118 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d04:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005d08:	4321      	orrs	r1, r4
 8005d0a:	f000 85b0 	beq.w	800686e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005d0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d12:	f240 2401 	movw	r4, #513	; 0x201
 8005d16:	42a0      	cmp	r0, r4
 8005d18:	f171 0100 	sbcs.w	r1, r1, #0
 8005d1c:	f082 8108 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d24:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005d28:	4321      	orrs	r1, r4
 8005d2a:	f000 8535 	beq.w	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005d2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d32:	f240 1401 	movw	r4, #257	; 0x101
 8005d36:	42a0      	cmp	r0, r4
 8005d38:	f171 0100 	sbcs.w	r1, r1, #0
 8005d3c:	f082 80f8 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d44:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005d48:	4321      	orrs	r1, r4
 8005d4a:	f000 84ba 	beq.w	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005d4e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d52:	2881      	cmp	r0, #129	; 0x81
 8005d54:	f171 0100 	sbcs.w	r1, r1, #0
 8005d58:	f082 80ea 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d60:	2821      	cmp	r0, #33	; 0x21
 8005d62:	f171 0100 	sbcs.w	r1, r1, #0
 8005d66:	d26f      	bcs.n	8005e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005d68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6c:	4301      	orrs	r1, r0
 8005d6e:	f002 80df 	beq.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d76:	1e42      	subs	r2, r0, #1
 8005d78:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8005d7c:	2a20      	cmp	r2, #32
 8005d7e:	f173 0100 	sbcs.w	r1, r3, #0
 8005d82:	f082 80d5 	bcs.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d86:	2a1f      	cmp	r2, #31
 8005d88:	f202 80d2 	bhi.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d8c:	a101      	add	r1, pc, #4	; (adr r1, 8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005d8e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d92:	bf00      	nop
 8005d94:	080060f5 	.word	0x080060f5
 8005d98:	080061c1 	.word	0x080061c1
 8005d9c:	08007f31 	.word	0x08007f31
 8005da0:	08006281 	.word	0x08006281
 8005da4:	08007f31 	.word	0x08007f31
 8005da8:	08007f31 	.word	0x08007f31
 8005dac:	08007f31 	.word	0x08007f31
 8005db0:	08006351 	.word	0x08006351
 8005db4:	08007f31 	.word	0x08007f31
 8005db8:	08007f31 	.word	0x08007f31
 8005dbc:	08007f31 	.word	0x08007f31
 8005dc0:	08007f31 	.word	0x08007f31
 8005dc4:	08007f31 	.word	0x08007f31
 8005dc8:	08007f31 	.word	0x08007f31
 8005dcc:	08007f31 	.word	0x08007f31
 8005dd0:	08006433 	.word	0x08006433
 8005dd4:	08007f31 	.word	0x08007f31
 8005dd8:	08007f31 	.word	0x08007f31
 8005ddc:	08007f31 	.word	0x08007f31
 8005de0:	08007f31 	.word	0x08007f31
 8005de4:	08007f31 	.word	0x08007f31
 8005de8:	08007f31 	.word	0x08007f31
 8005dec:	08007f31 	.word	0x08007f31
 8005df0:	08007f31 	.word	0x08007f31
 8005df4:	08007f31 	.word	0x08007f31
 8005df8:	08007f31 	.word	0x08007f31
 8005dfc:	08007f31 	.word	0x08007f31
 8005e00:	08007f31 	.word	0x08007f31
 8005e04:	08007f31 	.word	0x08007f31
 8005e08:	08007f31 	.word	0x08007f31
 8005e0c:	08007f31 	.word	0x08007f31
 8005e10:	08006509 	.word	0x08006509
 8005e14:	80000001 	.word	0x80000001
 8005e18:	40000001 	.word	0x40000001
 8005e1c:	20000001 	.word	0x20000001
 8005e20:	10000001 	.word	0x10000001
 8005e24:	08000001 	.word	0x08000001
 8005e28:	04000001 	.word	0x04000001
 8005e2c:	00800001 	.word	0x00800001
 8005e30:	00400001 	.word	0x00400001
 8005e34:	00200001 	.word	0x00200001
 8005e38:	00100001 	.word	0x00100001
 8005e3c:	00080001 	.word	0x00080001
 8005e40:	00040001 	.word	0x00040001
 8005e44:	00020001 	.word	0x00020001
 8005e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005e50:	430b      	orrs	r3, r1
 8005e52:	f000 83c4 	beq.w	80065de <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005e56:	f002 b86b 	b.w	8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005e5a:	4ba1      	ldr	r3, [pc, #644]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005e5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e60:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005e64:	633b      	str	r3, [r7, #48]	; 0x30
 8005e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e68:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e6c:	d036      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e74:	d86b      	bhi.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e7c:	d02b      	beq.n	8005ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e84:	d863      	bhi.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e8c:	d01b      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e94:	d85b      	bhi.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea2:	d008      	beq.n	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005ea4:	e053      	b.n	8005f4e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ea6:	f107 0320 	add.w	r3, r7, #32
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f8ba 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005eb4:	e04e      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb6:	f107 0314 	add.w	r3, r7, #20
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7ff fa1c 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ec4:	e046      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec6:	f107 0308 	add.w	r3, r7, #8
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fb7e 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ed4:	e03e      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005ed6:	4b83      	ldr	r3, [pc, #524]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005ed8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005eda:	e03b      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005edc:	4b80      	ldr	r3, [pc, #512]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ee2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ee8:	4b7d      	ldr	r3, [pc, #500]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d10c      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005efa:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	08db      	lsrs	r3, r3, #3
 8005f00:	f003 0303 	and.w	r3, r3, #3
 8005f04:	4a78      	ldr	r2, [pc, #480]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f0c:	e01e      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f0e:	4b74      	ldr	r3, [pc, #464]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f22:	d102      	bne.n	8005f2a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f24:	4b71      	ldr	r3, [pc, #452]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005f26:	637b      	str	r3, [r7, #52]	; 0x34
 8005f28:	e010      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f2a:	4b6d      	ldr	r3, [pc, #436]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f36:	d106      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f3e:	d102      	bne.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f40:	4b6b      	ldr	r3, [pc, #428]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
 8005f44:	e002      	b.n	8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005f4a:	e003      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005f4c:	e002      	b.n	8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f52:	bf00      	nop
          }
        }
        break;
 8005f54:	f001 bfef 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005f58:	4b61      	ldr	r3, [pc, #388]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f5e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005f62:	633b      	str	r3, [r7, #48]	; 0x30
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f6a:	d036      	beq.n	8005fda <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f72:	d86b      	bhi.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f7a:	d02b      	beq.n	8005fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005f82:	d863      	bhi.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f92:	d85b      	bhi.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d004      	beq.n	8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fa0:	d008      	beq.n	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005fa2:	e053      	b.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005fa4:	f107 0320 	add.w	r3, r7, #32
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff f83b 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fb2:	e04e      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fb4:	f107 0314 	add.w	r3, r7, #20
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7ff f99d 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fc2:	e046      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fc4:	f107 0308 	add.w	r3, r7, #8
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7ff faff 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd2:	e03e      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005fd4:	4b43      	ldr	r3, [pc, #268]	; (80060e4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005fd6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd8:	e03b      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fda:	4b41      	ldr	r3, [pc, #260]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fe0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005fe4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fe6:	4b3e      	ldr	r3, [pc, #248]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d10c      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d109      	bne.n	800600c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ff8:	4b39      	ldr	r3, [pc, #228]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	08db      	lsrs	r3, r3, #3
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	4a39      	ldr	r2, [pc, #228]	; (80060e8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006004:	fa22 f303 	lsr.w	r3, r2, r3
 8006008:	637b      	str	r3, [r7, #52]	; 0x34
 800600a:	e01e      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800600c:	4b34      	ldr	r3, [pc, #208]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006018:	d106      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006020:	d102      	bne.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006022:	4b32      	ldr	r3, [pc, #200]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006024:	637b      	str	r3, [r7, #52]	; 0x34
 8006026:	e010      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006028:	4b2d      	ldr	r3, [pc, #180]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006030:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006034:	d106      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800603c:	d102      	bne.n	8006044 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800603e:	4b2c      	ldr	r3, [pc, #176]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006040:	637b      	str	r3, [r7, #52]	; 0x34
 8006042:	e002      	b.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006048:	e003      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 800604a:	e002      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006050:	bf00      	nop
          }
        }
        break;
 8006052:	f001 bf70 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006058:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d108      	bne.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006068:	f107 0320 	add.w	r3, r7, #32
 800606c:	4618      	mov	r0, r3
 800606e:	f7fe ffd9 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006076:	f001 bf5e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	2b40      	cmp	r3, #64	; 0x40
 800607e:	d108      	bne.n	8006092 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	4618      	mov	r0, r3
 8006086:	f7ff f937 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800608e:	f001 bf52 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006096:	f001 bf4e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800609a:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800609c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d108      	bne.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060ac:	f107 0320 	add.w	r3, r7, #32
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fe ffb7 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060ba:	f001 bf3c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b80      	cmp	r3, #128	; 0x80
 80060c2:	d108      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c4:	f107 0314 	add.w	r3, r7, #20
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff f915 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d2:	f001 bf30 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060da:	f001 bf2c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80060de:	bf00      	nop
 80060e0:	44020c00 	.word	0x44020c00
 80060e4:	00bb8000 	.word	0x00bb8000
 80060e8:	03d09000 	.word	0x03d09000
 80060ec:	003d0900 	.word	0x003d0900
 80060f0:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80060f4:	4b9d      	ldr	r3, [pc, #628]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80060f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	2b00      	cmp	r3, #0
 8006104:	d104      	bne.n	8006110 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006106:	f7fc ffd7 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 800610a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800610c:	f001 bf13 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006110:	4b96      	ldr	r3, [pc, #600]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611c:	d10a      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b01      	cmp	r3, #1
 8006122:	d107      	bne.n	8006134 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff f8e5 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
 8006132:	e043      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006134:	4b8d      	ldr	r3, [pc, #564]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800613c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006140:	d10a      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	2b02      	cmp	r3, #2
 8006146:	d107      	bne.n	8006158 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006148:	f107 0308 	add.w	r3, r7, #8
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fa3d 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	637b      	str	r3, [r7, #52]	; 0x34
 8006156:	e031      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006158:	4b84      	ldr	r3, [pc, #528]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b02      	cmp	r3, #2
 8006162:	d10c      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	2b03      	cmp	r3, #3
 8006168:	d109      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800616a:	4b80      	ldr	r3, [pc, #512]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	08db      	lsrs	r3, r3, #3
 8006170:	f003 0303 	and.w	r3, r3, #3
 8006174:	4a7e      	ldr	r2, [pc, #504]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
 800617c:	e01e      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800617e:	4b7b      	ldr	r3, [pc, #492]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800618a:	d105      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618e:	2b04      	cmp	r3, #4
 8006190:	d102      	bne.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006192:	4b78      	ldr	r3, [pc, #480]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	e011      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006198:	4b74      	ldr	r3, [pc, #464]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800619a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d106      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80061a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	d103      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80061ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e003      	b.n	80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80061b4:	2300      	movs	r3, #0
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b8:	f001 bebd 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80061bc:	f001 bebb 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80061c0:	4b6a      	ldr	r3, [pc, #424]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80061c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061ca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d104      	bne.n	80061dc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80061d2:	f7fc ff5b 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80061d6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80061d8:	f001 bead 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80061dc:	4b63      	ldr	r3, [pc, #396]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061e8:	d10a      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d107      	bne.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff f87f 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
 80061fe:	e03d      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006202:	2b10      	cmp	r3, #16
 8006204:	d108      	bne.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff f9de 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006214:	f001 be8f 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006218:	4b54      	ldr	r3, [pc, #336]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b02      	cmp	r3, #2
 8006222:	d10c      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006226:	2b18      	cmp	r3, #24
 8006228:	d109      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800622a:	4b50      	ldr	r3, [pc, #320]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	08db      	lsrs	r3, r3, #3
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	4a4e      	ldr	r2, [pc, #312]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006236:	fa22 f303 	lsr.w	r3, r2, r3
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
 800623c:	e01e      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800623e:	4b4b      	ldr	r3, [pc, #300]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800624a:	d105      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	2b20      	cmp	r3, #32
 8006250:	d102      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8006252:	4b48      	ldr	r3, [pc, #288]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
 8006256:	e011      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006258:	4b44      	ldr	r3, [pc, #272]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800625a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b02      	cmp	r3, #2
 8006264:	d106      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b28      	cmp	r3, #40	; 0x28
 800626a:	d103      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800626c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	e003      	b.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006278:	f001 be5d 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800627c:	f001 be5b 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006280:	4b3a      	ldr	r3, [pc, #232]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006282:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006286:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800628a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	2b00      	cmp	r3, #0
 8006290:	d104      	bne.n	800629c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006292:	f7fc fefb 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006296:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006298:	f001 be4d 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800629c:	4b33      	ldr	r3, [pc, #204]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062a8:	d10a      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d107      	bne.n	80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062b0:	f107 0314 	add.w	r3, r7, #20
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff f81f 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	637b      	str	r3, [r7, #52]	; 0x34
 80062be:	e045      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80062c0:	4b2a      	ldr	r3, [pc, #168]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062cc:	d10a      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d107      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062d4:	f107 0308 	add.w	r3, r7, #8
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff f977 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
 80062e2:	e033      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062e4:	4b21      	ldr	r3, [pc, #132]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d10c      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f2:	2bc0      	cmp	r3, #192	; 0xc0
 80062f4:	d109      	bne.n	800630a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062f6:	4b1d      	ldr	r3, [pc, #116]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	08db      	lsrs	r3, r3, #3
 80062fc:	f003 0303 	and.w	r3, r3, #3
 8006300:	4a1b      	ldr	r2, [pc, #108]	; (8006370 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006302:	fa22 f303 	lsr.w	r3, r2, r3
 8006306:	637b      	str	r3, [r7, #52]	; 0x34
 8006308:	e020      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800630a:	4b18      	ldr	r3, [pc, #96]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006316:	d106      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d102      	bne.n	8006326 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006320:	4b14      	ldr	r3, [pc, #80]	; (8006374 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
 8006324:	e012      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d107      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800633a:	d103      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 800633c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006340:	637b      	str	r3, [r7, #52]	; 0x34
 8006342:	e003      	b.n	800634c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006348:	f001 bdf5 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800634c:	f001 bdf3 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006356:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800635a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10a      	bne.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006362:	f7fc fe93 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006366:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006368:	f001 bde5 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800636c:	44020c00 	.word	0x44020c00
 8006370:	03d09000 	.word	0x03d09000
 8006374:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006378:	4ba0      	ldr	r3, [pc, #640]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006384:	d10b      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800638c:	d107      	bne.n	800639e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638e:	f107 0314 	add.w	r3, r7, #20
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe ffb0 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	637b      	str	r3, [r7, #52]	; 0x34
 800639c:	e047      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800639e:	4b97      	ldr	r3, [pc, #604]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063aa:	d10b      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b2:	d107      	bne.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063b4:	f107 0308 	add.w	r3, r7, #8
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff f907 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
 80063c2:	e034      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80063c4:	4b8d      	ldr	r3, [pc, #564]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0302 	and.w	r3, r3, #2
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d10d      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80063d6:	d109      	bne.n	80063ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063d8:	4b88      	ldr	r3, [pc, #544]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	08db      	lsrs	r3, r3, #3
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	4a87      	ldr	r2, [pc, #540]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80063e4:	fa22 f303 	lsr.w	r3, r2, r3
 80063e8:	637b      	str	r3, [r7, #52]	; 0x34
 80063ea:	e020      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80063ec:	4b83      	ldr	r3, [pc, #524]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d106      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80063fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d102      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006402:	4b80      	ldr	r3, [pc, #512]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
 8006406:	e012      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006408:	4b7c      	ldr	r3, [pc, #496]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800640a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d107      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800641c:	d103      	bne.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800641e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006422:	637b      	str	r3, [r7, #52]	; 0x34
 8006424:	e003      	b.n	800642e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800642a:	f001 bd84 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800642e:	f001 bd82 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006432:	4b72      	ldr	r3, [pc, #456]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006438:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800643c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800643e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006440:	2b00      	cmp	r3, #0
 8006442:	d104      	bne.n	800644e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fc fe22 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006448:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800644a:	f001 bd74 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800644e:	4b6b      	ldr	r3, [pc, #428]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800645a:	d10b      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006462:	d107      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4618      	mov	r0, r3
 800646a:	f7fe ff45 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
 8006472:	e047      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006474:	4b61      	ldr	r3, [pc, #388]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800647c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006480:	d10b      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006488:	d107      	bne.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f89c 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
 8006498:	e034      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800649a:	4b58      	ldr	r3, [pc, #352]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d10d      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064ac:	d109      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ae:	4b53      	ldr	r3, [pc, #332]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	4a51      	ldr	r2, [pc, #324]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80064ba:	fa22 f303 	lsr.w	r3, r2, r3
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
 80064c0:	e020      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80064c2:	4b4e      	ldr	r3, [pc, #312]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ce:	d106      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064d6:	d102      	bne.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80064d8:	4b4a      	ldr	r3, [pc, #296]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
 80064dc:	e012      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064de:	4b47      	ldr	r3, [pc, #284]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d107      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80064f2:	d103      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80064f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f8:	637b      	str	r3, [r7, #52]	; 0x34
 80064fa:	e003      	b.n	8006504 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006500:	f001 bd19 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006504:	f001 bd17 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006508:	4b3c      	ldr	r3, [pc, #240]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800650e:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006512:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800651a:	f7fc fdb7 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 800651e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006520:	f001 bd09 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006524:	4b35      	ldr	r3, [pc, #212]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800652c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006530:	d10b      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006538:	d107      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe feda 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	637b      	str	r3, [r7, #52]	; 0x34
 8006548:	e047      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800654a:	4b2c      	ldr	r3, [pc, #176]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006552:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006556:	d10b      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800655e:	d107      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006560:	f107 0308 	add.w	r3, r7, #8
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff f831 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
 800656e:	e034      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006570:	4b22      	ldr	r3, [pc, #136]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d10d      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006582:	d109      	bne.n	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006584:	4b1d      	ldr	r3, [pc, #116]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	08db      	lsrs	r3, r3, #3
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 8006596:	e020      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006598:	4b18      	ldr	r3, [pc, #96]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a4:	d106      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065ac:	d102      	bne.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80065ae:	4b15      	ldr	r3, [pc, #84]	; (8006604 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80065b0:	637b      	str	r3, [r7, #52]	; 0x34
 80065b2:	e012      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80065b4:	4b11      	ldr	r3, [pc, #68]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d107      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80065c8:	d103      	bne.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80065ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	e003      	b.n	80065da <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d6:	f001 bcae 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065da:	f001 bcac 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80065de:	4b07      	ldr	r3, [pc, #28]	; (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80065e4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80065e8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10b      	bne.n	8006608 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80065f0:	f7fc fd4c 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80065f4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80065f6:	f001 bc9e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80065fa:	bf00      	nop
 80065fc:	44020c00 	.word	0x44020c00
 8006600:	03d09000 	.word	0x03d09000
 8006604:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006608:	4ba0      	ldr	r3, [pc, #640]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006614:	d10b      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800661c:	d107      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	4618      	mov	r0, r3
 8006624:	f7fe fe68 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	e047      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800662e:	4b97      	ldr	r3, [pc, #604]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800663a:	d10b      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006642:	d107      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006644:	f107 0308 	add.w	r3, r7, #8
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe ffbf 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	e034      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8006654:	4b8d      	ldr	r3, [pc, #564]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b02      	cmp	r3, #2
 800665e:	d10d      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006666:	d109      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006668:	4b88      	ldr	r3, [pc, #544]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	08db      	lsrs	r3, r3, #3
 800666e:	f003 0303 	and.w	r3, r3, #3
 8006672:	4a87      	ldr	r2, [pc, #540]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006674:	fa22 f303 	lsr.w	r3, r2, r3
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	e020      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800667c:	4b83      	ldr	r3, [pc, #524]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006688:	d106      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8006692:	4b80      	ldr	r3, [pc, #512]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	e012      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8006698:	4b7c      	ldr	r3, [pc, #496]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800669a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d107      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80066ac:	d103      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80066ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
 80066b4:	e003      	b.n	80066be <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066ba:	f001 bc3c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066be:	f001 bc3a 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80066c2:	4b72      	ldr	r3, [pc, #456]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80066c8:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d104      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80066d4:	f7fc fcda 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80066d8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80066da:	f001 bc2c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80066de:	4b6b      	ldr	r3, [pc, #428]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ea:	d10b      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f2:	d107      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f4:	f107 0314 	add.w	r3, r7, #20
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fe fdfd 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
 8006702:	e047      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006704:	4b61      	ldr	r3, [pc, #388]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800670c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006710:	d10b      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8006712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe ff54 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
 8006728:	e034      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800672a:	4b58      	ldr	r3, [pc, #352]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	2b02      	cmp	r3, #2
 8006734:	d10d      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006738:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800673c:	d109      	bne.n	8006752 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800673e:	4b53      	ldr	r3, [pc, #332]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	08db      	lsrs	r3, r3, #3
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	4a51      	ldr	r2, [pc, #324]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800674a:	fa22 f303 	lsr.w	r3, r2, r3
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	e020      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8006752:	4b4e      	ldr	r3, [pc, #312]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800675a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800675e:	d106      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8006760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006766:	d102      	bne.n	800676e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8006768:	4b4a      	ldr	r3, [pc, #296]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
 800676c:	e012      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800676e:	4b47      	ldr	r3, [pc, #284]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006770:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006774:	f003 0302 	and.w	r3, r3, #2
 8006778:	2b02      	cmp	r3, #2
 800677a:	d107      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006782:	d103      	bne.n	800678c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8006784:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
 800678a:	e003      	b.n	8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006790:	f001 bbd1 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006794:	f001 bbcf 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8006798:	4b3c      	ldr	r3, [pc, #240]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800679a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800679e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067a2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80067a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80067aa:	f7fc fc6f 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80067ae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80067b0:	f001 bbc1 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80067b4:	4b35      	ldr	r3, [pc, #212]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067c0:	d10b      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c8:	d107      	bne.n	80067da <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ca:	f107 0314 	add.w	r3, r7, #20
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fe fd92 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
 80067d8:	e047      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80067da:	4b2c      	ldr	r3, [pc, #176]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e6:	d10b      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067ee:	d107      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067f0:	f107 0308 	add.w	r3, r7, #8
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fee9 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
 80067fe:	e034      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8006800:	4b22      	ldr	r3, [pc, #136]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b02      	cmp	r3, #2
 800680a:	d10d      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800680c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006812:	d109      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	08db      	lsrs	r3, r3, #3
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	4a1c      	ldr	r2, [pc, #112]	; (8006890 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
 8006824:	637b      	str	r3, [r7, #52]	; 0x34
 8006826:	e020      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006828:	4b18      	ldr	r3, [pc, #96]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006834:	d106      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800683c:	d102      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800683e:	4b15      	ldr	r3, [pc, #84]	; (8006894 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
 8006842:	e012      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8006844:	4b11      	ldr	r3, [pc, #68]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b02      	cmp	r3, #2
 8006850:	d107      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006858:	d103      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
 8006860:	e003      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006866:	f001 bb66 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800686a:	f001 bb64 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800686e:	4b07      	ldr	r3, [pc, #28]	; (800688c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006870:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006874:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8006878:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006880:	f7fc fc04 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006884:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8006886:	f001 bb56 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800688a:	bf00      	nop
 800688c:	44020c00 	.word	0x44020c00
 8006890:	03d09000 	.word	0x03d09000
 8006894:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8006898:	4ba1      	ldr	r3, [pc, #644]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a4:	d10b      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068ac:	d107      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068ae:	f107 0314 	add.w	r3, r7, #20
 80068b2:	4618      	mov	r0, r3
 80068b4:	f7fe fd20 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	e047      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80068be:	4b98      	ldr	r3, [pc, #608]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ca:	d10b      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068d2:	d107      	bne.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	4618      	mov	r0, r3
 80068da:	f7fe fe77 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
 80068e2:	e034      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80068e4:	4b8e      	ldr	r3, [pc, #568]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0302 	and.w	r3, r3, #2
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d10d      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80068f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80068f6:	d109      	bne.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068f8:	4b89      	ldr	r3, [pc, #548]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	08db      	lsrs	r3, r3, #3
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	4a88      	ldr	r2, [pc, #544]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006904:	fa22 f303 	lsr.w	r3, r2, r3
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
 800690a:	e020      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800690c:	4b84      	ldr	r3, [pc, #528]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006918:	d106      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006920:	d102      	bne.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8006922:	4b81      	ldr	r3, [pc, #516]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006924:	637b      	str	r3, [r7, #52]	; 0x34
 8006926:	e012      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006928:	4b7d      	ldr	r3, [pc, #500]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800692a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b02      	cmp	r3, #2
 8006934:	d107      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800693c:	d103      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800693e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006942:	637b      	str	r3, [r7, #52]	; 0x34
 8006944:	e003      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8006946:	2300      	movs	r3, #0
 8006948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800694a:	f001 baf4 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800694e:	f001 baf2 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8006952:	4b73      	ldr	r3, [pc, #460]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006954:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	2b00      	cmp	r3, #0
 8006962:	d104      	bne.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006964:	f7fc fb92 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006968:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800696a:	f001 bae4 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800696e:	4b6c      	ldr	r3, [pc, #432]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006976:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800697a:	d10a      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	2b01      	cmp	r3, #1
 8006980:	d107      	bne.n	8006992 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006982:	f107 0314 	add.w	r3, r7, #20
 8006986:	4618      	mov	r0, r3
 8006988:	f7fe fcb6 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	637b      	str	r3, [r7, #52]	; 0x34
 8006990:	e043      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8006992:	4b63      	ldr	r3, [pc, #396]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80069a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d107      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069a6:	f107 0308 	add.w	r3, r7, #8
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fe0e 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	637b      	str	r3, [r7, #52]	; 0x34
 80069b4:	e031      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80069b6:	4b5a      	ldr	r3, [pc, #360]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d10c      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80069c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c4:	2b03      	cmp	r3, #3
 80069c6:	d109      	bne.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069c8:	4b55      	ldr	r3, [pc, #340]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	08db      	lsrs	r3, r3, #3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	4a54      	ldr	r2, [pc, #336]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
 80069da:	e01e      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80069dc:	4b50      	ldr	r3, [pc, #320]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e8:	d105      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80069ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d102      	bne.n	80069f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80069f0:	4b4d      	ldr	r3, [pc, #308]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
 80069f4:	e011      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d106      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	2b05      	cmp	r3, #5
 8006a08:	d103      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a10:	e003      	b.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a16:	f001 ba8e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a1a:	f001 ba8c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006a1e:	4b40      	ldr	r3, [pc, #256]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a28:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d104      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a30:	f7fc fb2c 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006a34:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a36:	f001 ba7e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006a3a:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a46:	d10a      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0314 	add.w	r3, r7, #20
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fc50 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5c:	e043      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006a5e:	4b30      	ldr	r3, [pc, #192]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a6a:	d10a      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d107      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fda8 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a80:	e031      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006a82:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b30      	cmp	r3, #48	; 0x30
 8006a92:	d109      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a94:	4b22      	ldr	r3, [pc, #136]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	08db      	lsrs	r3, r3, #3
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	4a21      	ldr	r2, [pc, #132]	; (8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	e01e      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006aa8:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab4:	d105      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2b40      	cmp	r3, #64	; 0x40
 8006aba:	d102      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006abc:	4b1a      	ldr	r3, [pc, #104]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac0:	e011      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d106      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad2:	2b50      	cmp	r3, #80	; 0x50
 8006ad4:	d103      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
 8006adc:	e003      	b.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ae2:	f001 ba28 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ae6:	f001 ba26 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d104      	bne.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006afc:	f7fc faf2 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8006b00:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b02:	f001 ba18 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b0c:	d10e      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0e:	f107 0314 	add.w	r3, r7, #20
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fbf0 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1c:	f001 ba0b 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b20:	44020c00 	.word	0x44020c00
 8006b24:	03d09000 	.word	0x03d09000
 8006b28:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b32:	d108      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe fd47 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b42:	f001 b9f8 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b46:	4ba4      	ldr	r3, [pc, #656]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d10d      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b58:	d109      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b5a:	4b9f      	ldr	r3, [pc, #636]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	08db      	lsrs	r3, r3, #3
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	4a9d      	ldr	r2, [pc, #628]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006b66:	fa22 f303 	lsr.w	r3, r2, r3
 8006b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b6c:	e020      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006b6e:	4b9a      	ldr	r3, [pc, #616]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b82:	d102      	bne.n	8006b8a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006b84:	4b96      	ldr	r3, [pc, #600]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006b86:	637b      	str	r3, [r7, #52]	; 0x34
 8006b88:	e012      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b8a:	4b93      	ldr	r3, [pc, #588]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d107      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006b9e:	d103      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	e003      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bac:	f001 b9c3 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006bb0:	f001 b9c1 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006bb4:	4b88      	ldr	r3, [pc, #544]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d104      	bne.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006bc6:	f7fc fa45 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8006bca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006bcc:	f001 b9b3 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d104      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006bd6:	f7fc f911 	bl	8002dfc <HAL_RCC_GetSysClockFreq>
 8006bda:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006bdc:	f001 b9ab 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d108      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006be6:	f107 0314 	add.w	r3, r7, #20
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7fe fb84 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bf4:	f001 b99f 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006bf8:	4b77      	ldr	r3, [pc, #476]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c04:	d105      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	2b03      	cmp	r3, #3
 8006c0a:	d102      	bne.n	8006c12 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006c0c:	4b75      	ldr	r3, [pc, #468]	; (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c10:	e023      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c12:	4b71      	ldr	r3, [pc, #452]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d109      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c24:	4b6c      	ldr	r3, [pc, #432]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	08db      	lsrs	r3, r3, #3
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	4a6b      	ldr	r2, [pc, #428]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
 8006c34:	637b      	str	r3, [r7, #52]	; 0x34
 8006c36:	e010      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006c38:	4b67      	ldr	r3, [pc, #412]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c44:	d105      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	d102      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006c4c:	4b64      	ldr	r3, [pc, #400]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c56:	f001 b96e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c5a:	f001 b96c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006c5e:	4b5e      	ldr	r3, [pc, #376]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006c6a:	4b5b      	ldr	r3, [pc, #364]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d106      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d103      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
 8006c84:	e012      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006c86:	4b54      	ldr	r3, [pc, #336]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c94:	d106      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d103      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006c9c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006ca8:	f001 b945 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cac:	f001 b943 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006cb0:	4b49      	ldr	r3, [pc, #292]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cba:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d104      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cc2:	f7fc f9e3 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006cc6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cc8:	f001 b935 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d108      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006cd4:	f107 0308 	add.w	r3, r7, #8
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe fc77 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ce2:	f001 b928 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006ce6:	4b3c      	ldr	r3, [pc, #240]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d10d      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf8:	d109      	bne.n	8006d0e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cfa:	4b37      	ldr	r3, [pc, #220]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	08db      	lsrs	r3, r3, #3
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	4a35      	ldr	r2, [pc, #212]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d06:	fa22 f303 	lsr.w	r3, r2, r3
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	e011      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006d0e:	4b32      	ldr	r3, [pc, #200]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d22:	d102      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006d24:	4b2e      	ldr	r3, [pc, #184]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
 8006d28:	e003      	b.n	8006d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d2e:	f001 b902 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d32:	f001 b900 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006d36:	4b28      	ldr	r3, [pc, #160]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d48:	f7fc f9a0 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006d4c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d4e:	f001 b8f2 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d58:	d108      	bne.n	8006d6c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fc34 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d68:	f001 b8e5 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006d6c:	4b1a      	ldr	r3, [pc, #104]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d10d      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006d7e:	d109      	bne.n	8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d80:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	08db      	lsrs	r3, r3, #3
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d90:	637b      	str	r3, [r7, #52]	; 0x34
 8006d92:	e011      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006d94:	4b10      	ldr	r3, [pc, #64]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006da0:	d106      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006da8:	d102      	bne.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006daa:	4b0d      	ldr	r3, [pc, #52]	; (8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
 8006dae:	e003      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006db4:	f001 b8bf 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006db8:	f001 b8bd 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006dbc:	4b06      	ldr	r3, [pc, #24]	; (8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dc2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10c      	bne.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006dce:	f7fc f989 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8006dd2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006dd4:	f001 b8af 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dd8:	44020c00 	.word	0x44020c00
 8006ddc:	03d09000 	.word	0x03d09000
 8006de0:	003d0900 	.word	0x003d0900
 8006de4:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	d108      	bne.n	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fbe9 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dfe:	f001 b89a 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006e02:	4b9f      	ldr	r3, [pc, #636]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d10d      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e14:	d109      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e16:	4b9a      	ldr	r3, [pc, #616]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	08db      	lsrs	r3, r3, #3
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	4a98      	ldr	r2, [pc, #608]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e22:	fa22 f303 	lsr.w	r3, r2, r3
 8006e26:	637b      	str	r3, [r7, #52]	; 0x34
 8006e28:	e011      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006e2a:	4b95      	ldr	r3, [pc, #596]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e36:	d106      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e3e:	d102      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006e40:	4b91      	ldr	r3, [pc, #580]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34
 8006e44:	e003      	b.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e4a:	f001 b874 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e4e:	f001 b872 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006e52:	4b8b      	ldr	r3, [pc, #556]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e58:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e5c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006e64:	f7fc f93e 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8006e68:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e6a:	f001 b864 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e74:	d108      	bne.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fba6 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e84:	f001 b857 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006e88:	4b7d      	ldr	r3, [pc, #500]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d10d      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e9a:	d109      	bne.n	8006eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e9c:	4b78      	ldr	r3, [pc, #480]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	08db      	lsrs	r3, r3, #3
 8006ea2:	f003 0303 	and.w	r3, r3, #3
 8006ea6:	4a77      	ldr	r2, [pc, #476]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e011      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006eb0:	4b73      	ldr	r3, [pc, #460]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d106      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006ec4:	d102      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006ec6:	4b70      	ldr	r3, [pc, #448]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ed0:	f001 b831 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ed4:	f001 b82f 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006ed8:	4b69      	ldr	r3, [pc, #420]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eda:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ede:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d104      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eea:	f7fc f8cf 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8006eee:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ef0:	f001 b821 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006efa:	d108      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006efc:	f107 0308 	add.w	r3, r7, #8
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fb63 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f0a:	f001 b814 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006f0e:	4b5c      	ldr	r3, [pc, #368]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d10e      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f20:	d10a      	bne.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f22:	4b57      	ldr	r3, [pc, #348]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	08db      	lsrs	r3, r3, #3
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	4a55      	ldr	r2, [pc, #340]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f34:	f000 bfff 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f3c:	f000 bffb 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f40:	4b4f      	ldr	r3, [pc, #316]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006f52:	d056      	beq.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006f5a:	f200 808b 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d03e      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f6c:	f200 8082 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f76:	d027      	beq.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f7e:	d879      	bhi.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f86:	d017      	beq.n	8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f8e:	d871      	bhi.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9c:	d004      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006f9e:	e069      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006fa0:	f7fc f8a0 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8006fa4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006fa6:	e068      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fa8:	f107 0314 	add.w	r3, r7, #20
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe f9a3 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fb6:	e060      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7fe fb05 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fc6:	e058      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fc8:	4b2d      	ldr	r3, [pc, #180]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d103      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006fdc:	e04d      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006fe2:	e04a      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006fe4:	4b26      	ldr	r3, [pc, #152]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ff2:	d103      	bne.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8006ff4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006ffa:	e03e      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007000:	e03b      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007002:	4b1f      	ldr	r3, [pc, #124]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007008:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800700e:	4b1c      	ldr	r3, [pc, #112]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0302 	and.w	r3, r3, #2
 8007016:	2b02      	cmp	r3, #2
 8007018:	d10c      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	2b00      	cmp	r3, #0
 800701e:	d109      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	08db      	lsrs	r3, r3, #3
 8007026:	f003 0303 	and.w	r3, r3, #3
 800702a:	4a16      	ldr	r2, [pc, #88]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800702c:	fa22 f303 	lsr.w	r3, r2, r3
 8007030:	637b      	str	r3, [r7, #52]	; 0x34
 8007032:	e01e      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007034:	4b12      	ldr	r3, [pc, #72]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800703c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007040:	d106      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d102      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800704a:	4b0f      	ldr	r3, [pc, #60]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
 800704e:	e010      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800705c:	d106      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800705e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007064:	d102      	bne.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
 800706a:	e002      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007070:	e003      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007072:	e002      	b.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007078:	bf00      	nop
          }
        }
        break;
 800707a:	f000 bf5c 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800707e:	bf00      	nop
 8007080:	44020c00 	.word	0x44020c00
 8007084:	03d09000 	.word	0x03d09000
 8007088:	003d0900 	.word	0x003d0900
 800708c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007090:	4b9e      	ldr	r3, [pc, #632]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007092:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007096:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
 800709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80070a2:	d056      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80070aa:	f200 808b 	bhi.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b4:	d03e      	beq.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070bc:	f200 8082 	bhi.w	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070c6:	d027      	beq.n	8007118 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ce:	d879      	bhi.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070d6:	d017      	beq.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070de:	d871      	bhi.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d004      	beq.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ec:	d004      	beq.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 80070ee:	e069      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 80070f0:	f7fb ffcc 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80070f4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80070f6:	e068      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f8fb 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007106:	e060      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007108:	f107 0308 	add.w	r3, r7, #8
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fa5d 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007116:	e058      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007118:	4b7c      	ldr	r3, [pc, #496]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800711a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800711e:	f003 0302 	and.w	r3, r3, #2
 8007122:	2b02      	cmp	r3, #2
 8007124:	d103      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800712c:	e04d      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007132:	e04a      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007134:	4b75      	ldr	r3, [pc, #468]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007136:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800713a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800713e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007142:	d103      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007144:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800714a:	e03e      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007150:	e03b      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007152:	4b6e      	ldr	r3, [pc, #440]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007158:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800715c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800715e:	4b6b      	ldr	r3, [pc, #428]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b02      	cmp	r3, #2
 8007168:	d10c      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800716a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d109      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007170:	4b66      	ldr	r3, [pc, #408]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	08db      	lsrs	r3, r3, #3
 8007176:	f003 0303 	and.w	r3, r3, #3
 800717a:	4a65      	ldr	r2, [pc, #404]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800717c:	fa22 f303 	lsr.w	r3, r2, r3
 8007180:	637b      	str	r3, [r7, #52]	; 0x34
 8007182:	e01e      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007184:	4b61      	ldr	r3, [pc, #388]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800718c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007190:	d106      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007198:	d102      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800719a:	4b5e      	ldr	r3, [pc, #376]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	e010      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a0:	4b5a      	ldr	r3, [pc, #360]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ac:	d106      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80071ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071b4:	d102      	bne.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071b6:	4b58      	ldr	r3, [pc, #352]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80071b8:	637b      	str	r3, [r7, #52]	; 0x34
 80071ba:	e002      	b.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80071c2:	e002      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071c8:	bf00      	nop
          }
        }
        break;
 80071ca:	f000 beb4 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80071ce:	4b4f      	ldr	r3, [pc, #316]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80071d4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80071d8:	633b      	str	r3, [r7, #48]	; 0x30
 80071da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e0:	d056      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80071e8:	f200 808b 	bhi.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071f2:	d03e      	beq.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071fa:	f200 8082 	bhi.w	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007204:	d027      	beq.n	8007256 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007208:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800720c:	d879      	bhi.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007214:	d017      	beq.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721c:	d871      	bhi.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	2b00      	cmp	r3, #0
 8007222:	d004      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800722a:	d004      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800722c:	e069      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800722e:	f7fb ff59 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8007232:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007234:	e068      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007236:	f107 0314 	add.w	r3, r7, #20
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe f85c 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007244:	e060      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007246:	f107 0308 	add.w	r3, r7, #8
 800724a:	4618      	mov	r0, r3
 800724c:	f7fe f9be 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007254:	e058      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007256:	4b2d      	ldr	r3, [pc, #180]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d103      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007264:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800726a:	e04d      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007270:	e04a      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007272:	4b26      	ldr	r3, [pc, #152]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800727c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007280:	d103      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8007282:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007288:	e03e      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800728e:	e03b      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007290:	4b1e      	ldr	r3, [pc, #120]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007296:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800729c:	4b1b      	ldr	r3, [pc, #108]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d10c      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d109      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072ae:	4b17      	ldr	r3, [pc, #92]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	4a15      	ldr	r2, [pc, #84]	; (8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80072ba:	fa22 f303 	lsr.w	r3, r2, r3
 80072be:	637b      	str	r3, [r7, #52]	; 0x34
 80072c0:	e01e      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072c2:	4b12      	ldr	r3, [pc, #72]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072ce:	d106      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072d6:	d102      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072d8:	4b0e      	ldr	r3, [pc, #56]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80072da:	637b      	str	r3, [r7, #52]	; 0x34
 80072dc:	e010      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072de:	4b0b      	ldr	r3, [pc, #44]	; (800730c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ea:	d106      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80072ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80072f4:	4b08      	ldr	r3, [pc, #32]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80072f6:	637b      	str	r3, [r7, #52]	; 0x34
 80072f8:	e002      	b.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80072fe:	e003      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007300:	e002      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007306:	bf00      	nop
          }
        }
        break;
 8007308:	f000 be15 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800730c:	44020c00 	.word	0x44020c00
 8007310:	03d09000 	.word	0x03d09000
 8007314:	003d0900 	.word	0x003d0900
 8007318:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800731c:	4b9e      	ldr	r3, [pc, #632]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800731e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007322:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007326:	633b      	str	r3, [r7, #48]	; 0x30
 8007328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732a:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800732e:	d056      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007332:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007336:	f200 808b 	bhi.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800733a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007340:	d03e      	beq.n	80073c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007348:	f200 8082 	bhi.w	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007352:	d027      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800735a:	d879      	bhi.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007362:	d017      	beq.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800736a:	d871      	bhi.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800736c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736e:	2b00      	cmp	r3, #0
 8007370:	d004      	beq.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8007372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007378:	d004      	beq.n	8007384 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800737a:	e069      	b.n	8007450 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800737c:	f7fb feb2 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8007380:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007382:	e068      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007384:	f107 0314 	add.w	r3, r7, #20
 8007388:	4618      	mov	r0, r3
 800738a:	f7fd ffb5 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007392:	e060      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007394:	f107 0308 	add.w	r3, r7, #8
 8007398:	4618      	mov	r0, r3
 800739a:	f7fe f917 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073a2:	e058      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80073a4:	4b7c      	ldr	r3, [pc, #496]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d103      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80073b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073b8:	e04d      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80073ba:	2300      	movs	r3, #0
 80073bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073be:	e04a      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80073c0:	4b75      	ldr	r3, [pc, #468]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ce:	d103      	bne.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80073d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80073d6:	e03e      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073dc:	e03b      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073de:	4b6e      	ldr	r3, [pc, #440]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073e4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80073e8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ea:	4b6b      	ldr	r3, [pc, #428]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d10c      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d109      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80073fc:	4b66      	ldr	r3, [pc, #408]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	08db      	lsrs	r3, r3, #3
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	4a65      	ldr	r2, [pc, #404]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
 800740c:	637b      	str	r3, [r7, #52]	; 0x34
 800740e:	e01e      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007410:	4b61      	ldr	r3, [pc, #388]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741c:	d106      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d102      	bne.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007426:	4b5e      	ldr	r3, [pc, #376]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	e010      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800742c:	4b5a      	ldr	r3, [pc, #360]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007438:	d106      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800743a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007440:	d102      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007442:	4b58      	ldr	r3, [pc, #352]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	e002      	b.n	800744e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007448:	2300      	movs	r3, #0
 800744a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800744c:	e003      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800744e:	e002      	b.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007454:	bf00      	nop
          }
        }
        break;
 8007456:	f000 bd6e 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800745a:	4b4f      	ldr	r3, [pc, #316]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800745c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007460:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007464:	633b      	str	r3, [r7, #48]	; 0x30
 8007466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007468:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800746c:	d056      	beq.n	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800746e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007470:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007474:	f200 808b 	bhi.w	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800747e:	d03e      	beq.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007486:	f200 8082 	bhi.w	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007490:	d027      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007498:	d879      	bhi.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074a0:	d017      	beq.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074a8:	d871      	bhi.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074b6:	d004      	beq.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80074b8:	e069      	b.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80074ba:	f7fb fe13 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 80074be:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80074c0:	e068      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074c2:	f107 0314 	add.w	r3, r7, #20
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fd ff16 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074d0:	e060      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe f878 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074e0:	e058      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80074e2:	4b2d      	ldr	r3, [pc, #180]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d103      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80074f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80074f6:	e04d      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074fc:	e04a      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80074fe:	4b26      	ldr	r3, [pc, #152]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007504:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007508:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800750c:	d103      	bne.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800750e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007512:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007514:	e03e      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007516:	2300      	movs	r3, #0
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800751a:	e03b      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800751c:	4b1e      	ldr	r3, [pc, #120]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800751e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007522:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007526:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007528:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b02      	cmp	r3, #2
 8007532:	d10c      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007536:	2b00      	cmp	r3, #0
 8007538:	d109      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800753a:	4b17      	ldr	r3, [pc, #92]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	08db      	lsrs	r3, r3, #3
 8007540:	f003 0303 	and.w	r3, r3, #3
 8007544:	4a15      	ldr	r2, [pc, #84]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007546:	fa22 f303 	lsr.w	r3, r2, r3
 800754a:	637b      	str	r3, [r7, #52]	; 0x34
 800754c:	e01e      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800754e:	4b12      	ldr	r3, [pc, #72]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755a:	d106      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800755c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d102      	bne.n	800756a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007566:	637b      	str	r3, [r7, #52]	; 0x34
 8007568:	e010      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007576:	d106      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800757e:	d102      	bne.n	8007586 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007580:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
 8007584:	e002      	b.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800758c:	e002      	b.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007592:	bf00      	nop
          }
        }
        break;
 8007594:	f000 bccf 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007598:	44020c00 	.word	0x44020c00
 800759c:	03d09000 	.word	0x03d09000
 80075a0:	003d0900 	.word	0x003d0900
 80075a4:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80075a8:	4b9e      	ldr	r3, [pc, #632]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80075aa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80075ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ba:	d056      	beq.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075c2:	f200 808b 	bhi.w	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d03e      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	f200 8082 	bhi.w	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075de:	d027      	beq.n	8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80075e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e6:	d879      	bhi.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ee:	d017      	beq.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f6:	d871      	bhi.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d004      	beq.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80075fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007600:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007604:	d004      	beq.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007606:	e069      	b.n	80076dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007608:	f7fb fd6c 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 800760c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800760e:	e068      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4618      	mov	r0, r3
 8007616:	f7fd fe6f 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800761e:	e060      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	4618      	mov	r0, r3
 8007626:	f7fd ffd1 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800762e:	e058      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007630:	4b7c      	ldr	r3, [pc, #496]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b02      	cmp	r3, #2
 800763c:	d103      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800763e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007644:	e04d      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800764a:	e04a      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800764c:	4b75      	ldr	r3, [pc, #468]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800764e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800765a:	d103      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800765c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007662:	e03e      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007668:	e03b      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800766a:	4b6e      	ldr	r3, [pc, #440]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800766c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007670:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007676:	4b6b      	ldr	r3, [pc, #428]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d10c      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8007682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d109      	bne.n	800769c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007688:	4b66      	ldr	r3, [pc, #408]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	4a65      	ldr	r2, [pc, #404]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
 800769a:	e01e      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800769c:	4b61      	ldr	r3, [pc, #388]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076a8:	d106      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b0:	d102      	bne.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80076b2:	4b5e      	ldr	r3, [pc, #376]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
 80076b6:	e010      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80076b8:	4b5a      	ldr	r3, [pc, #360]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c4:	d106      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076cc:	d102      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80076ce:	4b58      	ldr	r3, [pc, #352]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80076d0:	637b      	str	r3, [r7, #52]	; 0x34
 80076d2:	e002      	b.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80076d4:	2300      	movs	r3, #0
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80076da:	e002      	b.n	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80076dc:	2300      	movs	r3, #0
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076e0:	bf00      	nop
          }
        }
        break;
 80076e2:	f000 bc28 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80076e6:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80076f2:	4b4c      	ldr	r3, [pc, #304]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076fe:	d106      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	2b00      	cmp	r3, #0
 8007704:	d103      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007706:	4b4a      	ldr	r3, [pc, #296]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800770a:	f000 bc14 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007714:	d108      	bne.n	8007728 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007716:	f107 0320 	add.w	r3, r7, #32
 800771a:	4618      	mov	r0, r3
 800771c:	f7fd fc82 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007724:	f000 bc07 	b.w	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800772e:	d107      	bne.n	8007740 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007730:	f107 0314 	add.w	r3, r7, #20
 8007734:	4618      	mov	r0, r3
 8007736:	f7fd fddf 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800773e:	e3fa      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007744:	e3f7      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007746:	4b37      	ldr	r3, [pc, #220]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800774c:	f003 0307 	and.w	r3, r3, #7
 8007750:	633b      	str	r3, [r7, #48]	; 0x30
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2b04      	cmp	r3, #4
 8007756:	d861      	bhi.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007775 	.word	0x08007775
 8007764:	08007785 	.word	0x08007785
 8007768:	08007795 	.word	0x08007795
 800776c:	080077a5 	.word	0x080077a5
 8007770:	080077ab 	.word	0x080077ab
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007774:	f107 0320 	add.w	r3, r7, #32
 8007778:	4618      	mov	r0, r3
 800777a:	f7fd fc53 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007782:	e04e      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007784:	f107 0314 	add.w	r3, r7, #20
 8007788:	4618      	mov	r0, r3
 800778a:	f7fd fdb5 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007792:	e046      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007794:	f107 0308 	add.w	r3, r7, #8
 8007798:	4618      	mov	r0, r3
 800779a:	f7fd ff17 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077a2:	e03e      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80077a4:	4b23      	ldr	r3, [pc, #140]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80077a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077a8:	e03b      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80077aa:	4b1e      	ldr	r3, [pc, #120]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80077b0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80077b4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80077b6:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d10c      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d109      	bne.n	80077dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077c8:	4b16      	ldr	r3, [pc, #88]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	08db      	lsrs	r3, r3, #3
 80077ce:	f003 0303 	and.w	r3, r3, #3
 80077d2:	4a15      	ldr	r2, [pc, #84]	; (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80077d4:	fa22 f303 	lsr.w	r3, r2, r3
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
 80077da:	e01e      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80077dc:	4b11      	ldr	r3, [pc, #68]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077e8:	d106      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f0:	d102      	bne.n	80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80077f2:	4b0e      	ldr	r3, [pc, #56]	; (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
 80077f6:	e010      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007804:	d106      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780c:	d102      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800780e:	4b08      	ldr	r3, [pc, #32]	; (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
 8007812:	e002      	b.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007818:	e003      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800781a:	e002      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007820:	bf00      	nop
          }
        }
        break;
 8007822:	e388      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007824:	44020c00 	.word	0x44020c00
 8007828:	03d09000 	.word	0x03d09000
 800782c:	003d0900 	.word	0x003d0900
 8007830:	017d7840 	.word	0x017d7840
 8007834:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007838:	4ba9      	ldr	r3, [pc, #676]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800783a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800783e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007842:	633b      	str	r3, [r7, #48]	; 0x30
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	2b20      	cmp	r3, #32
 8007848:	f200 809a 	bhi.w	8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800784c:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800784e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007852:	bf00      	nop
 8007854:	080078d9 	.word	0x080078d9
 8007858:	08007981 	.word	0x08007981
 800785c:	08007981 	.word	0x08007981
 8007860:	08007981 	.word	0x08007981
 8007864:	08007981 	.word	0x08007981
 8007868:	08007981 	.word	0x08007981
 800786c:	08007981 	.word	0x08007981
 8007870:	08007981 	.word	0x08007981
 8007874:	080078e9 	.word	0x080078e9
 8007878:	08007981 	.word	0x08007981
 800787c:	08007981 	.word	0x08007981
 8007880:	08007981 	.word	0x08007981
 8007884:	08007981 	.word	0x08007981
 8007888:	08007981 	.word	0x08007981
 800788c:	08007981 	.word	0x08007981
 8007890:	08007981 	.word	0x08007981
 8007894:	080078f9 	.word	0x080078f9
 8007898:	08007981 	.word	0x08007981
 800789c:	08007981 	.word	0x08007981
 80078a0:	08007981 	.word	0x08007981
 80078a4:	08007981 	.word	0x08007981
 80078a8:	08007981 	.word	0x08007981
 80078ac:	08007981 	.word	0x08007981
 80078b0:	08007981 	.word	0x08007981
 80078b4:	08007909 	.word	0x08007909
 80078b8:	08007981 	.word	0x08007981
 80078bc:	08007981 	.word	0x08007981
 80078c0:	08007981 	.word	0x08007981
 80078c4:	08007981 	.word	0x08007981
 80078c8:	08007981 	.word	0x08007981
 80078cc:	08007981 	.word	0x08007981
 80078d0:	08007981 	.word	0x08007981
 80078d4:	0800790f 	.word	0x0800790f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078d8:	f107 0320 	add.w	r3, r7, #32
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fd fba1 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078e6:	e04e      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7fd fd03 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80078f6:	e046      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078f8:	f107 0308 	add.w	r3, r7, #8
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fd fe65 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007906:	e03e      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007908:	4b76      	ldr	r3, [pc, #472]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800790c:	e03b      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800790e:	4b74      	ldr	r3, [pc, #464]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007914:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800791a:	4b71      	ldr	r3, [pc, #452]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b02      	cmp	r3, #2
 8007924:	d10c      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d109      	bne.n	8007940 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800792c:	4b6c      	ldr	r3, [pc, #432]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	08db      	lsrs	r3, r3, #3
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	4a6c      	ldr	r2, [pc, #432]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007938:	fa22 f303 	lsr.w	r3, r2, r3
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	e01e      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007940:	4b67      	ldr	r3, [pc, #412]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794c:	d106      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007954:	d102      	bne.n	800795c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007956:	4b65      	ldr	r3, [pc, #404]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
 800795a:	e010      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800795c:	4b60      	ldr	r3, [pc, #384]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007968:	d106      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800796a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007970:	d102      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007972:	4b5f      	ldr	r3, [pc, #380]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
 8007976:	e002      	b.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800797c:	e003      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800797e:	e002      	b.n	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007984:	bf00      	nop
          }
        }
        break;
 8007986:	e2d6      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007988:	4b55      	ldr	r3, [pc, #340]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800798a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800798e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007992:	633b      	str	r3, [r7, #48]	; 0x30
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799a:	d031      	beq.n	8007a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a2:	d866      	bhi.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	2bc0      	cmp	r3, #192	; 0xc0
 80079a8:	d027      	beq.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2bc0      	cmp	r3, #192	; 0xc0
 80079ae:	d860      	bhi.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80079b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d019      	beq.n	80079ea <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d85a      	bhi.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	2b40      	cmp	r3, #64	; 0x40
 80079c6:	d008      	beq.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80079c8:	e053      	b.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079ca:	f107 0320 	add.w	r3, r7, #32
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fd fb28 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079d8:	e04e      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fd fc8a 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079e8:	e046      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079ea:	f107 0308 	add.w	r3, r7, #8
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fd fdec 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079f8:	e03e      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80079fa:	4b3a      	ldr	r3, [pc, #232]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079fe:	e03b      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a00:	4b37      	ldr	r3, [pc, #220]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a06:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a0c:	4b34      	ldr	r3, [pc, #208]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d10c      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d109      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a1e:	4b30      	ldr	r3, [pc, #192]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	08db      	lsrs	r3, r3, #3
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	4a2f      	ldr	r2, [pc, #188]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8007a30:	e01e      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a32:	4b2b      	ldr	r3, [pc, #172]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a3e:	d106      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a46:	d102      	bne.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a48:	4b28      	ldr	r3, [pc, #160]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a4c:	e010      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5a:	d106      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a62:	d102      	bne.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a64:	4b22      	ldr	r3, [pc, #136]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
 8007a68:	e002      	b.n	8007a70 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007a6e:	e003      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007a70:	e002      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a76:	bf00      	nop
          }
        }
        break;
 8007a78:	e25d      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007a7a:	4b19      	ldr	r3, [pc, #100]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a80:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007a84:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007a8c:	f7fb fb14 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8007a90:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007a92:	e250      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007a94:	4b12      	ldr	r3, [pc, #72]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007aa0:	d10b      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa8:	d107      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aaa:	f107 0314 	add.w	r3, r7, #20
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd fc22 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab8:	e04f      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007aba:	4b09      	ldr	r3, [pc, #36]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac6:	d115      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ace:	d111      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ad0:	f107 0308 	add.w	r3, r7, #8
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fd fd79 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ade:	e03c      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007ae0:	44020c00 	.word	0x44020c00
 8007ae4:	00bb8000 	.word	0x00bb8000
 8007ae8:	03d09000 	.word	0x03d09000
 8007aec:	003d0900 	.word	0x003d0900
 8007af0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007af4:	4b94      	ldr	r3, [pc, #592]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d10d      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b06:	d109      	bne.n	8007b1c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b08:	4b8f      	ldr	r3, [pc, #572]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	08db      	lsrs	r3, r3, #3
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	4a8e      	ldr	r2, [pc, #568]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b14:	fa22 f303 	lsr.w	r3, r2, r3
 8007b18:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1a:	e01e      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007b1c:	4b8a      	ldr	r3, [pc, #552]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b28:	d106      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b30:	d102      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007b32:	4b87      	ldr	r3, [pc, #540]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
 8007b36:	e010      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007b38:	4b83      	ldr	r3, [pc, #524]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b44:	d106      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007b4c:	d102      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007b4e:	4b81      	ldr	r3, [pc, #516]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
 8007b52:	e002      	b.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b58:	e1ed      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b5a:	e1ec      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007b5c:	4b7a      	ldr	r3, [pc, #488]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007b66:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007b6e:	f7fb fab9 	bl	80030e4 <HAL_RCC_GetPCLK3Freq>
 8007b72:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007b74:	e1df      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007b76:	4b74      	ldr	r3, [pc, #464]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b82:	d10b      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8a:	d107      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8c:	f107 0314 	add.w	r3, r7, #20
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fd fbb1 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	e045      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007b9c:	4b6a      	ldr	r3, [pc, #424]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ba8:	d10b      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb0:	d107      	bne.n	8007bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb2:	f107 0308 	add.w	r3, r7, #8
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fd fd08 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007bc0:	e032      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007bc2:	4b61      	ldr	r3, [pc, #388]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d10d      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bd4:	d109      	bne.n	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	08db      	lsrs	r3, r3, #3
 8007bdc:	f003 0303 	and.w	r3, r3, #3
 8007be0:	4a5a      	ldr	r2, [pc, #360]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007be2:	fa22 f303 	lsr.w	r3, r2, r3
 8007be6:	637b      	str	r3, [r7, #52]	; 0x34
 8007be8:	e01e      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007bea:	4b57      	ldr	r3, [pc, #348]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf6:	d106      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bfe:	d102      	bne.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007c00:	4b53      	ldr	r3, [pc, #332]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
 8007c04:	e010      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007c06:	4b50      	ldr	r3, [pc, #320]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c12:	d106      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007c1a:	d102      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007c1c:	4b4d      	ldr	r3, [pc, #308]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c20:	e002      	b.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c26:	e186      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c28:	e185      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007c2a:	4b47      	ldr	r3, [pc, #284]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c30:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007c34:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007c3c:	f7fb fa3c 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 8007c40:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c42:	e178      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007c44:	4b40      	ldr	r3, [pc, #256]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c50:	d10b      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c58:	d107      	bne.n	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c5a:	f107 0314 	add.w	r3, r7, #20
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fd fb4a 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
 8007c68:	e045      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007c6a:	4b37      	ldr	r3, [pc, #220]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c76:	d10b      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c7e:	d107      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c80:	f107 0308 	add.w	r3, r7, #8
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fd fca1 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c8e:	e032      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007c90:	4b2d      	ldr	r3, [pc, #180]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d10d      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007ca2:	d109      	bne.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ca4:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	08db      	lsrs	r3, r3, #3
 8007caa:	f003 0303 	and.w	r3, r3, #3
 8007cae:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb6:	e01e      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007cb8:	4b23      	ldr	r3, [pc, #140]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cc4:	d106      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ccc:	d102      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd2:	e010      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007cd4:	4b1c      	ldr	r3, [pc, #112]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ce0:	d106      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007ce8:	d102      	bne.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007cea:	4b1a      	ldr	r3, [pc, #104]	; (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
 8007cee:	e002      	b.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cf4:	e11f      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cf6:	e11e      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	633b      	str	r3, [r7, #48]	; 0x30
 8007d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d85f      	bhi.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007d0a:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d29 	.word	0x08007d29
 8007d18:	08007d39 	.word	0x08007d39
 8007d1c:	08007d59 	.word	0x08007d59

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007d20:	f7fb f998 	bl	8003054 <HAL_RCC_GetHCLKFreq>
 8007d24:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d26:	e053      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d28:	f107 0320 	add.w	r3, r7, #32
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7fd f979 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d36:	e04b      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7fd fadb 	bl	80052f8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d46:	e043      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007d48:	44020c00 	.word	0x44020c00
 8007d4c:	03d09000 	.word	0x03d09000
 8007d50:	003d0900 	.word	0x003d0900
 8007d54:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d58:	4b79      	ldr	r3, [pc, #484]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d64:	4b76      	ldr	r3, [pc, #472]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 0302 	and.w	r3, r3, #2
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d10c      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d109      	bne.n	8007d8a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d76:	4b72      	ldr	r3, [pc, #456]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	08db      	lsrs	r3, r3, #3
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	4a70      	ldr	r2, [pc, #448]	; (8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007d82:	fa22 f303 	lsr.w	r3, r2, r3
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
 8007d88:	e01e      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d8a:	4b6d      	ldr	r3, [pc, #436]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d96:	d106      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9e:	d102      	bne.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007da0:	4b69      	ldr	r3, [pc, #420]	; (8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
 8007da4:	e010      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007da6:	4b66      	ldr	r3, [pc, #408]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007db2:	d106      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dba:	d102      	bne.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007dbc:	4b63      	ldr	r3, [pc, #396]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc0:	e002      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007dc8:	e002      	b.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007dce:	bf00      	nop
          }
        }
        break;
 8007dd0:	e0b1      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007dd2:	4b5b      	ldr	r3, [pc, #364]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dd8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ddc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007dde:	4b58      	ldr	r3, [pc, #352]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007de4:	f003 0302 	and.w	r3, r3, #2
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d106      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
 8007df8:	e01f      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007dfa:	4b51      	ldr	r3, [pc, #324]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e08:	d106      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	2b40      	cmp	r3, #64	; 0x40
 8007e0e:	d103      	bne.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007e10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e14:	637b      	str	r3, [r7, #52]	; 0x34
 8007e16:	e010      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007e18:	4b49      	ldr	r3, [pc, #292]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e24:	d106      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d103      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007e2c:	f248 0312 	movw	r3, #32786	; 0x8012
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
 8007e32:	e002      	b.n	8007e3a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007e34:	2300      	movs	r3, #0
 8007e36:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007e38:	e07d      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e3a:	e07c      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007e3c:	4b40      	ldr	r3, [pc, #256]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007e48:	4b3d      	ldr	r3, [pc, #244]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e54:	d105      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007e5c:	4b3c      	ldr	r3, [pc, #240]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e60:	e031      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007e62:	4b37      	ldr	r3, [pc, #220]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e6e:	d10a      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	2b10      	cmp	r3, #16
 8007e74:	d107      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e76:	f107 0320 	add.w	r3, r7, #32
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fd f8d2 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	637b      	str	r3, [r7, #52]	; 0x34
 8007e84:	e01f      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007e86:	4b2e      	ldr	r3, [pc, #184]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d106      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	2b20      	cmp	r3, #32
 8007e98:	d103      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea0:	e011      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007ea2:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007eb0:	d106      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b30      	cmp	r3, #48	; 0x30
 8007eb6:	d103      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007eb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ebc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebe:	e002      	b.n	8007ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007ec4:	e037      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ec6:	e036      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007ec8:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ed2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d107      	bne.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007eda:	f107 0320 	add.w	r3, r7, #32
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7fd f8a0 	bl	8005024 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ee8:	e025      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ef6:	d10a      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d107      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fd fb62 	bl	80055cc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	e00f      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1a:	d105      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2b30      	cmp	r3, #48	; 0x30
 8007f20:	d102      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007f22:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
 8007f26:	e002      	b.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007f2c:	e003      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f2e:	e002      	b.n	8007f36 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007f30:	2300      	movs	r3, #0
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f34:	bf00      	nop
    }
  }

  return (frequency);
 8007f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	373c      	adds	r7, #60	; 0x3c
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}
 8007f40:	44020c00 	.word	0x44020c00
 8007f44:	03d09000 	.word	0x03d09000
 8007f48:	003d0900 	.word	0x003d0900
 8007f4c:	017d7840 	.word	0x017d7840
 8007f50:	02dc6c00 	.word	0x02dc6c00

08007f54 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007f5c:	4b48      	ldr	r3, [pc, #288]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a47      	ldr	r2, [pc, #284]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007f68:	f7f8 ff7a 	bl	8000e60 <HAL_GetTick>
 8007f6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f6e:	e008      	b.n	8007f82 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f70:	f7f8 ff76 	bl	8000e60 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2b02      	cmp	r3, #2
 8007f7c:	d901      	bls.n	8007f82 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e07a      	b.n	8008078 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f82:	4b3f      	ldr	r3, [pc, #252]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d1f0      	bne.n	8007f70 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007f8e:	4b3c      	ldr	r3, [pc, #240]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f96:	f023 0303 	bic.w	r3, r3, #3
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6852      	ldr	r2, [r2, #4]
 8007fa2:	0212      	lsls	r2, r2, #8
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	4936      	ldr	r1, [pc, #216]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	025b      	lsls	r3, r3, #9
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	041b      	lsls	r3, r3, #16
 8007fca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	061b      	lsls	r3, r3, #24
 8007fd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fdc:	4928      	ldr	r1, [pc, #160]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007fe2:	4b27      	ldr	r3, [pc, #156]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe6:	f023 020c 	bic.w	r2, r3, #12
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	4924      	ldr	r1, [pc, #144]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8007ff4:	4b22      	ldr	r3, [pc, #136]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	f023 0220 	bic.w	r2, r3, #32
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	69db      	ldr	r3, [r3, #28]
 8008000:	491f      	ldr	r1, [pc, #124]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008002:	4313      	orrs	r3, r2
 8008004:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008006:	4b1e      	ldr	r3, [pc, #120]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800e:	491c      	ldr	r1, [pc, #112]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008010:	4313      	orrs	r3, r2
 8008012:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008014:	4b1a      	ldr	r3, [pc, #104]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 800801a:	f023 0310 	bic.w	r3, r3, #16
 800801e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008020:	4b17      	ldr	r3, [pc, #92]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008028:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6a12      	ldr	r2, [r2, #32]
 8008030:	00d2      	lsls	r2, r2, #3
 8008032:	4913      	ldr	r1, [pc, #76]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008034:	4313      	orrs	r3, r2
 8008036:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008038:	4b11      	ldr	r3, [pc, #68]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	4a10      	ldr	r2, [pc, #64]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 800803e:	f043 0310 	orr.w	r3, r3, #16
 8008042:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008044:	4b0e      	ldr	r3, [pc, #56]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a0d      	ldr	r2, [pc, #52]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 800804a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800804e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008050:	f7f8 ff06 	bl	8000e60 <HAL_GetTick>
 8008054:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008056:	e008      	b.n	800806a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008058:	f7f8 ff02 	bl	8000e60 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e006      	b.n	8008078 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <RCCEx_PLL2_Config+0x12c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008076:	2300      	movs	r3, #0

}
 8008078:	4618      	mov	r0, r3
 800807a:	3710      	adds	r7, #16
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	44020c00 	.word	0x44020c00

08008084 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800808c:	4b48      	ldr	r3, [pc, #288]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a47      	ldr	r2, [pc, #284]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008096:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008098:	f7f8 fee2 	bl	8000e60 <HAL_GetTick>
 800809c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800809e:	e008      	b.n	80080b2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080a0:	f7f8 fede 	bl	8000e60 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d901      	bls.n	80080b2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e07a      	b.n	80081a8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080b2:	4b3f      	ldr	r3, [pc, #252]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1f0      	bne.n	80080a0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80080be:	4b3c      	ldr	r3, [pc, #240]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 80080c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6811      	ldr	r1, [r2, #0]
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6852      	ldr	r2, [r2, #4]
 80080d2:	0212      	lsls	r2, r2, #8
 80080d4:	430a      	orrs	r2, r1
 80080d6:	4936      	ldr	r1, [pc, #216]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	630b      	str	r3, [r1, #48]	; 0x30
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	025b      	lsls	r3, r3, #9
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	3b01      	subs	r3, #1
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800810c:	4928      	ldr	r1, [pc, #160]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800810e:	4313      	orrs	r3, r2
 8008110:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008112:	4b27      	ldr	r3, [pc, #156]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	f023 020c 	bic.w	r2, r3, #12
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	4924      	ldr	r1, [pc, #144]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008120:	4313      	orrs	r3, r2
 8008122:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008124:	4b22      	ldr	r3, [pc, #136]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008128:	f023 0220 	bic.w	r2, r3, #32
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	491f      	ldr	r1, [pc, #124]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008132:	4313      	orrs	r3, r2
 8008134:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008136:	4b1e      	ldr	r3, [pc, #120]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	491c      	ldr	r1, [pc, #112]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008140:	4313      	orrs	r3, r2
 8008142:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008144:	4b1a      	ldr	r3, [pc, #104]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	4a19      	ldr	r2, [pc, #100]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800814a:	f023 0310 	bic.w	r3, r3, #16
 800814e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008150:	4b17      	ldr	r3, [pc, #92]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008154:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008158:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6a12      	ldr	r2, [r2, #32]
 8008160:	00d2      	lsls	r2, r2, #3
 8008162:	4913      	ldr	r1, [pc, #76]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008164:	4313      	orrs	r3, r2
 8008166:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008168:	4b11      	ldr	r3, [pc, #68]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800816a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816c:	4a10      	ldr	r2, [pc, #64]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800816e:	f043 0310 	orr.w	r3, r3, #16
 8008172:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800817a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008180:	f7f8 fe6e 	bl	8000e60 <HAL_GetTick>
 8008184:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008186:	e008      	b.n	800819a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008188:	f7f8 fe6a 	bl	8000e60 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e006      	b.n	80081a8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800819a:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <RCCEx_PLL3_Config+0x12c>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f0      	beq.n	8008188 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	44020c00 	.word	0x44020c00

080081b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e042      	b.n	800824c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7f8 fbaf 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2224      	movs	r2, #36	; 0x24
 80081e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fe38 	bl	8008e74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fc47 	bl	8008a98 <UART_SetConfig>
 800820a:	4603      	mov	r3, r0
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e01b      	b.n	800824c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 feb7 	bl	8008fb8 <UART_CheckIdleState>
 800824a:	4603      	mov	r3, r0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b08c      	sub	sp, #48	; 0x30
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	4613      	mov	r3, r2
 8008260:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 8008262:	88fb      	ldrh	r3, [r7, #6]
 8008264:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826c:	2b20      	cmp	r3, #32
 800826e:	f040 80ad 	bne.w	80083cc <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_UART_Transmit_DMA+0x2a>
 8008278:	88fb      	ldrh	r3, [r7, #6]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e0a5      	b.n	80083ce <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2221      	movs	r2, #33	; 0x21
 80082a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06d      	beq.n	800838c <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082b4:	4a48      	ldr	r2, [pc, #288]	; (80083d8 <HAL_UART_Transmit_DMA+0x184>)
 80082b6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082bc:	4a47      	ldr	r2, [pc, #284]	; (80083dc <HAL_UART_Transmit_DMA+0x188>)
 80082be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082c4:	4a46      	ldr	r2, [pc, #280]	; (80083e0 <HAL_UART_Transmit_DMA+0x18c>)
 80082c6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082cc:	2200      	movs	r2, #0
 80082ce:	66da      	str	r2, [r3, #108]	; 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082d8:	d106      	bne.n	80082e8 <HAL_UART_Transmit_DMA+0x94>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d102      	bne.n	80082e8 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 80082e2:	88fb      	ldrh	r3, [r7, #6]
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d02d      	beq.n	8008352 <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d024      	beq.n	800834a <HAL_UART_Transmit_DMA+0xf6>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d01e      	beq.n	800834a <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008316:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f103 0228 	add.w	r2, r3, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800833c:	4618      	mov	r0, r3
 800833e:	f7f9 fd3f 	bl	8001dc0 <HAL_DMAEx_List_Start_IT>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008348:	e012      	b.n	8008370 <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008350:	e00e      	b.n	8008370 <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800835a:	4619      	mov	r1, r3
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3328      	adds	r3, #40	; 0x28
 8008362:	461a      	mov	r2, r3
 8008364:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008366:	f7f8 ffc7 	bl	80012f8 <HAL_DMA_Start_IT>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }

      if (status != HAL_OK)
 8008370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2210      	movs	r2, #16
 800837c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2220      	movs	r2, #32
 8008384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e020      	b.n	80083ce <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2240      	movs	r2, #64	; 0x40
 8008392:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3308      	adds	r3, #8
 800839a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	617b      	str	r3, [r7, #20]
   return(result);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b4:	627a      	str	r2, [r7, #36]	; 0x24
 80083b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6a39      	ldr	r1, [r7, #32]
 80083ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e5      	bne.n	8008394 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3730      	adds	r7, #48	; 0x30
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	0800951b 	.word	0x0800951b
 80083dc:	0800957b 	.word	0x0800957b
 80083e0:	080096c7 	.word	0x080096c7

080083e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08a      	sub	sp, #40	; 0x28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d13c      	bne.n	8008476 <HAL_UART_Receive_DMA+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d002      	beq.n	8008408 <HAL_UART_Receive_DMA+0x24>
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	e035      	b.n	8008478 <HAL_UART_Receive_DMA+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a1a      	ldr	r2, [pc, #104]	; (8008480 <HAL_UART_Receive_DMA+0x9c>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d024      	beq.n	8008466 <HAL_UART_Receive_DMA+0x82>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a18      	ldr	r2, [pc, #96]	; (8008484 <HAL_UART_Receive_DMA+0xa0>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01f      	beq.n	8008466 <HAL_UART_Receive_DMA+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d018      	beq.n	8008466 <HAL_UART_Receive_DMA+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	e853 3f00 	ldrex	r3, [r3]
 8008440:	613b      	str	r3, [r7, #16]
   return(result);
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	623b      	str	r3, [r7, #32]
 8008454:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	69f9      	ldr	r1, [r7, #28]
 8008458:	6a3a      	ldr	r2, [r7, #32]
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e6      	bne.n	8008434 <HAL_UART_Receive_DMA+0x50>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	461a      	mov	r2, r3
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f000 feb5 	bl	80091dc <UART_Start_Receive_DMA>
 8008472:	4603      	mov	r3, r0
 8008474:	e000      	b.n	8008478 <HAL_UART_Receive_DMA+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008476:	2302      	movs	r3, #2
  }
}
 8008478:	4618      	mov	r0, r3
 800847a:	3728      	adds	r7, #40	; 0x28
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	44002400 	.word	0x44002400
 8008484:	54002400 	.word	0x54002400

08008488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b0ae      	sub	sp, #184	; 0xb8
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80084ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80084b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80084b6:	4013      	ands	r3, r2
 80084b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 80084bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11b      	bne.n	80084fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80084c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d015      	beq.n	80084fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d105      	bne.n	80084e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8293 	beq.w	8008a18 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	4798      	blx	r3
      }
      return;
 80084fa:	e28d      	b.n	8008a18 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 80fd 	beq.w	8008700 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008506:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800850a:	4b7a      	ldr	r3, [pc, #488]	; (80086f4 <HAL_UART_IRQHandler+0x26c>)
 800850c:	4013      	ands	r3, r2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008516:	4b78      	ldr	r3, [pc, #480]	; (80086f8 <HAL_UART_IRQHandler+0x270>)
 8008518:	4013      	ands	r3, r2
 800851a:	2b00      	cmp	r3, #0
 800851c:	f000 80f0 	beq.w	8008700 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008520:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b00      	cmp	r3, #0
 800852a:	d011      	beq.n	8008550 <HAL_UART_IRQHandler+0xc8>
 800852c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008534:	2b00      	cmp	r3, #0
 8008536:	d00b      	beq.n	8008550 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2201      	movs	r2, #1
 800853e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008546:	f043 0201 	orr.w	r2, r3, #1
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d011      	beq.n	8008580 <HAL_UART_IRQHandler+0xf8>
 800855c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008560:	f003 0301 	and.w	r3, r3, #1
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00b      	beq.n	8008580 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2202      	movs	r2, #2
 800856e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008576:	f043 0204 	orr.w	r2, r3, #4
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d011      	beq.n	80085b0 <HAL_UART_IRQHandler+0x128>
 800858c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008590:	f003 0301 	and.w	r3, r3, #1
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2204      	movs	r2, #4
 800859e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a6:	f043 0202 	orr.w	r2, r3, #2
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80085b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085c0:	f003 0320 	and.w	r3, r3, #32
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d105      	bne.n	80085d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80085cc:	4b49      	ldr	r3, [pc, #292]	; (80086f4 <HAL_UART_IRQHandler+0x26c>)
 80085ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2208      	movs	r2, #8
 80085da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e2:	f043 0208 	orr.w	r2, r3, #8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d012      	beq.n	800861e <HAL_UART_IRQHandler+0x196>
 80085f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00c      	beq.n	800861e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800860c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 81f9 	beq.w	8008a1c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800862a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	d013      	beq.n	800865e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008636:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d105      	bne.n	800864e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008672:	2b40      	cmp	r3, #64	; 0x40
 8008674:	d005      	beq.n	8008682 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800867a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800867e:	2b00      	cmp	r3, #0
 8008680:	d02e      	beq.n	80086e0 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 fee3 	bl	800944e <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008692:	2b40      	cmp	r3, #64	; 0x40
 8008694:	d120      	bne.n	80086d8 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869c:	2b00      	cmp	r3, #0
 800869e:	d017      	beq.n	80086d0 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a6:	4a15      	ldr	r2, [pc, #84]	; (80086fc <HAL_UART_IRQHandler+0x274>)
 80086a8:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f8 fefd 	bl	80014b0 <HAL_DMA_Abort_IT>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d019      	beq.n	80086f0 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80086ca:	4610      	mov	r0, r2
 80086cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086ce:	e00f      	b.n	80086f0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f9cb 	bl	8008a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d6:	e00b      	b.n	80086f0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f9c7 	bl	8008a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086de:	e007      	b.n	80086f0 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f9c3 	bl	8008a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80086ee:	e195      	b.n	8008a1c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	bf00      	nop
    return;
 80086f2:	e193      	b.n	8008a1c <HAL_UART_IRQHandler+0x594>
 80086f4:	10000001 	.word	0x10000001
 80086f8:	04000120 	.word	0x04000120
 80086fc:	08009747 	.word	0x08009747

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008704:	2b01      	cmp	r3, #1
 8008706:	f040 8129 	bne.w	800895c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800870a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 8122 	beq.w	800895c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008718:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800871c:	f003 0310 	and.w	r3, r3, #16
 8008720:	2b00      	cmp	r3, #0
 8008722:	f000 811b 	beq.w	800895c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2210      	movs	r2, #16
 800872c:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	f040 8091 	bne.w	8008860 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008748:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 800874c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 8165 	beq.w	8008a20 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800875c:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8008760:	429a      	cmp	r2, r3
 8008762:	f080 815d 	bcs.w	8008a20 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 800876c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008778:	2b81      	cmp	r3, #129	; 0x81
 800877a:	d060      	beq.n	800883e <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800878a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800878c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008790:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800879e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087a2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087aa:	e841 2300 	strex	r3, r2, [r1]
 80087ae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1e2      	bne.n	800877c <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3308      	adds	r3, #8
 80087bc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c0:	e853 3f00 	ldrex	r3, [r3]
 80087c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c8:	f023 0301 	bic.w	r3, r3, #1
 80087cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3308      	adds	r3, #8
 80087d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80087da:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087de:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087e0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087e2:	e841 2300 	strex	r3, r2, [r1]
 80087e6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d1e3      	bne.n	80087b6 <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2220      	movs	r2, #32
 80087f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800880a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800880c:	f023 0310 	bic.w	r3, r3, #16
 8008810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800881e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008820:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008824:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800882c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e4      	bne.n	80087fc <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008838:	4618      	mov	r0, r3
 800883a:	f7f8 fdbd 	bl	80013b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2202      	movs	r2, #2
 8008842:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008850:	b29b      	uxth	r3, r3
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	b29b      	uxth	r3, r3
 8008856:	4619      	mov	r1, r3
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f911 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800885e:	e0df      	b.n	8008a20 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800886c:	b29b      	uxth	r3, r3
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800887a:	b29b      	uxth	r3, r3
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80d1 	beq.w	8008a24 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008882:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 80cc 	beq.w	8008a24 <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800889a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	461a      	mov	r2, r3
 80088aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80088ae:	647b      	str	r3, [r7, #68]	; 0x44
 80088b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e4      	bne.n	800888c <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	623b      	str	r3, [r7, #32]
   return(result);
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d8:	f023 0301 	bic.w	r3, r3, #1
 80088dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80088ea:	633a      	str	r2, [r7, #48]	; 0x30
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e1      	bne.n	80088c2 <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	e853 3f00 	ldrex	r3, [r3]
 800891e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 0310 	bic.w	r3, r3, #16
 8008926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	461a      	mov	r2, r3
 8008930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008934:	61fb      	str	r3, [r7, #28]
 8008936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	69b9      	ldr	r1, [r7, #24]
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	617b      	str	r3, [r7, #20]
   return(result);
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e4      	bne.n	8008912 <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800894e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f893 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800895a:	e063      	b.n	8008a24 <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800895c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00e      	beq.n	8008986 <HAL_UART_IRQHandler+0x4fe>
 8008968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800896c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d008      	beq.n	8008986 <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800897c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 ff22 	bl	80097c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008984:	e051      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008986:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d014      	beq.n	80089bc <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008992:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899a:	2b00      	cmp	r3, #0
 800899c:	d105      	bne.n	80089aa <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800899e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d008      	beq.n	80089bc <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d03a      	beq.n	8008a28 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
    }
    return;
 80089ba:	e035      	b.n	8008a28 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d009      	beq.n	80089dc <HAL_UART_IRQHandler+0x554>
 80089c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fecc 	bl	8009772 <UART_EndTransmit_IT>
    return;
 80089da:	e026      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80089dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d009      	beq.n	80089fc <HAL_UART_IRQHandler+0x574>
 80089e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fefb 	bl	80097f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089fa:	e016      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d010      	beq.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
 8008a08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da0c      	bge.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fee3 	bl	80097dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008a16:	e008      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a18:	bf00      	nop
 8008a1a:	e006      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8008a1c:	bf00      	nop
 8008a1e:	e004      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a20:	bf00      	nop
 8008a22:	e002      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008a24:	bf00      	nop
 8008a26:	e000      	b.n	8008a2a <HAL_UART_IRQHandler+0x5a2>
    return;
 8008a28:	bf00      	nop
  }
}
 8008a2a:	37b8      	adds	r7, #184	; 0xb8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a38:	bf00      	nop
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b094      	sub	sp, #80	; 0x50
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	4b78      	ldr	r3, [pc, #480]	; (8008c90 <UART_SetConfig+0x1f8>)
 8008aae:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4971      	ldr	r1, [pc, #452]	; (8008c94 <UART_SetConfig+0x1fc>)
 8008ad0:	4019      	ands	r1, r3
 8008ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	68d9      	ldr	r1, [r3, #12]
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	ea40 0301 	orr.w	r3, r0, r1
 8008af2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	4b64      	ldr	r3, [pc, #400]	; (8008c90 <UART_SetConfig+0x1f8>)
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d009      	beq.n	8008b18 <UART_SetConfig+0x80>
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	4b63      	ldr	r3, [pc, #396]	; (8008c98 <UART_SetConfig+0x200>)
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d004      	beq.n	8008b18 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b10:	6a1a      	ldr	r2, [r3, #32]
 8008b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b14:	4313      	orrs	r3, r2
 8008b16:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008b22:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	f023 000f 	bic.w	r0, r3, #15
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	ea40 0301 	orr.w	r3, r0, r1
 8008b46:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4b53      	ldr	r3, [pc, #332]	; (8008c9c <UART_SetConfig+0x204>)
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d102      	bne.n	8008b58 <UART_SetConfig+0xc0>
 8008b52:	2301      	movs	r3, #1
 8008b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b56:	e066      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	4b50      	ldr	r3, [pc, #320]	; (8008ca0 <UART_SetConfig+0x208>)
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d102      	bne.n	8008b68 <UART_SetConfig+0xd0>
 8008b62:	2302      	movs	r3, #2
 8008b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b66:	e05e      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ca4 <UART_SetConfig+0x20c>)
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d102      	bne.n	8008b78 <UART_SetConfig+0xe0>
 8008b72:	2304      	movs	r3, #4
 8008b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b76:	e056      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	4b4a      	ldr	r3, [pc, #296]	; (8008ca8 <UART_SetConfig+0x210>)
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d102      	bne.n	8008b88 <UART_SetConfig+0xf0>
 8008b82:	2308      	movs	r3, #8
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b86:	e04e      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b47      	ldr	r3, [pc, #284]	; (8008cac <UART_SetConfig+0x214>)
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d102      	bne.n	8008b98 <UART_SetConfig+0x100>
 8008b92:	2310      	movs	r3, #16
 8008b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b96:	e046      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	4b44      	ldr	r3, [pc, #272]	; (8008cb0 <UART_SetConfig+0x218>)
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d102      	bne.n	8008ba8 <UART_SetConfig+0x110>
 8008ba2:	2320      	movs	r3, #32
 8008ba4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba6:	e03e      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b41      	ldr	r3, [pc, #260]	; (8008cb4 <UART_SetConfig+0x21c>)
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d102      	bne.n	8008bb8 <UART_SetConfig+0x120>
 8008bb2:	2340      	movs	r3, #64	; 0x40
 8008bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb6:	e036      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <UART_SetConfig+0x220>)
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d102      	bne.n	8008bc8 <UART_SetConfig+0x130>
 8008bc2:	2380      	movs	r3, #128	; 0x80
 8008bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc6:	e02e      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	4b3b      	ldr	r3, [pc, #236]	; (8008cbc <UART_SetConfig+0x224>)
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d103      	bne.n	8008bda <UART_SetConfig+0x142>
 8008bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd8:	e025      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b38      	ldr	r3, [pc, #224]	; (8008cc0 <UART_SetConfig+0x228>)
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d103      	bne.n	8008bec <UART_SetConfig+0x154>
 8008be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bea:	e01c      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b34      	ldr	r3, [pc, #208]	; (8008cc4 <UART_SetConfig+0x22c>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d103      	bne.n	8008bfe <UART_SetConfig+0x166>
 8008bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bfc:	e013      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b31      	ldr	r3, [pc, #196]	; (8008cc8 <UART_SetConfig+0x230>)
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d103      	bne.n	8008c10 <UART_SetConfig+0x178>
 8008c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c0e:	e00a      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <UART_SetConfig+0x1f8>)
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d103      	bne.n	8008c22 <UART_SetConfig+0x18a>
 8008c1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c20:	e001      	b.n	8008c26 <UART_SetConfig+0x18e>
 8008c22:	2300      	movs	r3, #0
 8008c24:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <UART_SetConfig+0x1f8>)
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d005      	beq.n	8008c3c <UART_SetConfig+0x1a4>
 8008c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <UART_SetConfig+0x200>)
 8008c36:	429a      	cmp	r2, r3
 8008c38:	f040 8094 	bne.w	8008d64 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c3e:	2200      	movs	r2, #0
 8008c40:	623b      	str	r3, [r7, #32]
 8008c42:	627a      	str	r2, [r7, #36]	; 0x24
 8008c44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008c48:	f7fc fe2a 	bl	80058a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c4c:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f000 80f7 	beq.w	8008e44 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5a:	4a1c      	ldr	r2, [pc, #112]	; (8008ccc <UART_SetConfig+0x234>)
 8008c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c60:	461a      	mov	r2, r3
 8008c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c68:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	4413      	add	r3, r2
 8008c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d305      	bcc.n	8008c86 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d924      	bls.n	8008cd0 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c8c:	e069      	b.n	8008d62 <UART_SetConfig+0x2ca>
 8008c8e:	bf00      	nop
 8008c90:	44002400 	.word	0x44002400
 8008c94:	cfff69f3 	.word	0xcfff69f3
 8008c98:	54002400 	.word	0x54002400
 8008c9c:	40013800 	.word	0x40013800
 8008ca0:	40004400 	.word	0x40004400
 8008ca4:	40004800 	.word	0x40004800
 8008ca8:	40004c00 	.word	0x40004c00
 8008cac:	40005000 	.word	0x40005000
 8008cb0:	40006400 	.word	0x40006400
 8008cb4:	40007800 	.word	0x40007800
 8008cb8:	40007c00 	.word	0x40007c00
 8008cbc:	40008000 	.word	0x40008000
 8008cc0:	40006800 	.word	0x40006800
 8008cc4:	40006c00 	.word	0x40006c00
 8008cc8:	40008400 	.word	0x40008400
 8008ccc:	08009a94 	.word	0x08009a94
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	61bb      	str	r3, [r7, #24]
 8008cd6:	61fa      	str	r2, [r7, #28]
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	4a64      	ldr	r2, [pc, #400]	; (8008e70 <UART_SetConfig+0x3d8>)
 8008cde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	617a      	str	r2, [r7, #20]
 8008cea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008cf2:	f7f7 facb 	bl	800028c <__aeabi_uldivmod>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	f04f 0200 	mov.w	r2, #0
 8008d02:	f04f 0300 	mov.w	r3, #0
 8008d06:	020b      	lsls	r3, r1, #8
 8008d08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d0c:	0202      	lsls	r2, r0, #8
 8008d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d10:	6849      	ldr	r1, [r1, #4]
 8008d12:	0849      	lsrs	r1, r1, #1
 8008d14:	2000      	movs	r0, #0
 8008d16:	460c      	mov	r4, r1
 8008d18:	4605      	mov	r5, r0
 8008d1a:	eb12 0804 	adds.w	r8, r2, r4
 8008d1e:	eb43 0905 	adc.w	r9, r3, r5
 8008d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	60bb      	str	r3, [r7, #8]
 8008d2a:	60fa      	str	r2, [r7, #12]
 8008d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d30:	4640      	mov	r0, r8
 8008d32:	4649      	mov	r1, r9
 8008d34:	f7f7 faaa 	bl	800028c <__aeabi_uldivmod>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d46:	d308      	bcc.n	8008d5a <UART_SetConfig+0x2c2>
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d4e:	d204      	bcs.n	8008d5a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d56:	60da      	str	r2, [r3, #12]
 8008d58:	e003      	b.n	8008d62 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008d60:	e070      	b.n	8008e44 <UART_SetConfig+0x3ac>
 8008d62:	e06f      	b.n	8008e44 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d6c:	d13c      	bne.n	8008de8 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d70:	2200      	movs	r2, #0
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	607a      	str	r2, [r7, #4]
 8008d76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d7a:	f7fc fd91 	bl	80058a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008d7e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d05e      	beq.n	8008e44 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8a:	4a39      	ldr	r2, [pc, #228]	; (8008e70 <UART_SetConfig+0x3d8>)
 8008d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d90:	461a      	mov	r2, r3
 8008d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d98:	005a      	lsls	r2, r3, #1
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	085b      	lsrs	r3, r3, #1
 8008da0:	441a      	add	r2, r3
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dae:	2b0f      	cmp	r3, #15
 8008db0:	d916      	bls.n	8008de0 <UART_SetConfig+0x348>
 8008db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db8:	d212      	bcs.n	8008de0 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	b29b      	uxth	r3, r3
 8008dbe:	f023 030f 	bic.w	r3, r3, #15
 8008dc2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc6:	085b      	lsrs	r3, r3, #1
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008ddc:	60da      	str	r2, [r3, #12]
 8008dde:	e031      	b.n	8008e44 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008de6:	e02d      	b.n	8008e44 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dea:	2200      	movs	r2, #0
 8008dec:	469a      	mov	sl, r3
 8008dee:	4693      	mov	fp, r2
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	f7fc fd54 	bl	80058a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8008df8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d021      	beq.n	8008e44 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	4a1a      	ldr	r2, [pc, #104]	; (8008e70 <UART_SetConfig+0x3d8>)
 8008e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	085b      	lsrs	r3, r3, #1
 8008e18:	441a      	add	r2, r3
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e26:	2b0f      	cmp	r3, #15
 8008e28:	d909      	bls.n	8008e3e <UART_SetConfig+0x3a6>
 8008e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e30:	d205      	bcs.n	8008e3e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60da      	str	r2, [r3, #12]
 8008e3c:	e002      	b.n	8008e44 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2201      	movs	r2, #1
 8008e48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e56:	2200      	movs	r2, #0
 8008e58:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3750      	adds	r7, #80	; 0x50
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e6e:	bf00      	nop
 8008e70:	08009a94 	.word	0x08009a94

08008e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	f003 0308 	and.w	r3, r3, #8
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	430a      	orrs	r2, r1
 8008ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	430a      	orrs	r2, r1
 8008ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee6:	f003 0304 	and.w	r3, r3, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	430a      	orrs	r2, r1
 8008f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f08:	f003 0310 	and.w	r3, r3, #16
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	f003 0320 	and.w	r3, r3, #32
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	430a      	orrs	r2, r1
 8008f46:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d01a      	beq.n	8008f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	430a      	orrs	r2, r1
 8008f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f72:	d10a      	bne.n	8008f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	430a      	orrs	r2, r1
 8008f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00a      	beq.n	8008fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	605a      	str	r2, [r3, #4]
  }
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b098      	sub	sp, #96	; 0x60
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008fc8:	f7f7 ff4a 	bl	8000e60 <HAL_GetTick>
 8008fcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d12f      	bne.n	800903c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008fe0:	9300      	str	r3, [sp, #0]
 8008fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f88e 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d022      	beq.n	800903c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800900a:	653b      	str	r3, [r7, #80]	; 0x50
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	461a      	mov	r2, r3
 8009012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009014:	647b      	str	r3, [r7, #68]	; 0x44
 8009016:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009018:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800901a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800901c:	e841 2300 	strex	r3, r2, [r1]
 8009020:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e6      	bne.n	8008ff6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e063      	b.n	8009104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b04      	cmp	r3, #4
 8009048:	d149      	bne.n	80090de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800904a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009052:	2200      	movs	r2, #0
 8009054:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f857 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d03c      	beq.n	80090de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	623b      	str	r3, [r7, #32]
   return(result);
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009082:	633b      	str	r3, [r7, #48]	; 0x30
 8009084:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e6      	bne.n	8009064 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b6:	61fa      	str	r2, [r7, #28]
 80090b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	69b9      	ldr	r1, [r7, #24]
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	617b      	str	r3, [r7, #20]
   return(result);
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e012      	b.n	8009104 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2220      	movs	r2, #32
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3758      	adds	r7, #88	; 0x58
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	e049      	b.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009124:	d045      	beq.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009126:	f7f7 fe9b 	bl	8000e60 <HAL_GetTick>
 800912a:	4602      	mov	r2, r0
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	1ad3      	subs	r3, r2, r3
 8009130:	69ba      	ldr	r2, [r7, #24]
 8009132:	429a      	cmp	r2, r3
 8009134:	d302      	bcc.n	800913c <UART_WaitOnFlagUntilTimeout+0x30>
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e048      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d031      	beq.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69db      	ldr	r3, [r3, #28]
 8009154:	f003 0308 	and.w	r3, r3, #8
 8009158:	2b08      	cmp	r3, #8
 800915a:	d110      	bne.n	800917e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2208      	movs	r2, #8
 8009162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f972 	bl	800944e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2208      	movs	r2, #8
 800916e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e029      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800918c:	d111      	bne.n	80091b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 f958 	bl	800944e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e00f      	b.n	80091d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	69da      	ldr	r2, [r3, #28]
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	4013      	ands	r3, r2
 80091bc:	68ba      	ldr	r2, [r7, #8]
 80091be:	429a      	cmp	r2, r3
 80091c0:	bf0c      	ite	eq
 80091c2:	2301      	moveq	r3, #1
 80091c4:	2300      	movne	r3, #0
 80091c6:	b2db      	uxtb	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	79fb      	ldrb	r3, [r7, #7]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d0a6      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b098      	sub	sp, #96	; 0x60
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 80091ea:	88fb      	ldrh	r3, [r7, #6]
 80091ec:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	88fa      	ldrh	r2, [r7, #6]
 80091fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2222      	movs	r2, #34	; 0x22
 800920a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009214:	2b00      	cmp	r3, #0
 8009216:	d07c      	beq.n	8009312 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800921e:	4a68      	ldr	r2, [pc, #416]	; (80093c0 <UART_Start_Receive_DMA+0x1e4>)
 8009220:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009228:	4a66      	ldr	r2, [pc, #408]	; (80093c4 <UART_Start_Receive_DMA+0x1e8>)
 800922a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009232:	4a65      	ldr	r2, [pc, #404]	; (80093c8 <UART_Start_Receive_DMA+0x1ec>)
 8009234:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923c:	2200      	movs	r2, #0
 800923e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009248:	d107      	bne.n	800925a <UART_Start_Receive_DMA+0x7e>
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d103      	bne.n	800925a <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8009252:	88fb      	ldrh	r3, [r7, #6]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009266:	2b00      	cmp	r3, #0
 8009268:	d034      	beq.n	80092d4 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009272:	2b00      	cmp	r3, #0
 8009274:	d02a      	beq.n	80092cc <UART_Start_Receive_DMA+0xf0>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d023      	beq.n	80092cc <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800928a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009292:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092be:	4618      	mov	r0, r3
 80092c0:	f7f8 fd7e 	bl	8001dc0 <HAL_DMAEx_List_Start_IT>
 80092c4:	4603      	mov	r3, r0
 80092c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092ca:	e014      	b.n	80092f6 <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80092d2:	e010      	b.n	80092f6 <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3324      	adds	r3, #36	; 0x24
 80092e0:	4619      	mov	r1, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e6:	461a      	mov	r2, r3
 80092e8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80092ec:	f7f8 f804 	bl	80012f8 <HAL_DMA_Start_IT>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 80092f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2210      	movs	r2, #16
 8009302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e051      	b.n	80093b6 <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d018      	beq.n	800934c <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800932e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800933a:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800933e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e6      	bne.n	800931a <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800935c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935e:	f043 0301 	orr.w	r3, r3, #1
 8009362:	657b      	str	r3, [r7, #84]	; 0x54
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800936c:	63ba      	str	r2, [r7, #56]	; 0x38
 800936e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e5      	bne.n	800934c <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	3308      	adds	r3, #8
 8009386:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	e853 3f00 	ldrex	r3, [r3]
 800938e:	617b      	str	r3, [r7, #20]
   return(result);
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009396:	653b      	str	r3, [r7, #80]	; 0x50
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	3308      	adds	r3, #8
 800939e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093a0:	627a      	str	r2, [r7, #36]	; 0x24
 80093a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a4:	6a39      	ldr	r1, [r7, #32]
 80093a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093a8:	e841 2300 	strex	r3, r2, [r1]
 80093ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1e5      	bne.n	8009380 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3760      	adds	r7, #96	; 0x60
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	08009597 	.word	0x08009597
 80093c4:	08009689 	.word	0x08009689
 80093c8:	080096c7 	.word	0x080096c7

080093cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b08f      	sub	sp, #60	; 0x3c
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80093e8:	637b      	str	r3, [r7, #52]	; 0x34
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	461a      	mov	r2, r3
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093f4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e6      	bne.n	80093d4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	60bb      	str	r3, [r7, #8]
   return(result);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800941c:	633b      	str	r3, [r7, #48]	; 0x30
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009426:	61ba      	str	r2, [r7, #24]
 8009428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6979      	ldr	r1, [r7, #20]
 800942c:	69ba      	ldr	r2, [r7, #24]
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	613b      	str	r3, [r7, #16]
   return(result);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2220      	movs	r2, #32
 800943e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009442:	bf00      	nop
 8009444:	373c      	adds	r7, #60	; 0x3c
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800944e:	b480      	push	{r7}
 8009450:	b095      	sub	sp, #84	; 0x54
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800945e:	e853 3f00 	ldrex	r3, [r3]
 8009462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800946a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009474:	643b      	str	r3, [r7, #64]	; 0x40
 8009476:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800947a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800947c:	e841 2300 	strex	r3, r2, [r1]
 8009480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1e6      	bne.n	8009456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	e853 3f00 	ldrex	r3, [r3]
 8009496:	61fb      	str	r3, [r7, #28]
   return(result);
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800949e:	f023 0301 	bic.w	r3, r3, #1
 80094a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094b4:	e841 2300 	strex	r3, r2, [r1]
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1e3      	bne.n	8009488 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d118      	bne.n	80094fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	f023 0310 	bic.w	r3, r3, #16
 80094dc:	647b      	str	r3, [r7, #68]	; 0x44
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e6:	61bb      	str	r3, [r7, #24]
 80094e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6979      	ldr	r1, [r7, #20]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	613b      	str	r3, [r7, #16]
   return(result);
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e6      	bne.n	80094c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800950e:	bf00      	nop
 8009510:	3754      	adds	r7, #84	; 0x54
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr

0800951a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b08a      	sub	sp, #40	; 0x28
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009526:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800952c:	2b81      	cmp	r3, #129	; 0x81
 800952e:	d01d      	beq.n	800956c <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 8009530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009532:	2200      	movs	r2, #0
 8009534:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	e853 3f00 	ldrex	r3, [r3]
 8009544:	60fb      	str	r3, [r7, #12]
   return(result);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954c:	623b      	str	r3, [r7, #32]
 800954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	6a3b      	ldr	r3, [r7, #32]
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955a:	69b9      	ldr	r1, [r7, #24]
 800955c:	69fa      	ldr	r2, [r7, #28]
 800955e:	e841 2300 	strex	r3, r2, [r1]
 8009562:	617b      	str	r3, [r7, #20]
   return(result);
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1e6      	bne.n	8009538 <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800956a:	e002      	b.n	8009572 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 800956c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800956e:	f7ff fa5f 	bl	8008a30 <HAL_UART_TxCpltCallback>
}
 8009572:	bf00      	nop
 8009574:	3728      	adds	r7, #40	; 0x28
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009586:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff fa5b 	bl	8008a44 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800958e:	bf00      	nop
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b096      	sub	sp, #88	; 0x58
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a2:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	2b81      	cmp	r3, #129	; 0x81
 80095aa:	d057      	beq.n	800965c <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 80095ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	e853 3f00 	ldrex	r3, [r3]
 80095c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c8:	653b      	str	r3, [r7, #80]	; 0x50
 80095ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d2:	647b      	str	r3, [r7, #68]	; 0x44
 80095d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095da:	e841 2300 	strex	r3, r2, [r1]
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e6      	bne.n	80095b4 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	3308      	adds	r3, #8
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f0:	e853 3f00 	ldrex	r3, [r3]
 80095f4:	623b      	str	r3, [r7, #32]
   return(result);
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	f023 0301 	bic.w	r3, r3, #1
 80095fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	3308      	adds	r3, #8
 8009604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009606:	633a      	str	r2, [r7, #48]	; 0x30
 8009608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800960c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800960e:	e841 2300 	strex	r3, r2, [r1]
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1e5      	bne.n	80095e6 <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800961a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800961c:	2220      	movs	r2, #32
 800961e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009626:	2b01      	cmp	r3, #1
 8009628:	d118      	bne.n	800965c <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800962a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	e853 3f00 	ldrex	r3, [r3]
 8009636:	60fb      	str	r3, [r7, #12]
   return(result);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f023 0310 	bic.w	r3, r3, #16
 800963e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	461a      	mov	r2, r3
 8009646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964c:	69b9      	ldr	r1, [r7, #24]
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	e841 2300 	strex	r3, r2, [r1]
 8009654:	617b      	str	r3, [r7, #20]
   return(result);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1e6      	bne.n	800962a <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800965c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800965e:	2200      	movs	r2, #0
 8009660:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009666:	2b01      	cmp	r3, #1
 8009668:	d107      	bne.n	800967a <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800966a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800966c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009670:	4619      	mov	r1, r3
 8009672:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009674:	f7ff fa04 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009678:	e002      	b.n	8009680 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800967a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800967c:	f7f6 ff96 	bl	80005ac <HAL_UART_RxCpltCallback>
}
 8009680:	bf00      	nop
 8009682:	3758      	adds	r7, #88	; 0x58
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b084      	sub	sp, #16
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009694:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2201      	movs	r2, #1
 800969a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d109      	bne.n	80096b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096aa:	085b      	lsrs	r3, r3, #1
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff f9e5 	bl	8008a80 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80096b6:	e002      	b.n	80096be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f7ff f9cd 	bl	8008a58 <HAL_UART_RxHalfCpltCallback>
}
 80096be:	bf00      	nop
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b086      	sub	sp, #24
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ee:	2b80      	cmp	r3, #128	; 0x80
 80096f0:	d109      	bne.n	8009706 <UART_DMAError+0x40>
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b21      	cmp	r3, #33	; 0x21
 80096f6:	d106      	bne.n	8009706 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009700:	6978      	ldr	r0, [r7, #20]
 8009702:	f7ff fe63 	bl	80093cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009710:	2b40      	cmp	r3, #64	; 0x40
 8009712:	d109      	bne.n	8009728 <UART_DMAError+0x62>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b22      	cmp	r3, #34	; 0x22
 8009718:	d106      	bne.n	8009728 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2200      	movs	r2, #0
 800971e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009722:	6978      	ldr	r0, [r7, #20]
 8009724:	f7ff fe93 	bl	800944e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800972e:	f043 0210 	orr.w	r2, r3, #16
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	f7ff f997 	bl	8008a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800973e:	bf00      	nop
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009752:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f7ff f981 	bl	8008a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}

08009772 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b088      	sub	sp, #32
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e853 3f00 	ldrex	r3, [r3]
 8009786:	60bb      	str	r3, [r7, #8]
   return(result);
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	461a      	mov	r2, r3
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	61bb      	str	r3, [r7, #24]
 800979a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	69ba      	ldr	r2, [r7, #24]
 80097a0:	e841 2300 	strex	r3, r2, [r1]
 80097a4:	613b      	str	r3, [r7, #16]
   return(result);
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1e6      	bne.n	800977a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff f938 	bl	8008a30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097c0:	bf00      	nop
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009804:	b480      	push	{r7}
 8009806:	b085      	sub	sp, #20
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009812:	2b01      	cmp	r3, #1
 8009814:	d101      	bne.n	800981a <HAL_UARTEx_DisableFifoMode+0x16>
 8009816:	2302      	movs	r3, #2
 8009818:	e027      	b.n	800986a <HAL_UARTEx_DisableFifoMode+0x66>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2224      	movs	r2, #36	; 0x24
 8009826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f022 0201 	bic.w	r2, r2, #1
 8009840:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009848:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b084      	sub	sp, #16
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009886:	2b01      	cmp	r3, #1
 8009888:	d101      	bne.n	800988e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800988a:	2302      	movs	r3, #2
 800988c:	e02d      	b.n	80098ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2224      	movs	r2, #36	; 0x24
 800989a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0201 	bic.w	r2, r2, #1
 80098b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f850 	bl	8009970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	68fa      	ldr	r2, [r7, #12]
 80098d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2220      	movs	r2, #32
 80098dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3710      	adds	r7, #16
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b084      	sub	sp, #16
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009902:	2b01      	cmp	r3, #1
 8009904:	d101      	bne.n	800990a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009906:	2302      	movs	r3, #2
 8009908:	e02d      	b.n	8009966 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2224      	movs	r2, #36	; 0x24
 8009916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0201 	bic.w	r2, r2, #1
 8009930:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	430a      	orrs	r2, r1
 8009944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f812 	bl	8009970 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
	...

08009970 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009970:	b480      	push	{r7}
 8009972:	b085      	sub	sp, #20
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800997c:	2b00      	cmp	r3, #0
 800997e:	d108      	bne.n	8009992 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009990:	e031      	b.n	80099f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009992:	2308      	movs	r3, #8
 8009994:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009996:	2308      	movs	r3, #8
 8009998:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	689b      	ldr	r3, [r3, #8]
 80099a0:	0e5b      	lsrs	r3, r3, #25
 80099a2:	b2db      	uxtb	r3, r3
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	0f5b      	lsrs	r3, r3, #29
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0307 	and.w	r3, r3, #7
 80099b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	7b3a      	ldrb	r2, [r7, #12]
 80099be:	4911      	ldr	r1, [pc, #68]	; (8009a04 <UARTEx_SetNbDataToProcess+0x94>)
 80099c0:	5c8a      	ldrb	r2, [r1, r2]
 80099c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80099c6:	7b3a      	ldrb	r2, [r7, #12]
 80099c8:	490f      	ldr	r1, [pc, #60]	; (8009a08 <UARTEx_SetNbDataToProcess+0x98>)
 80099ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80099cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	7b7a      	ldrb	r2, [r7, #13]
 80099dc:	4909      	ldr	r1, [pc, #36]	; (8009a04 <UARTEx_SetNbDataToProcess+0x94>)
 80099de:	5c8a      	ldrb	r2, [r1, r2]
 80099e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80099e4:	7b7a      	ldrb	r2, [r7, #13]
 80099e6:	4908      	ldr	r1, [pc, #32]	; (8009a08 <UARTEx_SetNbDataToProcess+0x98>)
 80099e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ee:	b29a      	uxth	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	08009aac 	.word	0x08009aac
 8009a08:	08009ab4 	.word	0x08009ab4

08009a0c <memset>:
 8009a0c:	4402      	add	r2, r0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d100      	bne.n	8009a16 <memset+0xa>
 8009a14:	4770      	bx	lr
 8009a16:	f803 1b01 	strb.w	r1, [r3], #1
 8009a1a:	e7f9      	b.n	8009a10 <memset+0x4>

08009a1c <__libc_init_array>:
 8009a1c:	b570      	push	{r4, r5, r6, lr}
 8009a1e:	4d0d      	ldr	r5, [pc, #52]	; (8009a54 <__libc_init_array+0x38>)
 8009a20:	2600      	movs	r6, #0
 8009a22:	4c0d      	ldr	r4, [pc, #52]	; (8009a58 <__libc_init_array+0x3c>)
 8009a24:	1b64      	subs	r4, r4, r5
 8009a26:	10a4      	asrs	r4, r4, #2
 8009a28:	42a6      	cmp	r6, r4
 8009a2a:	d109      	bne.n	8009a40 <__libc_init_array+0x24>
 8009a2c:	4d0b      	ldr	r5, [pc, #44]	; (8009a5c <__libc_init_array+0x40>)
 8009a2e:	2600      	movs	r6, #0
 8009a30:	4c0b      	ldr	r4, [pc, #44]	; (8009a60 <__libc_init_array+0x44>)
 8009a32:	f000 f817 	bl	8009a64 <_init>
 8009a36:	1b64      	subs	r4, r4, r5
 8009a38:	10a4      	asrs	r4, r4, #2
 8009a3a:	42a6      	cmp	r6, r4
 8009a3c:	d105      	bne.n	8009a4a <__libc_init_array+0x2e>
 8009a3e:	bd70      	pop	{r4, r5, r6, pc}
 8009a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a44:	3601      	adds	r6, #1
 8009a46:	4798      	blx	r3
 8009a48:	e7ee      	b.n	8009a28 <__libc_init_array+0xc>
 8009a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a4e:	3601      	adds	r6, #1
 8009a50:	4798      	blx	r3
 8009a52:	e7f2      	b.n	8009a3a <__libc_init_array+0x1e>
 8009a54:	08009ac4 	.word	0x08009ac4
 8009a58:	08009ac4 	.word	0x08009ac4
 8009a5c:	08009ac4 	.word	0x08009ac4
 8009a60:	08009ac8 	.word	0x08009ac8

08009a64 <_init>:
 8009a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a66:	bf00      	nop
 8009a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6a:	bc08      	pop	{r3}
 8009a6c:	469e      	mov	lr, r3
 8009a6e:	4770      	bx	lr

08009a70 <_fini>:
 8009a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a72:	bf00      	nop
 8009a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a76:	bc08      	pop	{r3}
 8009a78:	469e      	mov	lr, r3
 8009a7a:	4770      	bx	lr
