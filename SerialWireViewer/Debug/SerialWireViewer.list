
SerialWireViewer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002168  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002350  08002350  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08002350  08002350  00012350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002358  08002358  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002358  08002358  00012358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800235c  0800235c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000174  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003c17  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000f59  00000000  00000000  00023cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000460  00000000  00000000  00024c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000031e  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000205f6  00000000  00000000  000253ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005c31  00000000  00000000  000459c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c18c7  00000000  00000000  0004b5f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001730  00000000  00000000  0010cebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  0010e5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080022e0 	.word	0x080022e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080022e0 	.word	0x080022e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000570:	f000 f9de 	bl	8000930 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000574:	f000 f81e 	bl	80005b4 <SystemClock_Config>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		printf("Counter now is %d\n", count);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x3c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4619      	mov	r1, r3
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <main+0x40>)
 8000580:	f001 f8e8 	bl	8001754 <iprintf>

		count ++;
 8000584:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <main+0x3c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <main+0x3c>)
 800058e:	701a      	strb	r2, [r3, #0]

		if (count > 255)
			count = 0;

		fflush(stdout);
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <main+0x44>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	689b      	ldr	r3, [r3, #8]
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f818 	bl	80015cc <fflush>

		HAL_Delay(1000);
 800059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a0:	f000 fa38 	bl	8000a14 <HAL_Delay>
		printf("Counter now is %d\n", count);
 80005a4:	e7e8      	b.n	8000578 <main+0xc>
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084
 80005ac:	080022f8 	.word	0x080022f8
 80005b0:	20000064 	.word	0x20000064

080005b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b094      	sub	sp, #80	; 0x50
 80005b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2230      	movs	r2, #48	; 0x30
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f91b 	bl	80017fe <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xb4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xb4>)
 80005e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6413      	str	r3, [r2, #64]	; 0x40
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SystemClock_Config+0xb4>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b1c      	ldr	r3, [pc, #112]	; (800066c <SystemClock_Config+0xb8>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a1b      	ldr	r2, [pc, #108]	; (800066c <SystemClock_Config+0xb8>)
 80005fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	4b19      	ldr	r3, [pc, #100]	; (800066c <SystemClock_Config+0xb8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2310      	movs	r3, #16
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	4618      	mov	r0, r3
 8000626:	f000 faff 	bl	8000c28 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x80>
		Error_Handler();
 8000630:	f000 f81e 	bl	8000670 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fd62 	bl	8001118 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0xaa>
		Error_Handler();
 800065a:	f000 f809 	bl	8000670 <Error_Handler>
	}
}
 800065e:	bf00      	nop
 8000660:	3750      	adds	r7, #80	; 0x50
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000678:	e7fe      	b.n	8000678 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <HAL_MspInit+0x4c>)
 8000688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <HAL_MspInit+0x4c>)
 800068c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000690:	6453      	str	r3, [r2, #68]	; 0x44
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <HAL_MspInit+0x4c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	4a08      	ldr	r2, [pc, #32]	; (80006c8 <HAL_MspInit+0x4c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ac:	6413      	str	r3, [r2, #64]	; 0x40
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MspInit+0x4c>)
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f95c 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}

08000720 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <ITM_SendChar+0x48>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <ITM_SendChar+0x48>)
 8000730:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000734:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <ITM_SendChar+0x4c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a0c      	ldr	r2, [pc, #48]	; (800076c <ITM_SendChar+0x4c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8000742:	bf00      	nop
 8000744:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0f8      	beq.n	8000744 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000752:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	6013      	str	r3, [r2, #0]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000edfc 	.word	0xe000edfc
 800076c:	e0000e00 	.word	0xe0000e00

08000770 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00a      	b.n	8000798 <_read+0x28>
		*ptr++ = __io_getchar();
 8000782:	f3af 8000 	nop.w
 8000786:	4601      	mov	r1, r0
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	60ba      	str	r2, [r7, #8]
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	3301      	adds	r3, #1
 8000796:	617b      	str	r3, [r7, #20]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	429a      	cmp	r2, r3
 800079e:	dbf0      	blt.n	8000782 <_read+0x12>
	}

	return len;
 80007a0:	687b      	ldr	r3, [r7, #4]
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	60f8      	str	r0, [r7, #12]
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	e009      	b.n	80007d0 <_write+0x26>
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	1c5a      	adds	r2, r3, #1
 80007c0:	60ba      	str	r2, [r7, #8]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ffab 	bl	8000720 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	3301      	adds	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	dbf1      	blt.n	80007bc <_write+0x12>
	}
	return len;
 80007d8:	687b      	ldr	r3, [r7, #4]
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <_close>:

int _close(int file) {
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <_fstat>:

int _fstat(int file, struct stat *st) {
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
 8000802:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800080a:	605a      	str	r2, [r3, #4]
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_isatty>:

int _isatty(int file) {
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000822:	2301      	movs	r3, #1
}
 8000824:	4618      	mov	r0, r3
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f001 f80e 	bl	800189c <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20020000 	.word	0x20020000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	20000088 	.word	0x20000088
 80008b4:	200001e0 	.word	0x200001e0

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008e2:	490e      	ldr	r1, [pc, #56]	; (800091c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e4:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e8:	e002      	b.n	80008f0 <LoopCopyDataInit>

080008ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ee:	3304      	adds	r3, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f4:	d3f9      	bcc.n	80008ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f8:	4c0b      	ldr	r4, [pc, #44]	; (8000928 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008fc:	e001      	b.n	8000902 <LoopFillZerobss>

080008fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000900:	3204      	adds	r2, #4

08000902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000904:	d3fb      	bcc.n	80008fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000906:	f7ff ffd7 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800090a:	f000 ffcd 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fe2d 	bl	800056c <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000920:	08002360 	.word	0x08002360
  ldr r2, =_sbss
 8000924:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000928:	200001dc 	.word	0x200001dc

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f931 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe8a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f93b 	bl	8000c0e <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f911 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	2000008c 	.word	0x2000008c

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	2000008c 	.word	0x2000008c

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff5c 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffb0 	bl	8000b7c <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d101      	bne.n	8000c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e267      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d075      	beq.n	8000d32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c46:	4b88      	ldr	r3, [pc, #544]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d00c      	beq.n	8000c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c52:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	d112      	bne.n	8000c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c5e:	4b82      	ldr	r3, [pc, #520]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c6a:	d10b      	bne.n	8000c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	4b7e      	ldr	r3, [pc, #504]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d05b      	beq.n	8000d30 <HAL_RCC_OscConfig+0x108>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d157      	bne.n	8000d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e242      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c8c:	d106      	bne.n	8000c9c <HAL_RCC_OscConfig+0x74>
 8000c8e:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a75      	ldr	r2, [pc, #468]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e01d      	b.n	8000cd8 <HAL_RCC_OscConfig+0xb0>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ca4:	d10c      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x98>
 8000ca6:	4b70      	ldr	r3, [pc, #448]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a6f      	ldr	r2, [pc, #444]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cb0:	6013      	str	r3, [r2, #0]
 8000cb2:	4b6d      	ldr	r3, [pc, #436]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a6c      	ldr	r2, [pc, #432]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	e00b      	b.n	8000cd8 <HAL_RCC_OscConfig+0xb0>
 8000cc0:	4b69      	ldr	r3, [pc, #420]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a68      	ldr	r2, [pc, #416]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	4b66      	ldr	r3, [pc, #408]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a65      	ldr	r2, [pc, #404]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d013      	beq.n	8000d08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fe8c 	bl	80009fc <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fe88 	bl	80009fc <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	; 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e207      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	4b5b      	ldr	r3, [pc, #364]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f0      	beq.n	8000ce8 <HAL_RCC_OscConfig+0xc0>
 8000d06:	e014      	b.n	8000d32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fe78 	bl	80009fc <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fe74 	bl	80009fc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	; 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e1f3      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	4b51      	ldr	r3, [pc, #324]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0xe8>
 8000d2e:	e000      	b.n	8000d32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d063      	beq.n	8000e06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3e:	4b4a      	ldr	r3, [pc, #296]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 030c 	and.w	r3, r3, #12
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d00b      	beq.n	8000d62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d11c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d56:	4b44      	ldr	r3, [pc, #272]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d116      	bne.n	8000d90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d005      	beq.n	8000d7a <HAL_RCC_OscConfig+0x152>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d001      	beq.n	8000d7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e1c7      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	4b3b      	ldr	r3, [pc, #236]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4937      	ldr	r1, [pc, #220]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8e:	e03a      	b.n	8000e06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d020      	beq.n	8000dda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d98:	4b34      	ldr	r3, [pc, #208]	; (8000e6c <HAL_RCC_OscConfig+0x244>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d9e:	f7ff fe2d 	bl	80009fc <HAL_GetTick>
 8000da2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	e008      	b.n	8000db8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da6:	f7ff fe29 	bl	80009fc <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d901      	bls.n	8000db8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000db4:	2303      	movs	r3, #3
 8000db6:	e1a8      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0302 	and.w	r3, r3, #2
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d0f0      	beq.n	8000da6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	691b      	ldr	r3, [r3, #16]
 8000dd0:	00db      	lsls	r3, r3, #3
 8000dd2:	4925      	ldr	r1, [pc, #148]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	600b      	str	r3, [r1, #0]
 8000dd8:	e015      	b.n	8000e06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_RCC_OscConfig+0x244>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000de0:	f7ff fe0c 	bl	80009fc <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f7ff fe08 	bl	80009fc <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e187      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f0      	bne.n	8000de8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d036      	beq.n	8000e80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d016      	beq.n	8000e48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_RCC_OscConfig+0x248>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e20:	f7ff fdec 	bl	80009fc <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fde8 	bl	80009fc <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e167      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <HAL_RCC_OscConfig+0x240>)
 8000e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0x200>
 8000e46:	e01b      	b.n	8000e80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_RCC_OscConfig+0x248>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fdd5 	bl	80009fc <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	e00e      	b.n	8000e74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e56:	f7ff fdd1 	bl	80009fc <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d907      	bls.n	8000e74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e150      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	42470000 	.word	0x42470000
 8000e70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	4b88      	ldr	r3, [pc, #544]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1ea      	bne.n	8000e56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f000 8097 	beq.w	8000fbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e92:	4b81      	ldr	r3, [pc, #516]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d10f      	bne.n	8000ebe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b7d      	ldr	r3, [pc, #500]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	4a7c      	ldr	r2, [pc, #496]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	6413      	str	r3, [r2, #64]	; 0x40
 8000eae:	4b7a      	ldr	r3, [pc, #488]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ebe:	4b77      	ldr	r3, [pc, #476]	; (800109c <HAL_RCC_OscConfig+0x474>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d118      	bne.n	8000efc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eca:	4b74      	ldr	r3, [pc, #464]	; (800109c <HAL_RCC_OscConfig+0x474>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a73      	ldr	r2, [pc, #460]	; (800109c <HAL_RCC_OscConfig+0x474>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fd91 	bl	80009fc <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ede:	f7ff fd8d 	bl	80009fc <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e10c      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef0:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x474>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0f0      	beq.n	8000ede <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d106      	bne.n	8000f12 <HAL_RCC_OscConfig+0x2ea>
 8000f04:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f08:	4a63      	ldr	r2, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f10:	e01c      	b.n	8000f4c <HAL_RCC_OscConfig+0x324>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10c      	bne.n	8000f34 <HAL_RCC_OscConfig+0x30c>
 8000f1a:	4b5f      	ldr	r3, [pc, #380]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1e:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6713      	str	r3, [r2, #112]	; 0x70
 8000f26:	4b5c      	ldr	r3, [pc, #368]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f2a:	4a5b      	ldr	r2, [pc, #364]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6713      	str	r3, [r2, #112]	; 0x70
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0x324>
 8000f34:	4b58      	ldr	r3, [pc, #352]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	4a57      	ldr	r2, [pc, #348]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f3a:	f023 0301 	bic.w	r3, r3, #1
 8000f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f40:	4b55      	ldr	r3, [pc, #340]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	4a54      	ldr	r2, [pc, #336]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f46:	f023 0304 	bic.w	r3, r3, #4
 8000f4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d015      	beq.n	8000f80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f54:	f7ff fd52 	bl	80009fc <HAL_GetTick>
 8000f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5a:	e00a      	b.n	8000f72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f5c:	f7ff fd4e 	bl	80009fc <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e0cb      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f72:	4b49      	ldr	r3, [pc, #292]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d0ee      	beq.n	8000f5c <HAL_RCC_OscConfig+0x334>
 8000f7e:	e014      	b.n	8000faa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f80:	f7ff fd3c 	bl	80009fc <HAL_GetTick>
 8000f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f86:	e00a      	b.n	8000f9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f88:	f7ff fd38 	bl	80009fc <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e0b5      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1ee      	bne.n	8000f88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb0:	4b39      	ldr	r3, [pc, #228]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	4a38      	ldr	r2, [pc, #224]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 80a1 	beq.w	8001108 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fc6:	4b34      	ldr	r3, [pc, #208]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d05c      	beq.n	800108c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d141      	bne.n	800105e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <HAL_RCC_OscConfig+0x478>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fd0c 	bl	80009fc <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fd08 	bl	80009fc <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e087      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffa:	4b27      	ldr	r3, [pc, #156]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69da      	ldr	r2, [r3, #28]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	019b      	lsls	r3, r3, #6
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	3b01      	subs	r3, #1
 8001020:	041b      	lsls	r3, r3, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	061b      	lsls	r3, r3, #24
 800102a:	491b      	ldr	r1, [pc, #108]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x478>)
 8001032:	2201      	movs	r2, #1
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fce1 	bl	80009fc <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fcdd 	bl	80009fc <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e05c      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f0      	beq.n	800103e <HAL_RCC_OscConfig+0x416>
 800105c:	e054      	b.n	8001108 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <HAL_RCC_OscConfig+0x478>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fcca 	bl	80009fc <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fcc6 	bl	80009fc <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e045      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_RCC_OscConfig+0x470>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x444>
 800108a:	e03d      	b.n	8001108 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e038      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000
 80010a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_RCC_OscConfig+0x4ec>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d028      	beq.n	8001104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010bc:	429a      	cmp	r2, r3
 80010be:	d121      	bne.n	8001104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d11a      	bne.n	8001104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010d4:	4013      	ands	r3, r2
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010dc:	4293      	cmp	r3, r2
 80010de:	d111      	bne.n	8001104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	085b      	lsrs	r3, r3, #1
 80010ec:	3b01      	subs	r3, #1
 80010ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001100:	429a      	cmp	r2, r3
 8001102:	d001      	beq.n	8001108 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0cc      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0307 	and.w	r3, r3, #7
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d90c      	bls.n	8001154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b65      	ldr	r3, [pc, #404]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	b2d2      	uxtb	r2, r2
 8001140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	429a      	cmp	r2, r3
 800114e:	d001      	beq.n	8001154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e0b8      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f003 0302 	and.w	r3, r3, #2
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0304 	and.w	r3, r3, #4
 8001168:	2b00      	cmp	r3, #0
 800116a:	d005      	beq.n	8001178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800116c:	4b59      	ldr	r3, [pc, #356]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	4a58      	ldr	r2, [pc, #352]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001184:	4b53      	ldr	r3, [pc, #332]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a52      	ldr	r2, [pc, #328]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800118e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001190:	4b50      	ldr	r3, [pc, #320]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	494d      	ldr	r1, [pc, #308]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	4313      	orrs	r3, r2
 80011a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d044      	beq.n	8001238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b6:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d119      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e07f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d003      	beq.n	80011d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011d6:	4b3f      	ldr	r3, [pc, #252]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e06f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e6:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e067      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f023 0203 	bic.w	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4934      	ldr	r1, [pc, #208]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001208:	f7ff fbf8 	bl	80009fc <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	e00a      	b.n	8001226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001210:	f7ff fbf4 	bl	80009fc <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	f241 3288 	movw	r2, #5000	; 0x1388
 800121e:	4293      	cmp	r3, r2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e04f      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 020c 	and.w	r2, r3, #12
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	429a      	cmp	r2, r3
 8001236:	d1eb      	bne.n	8001210 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001238:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d20c      	bcs.n	8001260 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d001      	beq.n	8001260 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e032      	b.n	80012c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	4916      	ldr	r1, [pc, #88]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	4313      	orrs	r3, r2
 800127c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	2b00      	cmp	r3, #0
 8001288:	d009      	beq.n	800129e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	490e      	ldr	r1, [pc, #56]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800129e:	f000 f821 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 80012a2:	4602      	mov	r2, r0
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	490a      	ldr	r1, [pc, #40]	; (80012d8 <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	5ccb      	ldrb	r3, [r1, r3]
 80012b2:	fa22 f303 	lsr.w	r3, r2, r3
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <HAL_RCC_ClockConfig+0x1c8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fb58 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00
 80012d4:	40023800 	.word	0x40023800
 80012d8:	0800230c 	.word	0x0800230c
 80012dc:	20000000 	.word	0x20000000
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e8:	b090      	sub	sp, #64	; 0x40
 80012ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012fc:	4b59      	ldr	r3, [pc, #356]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d00d      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x40>
 8001308:	2b08      	cmp	r3, #8
 800130a:	f200 80a1 	bhi.w	8001450 <HAL_RCC_GetSysClockFreq+0x16c>
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0x34>
 8001312:	2b04      	cmp	r3, #4
 8001314:	d003      	beq.n	800131e <HAL_RCC_GetSysClockFreq+0x3a>
 8001316:	e09b      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001318:	4b53      	ldr	r3, [pc, #332]	; (8001468 <HAL_RCC_GetSysClockFreq+0x184>)
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800131c:	e09b      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131e:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_RCC_GetSysClockFreq+0x188>)
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001322:	e098      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001324:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800132e:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d028      	beq.n	800138c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	2200      	movs	r2, #0
 8001342:	623b      	str	r3, [r7, #32]
 8001344:	627a      	str	r2, [r7, #36]	; 0x24
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800134c:	2100      	movs	r1, #0
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_GetSysClockFreq+0x188>)
 8001350:	fb03 f201 	mul.w	r2, r3, r1
 8001354:	2300      	movs	r3, #0
 8001356:	fb00 f303 	mul.w	r3, r0, r3
 800135a:	4413      	add	r3, r2
 800135c:	4a43      	ldr	r2, [pc, #268]	; (800146c <HAL_RCC_GetSysClockFreq+0x188>)
 800135e:	fba0 1202 	umull	r1, r2, r0, r2
 8001362:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001364:	460a      	mov	r2, r1
 8001366:	62ba      	str	r2, [r7, #40]	; 0x28
 8001368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800136a:	4413      	add	r3, r2
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800136e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001370:	2200      	movs	r2, #0
 8001372:	61bb      	str	r3, [r7, #24]
 8001374:	61fa      	str	r2, [r7, #28]
 8001376:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800137a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800137e:	f7fe ff77 	bl	8000270 <__aeabi_uldivmod>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4613      	mov	r3, r2
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800138a:	e053      	b.n	8001434 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138c:	4b35      	ldr	r3, [pc, #212]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	2200      	movs	r2, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	617a      	str	r2, [r7, #20]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800139e:	f04f 0b00 	mov.w	fp, #0
 80013a2:	4652      	mov	r2, sl
 80013a4:	465b      	mov	r3, fp
 80013a6:	f04f 0000 	mov.w	r0, #0
 80013aa:	f04f 0100 	mov.w	r1, #0
 80013ae:	0159      	lsls	r1, r3, #5
 80013b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013b4:	0150      	lsls	r0, r2, #5
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	ebb2 080a 	subs.w	r8, r2, sl
 80013be:	eb63 090b 	sbc.w	r9, r3, fp
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013d6:	ebb2 0408 	subs.w	r4, r2, r8
 80013da:	eb63 0509 	sbc.w	r5, r3, r9
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	00eb      	lsls	r3, r5, #3
 80013e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ec:	00e2      	lsls	r2, r4, #3
 80013ee:	4614      	mov	r4, r2
 80013f0:	461d      	mov	r5, r3
 80013f2:	eb14 030a 	adds.w	r3, r4, sl
 80013f6:	603b      	str	r3, [r7, #0]
 80013f8:	eb45 030b 	adc.w	r3, r5, fp
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9d7 4500 	ldrd	r4, r5, [r7]
 800140a:	4629      	mov	r1, r5
 800140c:	028b      	lsls	r3, r1, #10
 800140e:	4621      	mov	r1, r4
 8001410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001414:	4621      	mov	r1, r4
 8001416:	028a      	lsls	r2, r1, #10
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141e:	2200      	movs	r2, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	60fa      	str	r2, [r7, #12]
 8001424:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001428:	f7fe ff22 	bl	8000270 <__aeabi_uldivmod>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4613      	mov	r3, r2
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <HAL_RCC_GetSysClockFreq+0x180>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	0c1b      	lsrs	r3, r3, #16
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	3301      	adds	r3, #1
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001444:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800144e:	e002      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_RCC_GetSysClockFreq+0x184>)
 8001452:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001458:	4618      	mov	r0, r3
 800145a:	3740      	adds	r7, #64	; 0x40
 800145c:	46bd      	mov	sp, r7
 800145e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	00f42400 	.word	0x00f42400
 800146c:	017d7840 	.word	0x017d7840

08001470 <__sflush_r>:
 8001470:	898a      	ldrh	r2, [r1, #12]
 8001472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001476:	4605      	mov	r5, r0
 8001478:	0710      	lsls	r0, r2, #28
 800147a:	460c      	mov	r4, r1
 800147c:	d458      	bmi.n	8001530 <__sflush_r+0xc0>
 800147e:	684b      	ldr	r3, [r1, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	dc05      	bgt.n	8001490 <__sflush_r+0x20>
 8001484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001486:	2b00      	cmp	r3, #0
 8001488:	dc02      	bgt.n	8001490 <__sflush_r+0x20>
 800148a:	2000      	movs	r0, #0
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001492:	2e00      	cmp	r6, #0
 8001494:	d0f9      	beq.n	800148a <__sflush_r+0x1a>
 8001496:	2300      	movs	r3, #0
 8001498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800149c:	682f      	ldr	r7, [r5, #0]
 800149e:	6a21      	ldr	r1, [r4, #32]
 80014a0:	602b      	str	r3, [r5, #0]
 80014a2:	d032      	beq.n	800150a <__sflush_r+0x9a>
 80014a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80014a6:	89a3      	ldrh	r3, [r4, #12]
 80014a8:	075a      	lsls	r2, r3, #29
 80014aa:	d505      	bpl.n	80014b8 <__sflush_r+0x48>
 80014ac:	6863      	ldr	r3, [r4, #4]
 80014ae:	1ac0      	subs	r0, r0, r3
 80014b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014b2:	b10b      	cbz	r3, 80014b8 <__sflush_r+0x48>
 80014b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b6:	1ac0      	subs	r0, r0, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	4602      	mov	r2, r0
 80014bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80014be:	6a21      	ldr	r1, [r4, #32]
 80014c0:	4628      	mov	r0, r5
 80014c2:	47b0      	blx	r6
 80014c4:	1c43      	adds	r3, r0, #1
 80014c6:	89a3      	ldrh	r3, [r4, #12]
 80014c8:	d106      	bne.n	80014d8 <__sflush_r+0x68>
 80014ca:	6829      	ldr	r1, [r5, #0]
 80014cc:	291d      	cmp	r1, #29
 80014ce:	d82b      	bhi.n	8001528 <__sflush_r+0xb8>
 80014d0:	4a29      	ldr	r2, [pc, #164]	; (8001578 <__sflush_r+0x108>)
 80014d2:	410a      	asrs	r2, r1
 80014d4:	07d6      	lsls	r6, r2, #31
 80014d6:	d427      	bmi.n	8001528 <__sflush_r+0xb8>
 80014d8:	2200      	movs	r2, #0
 80014da:	6062      	str	r2, [r4, #4]
 80014dc:	04d9      	lsls	r1, r3, #19
 80014de:	6922      	ldr	r2, [r4, #16]
 80014e0:	6022      	str	r2, [r4, #0]
 80014e2:	d504      	bpl.n	80014ee <__sflush_r+0x7e>
 80014e4:	1c42      	adds	r2, r0, #1
 80014e6:	d101      	bne.n	80014ec <__sflush_r+0x7c>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b903      	cbnz	r3, 80014ee <__sflush_r+0x7e>
 80014ec:	6560      	str	r0, [r4, #84]	; 0x54
 80014ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014f0:	602f      	str	r7, [r5, #0]
 80014f2:	2900      	cmp	r1, #0
 80014f4:	d0c9      	beq.n	800148a <__sflush_r+0x1a>
 80014f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014fa:	4299      	cmp	r1, r3
 80014fc:	d002      	beq.n	8001504 <__sflush_r+0x94>
 80014fe:	4628      	mov	r0, r5
 8001500:	f000 f9f8 	bl	80018f4 <_free_r>
 8001504:	2000      	movs	r0, #0
 8001506:	6360      	str	r0, [r4, #52]	; 0x34
 8001508:	e7c0      	b.n	800148c <__sflush_r+0x1c>
 800150a:	2301      	movs	r3, #1
 800150c:	4628      	mov	r0, r5
 800150e:	47b0      	blx	r6
 8001510:	1c41      	adds	r1, r0, #1
 8001512:	d1c8      	bne.n	80014a6 <__sflush_r+0x36>
 8001514:	682b      	ldr	r3, [r5, #0]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0c5      	beq.n	80014a6 <__sflush_r+0x36>
 800151a:	2b1d      	cmp	r3, #29
 800151c:	d001      	beq.n	8001522 <__sflush_r+0xb2>
 800151e:	2b16      	cmp	r3, #22
 8001520:	d101      	bne.n	8001526 <__sflush_r+0xb6>
 8001522:	602f      	str	r7, [r5, #0]
 8001524:	e7b1      	b.n	800148a <__sflush_r+0x1a>
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800152c:	81a3      	strh	r3, [r4, #12]
 800152e:	e7ad      	b.n	800148c <__sflush_r+0x1c>
 8001530:	690f      	ldr	r7, [r1, #16]
 8001532:	2f00      	cmp	r7, #0
 8001534:	d0a9      	beq.n	800148a <__sflush_r+0x1a>
 8001536:	0793      	lsls	r3, r2, #30
 8001538:	680e      	ldr	r6, [r1, #0]
 800153a:	bf08      	it	eq
 800153c:	694b      	ldreq	r3, [r1, #20]
 800153e:	600f      	str	r7, [r1, #0]
 8001540:	bf18      	it	ne
 8001542:	2300      	movne	r3, #0
 8001544:	eba6 0807 	sub.w	r8, r6, r7
 8001548:	608b      	str	r3, [r1, #8]
 800154a:	f1b8 0f00 	cmp.w	r8, #0
 800154e:	dd9c      	ble.n	800148a <__sflush_r+0x1a>
 8001550:	6a21      	ldr	r1, [r4, #32]
 8001552:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001554:	4643      	mov	r3, r8
 8001556:	463a      	mov	r2, r7
 8001558:	4628      	mov	r0, r5
 800155a:	47b0      	blx	r6
 800155c:	2800      	cmp	r0, #0
 800155e:	dc06      	bgt.n	800156e <__sflush_r+0xfe>
 8001560:	89a3      	ldrh	r3, [r4, #12]
 8001562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001566:	81a3      	strh	r3, [r4, #12]
 8001568:	f04f 30ff 	mov.w	r0, #4294967295
 800156c:	e78e      	b.n	800148c <__sflush_r+0x1c>
 800156e:	4407      	add	r7, r0
 8001570:	eba8 0800 	sub.w	r8, r8, r0
 8001574:	e7e9      	b.n	800154a <__sflush_r+0xda>
 8001576:	bf00      	nop
 8001578:	dfbffffe 	.word	0xdfbffffe

0800157c <_fflush_r>:
 800157c:	b538      	push	{r3, r4, r5, lr}
 800157e:	690b      	ldr	r3, [r1, #16]
 8001580:	4605      	mov	r5, r0
 8001582:	460c      	mov	r4, r1
 8001584:	b913      	cbnz	r3, 800158c <_fflush_r+0x10>
 8001586:	2500      	movs	r5, #0
 8001588:	4628      	mov	r0, r5
 800158a:	bd38      	pop	{r3, r4, r5, pc}
 800158c:	b118      	cbz	r0, 8001596 <_fflush_r+0x1a>
 800158e:	6a03      	ldr	r3, [r0, #32]
 8001590:	b90b      	cbnz	r3, 8001596 <_fflush_r+0x1a>
 8001592:	f000 f8a9 	bl	80016e8 <__sinit>
 8001596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f3      	beq.n	8001586 <_fflush_r+0xa>
 800159e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80015a0:	07d0      	lsls	r0, r2, #31
 80015a2:	d404      	bmi.n	80015ae <_fflush_r+0x32>
 80015a4:	0599      	lsls	r1, r3, #22
 80015a6:	d402      	bmi.n	80015ae <_fflush_r+0x32>
 80015a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015aa:	f000 f9a1 	bl	80018f0 <__retarget_lock_acquire_recursive>
 80015ae:	4628      	mov	r0, r5
 80015b0:	4621      	mov	r1, r4
 80015b2:	f7ff ff5d 	bl	8001470 <__sflush_r>
 80015b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80015b8:	07da      	lsls	r2, r3, #31
 80015ba:	4605      	mov	r5, r0
 80015bc:	d4e4      	bmi.n	8001588 <_fflush_r+0xc>
 80015be:	89a3      	ldrh	r3, [r4, #12]
 80015c0:	059b      	lsls	r3, r3, #22
 80015c2:	d4e1      	bmi.n	8001588 <_fflush_r+0xc>
 80015c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80015c6:	f000 f994 	bl	80018f2 <__retarget_lock_release_recursive>
 80015ca:	e7dd      	b.n	8001588 <_fflush_r+0xc>

080015cc <fflush>:
 80015cc:	4601      	mov	r1, r0
 80015ce:	b920      	cbnz	r0, 80015da <fflush+0xe>
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <fflush+0x18>)
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <fflush+0x1c>)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <fflush+0x20>)
 80015d6:	f000 b89f 	b.w	8001718 <_fwalk_sglue>
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <fflush+0x24>)
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	f7ff bfcd 	b.w	800157c <_fflush_r>
 80015e2:	bf00      	nop
 80015e4:	2000000c 	.word	0x2000000c
 80015e8:	0800157d 	.word	0x0800157d
 80015ec:	20000018 	.word	0x20000018
 80015f0:	20000064 	.word	0x20000064

080015f4 <std>:
 80015f4:	2300      	movs	r3, #0
 80015f6:	b510      	push	{r4, lr}
 80015f8:	4604      	mov	r4, r0
 80015fa:	e9c0 3300 	strd	r3, r3, [r0]
 80015fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001602:	6083      	str	r3, [r0, #8]
 8001604:	8181      	strh	r1, [r0, #12]
 8001606:	6643      	str	r3, [r0, #100]	; 0x64
 8001608:	81c2      	strh	r2, [r0, #14]
 800160a:	6183      	str	r3, [r0, #24]
 800160c:	4619      	mov	r1, r3
 800160e:	2208      	movs	r2, #8
 8001610:	305c      	adds	r0, #92	; 0x5c
 8001612:	f000 f8f4 	bl	80017fe <memset>
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <std+0x38>)
 8001618:	6263      	str	r3, [r4, #36]	; 0x24
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <std+0x3c>)
 800161c:	62a3      	str	r3, [r4, #40]	; 0x28
 800161e:	4b05      	ldr	r3, [pc, #20]	; (8001634 <std+0x40>)
 8001620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <std+0x44>)
 8001624:	6224      	str	r4, [r4, #32]
 8001626:	6323      	str	r3, [r4, #48]	; 0x30
 8001628:	bd10      	pop	{r4, pc}
 800162a:	bf00      	nop
 800162c:	08001779 	.word	0x08001779
 8001630:	0800179b 	.word	0x0800179b
 8001634:	080017d3 	.word	0x080017d3
 8001638:	080017f7 	.word	0x080017f7

0800163c <stdio_exit_handler>:
 800163c:	4a02      	ldr	r2, [pc, #8]	; (8001648 <stdio_exit_handler+0xc>)
 800163e:	4903      	ldr	r1, [pc, #12]	; (800164c <stdio_exit_handler+0x10>)
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <stdio_exit_handler+0x14>)
 8001642:	f000 b869 	b.w	8001718 <_fwalk_sglue>
 8001646:	bf00      	nop
 8001648:	2000000c 	.word	0x2000000c
 800164c:	0800157d 	.word	0x0800157d
 8001650:	20000018 	.word	0x20000018

08001654 <cleanup_stdio>:
 8001654:	6841      	ldr	r1, [r0, #4]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <cleanup_stdio+0x34>)
 8001658:	4299      	cmp	r1, r3
 800165a:	b510      	push	{r4, lr}
 800165c:	4604      	mov	r4, r0
 800165e:	d001      	beq.n	8001664 <cleanup_stdio+0x10>
 8001660:	f7ff ff8c 	bl	800157c <_fflush_r>
 8001664:	68a1      	ldr	r1, [r4, #8]
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <cleanup_stdio+0x38>)
 8001668:	4299      	cmp	r1, r3
 800166a:	d002      	beq.n	8001672 <cleanup_stdio+0x1e>
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff ff85 	bl	800157c <_fflush_r>
 8001672:	68e1      	ldr	r1, [r4, #12]
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <cleanup_stdio+0x3c>)
 8001676:	4299      	cmp	r1, r3
 8001678:	d004      	beq.n	8001684 <cleanup_stdio+0x30>
 800167a:	4620      	mov	r0, r4
 800167c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001680:	f7ff bf7c 	b.w	800157c <_fflush_r>
 8001684:	bd10      	pop	{r4, pc}
 8001686:	bf00      	nop
 8001688:	20000090 	.word	0x20000090
 800168c:	200000f8 	.word	0x200000f8
 8001690:	20000160 	.word	0x20000160

08001694 <global_stdio_init.part.0>:
 8001694:	b510      	push	{r4, lr}
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <global_stdio_init.part.0+0x30>)
 8001698:	4c0b      	ldr	r4, [pc, #44]	; (80016c8 <global_stdio_init.part.0+0x34>)
 800169a:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <global_stdio_init.part.0+0x38>)
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	4620      	mov	r0, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	2104      	movs	r1, #4
 80016a4:	f7ff ffa6 	bl	80015f4 <std>
 80016a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80016ac:	2201      	movs	r2, #1
 80016ae:	2109      	movs	r1, #9
 80016b0:	f7ff ffa0 	bl	80015f4 <std>
 80016b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80016b8:	2202      	movs	r2, #2
 80016ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016be:	2112      	movs	r1, #18
 80016c0:	f7ff bf98 	b.w	80015f4 <std>
 80016c4:	200001c8 	.word	0x200001c8
 80016c8:	20000090 	.word	0x20000090
 80016cc:	0800163d 	.word	0x0800163d

080016d0 <__sfp_lock_acquire>:
 80016d0:	4801      	ldr	r0, [pc, #4]	; (80016d8 <__sfp_lock_acquire+0x8>)
 80016d2:	f000 b90d 	b.w	80018f0 <__retarget_lock_acquire_recursive>
 80016d6:	bf00      	nop
 80016d8:	200001d1 	.word	0x200001d1

080016dc <__sfp_lock_release>:
 80016dc:	4801      	ldr	r0, [pc, #4]	; (80016e4 <__sfp_lock_release+0x8>)
 80016de:	f000 b908 	b.w	80018f2 <__retarget_lock_release_recursive>
 80016e2:	bf00      	nop
 80016e4:	200001d1 	.word	0x200001d1

080016e8 <__sinit>:
 80016e8:	b510      	push	{r4, lr}
 80016ea:	4604      	mov	r4, r0
 80016ec:	f7ff fff0 	bl	80016d0 <__sfp_lock_acquire>
 80016f0:	6a23      	ldr	r3, [r4, #32]
 80016f2:	b11b      	cbz	r3, 80016fc <__sinit+0x14>
 80016f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016f8:	f7ff bff0 	b.w	80016dc <__sfp_lock_release>
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__sinit+0x28>)
 80016fe:	6223      	str	r3, [r4, #32]
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__sinit+0x2c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f5      	bne.n	80016f4 <__sinit+0xc>
 8001708:	f7ff ffc4 	bl	8001694 <global_stdio_init.part.0>
 800170c:	e7f2      	b.n	80016f4 <__sinit+0xc>
 800170e:	bf00      	nop
 8001710:	08001655 	.word	0x08001655
 8001714:	200001c8 	.word	0x200001c8

08001718 <_fwalk_sglue>:
 8001718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800171c:	4607      	mov	r7, r0
 800171e:	4688      	mov	r8, r1
 8001720:	4614      	mov	r4, r2
 8001722:	2600      	movs	r6, #0
 8001724:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001728:	f1b9 0901 	subs.w	r9, r9, #1
 800172c:	d505      	bpl.n	800173a <_fwalk_sglue+0x22>
 800172e:	6824      	ldr	r4, [r4, #0]
 8001730:	2c00      	cmp	r4, #0
 8001732:	d1f7      	bne.n	8001724 <_fwalk_sglue+0xc>
 8001734:	4630      	mov	r0, r6
 8001736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800173a:	89ab      	ldrh	r3, [r5, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d907      	bls.n	8001750 <_fwalk_sglue+0x38>
 8001740:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001744:	3301      	adds	r3, #1
 8001746:	d003      	beq.n	8001750 <_fwalk_sglue+0x38>
 8001748:	4629      	mov	r1, r5
 800174a:	4638      	mov	r0, r7
 800174c:	47c0      	blx	r8
 800174e:	4306      	orrs	r6, r0
 8001750:	3568      	adds	r5, #104	; 0x68
 8001752:	e7e9      	b.n	8001728 <_fwalk_sglue+0x10>

08001754 <iprintf>:
 8001754:	b40f      	push	{r0, r1, r2, r3}
 8001756:	b507      	push	{r0, r1, r2, lr}
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <iprintf+0x20>)
 800175a:	ab04      	add	r3, sp, #16
 800175c:	6808      	ldr	r0, [r1, #0]
 800175e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001762:	6881      	ldr	r1, [r0, #8]
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f000 f9e7 	bl	8001b38 <_vfiprintf_r>
 800176a:	b003      	add	sp, #12
 800176c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001770:	b004      	add	sp, #16
 8001772:	4770      	bx	lr
 8001774:	20000064 	.word	0x20000064

08001778 <__sread>:
 8001778:	b510      	push	{r4, lr}
 800177a:	460c      	mov	r4, r1
 800177c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001780:	f000 f868 	bl	8001854 <_read_r>
 8001784:	2800      	cmp	r0, #0
 8001786:	bfab      	itete	ge
 8001788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800178a:	89a3      	ldrhlt	r3, [r4, #12]
 800178c:	181b      	addge	r3, r3, r0
 800178e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001792:	bfac      	ite	ge
 8001794:	6563      	strge	r3, [r4, #84]	; 0x54
 8001796:	81a3      	strhlt	r3, [r4, #12]
 8001798:	bd10      	pop	{r4, pc}

0800179a <__swrite>:
 800179a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800179e:	461f      	mov	r7, r3
 80017a0:	898b      	ldrh	r3, [r1, #12]
 80017a2:	05db      	lsls	r3, r3, #23
 80017a4:	4605      	mov	r5, r0
 80017a6:	460c      	mov	r4, r1
 80017a8:	4616      	mov	r6, r2
 80017aa:	d505      	bpl.n	80017b8 <__swrite+0x1e>
 80017ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017b0:	2302      	movs	r3, #2
 80017b2:	2200      	movs	r2, #0
 80017b4:	f000 f83c 	bl	8001830 <_lseek_r>
 80017b8:	89a3      	ldrh	r3, [r4, #12]
 80017ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80017c2:	81a3      	strh	r3, [r4, #12]
 80017c4:	4632      	mov	r2, r6
 80017c6:	463b      	mov	r3, r7
 80017c8:	4628      	mov	r0, r5
 80017ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017ce:	f000 b853 	b.w	8001878 <_write_r>

080017d2 <__sseek>:
 80017d2:	b510      	push	{r4, lr}
 80017d4:	460c      	mov	r4, r1
 80017d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017da:	f000 f829 	bl	8001830 <_lseek_r>
 80017de:	1c43      	adds	r3, r0, #1
 80017e0:	89a3      	ldrh	r3, [r4, #12]
 80017e2:	bf15      	itete	ne
 80017e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80017e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80017ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80017ee:	81a3      	strheq	r3, [r4, #12]
 80017f0:	bf18      	it	ne
 80017f2:	81a3      	strhne	r3, [r4, #12]
 80017f4:	bd10      	pop	{r4, pc}

080017f6 <__sclose>:
 80017f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fa:	f000 b809 	b.w	8001810 <_close_r>

080017fe <memset>:
 80017fe:	4402      	add	r2, r0
 8001800:	4603      	mov	r3, r0
 8001802:	4293      	cmp	r3, r2
 8001804:	d100      	bne.n	8001808 <memset+0xa>
 8001806:	4770      	bx	lr
 8001808:	f803 1b01 	strb.w	r1, [r3], #1
 800180c:	e7f9      	b.n	8001802 <memset+0x4>
	...

08001810 <_close_r>:
 8001810:	b538      	push	{r3, r4, r5, lr}
 8001812:	4d06      	ldr	r5, [pc, #24]	; (800182c <_close_r+0x1c>)
 8001814:	2300      	movs	r3, #0
 8001816:	4604      	mov	r4, r0
 8001818:	4608      	mov	r0, r1
 800181a:	602b      	str	r3, [r5, #0]
 800181c:	f7fe ffe1 	bl	80007e2 <_close>
 8001820:	1c43      	adds	r3, r0, #1
 8001822:	d102      	bne.n	800182a <_close_r+0x1a>
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	b103      	cbz	r3, 800182a <_close_r+0x1a>
 8001828:	6023      	str	r3, [r4, #0]
 800182a:	bd38      	pop	{r3, r4, r5, pc}
 800182c:	200001cc 	.word	0x200001cc

08001830 <_lseek_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	4d07      	ldr	r5, [pc, #28]	; (8001850 <_lseek_r+0x20>)
 8001834:	4604      	mov	r4, r0
 8001836:	4608      	mov	r0, r1
 8001838:	4611      	mov	r1, r2
 800183a:	2200      	movs	r2, #0
 800183c:	602a      	str	r2, [r5, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	f7fe fff6 	bl	8000830 <_lseek>
 8001844:	1c43      	adds	r3, r0, #1
 8001846:	d102      	bne.n	800184e <_lseek_r+0x1e>
 8001848:	682b      	ldr	r3, [r5, #0]
 800184a:	b103      	cbz	r3, 800184e <_lseek_r+0x1e>
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	bd38      	pop	{r3, r4, r5, pc}
 8001850:	200001cc 	.word	0x200001cc

08001854 <_read_r>:
 8001854:	b538      	push	{r3, r4, r5, lr}
 8001856:	4d07      	ldr	r5, [pc, #28]	; (8001874 <_read_r+0x20>)
 8001858:	4604      	mov	r4, r0
 800185a:	4608      	mov	r0, r1
 800185c:	4611      	mov	r1, r2
 800185e:	2200      	movs	r2, #0
 8001860:	602a      	str	r2, [r5, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	f7fe ff84 	bl	8000770 <_read>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d102      	bne.n	8001872 <_read_r+0x1e>
 800186c:	682b      	ldr	r3, [r5, #0]
 800186e:	b103      	cbz	r3, 8001872 <_read_r+0x1e>
 8001870:	6023      	str	r3, [r4, #0]
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	200001cc 	.word	0x200001cc

08001878 <_write_r>:
 8001878:	b538      	push	{r3, r4, r5, lr}
 800187a:	4d07      	ldr	r5, [pc, #28]	; (8001898 <_write_r+0x20>)
 800187c:	4604      	mov	r4, r0
 800187e:	4608      	mov	r0, r1
 8001880:	4611      	mov	r1, r2
 8001882:	2200      	movs	r2, #0
 8001884:	602a      	str	r2, [r5, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	f7fe ff8f 	bl	80007aa <_write>
 800188c:	1c43      	adds	r3, r0, #1
 800188e:	d102      	bne.n	8001896 <_write_r+0x1e>
 8001890:	682b      	ldr	r3, [r5, #0]
 8001892:	b103      	cbz	r3, 8001896 <_write_r+0x1e>
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	bd38      	pop	{r3, r4, r5, pc}
 8001898:	200001cc 	.word	0x200001cc

0800189c <__errno>:
 800189c:	4b01      	ldr	r3, [pc, #4]	; (80018a4 <__errno+0x8>)
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	20000064 	.word	0x20000064

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4d0d      	ldr	r5, [pc, #52]	; (80018e0 <__libc_init_array+0x38>)
 80018ac:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018ae:	1b64      	subs	r4, r4, r5
 80018b0:	10a4      	asrs	r4, r4, #2
 80018b2:	2600      	movs	r6, #0
 80018b4:	42a6      	cmp	r6, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	4d0b      	ldr	r5, [pc, #44]	; (80018e8 <__libc_init_array+0x40>)
 80018ba:	4c0c      	ldr	r4, [pc, #48]	; (80018ec <__libc_init_array+0x44>)
 80018bc:	f000 fd10 	bl	80022e0 <_init>
 80018c0:	1b64      	subs	r4, r4, r5
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	2600      	movs	r6, #0
 80018c6:	42a6      	cmp	r6, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d0:	4798      	blx	r3
 80018d2:	3601      	adds	r6, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80018da:	4798      	blx	r3
 80018dc:	3601      	adds	r6, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08002358 	.word	0x08002358
 80018e4:	08002358 	.word	0x08002358
 80018e8:	08002358 	.word	0x08002358
 80018ec:	0800235c 	.word	0x0800235c

080018f0 <__retarget_lock_acquire_recursive>:
 80018f0:	4770      	bx	lr

080018f2 <__retarget_lock_release_recursive>:
 80018f2:	4770      	bx	lr

080018f4 <_free_r>:
 80018f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018f6:	2900      	cmp	r1, #0
 80018f8:	d044      	beq.n	8001984 <_free_r+0x90>
 80018fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018fe:	9001      	str	r0, [sp, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	f1a1 0404 	sub.w	r4, r1, #4
 8001906:	bfb8      	it	lt
 8001908:	18e4      	addlt	r4, r4, r3
 800190a:	f000 f8df 	bl	8001acc <__malloc_lock>
 800190e:	4a1e      	ldr	r2, [pc, #120]	; (8001988 <_free_r+0x94>)
 8001910:	9801      	ldr	r0, [sp, #4]
 8001912:	6813      	ldr	r3, [r2, #0]
 8001914:	b933      	cbnz	r3, 8001924 <_free_r+0x30>
 8001916:	6063      	str	r3, [r4, #4]
 8001918:	6014      	str	r4, [r2, #0]
 800191a:	b003      	add	sp, #12
 800191c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001920:	f000 b8da 	b.w	8001ad8 <__malloc_unlock>
 8001924:	42a3      	cmp	r3, r4
 8001926:	d908      	bls.n	800193a <_free_r+0x46>
 8001928:	6825      	ldr	r5, [r4, #0]
 800192a:	1961      	adds	r1, r4, r5
 800192c:	428b      	cmp	r3, r1
 800192e:	bf01      	itttt	eq
 8001930:	6819      	ldreq	r1, [r3, #0]
 8001932:	685b      	ldreq	r3, [r3, #4]
 8001934:	1949      	addeq	r1, r1, r5
 8001936:	6021      	streq	r1, [r4, #0]
 8001938:	e7ed      	b.n	8001916 <_free_r+0x22>
 800193a:	461a      	mov	r2, r3
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	b10b      	cbz	r3, 8001944 <_free_r+0x50>
 8001940:	42a3      	cmp	r3, r4
 8001942:	d9fa      	bls.n	800193a <_free_r+0x46>
 8001944:	6811      	ldr	r1, [r2, #0]
 8001946:	1855      	adds	r5, r2, r1
 8001948:	42a5      	cmp	r5, r4
 800194a:	d10b      	bne.n	8001964 <_free_r+0x70>
 800194c:	6824      	ldr	r4, [r4, #0]
 800194e:	4421      	add	r1, r4
 8001950:	1854      	adds	r4, r2, r1
 8001952:	42a3      	cmp	r3, r4
 8001954:	6011      	str	r1, [r2, #0]
 8001956:	d1e0      	bne.n	800191a <_free_r+0x26>
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	6053      	str	r3, [r2, #4]
 800195e:	440c      	add	r4, r1
 8001960:	6014      	str	r4, [r2, #0]
 8001962:	e7da      	b.n	800191a <_free_r+0x26>
 8001964:	d902      	bls.n	800196c <_free_r+0x78>
 8001966:	230c      	movs	r3, #12
 8001968:	6003      	str	r3, [r0, #0]
 800196a:	e7d6      	b.n	800191a <_free_r+0x26>
 800196c:	6825      	ldr	r5, [r4, #0]
 800196e:	1961      	adds	r1, r4, r5
 8001970:	428b      	cmp	r3, r1
 8001972:	bf04      	itt	eq
 8001974:	6819      	ldreq	r1, [r3, #0]
 8001976:	685b      	ldreq	r3, [r3, #4]
 8001978:	6063      	str	r3, [r4, #4]
 800197a:	bf04      	itt	eq
 800197c:	1949      	addeq	r1, r1, r5
 800197e:	6021      	streq	r1, [r4, #0]
 8001980:	6054      	str	r4, [r2, #4]
 8001982:	e7ca      	b.n	800191a <_free_r+0x26>
 8001984:	b003      	add	sp, #12
 8001986:	bd30      	pop	{r4, r5, pc}
 8001988:	200001d4 	.word	0x200001d4

0800198c <sbrk_aligned>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	4e0e      	ldr	r6, [pc, #56]	; (80019c8 <sbrk_aligned+0x3c>)
 8001990:	460c      	mov	r4, r1
 8001992:	6831      	ldr	r1, [r6, #0]
 8001994:	4605      	mov	r5, r0
 8001996:	b911      	cbnz	r1, 800199e <sbrk_aligned+0x12>
 8001998:	f000 fc0e 	bl	80021b8 <_sbrk_r>
 800199c:	6030      	str	r0, [r6, #0]
 800199e:	4621      	mov	r1, r4
 80019a0:	4628      	mov	r0, r5
 80019a2:	f000 fc09 	bl	80021b8 <_sbrk_r>
 80019a6:	1c43      	adds	r3, r0, #1
 80019a8:	d00a      	beq.n	80019c0 <sbrk_aligned+0x34>
 80019aa:	1cc4      	adds	r4, r0, #3
 80019ac:	f024 0403 	bic.w	r4, r4, #3
 80019b0:	42a0      	cmp	r0, r4
 80019b2:	d007      	beq.n	80019c4 <sbrk_aligned+0x38>
 80019b4:	1a21      	subs	r1, r4, r0
 80019b6:	4628      	mov	r0, r5
 80019b8:	f000 fbfe 	bl	80021b8 <_sbrk_r>
 80019bc:	3001      	adds	r0, #1
 80019be:	d101      	bne.n	80019c4 <sbrk_aligned+0x38>
 80019c0:	f04f 34ff 	mov.w	r4, #4294967295
 80019c4:	4620      	mov	r0, r4
 80019c6:	bd70      	pop	{r4, r5, r6, pc}
 80019c8:	200001d8 	.word	0x200001d8

080019cc <_malloc_r>:
 80019cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019d0:	1ccd      	adds	r5, r1, #3
 80019d2:	f025 0503 	bic.w	r5, r5, #3
 80019d6:	3508      	adds	r5, #8
 80019d8:	2d0c      	cmp	r5, #12
 80019da:	bf38      	it	cc
 80019dc:	250c      	movcc	r5, #12
 80019de:	2d00      	cmp	r5, #0
 80019e0:	4607      	mov	r7, r0
 80019e2:	db01      	blt.n	80019e8 <_malloc_r+0x1c>
 80019e4:	42a9      	cmp	r1, r5
 80019e6:	d905      	bls.n	80019f4 <_malloc_r+0x28>
 80019e8:	230c      	movs	r3, #12
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	2600      	movs	r6, #0
 80019ee:	4630      	mov	r0, r6
 80019f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ac8 <_malloc_r+0xfc>
 80019f8:	f000 f868 	bl	8001acc <__malloc_lock>
 80019fc:	f8d8 3000 	ldr.w	r3, [r8]
 8001a00:	461c      	mov	r4, r3
 8001a02:	bb5c      	cbnz	r4, 8001a5c <_malloc_r+0x90>
 8001a04:	4629      	mov	r1, r5
 8001a06:	4638      	mov	r0, r7
 8001a08:	f7ff ffc0 	bl	800198c <sbrk_aligned>
 8001a0c:	1c43      	adds	r3, r0, #1
 8001a0e:	4604      	mov	r4, r0
 8001a10:	d155      	bne.n	8001abe <_malloc_r+0xf2>
 8001a12:	f8d8 4000 	ldr.w	r4, [r8]
 8001a16:	4626      	mov	r6, r4
 8001a18:	2e00      	cmp	r6, #0
 8001a1a:	d145      	bne.n	8001aa8 <_malloc_r+0xdc>
 8001a1c:	2c00      	cmp	r4, #0
 8001a1e:	d048      	beq.n	8001ab2 <_malloc_r+0xe6>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	4631      	mov	r1, r6
 8001a24:	4638      	mov	r0, r7
 8001a26:	eb04 0903 	add.w	r9, r4, r3
 8001a2a:	f000 fbc5 	bl	80021b8 <_sbrk_r>
 8001a2e:	4581      	cmp	r9, r0
 8001a30:	d13f      	bne.n	8001ab2 <_malloc_r+0xe6>
 8001a32:	6821      	ldr	r1, [r4, #0]
 8001a34:	1a6d      	subs	r5, r5, r1
 8001a36:	4629      	mov	r1, r5
 8001a38:	4638      	mov	r0, r7
 8001a3a:	f7ff ffa7 	bl	800198c <sbrk_aligned>
 8001a3e:	3001      	adds	r0, #1
 8001a40:	d037      	beq.n	8001ab2 <_malloc_r+0xe6>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	442b      	add	r3, r5
 8001a46:	6023      	str	r3, [r4, #0]
 8001a48:	f8d8 3000 	ldr.w	r3, [r8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d038      	beq.n	8001ac2 <_malloc_r+0xf6>
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	42a2      	cmp	r2, r4
 8001a54:	d12b      	bne.n	8001aae <_malloc_r+0xe2>
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	e00f      	b.n	8001a7c <_malloc_r+0xb0>
 8001a5c:	6822      	ldr	r2, [r4, #0]
 8001a5e:	1b52      	subs	r2, r2, r5
 8001a60:	d41f      	bmi.n	8001aa2 <_malloc_r+0xd6>
 8001a62:	2a0b      	cmp	r2, #11
 8001a64:	d917      	bls.n	8001a96 <_malloc_r+0xca>
 8001a66:	1961      	adds	r1, r4, r5
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	6025      	str	r5, [r4, #0]
 8001a6c:	bf18      	it	ne
 8001a6e:	6059      	strne	r1, [r3, #4]
 8001a70:	6863      	ldr	r3, [r4, #4]
 8001a72:	bf08      	it	eq
 8001a74:	f8c8 1000 	streq.w	r1, [r8]
 8001a78:	5162      	str	r2, [r4, r5]
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	4638      	mov	r0, r7
 8001a7e:	f104 060b 	add.w	r6, r4, #11
 8001a82:	f000 f829 	bl	8001ad8 <__malloc_unlock>
 8001a86:	f026 0607 	bic.w	r6, r6, #7
 8001a8a:	1d23      	adds	r3, r4, #4
 8001a8c:	1af2      	subs	r2, r6, r3
 8001a8e:	d0ae      	beq.n	80019ee <_malloc_r+0x22>
 8001a90:	1b9b      	subs	r3, r3, r6
 8001a92:	50a3      	str	r3, [r4, r2]
 8001a94:	e7ab      	b.n	80019ee <_malloc_r+0x22>
 8001a96:	42a3      	cmp	r3, r4
 8001a98:	6862      	ldr	r2, [r4, #4]
 8001a9a:	d1dd      	bne.n	8001a58 <_malloc_r+0x8c>
 8001a9c:	f8c8 2000 	str.w	r2, [r8]
 8001aa0:	e7ec      	b.n	8001a7c <_malloc_r+0xb0>
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	6864      	ldr	r4, [r4, #4]
 8001aa6:	e7ac      	b.n	8001a02 <_malloc_r+0x36>
 8001aa8:	4634      	mov	r4, r6
 8001aaa:	6876      	ldr	r6, [r6, #4]
 8001aac:	e7b4      	b.n	8001a18 <_malloc_r+0x4c>
 8001aae:	4613      	mov	r3, r2
 8001ab0:	e7cc      	b.n	8001a4c <_malloc_r+0x80>
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	f000 f80e 	bl	8001ad8 <__malloc_unlock>
 8001abc:	e797      	b.n	80019ee <_malloc_r+0x22>
 8001abe:	6025      	str	r5, [r4, #0]
 8001ac0:	e7dc      	b.n	8001a7c <_malloc_r+0xb0>
 8001ac2:	605b      	str	r3, [r3, #4]
 8001ac4:	deff      	udf	#255	; 0xff
 8001ac6:	bf00      	nop
 8001ac8:	200001d4 	.word	0x200001d4

08001acc <__malloc_lock>:
 8001acc:	4801      	ldr	r0, [pc, #4]	; (8001ad4 <__malloc_lock+0x8>)
 8001ace:	f7ff bf0f 	b.w	80018f0 <__retarget_lock_acquire_recursive>
 8001ad2:	bf00      	nop
 8001ad4:	200001d0 	.word	0x200001d0

08001ad8 <__malloc_unlock>:
 8001ad8:	4801      	ldr	r0, [pc, #4]	; (8001ae0 <__malloc_unlock+0x8>)
 8001ada:	f7ff bf0a 	b.w	80018f2 <__retarget_lock_release_recursive>
 8001ade:	bf00      	nop
 8001ae0:	200001d0 	.word	0x200001d0

08001ae4 <__sfputc_r>:
 8001ae4:	6893      	ldr	r3, [r2, #8]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	b410      	push	{r4}
 8001aec:	6093      	str	r3, [r2, #8]
 8001aee:	da08      	bge.n	8001b02 <__sfputc_r+0x1e>
 8001af0:	6994      	ldr	r4, [r2, #24]
 8001af2:	42a3      	cmp	r3, r4
 8001af4:	db01      	blt.n	8001afa <__sfputc_r+0x16>
 8001af6:	290a      	cmp	r1, #10
 8001af8:	d103      	bne.n	8001b02 <__sfputc_r+0x1e>
 8001afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001afe:	f000 bac5 	b.w	800208c <__swbuf_r>
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	1c58      	adds	r0, r3, #1
 8001b06:	6010      	str	r0, [r2, #0]
 8001b08:	7019      	strb	r1, [r3, #0]
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <__sfputs_r>:
 8001b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b14:	4606      	mov	r6, r0
 8001b16:	460f      	mov	r7, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	18d5      	adds	r5, r2, r3
 8001b1c:	42ac      	cmp	r4, r5
 8001b1e:	d101      	bne.n	8001b24 <__sfputs_r+0x12>
 8001b20:	2000      	movs	r0, #0
 8001b22:	e007      	b.n	8001b34 <__sfputs_r+0x22>
 8001b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b28:	463a      	mov	r2, r7
 8001b2a:	4630      	mov	r0, r6
 8001b2c:	f7ff ffda 	bl	8001ae4 <__sfputc_r>
 8001b30:	1c43      	adds	r3, r0, #1
 8001b32:	d1f3      	bne.n	8001b1c <__sfputs_r+0xa>
 8001b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b38 <_vfiprintf_r>:
 8001b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b3c:	460d      	mov	r5, r1
 8001b3e:	b09d      	sub	sp, #116	; 0x74
 8001b40:	4614      	mov	r4, r2
 8001b42:	4698      	mov	r8, r3
 8001b44:	4606      	mov	r6, r0
 8001b46:	b118      	cbz	r0, 8001b50 <_vfiprintf_r+0x18>
 8001b48:	6a03      	ldr	r3, [r0, #32]
 8001b4a:	b90b      	cbnz	r3, 8001b50 <_vfiprintf_r+0x18>
 8001b4c:	f7ff fdcc 	bl	80016e8 <__sinit>
 8001b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b52:	07d9      	lsls	r1, r3, #31
 8001b54:	d405      	bmi.n	8001b62 <_vfiprintf_r+0x2a>
 8001b56:	89ab      	ldrh	r3, [r5, #12]
 8001b58:	059a      	lsls	r2, r3, #22
 8001b5a:	d402      	bmi.n	8001b62 <_vfiprintf_r+0x2a>
 8001b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b5e:	f7ff fec7 	bl	80018f0 <__retarget_lock_acquire_recursive>
 8001b62:	89ab      	ldrh	r3, [r5, #12]
 8001b64:	071b      	lsls	r3, r3, #28
 8001b66:	d501      	bpl.n	8001b6c <_vfiprintf_r+0x34>
 8001b68:	692b      	ldr	r3, [r5, #16]
 8001b6a:	b99b      	cbnz	r3, 8001b94 <_vfiprintf_r+0x5c>
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4630      	mov	r0, r6
 8001b70:	f000 faca 	bl	8002108 <__swsetup_r>
 8001b74:	b170      	cbz	r0, 8001b94 <_vfiprintf_r+0x5c>
 8001b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b78:	07dc      	lsls	r4, r3, #31
 8001b7a:	d504      	bpl.n	8001b86 <_vfiprintf_r+0x4e>
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	b01d      	add	sp, #116	; 0x74
 8001b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b86:	89ab      	ldrh	r3, [r5, #12]
 8001b88:	0598      	lsls	r0, r3, #22
 8001b8a:	d4f7      	bmi.n	8001b7c <_vfiprintf_r+0x44>
 8001b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b8e:	f7ff feb0 	bl	80018f2 <__retarget_lock_release_recursive>
 8001b92:	e7f3      	b.n	8001b7c <_vfiprintf_r+0x44>
 8001b94:	2300      	movs	r3, #0
 8001b96:	9309      	str	r3, [sp, #36]	; 0x24
 8001b98:	2320      	movs	r3, #32
 8001b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ba2:	2330      	movs	r3, #48	; 0x30
 8001ba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001d58 <_vfiprintf_r+0x220>
 8001ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bac:	f04f 0901 	mov.w	r9, #1
 8001bb0:	4623      	mov	r3, r4
 8001bb2:	469a      	mov	sl, r3
 8001bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bb8:	b10a      	cbz	r2, 8001bbe <_vfiprintf_r+0x86>
 8001bba:	2a25      	cmp	r2, #37	; 0x25
 8001bbc:	d1f9      	bne.n	8001bb2 <_vfiprintf_r+0x7a>
 8001bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8001bc2:	d00b      	beq.n	8001bdc <_vfiprintf_r+0xa4>
 8001bc4:	465b      	mov	r3, fp
 8001bc6:	4622      	mov	r2, r4
 8001bc8:	4629      	mov	r1, r5
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f7ff ffa1 	bl	8001b12 <__sfputs_r>
 8001bd0:	3001      	adds	r0, #1
 8001bd2:	f000 80a9 	beq.w	8001d28 <_vfiprintf_r+0x1f0>
 8001bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bd8:	445a      	add	r2, fp
 8001bda:	9209      	str	r2, [sp, #36]	; 0x24
 8001bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a1 	beq.w	8001d28 <_vfiprintf_r+0x1f0>
 8001be6:	2300      	movs	r3, #0
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bf0:	f10a 0a01 	add.w	sl, sl, #1
 8001bf4:	9304      	str	r3, [sp, #16]
 8001bf6:	9307      	str	r3, [sp, #28]
 8001bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8001bfe:	4654      	mov	r4, sl
 8001c00:	2205      	movs	r2, #5
 8001c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c06:	4854      	ldr	r0, [pc, #336]	; (8001d58 <_vfiprintf_r+0x220>)
 8001c08:	f7fe fae2 	bl	80001d0 <memchr>
 8001c0c:	9a04      	ldr	r2, [sp, #16]
 8001c0e:	b9d8      	cbnz	r0, 8001c48 <_vfiprintf_r+0x110>
 8001c10:	06d1      	lsls	r1, r2, #27
 8001c12:	bf44      	itt	mi
 8001c14:	2320      	movmi	r3, #32
 8001c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c1a:	0713      	lsls	r3, r2, #28
 8001c1c:	bf44      	itt	mi
 8001c1e:	232b      	movmi	r3, #43	; 0x2b
 8001c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c24:	f89a 3000 	ldrb.w	r3, [sl]
 8001c28:	2b2a      	cmp	r3, #42	; 0x2a
 8001c2a:	d015      	beq.n	8001c58 <_vfiprintf_r+0x120>
 8001c2c:	9a07      	ldr	r2, [sp, #28]
 8001c2e:	4654      	mov	r4, sl
 8001c30:	2000      	movs	r0, #0
 8001c32:	f04f 0c0a 	mov.w	ip, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c3c:	3b30      	subs	r3, #48	; 0x30
 8001c3e:	2b09      	cmp	r3, #9
 8001c40:	d94d      	bls.n	8001cde <_vfiprintf_r+0x1a6>
 8001c42:	b1b0      	cbz	r0, 8001c72 <_vfiprintf_r+0x13a>
 8001c44:	9207      	str	r2, [sp, #28]
 8001c46:	e014      	b.n	8001c72 <_vfiprintf_r+0x13a>
 8001c48:	eba0 0308 	sub.w	r3, r0, r8
 8001c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	9304      	str	r3, [sp, #16]
 8001c54:	46a2      	mov	sl, r4
 8001c56:	e7d2      	b.n	8001bfe <_vfiprintf_r+0xc6>
 8001c58:	9b03      	ldr	r3, [sp, #12]
 8001c5a:	1d19      	adds	r1, r3, #4
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	9103      	str	r1, [sp, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bfbb      	ittet	lt
 8001c64:	425b      	neglt	r3, r3
 8001c66:	f042 0202 	orrlt.w	r2, r2, #2
 8001c6a:	9307      	strge	r3, [sp, #28]
 8001c6c:	9307      	strlt	r3, [sp, #28]
 8001c6e:	bfb8      	it	lt
 8001c70:	9204      	strlt	r2, [sp, #16]
 8001c72:	7823      	ldrb	r3, [r4, #0]
 8001c74:	2b2e      	cmp	r3, #46	; 0x2e
 8001c76:	d10c      	bne.n	8001c92 <_vfiprintf_r+0x15a>
 8001c78:	7863      	ldrb	r3, [r4, #1]
 8001c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c7c:	d134      	bne.n	8001ce8 <_vfiprintf_r+0x1b0>
 8001c7e:	9b03      	ldr	r3, [sp, #12]
 8001c80:	1d1a      	adds	r2, r3, #4
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	9203      	str	r2, [sp, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfb8      	it	lt
 8001c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c8e:	3402      	adds	r4, #2
 8001c90:	9305      	str	r3, [sp, #20]
 8001c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001d68 <_vfiprintf_r+0x230>
 8001c96:	7821      	ldrb	r1, [r4, #0]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4650      	mov	r0, sl
 8001c9c:	f7fe fa98 	bl	80001d0 <memchr>
 8001ca0:	b138      	cbz	r0, 8001cb2 <_vfiprintf_r+0x17a>
 8001ca2:	9b04      	ldr	r3, [sp, #16]
 8001ca4:	eba0 000a 	sub.w	r0, r0, sl
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	4082      	lsls	r2, r0
 8001cac:	4313      	orrs	r3, r2
 8001cae:	3401      	adds	r4, #1
 8001cb0:	9304      	str	r3, [sp, #16]
 8001cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cb6:	4829      	ldr	r0, [pc, #164]	; (8001d5c <_vfiprintf_r+0x224>)
 8001cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cbc:	2206      	movs	r2, #6
 8001cbe:	f7fe fa87 	bl	80001d0 <memchr>
 8001cc2:	2800      	cmp	r0, #0
 8001cc4:	d03f      	beq.n	8001d46 <_vfiprintf_r+0x20e>
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <_vfiprintf_r+0x228>)
 8001cc8:	bb1b      	cbnz	r3, 8001d12 <_vfiprintf_r+0x1da>
 8001cca:	9b03      	ldr	r3, [sp, #12]
 8001ccc:	3307      	adds	r3, #7
 8001cce:	f023 0307 	bic.w	r3, r3, #7
 8001cd2:	3308      	adds	r3, #8
 8001cd4:	9303      	str	r3, [sp, #12]
 8001cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cd8:	443b      	add	r3, r7
 8001cda:	9309      	str	r3, [sp, #36]	; 0x24
 8001cdc:	e768      	b.n	8001bb0 <_vfiprintf_r+0x78>
 8001cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	e7a6      	b.n	8001c36 <_vfiprintf_r+0xfe>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	3401      	adds	r4, #1
 8001cec:	9305      	str	r3, [sp, #20]
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f04f 0c0a 	mov.w	ip, #10
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cfa:	3a30      	subs	r2, #48	; 0x30
 8001cfc:	2a09      	cmp	r2, #9
 8001cfe:	d903      	bls.n	8001d08 <_vfiprintf_r+0x1d0>
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0c6      	beq.n	8001c92 <_vfiprintf_r+0x15a>
 8001d04:	9105      	str	r1, [sp, #20]
 8001d06:	e7c4      	b.n	8001c92 <_vfiprintf_r+0x15a>
 8001d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d0c:	4604      	mov	r4, r0
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e7f0      	b.n	8001cf4 <_vfiprintf_r+0x1bc>
 8001d12:	ab03      	add	r3, sp, #12
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	462a      	mov	r2, r5
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_vfiprintf_r+0x22c>)
 8001d1a:	a904      	add	r1, sp, #16
 8001d1c:	4630      	mov	r0, r6
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4607      	mov	r7, r0
 8001d24:	1c78      	adds	r0, r7, #1
 8001d26:	d1d6      	bne.n	8001cd6 <_vfiprintf_r+0x19e>
 8001d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d2a:	07d9      	lsls	r1, r3, #31
 8001d2c:	d405      	bmi.n	8001d3a <_vfiprintf_r+0x202>
 8001d2e:	89ab      	ldrh	r3, [r5, #12]
 8001d30:	059a      	lsls	r2, r3, #22
 8001d32:	d402      	bmi.n	8001d3a <_vfiprintf_r+0x202>
 8001d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d36:	f7ff fddc 	bl	80018f2 <__retarget_lock_release_recursive>
 8001d3a:	89ab      	ldrh	r3, [r5, #12]
 8001d3c:	065b      	lsls	r3, r3, #25
 8001d3e:	f53f af1d 	bmi.w	8001b7c <_vfiprintf_r+0x44>
 8001d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d44:	e71c      	b.n	8001b80 <_vfiprintf_r+0x48>
 8001d46:	ab03      	add	r3, sp, #12
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	462a      	mov	r2, r5
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <_vfiprintf_r+0x22c>)
 8001d4e:	a904      	add	r1, sp, #16
 8001d50:	4630      	mov	r0, r6
 8001d52:	f000 f879 	bl	8001e48 <_printf_i>
 8001d56:	e7e4      	b.n	8001d22 <_vfiprintf_r+0x1ea>
 8001d58:	0800231c 	.word	0x0800231c
 8001d5c:	08002326 	.word	0x08002326
 8001d60:	00000000 	.word	0x00000000
 8001d64:	08001b13 	.word	0x08001b13
 8001d68:	08002322 	.word	0x08002322

08001d6c <_printf_common>:
 8001d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d70:	4616      	mov	r6, r2
 8001d72:	4699      	mov	r9, r3
 8001d74:	688a      	ldr	r2, [r1, #8]
 8001d76:	690b      	ldr	r3, [r1, #16]
 8001d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	bfb8      	it	lt
 8001d80:	4613      	movlt	r3, r2
 8001d82:	6033      	str	r3, [r6, #0]
 8001d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d88:	4607      	mov	r7, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	b10a      	cbz	r2, 8001d92 <_printf_common+0x26>
 8001d8e:	3301      	adds	r3, #1
 8001d90:	6033      	str	r3, [r6, #0]
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	0699      	lsls	r1, r3, #26
 8001d96:	bf42      	ittt	mi
 8001d98:	6833      	ldrmi	r3, [r6, #0]
 8001d9a:	3302      	addmi	r3, #2
 8001d9c:	6033      	strmi	r3, [r6, #0]
 8001d9e:	6825      	ldr	r5, [r4, #0]
 8001da0:	f015 0506 	ands.w	r5, r5, #6
 8001da4:	d106      	bne.n	8001db4 <_printf_common+0x48>
 8001da6:	f104 0a19 	add.w	sl, r4, #25
 8001daa:	68e3      	ldr	r3, [r4, #12]
 8001dac:	6832      	ldr	r2, [r6, #0]
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	42ab      	cmp	r3, r5
 8001db2:	dc26      	bgt.n	8001e02 <_printf_common+0x96>
 8001db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001db8:	1e13      	subs	r3, r2, #0
 8001dba:	6822      	ldr	r2, [r4, #0]
 8001dbc:	bf18      	it	ne
 8001dbe:	2301      	movne	r3, #1
 8001dc0:	0692      	lsls	r2, r2, #26
 8001dc2:	d42b      	bmi.n	8001e1c <_printf_common+0xb0>
 8001dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001dc8:	4649      	mov	r1, r9
 8001dca:	4638      	mov	r0, r7
 8001dcc:	47c0      	blx	r8
 8001dce:	3001      	adds	r0, #1
 8001dd0:	d01e      	beq.n	8001e10 <_printf_common+0xa4>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	6922      	ldr	r2, [r4, #16]
 8001dd6:	f003 0306 	and.w	r3, r3, #6
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf02      	ittt	eq
 8001dde:	68e5      	ldreq	r5, [r4, #12]
 8001de0:	6833      	ldreq	r3, [r6, #0]
 8001de2:	1aed      	subeq	r5, r5, r3
 8001de4:	68a3      	ldr	r3, [r4, #8]
 8001de6:	bf0c      	ite	eq
 8001de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001dec:	2500      	movne	r5, #0
 8001dee:	4293      	cmp	r3, r2
 8001df0:	bfc4      	itt	gt
 8001df2:	1a9b      	subgt	r3, r3, r2
 8001df4:	18ed      	addgt	r5, r5, r3
 8001df6:	2600      	movs	r6, #0
 8001df8:	341a      	adds	r4, #26
 8001dfa:	42b5      	cmp	r5, r6
 8001dfc:	d11a      	bne.n	8001e34 <_printf_common+0xc8>
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e008      	b.n	8001e14 <_printf_common+0xa8>
 8001e02:	2301      	movs	r3, #1
 8001e04:	4652      	mov	r2, sl
 8001e06:	4649      	mov	r1, r9
 8001e08:	4638      	mov	r0, r7
 8001e0a:	47c0      	blx	r8
 8001e0c:	3001      	adds	r0, #1
 8001e0e:	d103      	bne.n	8001e18 <_printf_common+0xac>
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e18:	3501      	adds	r5, #1
 8001e1a:	e7c6      	b.n	8001daa <_printf_common+0x3e>
 8001e1c:	18e1      	adds	r1, r4, r3
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	2030      	movs	r0, #48	; 0x30
 8001e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e26:	4422      	add	r2, r4
 8001e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e30:	3302      	adds	r3, #2
 8001e32:	e7c7      	b.n	8001dc4 <_printf_common+0x58>
 8001e34:	2301      	movs	r3, #1
 8001e36:	4622      	mov	r2, r4
 8001e38:	4649      	mov	r1, r9
 8001e3a:	4638      	mov	r0, r7
 8001e3c:	47c0      	blx	r8
 8001e3e:	3001      	adds	r0, #1
 8001e40:	d0e6      	beq.n	8001e10 <_printf_common+0xa4>
 8001e42:	3601      	adds	r6, #1
 8001e44:	e7d9      	b.n	8001dfa <_printf_common+0x8e>
	...

08001e48 <_printf_i>:
 8001e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e4c:	7e0f      	ldrb	r7, [r1, #24]
 8001e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e50:	2f78      	cmp	r7, #120	; 0x78
 8001e52:	4691      	mov	r9, r2
 8001e54:	4680      	mov	r8, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	469a      	mov	sl, r3
 8001e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e5e:	d807      	bhi.n	8001e70 <_printf_i+0x28>
 8001e60:	2f62      	cmp	r7, #98	; 0x62
 8001e62:	d80a      	bhi.n	8001e7a <_printf_i+0x32>
 8001e64:	2f00      	cmp	r7, #0
 8001e66:	f000 80d4 	beq.w	8002012 <_printf_i+0x1ca>
 8001e6a:	2f58      	cmp	r7, #88	; 0x58
 8001e6c:	f000 80c0 	beq.w	8001ff0 <_printf_i+0x1a8>
 8001e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e78:	e03a      	b.n	8001ef0 <_printf_i+0xa8>
 8001e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e7e:	2b15      	cmp	r3, #21
 8001e80:	d8f6      	bhi.n	8001e70 <_printf_i+0x28>
 8001e82:	a101      	add	r1, pc, #4	; (adr r1, 8001e88 <_printf_i+0x40>)
 8001e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e88:	08001ee1 	.word	0x08001ee1
 8001e8c:	08001ef5 	.word	0x08001ef5
 8001e90:	08001e71 	.word	0x08001e71
 8001e94:	08001e71 	.word	0x08001e71
 8001e98:	08001e71 	.word	0x08001e71
 8001e9c:	08001e71 	.word	0x08001e71
 8001ea0:	08001ef5 	.word	0x08001ef5
 8001ea4:	08001e71 	.word	0x08001e71
 8001ea8:	08001e71 	.word	0x08001e71
 8001eac:	08001e71 	.word	0x08001e71
 8001eb0:	08001e71 	.word	0x08001e71
 8001eb4:	08001ff9 	.word	0x08001ff9
 8001eb8:	08001f21 	.word	0x08001f21
 8001ebc:	08001fb3 	.word	0x08001fb3
 8001ec0:	08001e71 	.word	0x08001e71
 8001ec4:	08001e71 	.word	0x08001e71
 8001ec8:	0800201b 	.word	0x0800201b
 8001ecc:	08001e71 	.word	0x08001e71
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	08001e71 	.word	0x08001e71
 8001ed8:	08001e71 	.word	0x08001e71
 8001edc:	08001fbb 	.word	0x08001fbb
 8001ee0:	682b      	ldr	r3, [r5, #0]
 8001ee2:	1d1a      	adds	r2, r3, #4
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	602a      	str	r2, [r5, #0]
 8001ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e09f      	b.n	8002034 <_printf_i+0x1ec>
 8001ef4:	6820      	ldr	r0, [r4, #0]
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	0607      	lsls	r7, r0, #24
 8001efa:	f103 0104 	add.w	r1, r3, #4
 8001efe:	6029      	str	r1, [r5, #0]
 8001f00:	d501      	bpl.n	8001f06 <_printf_i+0xbe>
 8001f02:	681e      	ldr	r6, [r3, #0]
 8001f04:	e003      	b.n	8001f0e <_printf_i+0xc6>
 8001f06:	0646      	lsls	r6, r0, #25
 8001f08:	d5fb      	bpl.n	8001f02 <_printf_i+0xba>
 8001f0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001f0e:	2e00      	cmp	r6, #0
 8001f10:	da03      	bge.n	8001f1a <_printf_i+0xd2>
 8001f12:	232d      	movs	r3, #45	; 0x2d
 8001f14:	4276      	negs	r6, r6
 8001f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f1a:	485a      	ldr	r0, [pc, #360]	; (8002084 <_printf_i+0x23c>)
 8001f1c:	230a      	movs	r3, #10
 8001f1e:	e012      	b.n	8001f46 <_printf_i+0xfe>
 8001f20:	682b      	ldr	r3, [r5, #0]
 8001f22:	6820      	ldr	r0, [r4, #0]
 8001f24:	1d19      	adds	r1, r3, #4
 8001f26:	6029      	str	r1, [r5, #0]
 8001f28:	0605      	lsls	r5, r0, #24
 8001f2a:	d501      	bpl.n	8001f30 <_printf_i+0xe8>
 8001f2c:	681e      	ldr	r6, [r3, #0]
 8001f2e:	e002      	b.n	8001f36 <_printf_i+0xee>
 8001f30:	0641      	lsls	r1, r0, #25
 8001f32:	d5fb      	bpl.n	8001f2c <_printf_i+0xe4>
 8001f34:	881e      	ldrh	r6, [r3, #0]
 8001f36:	4853      	ldr	r0, [pc, #332]	; (8002084 <_printf_i+0x23c>)
 8001f38:	2f6f      	cmp	r7, #111	; 0x6f
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2308      	moveq	r3, #8
 8001f3e:	230a      	movne	r3, #10
 8001f40:	2100      	movs	r1, #0
 8001f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f46:	6865      	ldr	r5, [r4, #4]
 8001f48:	60a5      	str	r5, [r4, #8]
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	bfa2      	ittt	ge
 8001f4e:	6821      	ldrge	r1, [r4, #0]
 8001f50:	f021 0104 	bicge.w	r1, r1, #4
 8001f54:	6021      	strge	r1, [r4, #0]
 8001f56:	b90e      	cbnz	r6, 8001f5c <_printf_i+0x114>
 8001f58:	2d00      	cmp	r5, #0
 8001f5a:	d04b      	beq.n	8001ff4 <_printf_i+0x1ac>
 8001f5c:	4615      	mov	r5, r2
 8001f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f62:	fb03 6711 	mls	r7, r3, r1, r6
 8001f66:	5dc7      	ldrb	r7, [r0, r7]
 8001f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f6c:	4637      	mov	r7, r6
 8001f6e:	42bb      	cmp	r3, r7
 8001f70:	460e      	mov	r6, r1
 8001f72:	d9f4      	bls.n	8001f5e <_printf_i+0x116>
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d10b      	bne.n	8001f90 <_printf_i+0x148>
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	07de      	lsls	r6, r3, #31
 8001f7c:	d508      	bpl.n	8001f90 <_printf_i+0x148>
 8001f7e:	6923      	ldr	r3, [r4, #16]
 8001f80:	6861      	ldr	r1, [r4, #4]
 8001f82:	4299      	cmp	r1, r3
 8001f84:	bfde      	ittt	le
 8001f86:	2330      	movle	r3, #48	; 0x30
 8001f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f90:	1b52      	subs	r2, r2, r5
 8001f92:	6122      	str	r2, [r4, #16]
 8001f94:	f8cd a000 	str.w	sl, [sp]
 8001f98:	464b      	mov	r3, r9
 8001f9a:	aa03      	add	r2, sp, #12
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	4640      	mov	r0, r8
 8001fa0:	f7ff fee4 	bl	8001d6c <_printf_common>
 8001fa4:	3001      	adds	r0, #1
 8001fa6:	d14a      	bne.n	800203e <_printf_i+0x1f6>
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	b004      	add	sp, #16
 8001fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	f043 0320 	orr.w	r3, r3, #32
 8001fb8:	6023      	str	r3, [r4, #0]
 8001fba:	4833      	ldr	r0, [pc, #204]	; (8002088 <_printf_i+0x240>)
 8001fbc:	2778      	movs	r7, #120	; 0x78
 8001fbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001fc2:	6823      	ldr	r3, [r4, #0]
 8001fc4:	6829      	ldr	r1, [r5, #0]
 8001fc6:	061f      	lsls	r7, r3, #24
 8001fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fcc:	d402      	bmi.n	8001fd4 <_printf_i+0x18c>
 8001fce:	065f      	lsls	r7, r3, #25
 8001fd0:	bf48      	it	mi
 8001fd2:	b2b6      	uxthmi	r6, r6
 8001fd4:	07df      	lsls	r7, r3, #31
 8001fd6:	bf48      	it	mi
 8001fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8001fdc:	6029      	str	r1, [r5, #0]
 8001fde:	bf48      	it	mi
 8001fe0:	6023      	strmi	r3, [r4, #0]
 8001fe2:	b91e      	cbnz	r6, 8001fec <_printf_i+0x1a4>
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	f023 0320 	bic.w	r3, r3, #32
 8001fea:	6023      	str	r3, [r4, #0]
 8001fec:	2310      	movs	r3, #16
 8001fee:	e7a7      	b.n	8001f40 <_printf_i+0xf8>
 8001ff0:	4824      	ldr	r0, [pc, #144]	; (8002084 <_printf_i+0x23c>)
 8001ff2:	e7e4      	b.n	8001fbe <_printf_i+0x176>
 8001ff4:	4615      	mov	r5, r2
 8001ff6:	e7bd      	b.n	8001f74 <_printf_i+0x12c>
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	6826      	ldr	r6, [r4, #0]
 8001ffc:	6961      	ldr	r1, [r4, #20]
 8001ffe:	1d18      	adds	r0, r3, #4
 8002000:	6028      	str	r0, [r5, #0]
 8002002:	0635      	lsls	r5, r6, #24
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	d501      	bpl.n	800200c <_printf_i+0x1c4>
 8002008:	6019      	str	r1, [r3, #0]
 800200a:	e002      	b.n	8002012 <_printf_i+0x1ca>
 800200c:	0670      	lsls	r0, r6, #25
 800200e:	d5fb      	bpl.n	8002008 <_printf_i+0x1c0>
 8002010:	8019      	strh	r1, [r3, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	6123      	str	r3, [r4, #16]
 8002016:	4615      	mov	r5, r2
 8002018:	e7bc      	b.n	8001f94 <_printf_i+0x14c>
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	1d1a      	adds	r2, r3, #4
 800201e:	602a      	str	r2, [r5, #0]
 8002020:	681d      	ldr	r5, [r3, #0]
 8002022:	6862      	ldr	r2, [r4, #4]
 8002024:	2100      	movs	r1, #0
 8002026:	4628      	mov	r0, r5
 8002028:	f7fe f8d2 	bl	80001d0 <memchr>
 800202c:	b108      	cbz	r0, 8002032 <_printf_i+0x1ea>
 800202e:	1b40      	subs	r0, r0, r5
 8002030:	6060      	str	r0, [r4, #4]
 8002032:	6863      	ldr	r3, [r4, #4]
 8002034:	6123      	str	r3, [r4, #16]
 8002036:	2300      	movs	r3, #0
 8002038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800203c:	e7aa      	b.n	8001f94 <_printf_i+0x14c>
 800203e:	6923      	ldr	r3, [r4, #16]
 8002040:	462a      	mov	r2, r5
 8002042:	4649      	mov	r1, r9
 8002044:	4640      	mov	r0, r8
 8002046:	47d0      	blx	sl
 8002048:	3001      	adds	r0, #1
 800204a:	d0ad      	beq.n	8001fa8 <_printf_i+0x160>
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	079b      	lsls	r3, r3, #30
 8002050:	d413      	bmi.n	800207a <_printf_i+0x232>
 8002052:	68e0      	ldr	r0, [r4, #12]
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	4298      	cmp	r0, r3
 8002058:	bfb8      	it	lt
 800205a:	4618      	movlt	r0, r3
 800205c:	e7a6      	b.n	8001fac <_printf_i+0x164>
 800205e:	2301      	movs	r3, #1
 8002060:	4632      	mov	r2, r6
 8002062:	4649      	mov	r1, r9
 8002064:	4640      	mov	r0, r8
 8002066:	47d0      	blx	sl
 8002068:	3001      	adds	r0, #1
 800206a:	d09d      	beq.n	8001fa8 <_printf_i+0x160>
 800206c:	3501      	adds	r5, #1
 800206e:	68e3      	ldr	r3, [r4, #12]
 8002070:	9903      	ldr	r1, [sp, #12]
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	42ab      	cmp	r3, r5
 8002076:	dcf2      	bgt.n	800205e <_printf_i+0x216>
 8002078:	e7eb      	b.n	8002052 <_printf_i+0x20a>
 800207a:	2500      	movs	r5, #0
 800207c:	f104 0619 	add.w	r6, r4, #25
 8002080:	e7f5      	b.n	800206e <_printf_i+0x226>
 8002082:	bf00      	nop
 8002084:	0800232d 	.word	0x0800232d
 8002088:	0800233e 	.word	0x0800233e

0800208c <__swbuf_r>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	460e      	mov	r6, r1
 8002090:	4614      	mov	r4, r2
 8002092:	4605      	mov	r5, r0
 8002094:	b118      	cbz	r0, 800209e <__swbuf_r+0x12>
 8002096:	6a03      	ldr	r3, [r0, #32]
 8002098:	b90b      	cbnz	r3, 800209e <__swbuf_r+0x12>
 800209a:	f7ff fb25 	bl	80016e8 <__sinit>
 800209e:	69a3      	ldr	r3, [r4, #24]
 80020a0:	60a3      	str	r3, [r4, #8]
 80020a2:	89a3      	ldrh	r3, [r4, #12]
 80020a4:	071a      	lsls	r2, r3, #28
 80020a6:	d525      	bpl.n	80020f4 <__swbuf_r+0x68>
 80020a8:	6923      	ldr	r3, [r4, #16]
 80020aa:	b31b      	cbz	r3, 80020f4 <__swbuf_r+0x68>
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	6922      	ldr	r2, [r4, #16]
 80020b0:	1a98      	subs	r0, r3, r2
 80020b2:	6963      	ldr	r3, [r4, #20]
 80020b4:	b2f6      	uxtb	r6, r6
 80020b6:	4283      	cmp	r3, r0
 80020b8:	4637      	mov	r7, r6
 80020ba:	dc04      	bgt.n	80020c6 <__swbuf_r+0x3a>
 80020bc:	4621      	mov	r1, r4
 80020be:	4628      	mov	r0, r5
 80020c0:	f7ff fa5c 	bl	800157c <_fflush_r>
 80020c4:	b9e0      	cbnz	r0, 8002100 <__swbuf_r+0x74>
 80020c6:	68a3      	ldr	r3, [r4, #8]
 80020c8:	3b01      	subs	r3, #1
 80020ca:	60a3      	str	r3, [r4, #8]
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	6022      	str	r2, [r4, #0]
 80020d2:	701e      	strb	r6, [r3, #0]
 80020d4:	6962      	ldr	r2, [r4, #20]
 80020d6:	1c43      	adds	r3, r0, #1
 80020d8:	429a      	cmp	r2, r3
 80020da:	d004      	beq.n	80020e6 <__swbuf_r+0x5a>
 80020dc:	89a3      	ldrh	r3, [r4, #12]
 80020de:	07db      	lsls	r3, r3, #31
 80020e0:	d506      	bpl.n	80020f0 <__swbuf_r+0x64>
 80020e2:	2e0a      	cmp	r6, #10
 80020e4:	d104      	bne.n	80020f0 <__swbuf_r+0x64>
 80020e6:	4621      	mov	r1, r4
 80020e8:	4628      	mov	r0, r5
 80020ea:	f7ff fa47 	bl	800157c <_fflush_r>
 80020ee:	b938      	cbnz	r0, 8002100 <__swbuf_r+0x74>
 80020f0:	4638      	mov	r0, r7
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f4:	4621      	mov	r1, r4
 80020f6:	4628      	mov	r0, r5
 80020f8:	f000 f806 	bl	8002108 <__swsetup_r>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d0d5      	beq.n	80020ac <__swbuf_r+0x20>
 8002100:	f04f 37ff 	mov.w	r7, #4294967295
 8002104:	e7f4      	b.n	80020f0 <__swbuf_r+0x64>
	...

08002108 <__swsetup_r>:
 8002108:	b538      	push	{r3, r4, r5, lr}
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <__swsetup_r+0xac>)
 800210c:	4605      	mov	r5, r0
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	460c      	mov	r4, r1
 8002112:	b118      	cbz	r0, 800211c <__swsetup_r+0x14>
 8002114:	6a03      	ldr	r3, [r0, #32]
 8002116:	b90b      	cbnz	r3, 800211c <__swsetup_r+0x14>
 8002118:	f7ff fae6 	bl	80016e8 <__sinit>
 800211c:	89a3      	ldrh	r3, [r4, #12]
 800211e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002122:	0718      	lsls	r0, r3, #28
 8002124:	d422      	bmi.n	800216c <__swsetup_r+0x64>
 8002126:	06d9      	lsls	r1, r3, #27
 8002128:	d407      	bmi.n	800213a <__swsetup_r+0x32>
 800212a:	2309      	movs	r3, #9
 800212c:	602b      	str	r3, [r5, #0]
 800212e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	e034      	b.n	80021a4 <__swsetup_r+0x9c>
 800213a:	0758      	lsls	r0, r3, #29
 800213c:	d512      	bpl.n	8002164 <__swsetup_r+0x5c>
 800213e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002140:	b141      	cbz	r1, 8002154 <__swsetup_r+0x4c>
 8002142:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002146:	4299      	cmp	r1, r3
 8002148:	d002      	beq.n	8002150 <__swsetup_r+0x48>
 800214a:	4628      	mov	r0, r5
 800214c:	f7ff fbd2 	bl	80018f4 <_free_r>
 8002150:	2300      	movs	r3, #0
 8002152:	6363      	str	r3, [r4, #52]	; 0x34
 8002154:	89a3      	ldrh	r3, [r4, #12]
 8002156:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	2300      	movs	r3, #0
 800215e:	6063      	str	r3, [r4, #4]
 8002160:	6923      	ldr	r3, [r4, #16]
 8002162:	6023      	str	r3, [r4, #0]
 8002164:	89a3      	ldrh	r3, [r4, #12]
 8002166:	f043 0308 	orr.w	r3, r3, #8
 800216a:	81a3      	strh	r3, [r4, #12]
 800216c:	6923      	ldr	r3, [r4, #16]
 800216e:	b94b      	cbnz	r3, 8002184 <__swsetup_r+0x7c>
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217a:	d003      	beq.n	8002184 <__swsetup_r+0x7c>
 800217c:	4621      	mov	r1, r4
 800217e:	4628      	mov	r0, r5
 8002180:	f000 f850 	bl	8002224 <__smakebuf_r>
 8002184:	89a0      	ldrh	r0, [r4, #12]
 8002186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800218a:	f010 0301 	ands.w	r3, r0, #1
 800218e:	d00a      	beq.n	80021a6 <__swsetup_r+0x9e>
 8002190:	2300      	movs	r3, #0
 8002192:	60a3      	str	r3, [r4, #8]
 8002194:	6963      	ldr	r3, [r4, #20]
 8002196:	425b      	negs	r3, r3
 8002198:	61a3      	str	r3, [r4, #24]
 800219a:	6923      	ldr	r3, [r4, #16]
 800219c:	b943      	cbnz	r3, 80021b0 <__swsetup_r+0xa8>
 800219e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80021a2:	d1c4      	bne.n	800212e <__swsetup_r+0x26>
 80021a4:	bd38      	pop	{r3, r4, r5, pc}
 80021a6:	0781      	lsls	r1, r0, #30
 80021a8:	bf58      	it	pl
 80021aa:	6963      	ldrpl	r3, [r4, #20]
 80021ac:	60a3      	str	r3, [r4, #8]
 80021ae:	e7f4      	b.n	800219a <__swsetup_r+0x92>
 80021b0:	2000      	movs	r0, #0
 80021b2:	e7f7      	b.n	80021a4 <__swsetup_r+0x9c>
 80021b4:	20000064 	.word	0x20000064

080021b8 <_sbrk_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4d06      	ldr	r5, [pc, #24]	; (80021d4 <_sbrk_r+0x1c>)
 80021bc:	2300      	movs	r3, #0
 80021be:	4604      	mov	r4, r0
 80021c0:	4608      	mov	r0, r1
 80021c2:	602b      	str	r3, [r5, #0]
 80021c4:	f7fe fb42 	bl	800084c <_sbrk>
 80021c8:	1c43      	adds	r3, r0, #1
 80021ca:	d102      	bne.n	80021d2 <_sbrk_r+0x1a>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b103      	cbz	r3, 80021d2 <_sbrk_r+0x1a>
 80021d0:	6023      	str	r3, [r4, #0]
 80021d2:	bd38      	pop	{r3, r4, r5, pc}
 80021d4:	200001cc 	.word	0x200001cc

080021d8 <__swhatbuf_r>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	460c      	mov	r4, r1
 80021dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e0:	2900      	cmp	r1, #0
 80021e2:	b096      	sub	sp, #88	; 0x58
 80021e4:	4615      	mov	r5, r2
 80021e6:	461e      	mov	r6, r3
 80021e8:	da0d      	bge.n	8002206 <__swhatbuf_r+0x2e>
 80021ea:	89a3      	ldrh	r3, [r4, #12]
 80021ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	bf0c      	ite	eq
 80021f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80021fa:	2340      	movne	r3, #64	; 0x40
 80021fc:	2000      	movs	r0, #0
 80021fe:	6031      	str	r1, [r6, #0]
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	b016      	add	sp, #88	; 0x58
 8002204:	bd70      	pop	{r4, r5, r6, pc}
 8002206:	466a      	mov	r2, sp
 8002208:	f000 f848 	bl	800229c <_fstat_r>
 800220c:	2800      	cmp	r0, #0
 800220e:	dbec      	blt.n	80021ea <__swhatbuf_r+0x12>
 8002210:	9901      	ldr	r1, [sp, #4]
 8002212:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002216:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800221a:	4259      	negs	r1, r3
 800221c:	4159      	adcs	r1, r3
 800221e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002222:	e7eb      	b.n	80021fc <__swhatbuf_r+0x24>

08002224 <__smakebuf_r>:
 8002224:	898b      	ldrh	r3, [r1, #12]
 8002226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002228:	079d      	lsls	r5, r3, #30
 800222a:	4606      	mov	r6, r0
 800222c:	460c      	mov	r4, r1
 800222e:	d507      	bpl.n	8002240 <__smakebuf_r+0x1c>
 8002230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	6123      	str	r3, [r4, #16]
 8002238:	2301      	movs	r3, #1
 800223a:	6163      	str	r3, [r4, #20]
 800223c:	b002      	add	sp, #8
 800223e:	bd70      	pop	{r4, r5, r6, pc}
 8002240:	ab01      	add	r3, sp, #4
 8002242:	466a      	mov	r2, sp
 8002244:	f7ff ffc8 	bl	80021d8 <__swhatbuf_r>
 8002248:	9900      	ldr	r1, [sp, #0]
 800224a:	4605      	mov	r5, r0
 800224c:	4630      	mov	r0, r6
 800224e:	f7ff fbbd 	bl	80019cc <_malloc_r>
 8002252:	b948      	cbnz	r0, 8002268 <__smakebuf_r+0x44>
 8002254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002258:	059a      	lsls	r2, r3, #22
 800225a:	d4ef      	bmi.n	800223c <__smakebuf_r+0x18>
 800225c:	f023 0303 	bic.w	r3, r3, #3
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	81a3      	strh	r3, [r4, #12]
 8002266:	e7e3      	b.n	8002230 <__smakebuf_r+0xc>
 8002268:	89a3      	ldrh	r3, [r4, #12]
 800226a:	6020      	str	r0, [r4, #0]
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	81a3      	strh	r3, [r4, #12]
 8002272:	9b00      	ldr	r3, [sp, #0]
 8002274:	6163      	str	r3, [r4, #20]
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	6120      	str	r0, [r4, #16]
 800227a:	b15b      	cbz	r3, 8002294 <__smakebuf_r+0x70>
 800227c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002280:	4630      	mov	r0, r6
 8002282:	f000 f81d 	bl	80022c0 <_isatty_r>
 8002286:	b128      	cbz	r0, 8002294 <__smakebuf_r+0x70>
 8002288:	89a3      	ldrh	r3, [r4, #12]
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	81a3      	strh	r3, [r4, #12]
 8002294:	89a3      	ldrh	r3, [r4, #12]
 8002296:	431d      	orrs	r5, r3
 8002298:	81a5      	strh	r5, [r4, #12]
 800229a:	e7cf      	b.n	800223c <__smakebuf_r+0x18>

0800229c <_fstat_r>:
 800229c:	b538      	push	{r3, r4, r5, lr}
 800229e:	4d07      	ldr	r5, [pc, #28]	; (80022bc <_fstat_r+0x20>)
 80022a0:	2300      	movs	r3, #0
 80022a2:	4604      	mov	r4, r0
 80022a4:	4608      	mov	r0, r1
 80022a6:	4611      	mov	r1, r2
 80022a8:	602b      	str	r3, [r5, #0]
 80022aa:	f7fe faa6 	bl	80007fa <_fstat>
 80022ae:	1c43      	adds	r3, r0, #1
 80022b0:	d102      	bne.n	80022b8 <_fstat_r+0x1c>
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	b103      	cbz	r3, 80022b8 <_fstat_r+0x1c>
 80022b6:	6023      	str	r3, [r4, #0]
 80022b8:	bd38      	pop	{r3, r4, r5, pc}
 80022ba:	bf00      	nop
 80022bc:	200001cc 	.word	0x200001cc

080022c0 <_isatty_r>:
 80022c0:	b538      	push	{r3, r4, r5, lr}
 80022c2:	4d06      	ldr	r5, [pc, #24]	; (80022dc <_isatty_r+0x1c>)
 80022c4:	2300      	movs	r3, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	602b      	str	r3, [r5, #0]
 80022cc:	f7fe faa5 	bl	800081a <_isatty>
 80022d0:	1c43      	adds	r3, r0, #1
 80022d2:	d102      	bne.n	80022da <_isatty_r+0x1a>
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	b103      	cbz	r3, 80022da <_isatty_r+0x1a>
 80022d8:	6023      	str	r3, [r4, #0]
 80022da:	bd38      	pop	{r3, r4, r5, pc}
 80022dc:	200001cc 	.word	0x200001cc

080022e0 <_init>:
 80022e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022e2:	bf00      	nop
 80022e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022e6:	bc08      	pop	{r3}
 80022e8:	469e      	mov	lr, r3
 80022ea:	4770      	bx	lr

080022ec <_fini>:
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	bf00      	nop
 80022f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022f2:	bc08      	pop	{r3}
 80022f4:	469e      	mov	lr, r3
 80022f6:	4770      	bx	lr
