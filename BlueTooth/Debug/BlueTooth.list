
BlueTooth.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000988c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009ad8  08009ad8  00019ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b18  08009b18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b18  08009b18  00019b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b20  08009b20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b24  08009b24  00019b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08009b34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08009b34  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c45  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4a  00000000  00000000  00030cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00032b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093d  00000000  00000000  000336f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f6de  00000000  00000000  00034035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010e5d  00000000  00000000  00063713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012c143  00000000  00000000  00074570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000315c  00000000  00000000  001a06b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001a3810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08009ac0 	.word	0x08009ac0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08009ac0 	.word	0x08009ac0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */

	if (huart == &huart2)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x44>)
 80005bc:	4293      	cmp	r3, r2
 80005be:	d112      	bne.n	80005e6 <HAL_UARTEx_RxEventCallback+0x3a>
	{
		HAL_UART_Transmit_DMA(&huart3, receivedData, Size);
 80005c0:	887b      	ldrh	r3, [r7, #2]
 80005c2:	461a      	mov	r2, r3
 80005c4:	490b      	ldr	r1, [pc, #44]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x48>)
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <HAL_UARTEx_RxEventCallback+0x4c>)
 80005c8:	f007 fe72 	bl	80082b0 <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receivedData, sizeof(receivedData));
 80005cc:	2232      	movs	r2, #50	; 0x32
 80005ce:	4909      	ldr	r1, [pc, #36]	; (80005f4 <HAL_UARTEx_RxEventCallback+0x48>)
 80005d0:	4807      	ldr	r0, [pc, #28]	; (80005f0 <HAL_UARTEx_RxEventCallback+0x44>)
 80005d2:	f009 f9a6 	bl	8009922 <HAL_UARTEx_ReceiveToIdle_DMA>

		__HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel7, DMA_IT_HT);
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <HAL_UARTEx_RxEventCallback+0x50>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <HAL_UARTEx_RxEventCallback+0x50>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80005e4:	615a      	str	r2, [r3, #20]
	}

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	20000240 	.word	0x20000240
 80005f8:	200000bc 	.word	0x200000bc
 80005fc:	20000150 	.word	0x20000150

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000604:	f000 fc02 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000608:	f000 f81e 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060c:	f000 f93c 	bl	8000888 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000610:	f000 f872 	bl	80006f8 <MX_GPDMA1_Init>
  MX_MEMORYMAP_Init();
 8000614:	f000 f898 	bl	8000748 <MX_MEMORYMAP_Init>
  MX_USART2_UART_Init();
 8000618:	f000 f89e 	bl	8000758 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f8e8 	bl	80007f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, receivedData, sizeof(receivedData));
 8000620:	2232      	movs	r2, #50	; 0x32
 8000622:	4906      	ldr	r1, [pc, #24]	; (800063c <main+0x3c>)
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <main+0x40>)
 8000626:	f009 f97c 	bl	8009922 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&handle_GPDMA1_Channel7, DMA_IT_HT);
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <main+0x44>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	695a      	ldr	r2, [r3, #20]
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <main+0x44>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000638:	615a      	str	r2, [r3, #20]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	e7fe      	b.n	800063a <main+0x3a>
 800063c:	20000240 	.word	0x20000240
 8000640:	20000028 	.word	0x20000028
 8000644:	20000150 	.word	0x20000150

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b09c      	sub	sp, #112	; 0x70
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2250      	movs	r2, #80	; 0x50
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fa06 	bl	8009a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
 800066c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <SystemClock_Config+0xac>)
 8000670:	691b      	ldr	r3, [r3, #16]
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <SystemClock_Config+0xac>)
 8000674:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000678:	6113      	str	r3, [r2, #16]
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <SystemClock_Config+0xac>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000686:	bf00      	nop
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <SystemClock_Config+0xac>)
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	f003 0308 	and.w	r3, r3, #8
 8000690:	2b08      	cmp	r3, #8
 8000692:	d1f9      	bne.n	8000688 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800069c:	2308      	movs	r3, #8
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 fde3 	bl	8002278 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006b8:	f000 f900 	bl	80008bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	231f      	movs	r3, #31
 80006be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2101      	movs	r1, #1
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fa04 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006e6:	f000 f8e9 	bl	80008bc <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3770      	adds	r7, #112	; 0x70
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	44020800 	.word	0x44020800

080006f8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_GPDMA1_Init+0x4c>)
 8000700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <MX_GPDMA1_Init+0x4c>)
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_GPDMA1_Init+0x4c>)
 8000710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel6_IRQn, 0, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2100      	movs	r1, #0
 8000720:	2021      	movs	r0, #33	; 0x21
 8000722:	f000 fcca 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel6_IRQn);
 8000726:	2021      	movs	r0, #33	; 0x21
 8000728:	f000 fce1 	bl	80010ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel7_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	2022      	movs	r0, #34	; 0x22
 8000732:	f000 fcc2 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel7_IRQn);
 8000736:	2022      	movs	r0, #34	; 0x22
 8000738:	f000 fcd9 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	44020c00 	.word	0x44020c00

08000748 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 800075e:	4a23      	ldr	r2, [pc, #140]	; (80007ec <MX_USART2_UART_Init+0x94>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000762:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000764:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000794:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079a:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a0:	4811      	ldr	r0, [pc, #68]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 80007a2:	f007 fd35 	bl	8008210 <HAL_UART_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007ac:	f000 f886 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 80007b4:	f009 f839 	bl	800982a <HAL_UARTEx_SetTxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007be:	f000 f87d 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4808      	ldr	r0, [pc, #32]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 80007c6:	f009 f86e 	bl	80098a6 <HAL_UARTEx_SetRxFifoThreshold>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f874 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <MX_USART2_UART_Init+0x90>)
 80007d6:	f008 ffef 	bl	80097b8 <HAL_UARTEx_DisableFifoMode>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f000 f86c 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000028 	.word	0x20000028
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f4:	4b22      	ldr	r3, [pc, #136]	; (8000880 <MX_USART3_UART_Init+0x90>)
 80007f6:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_USART3_UART_Init+0x94>)
 80007f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fa:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_USART3_UART_Init+0x90>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000800:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000816:	220c      	movs	r2, #12
 8000818:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000826:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x90>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800083a:	f007 fce9 	bl	8008210 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000844:	f000 f83a 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000848:	2100      	movs	r1, #0
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800084c:	f008 ffed 	bl	800982a <HAL_UARTEx_SetTxFifoThreshold>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000856:	f000 f831 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085a:	2100      	movs	r1, #0
 800085c:	4808      	ldr	r0, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800085e:	f009 f822 	bl	80098a6 <HAL_UARTEx_SetRxFifoThreshold>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000868:	f000 f828 	bl	80008bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	; (8000880 <MX_USART3_UART_Init+0x90>)
 800086e:	f008 ffa3 	bl	80097b8 <HAL_UARTEx_DisableFifoMode>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000878:	f000 f820 	bl	80008bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000bc 	.word	0x200000bc
 8000884:	40004800 	.word	0x40004800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <MX_GPIO_Init+0x30>)
 8000890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <MX_GPIO_Init+0x30>)
 8000896:	f043 0308 	orr.w	r3, r3, #8
 800089a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x30>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	44020c00 	.word	0x44020c00

080008bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c0:	b672      	cpsid	i
}
 80008c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <Error_Handler+0x8>

080008c6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b0ce      	sub	sp, #312	; 0x138
 80008d8:	af00      	add	r7, sp, #0
 80008da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008e2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80008fc:	4618      	mov	r0, r3
 80008fe:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000902:	461a      	mov	r2, r3
 8000904:	2100      	movs	r1, #0
 8000906:	f009 f8af 	bl	8009a68 <memset>
  if(huart->Instance==USART2)
 800090a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800090e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4ab9      	ldr	r2, [pc, #740]	; (8000bfc <HAL_UART_MspInit+0x328>)
 8000918:	4293      	cmp	r3, r2
 800091a:	f040 80fb 	bne.w	8000b14 <HAL_UART_MspInit+0x240>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000922:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000926:	f04f 0202 	mov.w	r2, #2
 800092a:	f04f 0300 	mov.w	r3, #0
 800092e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000932:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000936:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800093a:	2200      	movs	r2, #0
 800093c:	661a      	str	r2, [r3, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	4618      	mov	r0, r3
 8000944:	f002 fc12 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 800094e:	f7ff ffb5 	bl	80008bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000952:	4bab      	ldr	r3, [pc, #684]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000954:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000958:	4aa9      	ldr	r2, [pc, #676]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 800095a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000962:	4ba7      	ldr	r3, [pc, #668]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000964:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000968:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 800096c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000970:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800097a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800097e:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000980:	4b9f      	ldr	r3, [pc, #636]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000982:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000986:	4a9e      	ldr	r2, [pc, #632]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000990:	4b9b      	ldr	r3, [pc, #620]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000996:	f003 0208 	and.w	r2, r3, #8
 800099a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800099e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009a8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009ac:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c6:	2307      	movs	r3, #7
 80009c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80009d0:	4619      	mov	r1, r3
 80009d2:	488c      	ldr	r0, [pc, #560]	; (8000c04 <HAL_UART_MspInit+0x330>)
 80009d4:	f001 fafe 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* GPDMA1_REQUEST_USART2_TX Init */
    handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 80009d8:	4b8b      	ldr	r3, [pc, #556]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009da:	4a8c      	ldr	r2, [pc, #560]	; (8000c0c <HAL_UART_MspInit+0x338>)
 80009dc:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel7.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80009de:	4b8a      	ldr	r3, [pc, #552]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009e0:	2218      	movs	r2, #24
 80009e2:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel7.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80009e4:	4b88      	ldr	r3, [pc, #544]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel7.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ea:	4b87      	ldr	r3, [pc, #540]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f0:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel7.Init.SrcInc = DMA_SINC_INCREMENTED;
 80009f2:	4b85      	ldr	r3, [pc, #532]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009f4:	2208      	movs	r2, #8
 80009f6:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel7.Init.DestInc = DMA_DINC_FIXED;
 80009f8:	4b83      	ldr	r3, [pc, #524]	; (8000c08 <HAL_UART_MspInit+0x334>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel7.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80009fe:	4b82      	ldr	r3, [pc, #520]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel7.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000a04:	4b80      	ldr	r3, [pc, #512]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel7.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a0a:	4b7f      	ldr	r3, [pc, #508]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel7.Init.SrcBurstLength = 1;
 8000a10:	4b7d      	ldr	r3, [pc, #500]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel7.Init.DestBurstLength = 1;
 8000a16:	4b7c      	ldr	r3, [pc, #496]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel7.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000a1c:	4b7a      	ldr	r3, [pc, #488]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel7.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000a22:	4b79      	ldr	r3, [pc, #484]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel7.Init.Mode = DMA_NORMAL;
 8000a28:	4b77      	ldr	r3, [pc, #476]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 8000a2e:	4876      	ldr	r0, [pc, #472]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a30:	f000 fb78 	bl	8001124 <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000a3a:	f7ff ff3f 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmatx, handle_GPDMA1_Channel7);
 8000a3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a42:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a6f      	ldr	r2, [pc, #444]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a4a:	67da      	str	r2, [r3, #124]	; 0x7c
 8000a4c:	4a6e      	ldr	r2, [pc, #440]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a52:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000a5a:	2110      	movs	r1, #16
 8000a5c:	486a      	ldr	r0, [pc, #424]	; (8000c08 <HAL_UART_MspInit+0x334>)
 8000a5e:	f000 ff10 	bl	8001882 <HAL_DMA_ConfigChannelAttributes>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <HAL_UART_MspInit+0x198>
    {
      Error_Handler();
 8000a68:	f7ff ff28 	bl	80008bc <Error_Handler>
    }

    /* GPDMA1_REQUEST_USART2_RX Init */
    handle_GPDMA1_Channel6.Instance = GPDMA1_Channel6;
 8000a6c:	4b68      	ldr	r3, [pc, #416]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a6e:	4a69      	ldr	r2, [pc, #420]	; (8000c14 <HAL_UART_MspInit+0x340>)
 8000a70:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel6.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8000a72:	4b67      	ldr	r3, [pc, #412]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a74:	2217      	movs	r2, #23
 8000a76:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel6.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8000a78:	4b65      	ldr	r3, [pc, #404]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel6.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a7e:	4b64      	ldr	r3, [pc, #400]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel6.Init.SrcInc = DMA_SINC_FIXED;
 8000a84:	4b62      	ldr	r3, [pc, #392]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel6.Init.DestInc = DMA_DINC_INCREMENTED;
 8000a8a:	4b61      	ldr	r3, [pc, #388]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a90:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel6.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8000a92:	4b5f      	ldr	r3, [pc, #380]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel6.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8000a98:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel6.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8000a9e:	4b5c      	ldr	r3, [pc, #368]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel6.Init.SrcBurstLength = 1;
 8000aa4:	4b5a      	ldr	r3, [pc, #360]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
    handle_GPDMA1_Channel6.Init.DestBurstLength = 1;
 8000aaa:	4b59      	ldr	r3, [pc, #356]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
    handle_GPDMA1_Channel6.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	62da      	str	r2, [r3, #44]	; 0x2c
    handle_GPDMA1_Channel6.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8000ab6:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
    handle_GPDMA1_Channel6.Init.Mode = DMA_NORMAL;
 8000abc:	4b54      	ldr	r3, [pc, #336]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel6) != HAL_OK)
 8000ac2:	4853      	ldr	r0, [pc, #332]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000ac4:	f000 fb2e 	bl	8001124 <HAL_DMA_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_UART_MspInit+0x1fe>
    {
      Error_Handler();
 8000ace:	f7ff fef5 	bl	80008bc <Error_Handler>
    }

    __HAL_LINKDMA(huart, hdmarx, handle_GPDMA1_Channel6);
 8000ad2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ad6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a4c      	ldr	r2, [pc, #304]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000ade:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000ae2:	4a4b      	ldr	r2, [pc, #300]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000ae4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ae8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel6, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000af0:	2110      	movs	r1, #16
 8000af2:	4847      	ldr	r0, [pc, #284]	; (8000c10 <HAL_UART_MspInit+0x33c>)
 8000af4:	f000 fec5 	bl	8001882 <HAL_DMA_ConfigChannelAttributes>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_UART_MspInit+0x22e>
    {
      Error_Handler();
 8000afe:	f7ff fedd 	bl	80008bc <Error_Handler>
    }

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	203b      	movs	r0, #59	; 0x3b
 8000b08:	f000 fad7 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b0c:	203b      	movs	r0, #59	; 0x3b
 8000b0e:	f000 faee 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b12:	e06e      	b.n	8000bf2 <HAL_UART_MspInit+0x31e>
  else if(huart->Instance==USART3)
 8000b14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a3d      	ldr	r2, [pc, #244]	; (8000c18 <HAL_UART_MspInit+0x344>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d165      	bne.n	8000bf2 <HAL_UART_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b2a:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000b2e:	f04f 0204 	mov.w	r2, #4
 8000b32:	f04f 0300 	mov.w	r3, #0
 8000b36:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b3a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b3e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000b42:	2200      	movs	r2, #0
 8000b44:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b46:	f107 0318 	add.w	r3, r7, #24
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fb0e 	bl	800316c <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_UART_MspInit+0x286>
      Error_Handler();
 8000b56:	f7ff feb1 	bl	80008bc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5a:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b60:	4a27      	ldr	r2, [pc, #156]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b66:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000b70:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 8000b74:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000b86:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x32c>)
 8000b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b9e:	f003 0208 	and.w	r2, r3, #8
 8000ba2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8000bb4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_UART_MspInit+0x330>)
 8000bde:	f001 f9f9 	bl	8001fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	203c      	movs	r0, #60	; 0x3c
 8000be8:	f000 fa67 	bl	80010ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000bec:	203c      	movs	r0, #60	; 0x3c
 8000bee:	f000 fa7e 	bl	80010ee <HAL_NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40004400 	.word	0x40004400
 8000c00:	44020c00 	.word	0x44020c00
 8000c04:	42020c00 	.word	0x42020c00
 8000c08:	20000150 	.word	0x20000150
 8000c0c:	400203d0 	.word	0x400203d0
 8000c10:	200001c8 	.word	0x200001c8
 8000c14:	40020350 	.word	0x40020350
 8000c18:	40004800 	.word	0x40004800

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f92c 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <GPDMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 6 global interrupt.
  */
void GPDMA1_Channel6_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 0 */

  /* USER CODE END GPDMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel6);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <GPDMA1_Channel6_IRQHandler+0x10>)
 8000c76:	f000 fc8a 	bl	800158e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel6_IRQn 1 */

  /* USER CODE END GPDMA1_Channel6_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200001c8 	.word	0x200001c8

08000c84 <GPDMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 7 global interrupt.
  */
void GPDMA1_Channel7_IRQHandler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 0 */

  /* USER CODE END GPDMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel7);
 8000c88:	4802      	ldr	r0, [pc, #8]	; (8000c94 <GPDMA1_Channel7_IRQHandler+0x10>)
 8000c8a:	f000 fc80 	bl	800158e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel7_IRQn 1 */

  /* USER CODE END GPDMA1_Channel7_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20000150 	.word	0x20000150

08000c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <USART2_IRQHandler+0x10>)
 8000c9e:	f007 fbcf 	bl	8008440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000028 	.word	0x20000028

08000cac <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <USART3_IRQHandler+0x10>)
 8000cb2:	f007 fbc5 	bl	8008440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000bc 	.word	0x200000bc

08000cc0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cc6:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <SystemInit+0xdc>)
 8000cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ccc:	4a33      	ldr	r2, [pc, #204]	; (8000d9c <SystemInit+0xdc>)
 8000cce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <SystemInit+0xe0>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <SystemInit+0xe0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <SystemInit+0xe0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <SystemInit+0xe0>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	492c      	ldr	r1, [pc, #176]	; (8000da0 <SystemInit+0xe0>)
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <SystemInit+0xe4>)
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SystemInit+0xe0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <SystemInit+0xe0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <SystemInit+0xe0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <SystemInit+0xe0>)
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <SystemInit+0xe8>)
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000d0c:	4b24      	ldr	r3, [pc, #144]	; (8000da0 <SystemInit+0xe0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000d12:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <SystemInit+0xe0>)
 8000d14:	4a24      	ldr	r2, [pc, #144]	; (8000da8 <SystemInit+0xe8>)
 8000d16:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000d18:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <SystemInit+0xe0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <SystemInit+0xe0>)
 8000d20:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <SystemInit+0xe8>)
 8000d22:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <SystemInit+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <SystemInit+0xe0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	; (8000da0 <SystemInit+0xe0>)
 8000d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <SystemInit+0xe0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <SystemInit+0xdc>)
 8000d3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d42:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <SystemInit+0xec>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000d4c:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000d54:	d003      	beq.n	8000d5e <SystemInit+0x9e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000d5c:	d117      	bne.n	8000d8e <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000d5e:	4b13      	ldr	r3, [pc, #76]	; (8000dac <SystemInit+0xec>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d005      	beq.n	8000d76 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	; (8000dac <SystemInit+0xec>)
 8000d6c:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <SystemInit+0xf0>)
 8000d6e:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <SystemInit+0xec>)
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <SystemInit+0xf4>)
 8000d74:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <SystemInit+0xec>)
 8000d78:	69db      	ldr	r3, [r3, #28]
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <SystemInit+0xec>)
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <SystemInit+0xec>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a09      	ldr	r2, [pc, #36]	; (8000dac <SystemInit+0xec>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	61d3      	str	r3, [r2, #28]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	44020c00 	.word	0x44020c00
 8000da4:	eae2eae3 	.word	0xeae2eae3
 8000da8:	01010280 	.word	0x01010280
 8000dac:	40022000 	.word	0x40022000
 8000db0:	08192a3b 	.word	0x08192a3b
 8000db4:	4c5d6e7f 	.word	0x4c5d6e7f

08000db8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	480d      	ldr	r0, [pc, #52]	; (8000df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dbc:	f7ff ff80 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc0:	480c      	ldr	r0, [pc, #48]	; (8000df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc2:	490d      	ldr	r1, [pc, #52]	; (8000df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc4:	4a0d      	ldr	r2, [pc, #52]	; (8000dfc <LoopForever+0xe>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc8:	e002      	b.n	8000dd0 <LoopCopyDataInit>

08000dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dce:	3304      	adds	r3, #4

08000dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd4:	d3f9      	bcc.n	8000dca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd8:	4c0a      	ldr	r4, [pc, #40]	; (8000e04 <LoopForever+0x16>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ddc:	e001      	b.n	8000de2 <LoopFillZerobss>

08000dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de0:	3204      	adds	r2, #4

08000de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de4:	d3fb      	bcc.n	8000dde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000de6:	f008 fe47 	bl	8009a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dea:	f7ff fc09 	bl	8000600 <main>

08000dee <LoopForever>:

LoopForever:
    b LoopForever
 8000dee:	e7fe      	b.n	8000dee <LoopForever>
  ldr   r0, =_estack
 8000df0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dfc:	08009b28 	.word	0x08009b28
  ldr r2, =_sbss
 8000e00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e04:	20000278 	.word	0x20000278

08000e08 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f947 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000e16:	f002 f81f 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	6a1b      	ldr	r3, [r3, #32]
 8000e20:	f003 030f 	and.w	r3, r3, #15
 8000e24:	490a      	ldr	r1, [pc, #40]	; (8000e50 <HAL_Init+0x44>)
 8000e26:	5ccb      	ldrb	r3, [r1, r3]
 8000e28:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2c:	4a09      	ldr	r2, [pc, #36]	; (8000e54 <HAL_Init+0x48>)
 8000e2e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	200f      	movs	r0, #15
 8000e32:	f000 f811 	bl	8000e58 <HAL_InitTick>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e002      	b.n	8000e46 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fd41 	bl	80008c6 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	44020c00 	.word	0x44020c00
 8000e50:	08009ad8 	.word	0x08009ad8
 8000e54:	20000000 	.word	0x20000000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_InitTick+0x60>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d101      	bne.n	8000e6c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e021      	b.n	8000eb0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <HAL_InitTick+0x64>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f941 	bl	800110a <HAL_SYSTICK_Config>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00e      	b.n	8000eb0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b0f      	cmp	r3, #15
 8000e96:	d80a      	bhi.n	8000eae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ea0:	f000 f90b 	bl	80010ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_InitTick+0x68>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e000      	b.n	8000eb0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000274 	.word	0x20000274

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000274 	.word	0x20000274

08000f04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f14:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f20:	4013      	ands	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f36:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <__NVIC_SetPriorityGrouping+0x44>)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	60d3      	str	r3, [r2, #12]
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	88fb      	ldrh	r3, [r7, #6]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff29 	bl	8000f04 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff40 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff33 	bl	8000f68 <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa4 	bl	8001060 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff fede 	bl	8000eec <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0df      	b.n	80012fc <HAL_DMA_Init+0x1d8>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
  if ((hdma->Init.Direction == DMA_MEMORY_TO_PERIPH) || (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a6e      	ldr	r2, [pc, #440]	; (8001304 <HAL_DMA_Init+0x1e0>)
 800114a:	4293      	cmp	r3, r2
 800114c:	f000 809f 	beq.w	800128e <HAL_DMA_Init+0x16a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <HAL_DMA_Init+0x1e4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	f000 8099 	beq.w	800128e <HAL_DMA_Init+0x16a>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a6a      	ldr	r2, [pc, #424]	; (800130c <HAL_DMA_Init+0x1e8>)
 8001162:	4293      	cmp	r3, r2
 8001164:	f000 8093 	beq.w	800128e <HAL_DMA_Init+0x16a>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a68      	ldr	r2, [pc, #416]	; (8001310 <HAL_DMA_Init+0x1ec>)
 800116e:	4293      	cmp	r3, r2
 8001170:	f000 808d 	beq.w	800128e <HAL_DMA_Init+0x16a>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a66      	ldr	r2, [pc, #408]	; (8001314 <HAL_DMA_Init+0x1f0>)
 800117a:	4293      	cmp	r3, r2
 800117c:	f000 8087 	beq.w	800128e <HAL_DMA_Init+0x16a>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a64      	ldr	r2, [pc, #400]	; (8001318 <HAL_DMA_Init+0x1f4>)
 8001186:	4293      	cmp	r3, r2
 8001188:	f000 8081 	beq.w	800128e <HAL_DMA_Init+0x16a>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a62      	ldr	r2, [pc, #392]	; (800131c <HAL_DMA_Init+0x1f8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d07b      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a61      	ldr	r2, [pc, #388]	; (8001320 <HAL_DMA_Init+0x1fc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d076      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a5f      	ldr	r2, [pc, #380]	; (8001324 <HAL_DMA_Init+0x200>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d071      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a5e      	ldr	r2, [pc, #376]	; (8001328 <HAL_DMA_Init+0x204>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d06c      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5c      	ldr	r2, [pc, #368]	; (800132c <HAL_DMA_Init+0x208>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d067      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a5b      	ldr	r2, [pc, #364]	; (8001330 <HAL_DMA_Init+0x20c>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d062      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a59      	ldr	r2, [pc, #356]	; (8001334 <HAL_DMA_Init+0x210>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d05d      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a58      	ldr	r2, [pc, #352]	; (8001338 <HAL_DMA_Init+0x214>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d058      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a56      	ldr	r2, [pc, #344]	; (800133c <HAL_DMA_Init+0x218>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d053      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a55      	ldr	r2, [pc, #340]	; (8001340 <HAL_DMA_Init+0x21c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d04e      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a53      	ldr	r2, [pc, #332]	; (8001344 <HAL_DMA_Init+0x220>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d049      	beq.n	800128e <HAL_DMA_Init+0x16a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_DMA_Init+0x224>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d044      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a50      	ldr	r2, [pc, #320]	; (800134c <HAL_DMA_Init+0x228>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d03f      	beq.n	800128e <HAL_DMA_Init+0x16a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a4f      	ldr	r2, [pc, #316]	; (8001350 <HAL_DMA_Init+0x22c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d03a      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_DMA_Init+0x230>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d035      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_DMA_Init+0x234>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d030      	beq.n	800128e <HAL_DMA_Init+0x16a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a4a      	ldr	r2, [pc, #296]	; (800135c <HAL_DMA_Init+0x238>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a49      	ldr	r2, [pc, #292]	; (8001360 <HAL_DMA_Init+0x23c>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d026      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a47      	ldr	r2, [pc, #284]	; (8001364 <HAL_DMA_Init+0x240>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d021      	beq.n	800128e <HAL_DMA_Init+0x16a>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a46      	ldr	r2, [pc, #280]	; (8001368 <HAL_DMA_Init+0x244>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d01c      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a44      	ldr	r2, [pc, #272]	; (800136c <HAL_DMA_Init+0x248>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d017      	beq.n	800128e <HAL_DMA_Init+0x16a>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a43      	ldr	r2, [pc, #268]	; (8001370 <HAL_DMA_Init+0x24c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d012      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a41      	ldr	r2, [pc, #260]	; (8001374 <HAL_DMA_Init+0x250>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d00d      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HAL_DMA_Init+0x254>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d008      	beq.n	800128e <HAL_DMA_Init+0x16a>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3e      	ldr	r2, [pc, #248]	; (800137c <HAL_DMA_Init+0x258>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d003      	beq.n	800128e <HAL_DMA_Init+0x16a>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <HAL_DMA_Init+0x25c>)
 800128c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2202      	movs	r2, #2
 800129a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f042 0206 	orr.w	r2, r2, #6
 80012ac:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80012ae:	e00f      	b.n	80012d0 <HAL_DMA_Init+0x1ac>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80012b0:	f7ff fe1c 	bl	8000eec <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b05      	cmp	r3, #5
 80012bc:	d908      	bls.n	80012d0 <HAL_DMA_Init+0x1ac>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2210      	movs	r2, #16
 80012c2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2203      	movs	r2, #3
 80012c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e015      	b.n	80012fc <HAL_DMA_Init+0x1d8>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1e8      	bne.n	80012b0 <HAL_DMA_Init+0x18c>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fb30 	bl	8001944 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020050 	.word	0x40020050
 8001308:	50020050 	.word	0x50020050
 800130c:	400200d0 	.word	0x400200d0
 8001310:	500200d0 	.word	0x500200d0
 8001314:	40020150 	.word	0x40020150
 8001318:	50020150 	.word	0x50020150
 800131c:	400201d0 	.word	0x400201d0
 8001320:	500201d0 	.word	0x500201d0
 8001324:	40020250 	.word	0x40020250
 8001328:	50020250 	.word	0x50020250
 800132c:	400202d0 	.word	0x400202d0
 8001330:	500202d0 	.word	0x500202d0
 8001334:	40020350 	.word	0x40020350
 8001338:	50020350 	.word	0x50020350
 800133c:	400203d0 	.word	0x400203d0
 8001340:	500203d0 	.word	0x500203d0
 8001344:	40021050 	.word	0x40021050
 8001348:	50021050 	.word	0x50021050
 800134c:	400210d0 	.word	0x400210d0
 8001350:	500210d0 	.word	0x500210d0
 8001354:	40021150 	.word	0x40021150
 8001358:	50021150 	.word	0x50021150
 800135c:	400211d0 	.word	0x400211d0
 8001360:	500211d0 	.word	0x500211d0
 8001364:	40021250 	.word	0x40021250
 8001368:	50021250 	.word	0x50021250
 800136c:	400212d0 	.word	0x400212d0
 8001370:	500212d0 	.word	0x500212d0
 8001374:	40021350 	.word	0x40021350
 8001378:	50021350 	.word	0x50021350
 800137c:	400213d0 	.word	0x400213d0
 8001380:	500213d0 	.word	0x500213d0

08001384 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e04f      	b.n	800143c <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d101      	bne.n	80013aa <HAL_DMA_Start_IT+0x26>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e048      	b.n	800143c <HAL_DMA_Start_IT+0xb8>
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d136      	bne.n	800142c <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2202      	movs	r2, #2
 80013c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	68b9      	ldr	r1, [r7, #8]
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 fa91 	bl	80018fa <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80013e6:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013fe:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001404:	2b00      	cmp	r3, #0
 8001406:	d007      	beq.n	8001418 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001416:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695a      	ldr	r2, [r3, #20]
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e007      	b.n	800143c <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800144c:	f7ff fd4e 	bl	8000eec <HAL_GetTick>
 8001450:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e06b      	b.n	8001534 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d008      	beq.n	800147a <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2220      	movs	r2, #32
 800146c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e05c      	b.n	8001534 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695a      	ldr	r2, [r3, #20]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0204 	orr.w	r2, r2, #4
 8001488:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8001492:	e020      	b.n	80014d6 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8001494:	f7ff fd2a 	bl	8000eec <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d919      	bls.n	80014d6 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a6:	f043 0210 	orr.w	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c6:	2201      	movs	r2, #1
 80014c8:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e02e      	b.n	8001534 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0d7      	beq.n	8001494 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0202 	orr.w	r2, r2, #2
 80014f2:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2204      	movs	r2, #4
 80014f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001504:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151e:	2201      	movs	r2, #1
 8001520:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2200      	movs	r2, #0
 8001528:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e019      	b.n	8001582 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d004      	beq.n	8001564 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2220      	movs	r2, #32
 800155e:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e00e      	b.n	8001582 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2204      	movs	r2, #4
 8001568:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800159e:	f023 030f 	bic.w	r3, r3, #15
 80015a2:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ac:	3b50      	subs	r3, #80	; 0x50
 80015ae:	09db      	lsrs	r3, r3, #7
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8154 	beq.w	8001876 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d011      	beq.n	8001600 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f2:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160a:	2b00      	cmp	r3, #0
 800160c:	d011      	beq.n	8001632 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00a      	beq.n	8001632 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001624:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162a:	f043 0202 	orr.w	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d011      	beq.n	8001664 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695b      	ldr	r3, [r3, #20]
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00a      	beq.n	8001664 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001656:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	f043 0204 	orr.w	r2, r3, #4
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d011      	beq.n	8001696 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00a      	beq.n	8001696 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001688:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f043 0208 	orr.w	r2, r3, #8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691b      	ldr	r3, [r3, #16]
 800169c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00c      	beq.n	80016cc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ba:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d003      	beq.n	80016cc <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d059      	beq.n	800178e <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d052      	beq.n	800178e <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f0:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b04      	cmp	r3, #4
 80016fc:	d13b      	bne.n	8001776 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800170c:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	695a      	ldr	r2, [r3, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0202 	orr.w	r2, r2, #2
 800171c:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2203      	movs	r2, #3
 8001730:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001734:	e003      	b.n	800173e <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	2201      	movs	r2, #1
 8001750:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8087 	beq.w	800187a <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	4798      	blx	r3
        }

        return;
 8001774:	e081      	b.n	800187a <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2205      	movs	r2, #5
 800177a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d039      	beq.n	8001810 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d032      	beq.n	8001810 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d012      	beq.n	80017dc <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d116      	bne.n	80017ee <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d111      	bne.n	80017ee <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d6:	2201      	movs	r2, #1
 80017d8:	731a      	strb	r2, [r3, #12]
 80017da:	e008      	b.n	80017ee <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80017f6:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	2b00      	cmp	r3, #0
 8001816:	d031      	beq.n	800187c <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	695a      	ldr	r2, [r3, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0202 	orr.w	r2, r2, #2
 8001826:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800183e:	e003      	b.n	8001848 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001858:	2201      	movs	r2, #1
 800185a:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e002      	b.n	800187c <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8001876:	bf00      	nop
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x2ee>
        return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e02b      	b.n	80018ee <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800189e:	f023 030f 	bic.w	r3, r3, #15
 80018a2:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ac:	3b50      	subs	r3, #80	; 0x50
 80018ae:	09db      	lsrs	r3, r3, #7
 80018b0:	f003 031f 	and.w	r3, r3, #31
 80018b4:	2201      	movs	r2, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	f003 0311 	and.w	r3, r3, #17
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d106      	bne.n	80018de <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	e006      	b.n	80018ec <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	b291      	uxth	r1, r2
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	430b      	orrs	r3, r1
 800191c:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8001926:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695b      	ldr	r3, [r3, #20]
 8001958:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	430a      	orrs	r2, r1
 8001964:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	431a      	orrs	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a53      	ldr	r2, [pc, #332]	; (8001ad0 <DMA_Init+0x18c>)
 8001984:	4293      	cmp	r3, r2
 8001986:	f000 80a0 	beq.w	8001aca <DMA_Init+0x186>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a51      	ldr	r2, [pc, #324]	; (8001ad4 <DMA_Init+0x190>)
 8001990:	4293      	cmp	r3, r2
 8001992:	f000 809a 	beq.w	8001aca <DMA_Init+0x186>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a4f      	ldr	r2, [pc, #316]	; (8001ad8 <DMA_Init+0x194>)
 800199c:	4293      	cmp	r3, r2
 800199e:	f000 8094 	beq.w	8001aca <DMA_Init+0x186>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4d      	ldr	r2, [pc, #308]	; (8001adc <DMA_Init+0x198>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	f000 808e 	beq.w	8001aca <DMA_Init+0x186>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <DMA_Init+0x19c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	f000 8088 	beq.w	8001aca <DMA_Init+0x186>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <DMA_Init+0x1a0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	f000 8082 	beq.w	8001aca <DMA_Init+0x186>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <DMA_Init+0x1a4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d07c      	beq.n	8001aca <DMA_Init+0x186>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a45      	ldr	r2, [pc, #276]	; (8001aec <DMA_Init+0x1a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d077      	beq.n	8001aca <DMA_Init+0x186>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a44      	ldr	r2, [pc, #272]	; (8001af0 <DMA_Init+0x1ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d072      	beq.n	8001aca <DMA_Init+0x186>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a42      	ldr	r2, [pc, #264]	; (8001af4 <DMA_Init+0x1b0>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d06d      	beq.n	8001aca <DMA_Init+0x186>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a41      	ldr	r2, [pc, #260]	; (8001af8 <DMA_Init+0x1b4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d068      	beq.n	8001aca <DMA_Init+0x186>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3f      	ldr	r2, [pc, #252]	; (8001afc <DMA_Init+0x1b8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d063      	beq.n	8001aca <DMA_Init+0x186>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a3e      	ldr	r2, [pc, #248]	; (8001b00 <DMA_Init+0x1bc>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d05e      	beq.n	8001aca <DMA_Init+0x186>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a3c      	ldr	r2, [pc, #240]	; (8001b04 <DMA_Init+0x1c0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d059      	beq.n	8001aca <DMA_Init+0x186>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <DMA_Init+0x1c4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d054      	beq.n	8001aca <DMA_Init+0x186>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a39      	ldr	r2, [pc, #228]	; (8001b0c <DMA_Init+0x1c8>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d04f      	beq.n	8001aca <DMA_Init+0x186>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <DMA_Init+0x1cc>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04a      	beq.n	8001aca <DMA_Init+0x186>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a36      	ldr	r2, [pc, #216]	; (8001b14 <DMA_Init+0x1d0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d045      	beq.n	8001aca <DMA_Init+0x186>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <DMA_Init+0x1d4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d040      	beq.n	8001aca <DMA_Init+0x186>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <DMA_Init+0x1d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d03b      	beq.n	8001aca <DMA_Init+0x186>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <DMA_Init+0x1dc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d036      	beq.n	8001aca <DMA_Init+0x186>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a30      	ldr	r2, [pc, #192]	; (8001b24 <DMA_Init+0x1e0>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <DMA_Init+0x186>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a2f      	ldr	r2, [pc, #188]	; (8001b28 <DMA_Init+0x1e4>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d02c      	beq.n	8001aca <DMA_Init+0x186>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2d      	ldr	r2, [pc, #180]	; (8001b2c <DMA_Init+0x1e8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d027      	beq.n	8001aca <DMA_Init+0x186>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a2c      	ldr	r2, [pc, #176]	; (8001b30 <DMA_Init+0x1ec>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <DMA_Init+0x186>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a2a      	ldr	r2, [pc, #168]	; (8001b34 <DMA_Init+0x1f0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01d      	beq.n	8001aca <DMA_Init+0x186>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a29      	ldr	r2, [pc, #164]	; (8001b38 <DMA_Init+0x1f4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d018      	beq.n	8001aca <DMA_Init+0x186>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <DMA_Init+0x1f8>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <DMA_Init+0x186>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a26      	ldr	r2, [pc, #152]	; (8001b40 <DMA_Init+0x1fc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00e      	beq.n	8001aca <DMA_Init+0x186>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a24      	ldr	r2, [pc, #144]	; (8001b44 <DMA_Init+0x200>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <DMA_Init+0x186>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <DMA_Init+0x204>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <DMA_Init+0x186>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <DMA_Init+0x208>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d142      	bne.n	8001b50 <DMA_Init+0x20c>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <DMA_Init+0x20e>
 8001ace:	bf00      	nop
 8001ad0:	40020050 	.word	0x40020050
 8001ad4:	50020050 	.word	0x50020050
 8001ad8:	400200d0 	.word	0x400200d0
 8001adc:	500200d0 	.word	0x500200d0
 8001ae0:	40020150 	.word	0x40020150
 8001ae4:	50020150 	.word	0x50020150
 8001ae8:	400201d0 	.word	0x400201d0
 8001aec:	500201d0 	.word	0x500201d0
 8001af0:	40020250 	.word	0x40020250
 8001af4:	50020250 	.word	0x50020250
 8001af8:	400202d0 	.word	0x400202d0
 8001afc:	500202d0 	.word	0x500202d0
 8001b00:	40020350 	.word	0x40020350
 8001b04:	50020350 	.word	0x50020350
 8001b08:	400203d0 	.word	0x400203d0
 8001b0c:	500203d0 	.word	0x500203d0
 8001b10:	40021050 	.word	0x40021050
 8001b14:	50021050 	.word	0x50021050
 8001b18:	400210d0 	.word	0x400210d0
 8001b1c:	500210d0 	.word	0x500210d0
 8001b20:	40021150 	.word	0x40021150
 8001b24:	50021150 	.word	0x50021150
 8001b28:	400211d0 	.word	0x400211d0
 8001b2c:	500211d0 	.word	0x500211d0
 8001b30:	40021250 	.word	0x40021250
 8001b34:	50021250 	.word	0x50021250
 8001b38:	400212d0 	.word	0x400212d0
 8001b3c:	500212d0 	.word	0x500212d0
 8001b40:	40021350 	.word	0x40021350
 8001b44:	50021350 	.word	0x50021350
 8001b48:	400213d0 	.word	0x400213d0
 8001b4c:	500213d0 	.word	0x500213d0
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d012      	beq.n	8001b7c <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	051b      	lsls	r3, r3, #20
 8001b62:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b66:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8001b74:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	f003 2180 	and.w	r1, r3, #2147516416	; 0x80008000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* defined (DMA_CTR1_SSEC) */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	f040 80b0 	bne.w	8001d10 <DMA_Init+0x3cc>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a84      	ldr	r2, [pc, #528]	; (8001dc8 <DMA_Init+0x484>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	f000 80a0 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a82      	ldr	r2, [pc, #520]	; (8001dcc <DMA_Init+0x488>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	f000 809a 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a80      	ldr	r2, [pc, #512]	; (8001dd0 <DMA_Init+0x48c>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f000 8094 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a7e      	ldr	r2, [pc, #504]	; (8001dd4 <DMA_Init+0x490>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f000 808e 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a7c      	ldr	r2, [pc, #496]	; (8001dd8 <DMA_Init+0x494>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	f000 8088 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7a      	ldr	r2, [pc, #488]	; (8001ddc <DMA_Init+0x498>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	f000 8082 	beq.w	8001cfc <DMA_Init+0x3b8>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a78      	ldr	r2, [pc, #480]	; (8001de0 <DMA_Init+0x49c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d07c      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <DMA_Init+0x4a0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d077      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a75      	ldr	r2, [pc, #468]	; (8001de8 <DMA_Init+0x4a4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d072      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a74      	ldr	r2, [pc, #464]	; (8001dec <DMA_Init+0x4a8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d06d      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a72      	ldr	r2, [pc, #456]	; (8001df0 <DMA_Init+0x4ac>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d068      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a71      	ldr	r2, [pc, #452]	; (8001df4 <DMA_Init+0x4b0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d063      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a6f      	ldr	r2, [pc, #444]	; (8001df8 <DMA_Init+0x4b4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d05e      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6e      	ldr	r2, [pc, #440]	; (8001dfc <DMA_Init+0x4b8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d059      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a6c      	ldr	r2, [pc, #432]	; (8001e00 <DMA_Init+0x4bc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d054      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a6b      	ldr	r2, [pc, #428]	; (8001e04 <DMA_Init+0x4c0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d04f      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <DMA_Init+0x4c4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04a      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a68      	ldr	r2, [pc, #416]	; (8001e0c <DMA_Init+0x4c8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d045      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <DMA_Init+0x4cc>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d040      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <DMA_Init+0x4d0>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d03b      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a63      	ldr	r2, [pc, #396]	; (8001e18 <DMA_Init+0x4d4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d036      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a62      	ldr	r2, [pc, #392]	; (8001e1c <DMA_Init+0x4d8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d031      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a60      	ldr	r2, [pc, #384]	; (8001e20 <DMA_Init+0x4dc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02c      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a5f      	ldr	r2, [pc, #380]	; (8001e24 <DMA_Init+0x4e0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d027      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <DMA_Init+0x4e4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d022      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a5c      	ldr	r2, [pc, #368]	; (8001e2c <DMA_Init+0x4e8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01d      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <DMA_Init+0x4ec>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d018      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a59      	ldr	r2, [pc, #356]	; (8001e34 <DMA_Init+0x4f0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d013      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <DMA_Init+0x4f4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d00e      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <DMA_Init+0x4f8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d009      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a54      	ldr	r2, [pc, #336]	; (8001e40 <DMA_Init+0x4fc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d004      	beq.n	8001cfc <DMA_Init+0x3b8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a53      	ldr	r2, [pc, #332]	; (8001e44 <DMA_Init+0x500>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <DMA_Init+0x3bc>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <DMA_Init+0x3be>
 8001d00:	2300      	movs	r3, #0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <DMA_Init+0x3de>
    {
      tmpreg |= DMA_CTR2_DREQ;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	e008      	b.n	8001d22 <DMA_Init+0x3de>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d18:	d103      	bne.n	8001d22 <DMA_Init+0x3de>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d20:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Set DMA channel operation mode */
  tmpreg |= hdma->Init.Mode;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d32:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <DMA_Init+0x504>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6453      	str	r3, [r2, #68]	; 0x44
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2200      	movs	r2, #0
 8001d46:	649a      	str	r2, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <DMA_Init+0x4b4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d022      	beq.n	8001d98 <DMA_Init+0x454>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a29      	ldr	r2, [pc, #164]	; (8001dfc <DMA_Init+0x4b8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d01d      	beq.n	8001d98 <DMA_Init+0x454>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <DMA_Init+0x4bc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d018      	beq.n	8001d98 <DMA_Init+0x454>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a26      	ldr	r2, [pc, #152]	; (8001e04 <DMA_Init+0x4c0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d013      	beq.n	8001d98 <DMA_Init+0x454>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a30      	ldr	r2, [pc, #192]	; (8001e38 <DMA_Init+0x4f4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <DMA_Init+0x454>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a2f      	ldr	r2, [pc, #188]	; (8001e3c <DMA_Init+0x4f8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d009      	beq.n	8001d98 <DMA_Init+0x454>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a2d      	ldr	r2, [pc, #180]	; (8001e40 <DMA_Init+0x4fc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <DMA_Init+0x454>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <DMA_Init+0x500>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <DMA_Init+0x458>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <DMA_Init+0x45a>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <DMA_Init+0x46e>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2200      	movs	r2, #0
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40020050 	.word	0x40020050
 8001dcc:	50020050 	.word	0x50020050
 8001dd0:	400200d0 	.word	0x400200d0
 8001dd4:	500200d0 	.word	0x500200d0
 8001dd8:	40020150 	.word	0x40020150
 8001ddc:	50020150 	.word	0x50020150
 8001de0:	400201d0 	.word	0x400201d0
 8001de4:	500201d0 	.word	0x500201d0
 8001de8:	40020250 	.word	0x40020250
 8001dec:	50020250 	.word	0x50020250
 8001df0:	400202d0 	.word	0x400202d0
 8001df4:	500202d0 	.word	0x500202d0
 8001df8:	40020350 	.word	0x40020350
 8001dfc:	50020350 	.word	0x50020350
 8001e00:	400203d0 	.word	0x400203d0
 8001e04:	500203d0 	.word	0x500203d0
 8001e08:	40021050 	.word	0x40021050
 8001e0c:	50021050 	.word	0x50021050
 8001e10:	400210d0 	.word	0x400210d0
 8001e14:	500210d0 	.word	0x500210d0
 8001e18:	40021150 	.word	0x40021150
 8001e1c:	50021150 	.word	0x50021150
 8001e20:	400211d0 	.word	0x400211d0
 8001e24:	500211d0 	.word	0x500211d0
 8001e28:	40021250 	.word	0x40021250
 8001e2c:	50021250 	.word	0x50021250
 8001e30:	400212d0 	.word	0x400212d0
 8001e34:	500212d0 	.word	0x500212d0
 8001e38:	40021350 	.word	0x40021350
 8001e3c:	50021350 	.word	0x50021350
 8001e40:	400213d0 	.word	0x400213d0
 8001e44:	500213d0 	.word	0x500213d0
 8001e48:	3cc02100 	.word	0x3cc02100

08001e4c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_DMAEx_List_Start_IT+0x16>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e082      	b.n	8001f6c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e6c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e78:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_DMAEx_List_Start_IT+0x40>
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d16a      	bne.n	8001f5c <HAL_DMAEx_List_Start_IT+0x110>
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d067      	beq.n	8001f5c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d157      	bne.n	8001f48 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_DMAEx_List_Start_IT+0x5a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e062      	b.n	8001f6c <HAL_DMAEx_List_Start_IT+0x120>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eba:	2202      	movs	r2, #2
 8001ebc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	695a      	ldr	r2, [r3, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8001eda:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef2:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f0a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f107 010c 	add.w	r1, r7, #12
 8001f16:	2200      	movs	r2, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f82b 	bl	8001f74 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	0c0b      	lsrs	r3, r1, #16
 8001f2c:	041b      	lsls	r3, r3, #16
 8001f2e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e007      	b.n	8001f6c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00c      	beq.n	8001fa6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	4a0d      	ldr	r2, [pc, #52]	; (8001fcc <DMA_List_GetCLLRNodeInfo+0x58>)
 8001f96:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00f      	beq.n	8001fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8001fa4:	e00b      	b.n	8001fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4a08      	ldr	r2, [pc, #32]	; (8001fd0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8001fb0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2205      	movs	r2, #5
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	fe010000 	.word	0xfe010000
 8001fd0:	f8010000 	.word	0xf8010000

08001fd4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b087      	sub	sp, #28
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001fe2:	e136      	b.n	8002252 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2101      	movs	r1, #1
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8128 	beq.w	800224c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x38>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b12      	cmp	r3, #18
 800200a:	d125      	bne.n	8002058 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	08da      	lsrs	r2, r3, #3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3208      	adds	r2, #8
 8002014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002018:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f003 020f 	and.w	r2, r3, #15
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	6979      	ldr	r1, [r7, #20]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4013      	ands	r3, r2
 800206e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d00b      	beq.n	80020ac <HAL_GPIO_Init+0xd8>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d007      	beq.n	80020ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a0:	2b11      	cmp	r3, #17
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b12      	cmp	r3, #18
 80020aa:	d130      	bne.n	800210e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	4013      	ands	r3, r2
 80020c2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020e2:	2201      	movs	r2, #1
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	4013      	ands	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	f003 0201 	and.w	r2, r3, #1
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d017      	beq.n	8002146 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4013      	ands	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07c      	beq.n	800224c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002152:	4a47      	ldr	r2, [pc, #284]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3318      	adds	r3, #24
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4013      	ands	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	0a9a      	lsrs	r2, r3, #10
 800217a:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_GPIO_Init+0x2a0>)
 800217c:	4013      	ands	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	f002 0203 	and.w	r2, r2, #3
 8002184:	00d2      	lsls	r2, r2, #3
 8002186:	4093      	lsls	r3, r2
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	4313      	orrs	r3, r2
 800218c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800218e:	4938      	ldr	r1, [pc, #224]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3318      	adds	r3, #24
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800219c:	4b34      	ldr	r3, [pc, #208]	; (8002270 <HAL_GPIO_Init+0x29c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	4013      	ands	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4313      	orrs	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80021c6:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	4013      	ands	r3, r2
 80021d4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80021ea:	4a21      	ldr	r2, [pc, #132]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80021f0:	4b1f      	ldr	r3, [pc, #124]	; (8002270 <HAL_GPIO_Init+0x29c>)
 80021f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021f6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	43db      	mvns	r3, r3
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4013      	ands	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002216:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002224:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	43db      	mvns	r3, r3
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002244:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_GPIO_Init+0x29c>)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3301      	adds	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	fa22 f303 	lsr.w	r3, r2, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	f47f aec1 	bne.w	8001fe4 <HAL_GPIO_Init+0x10>
  }
}
 8002262:	bf00      	nop
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	44022000 	.word	0x44022000
 8002274:	002f7f7f 	.word	0x002f7f7f

08002278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	f000 bc28 	b.w	8002adc <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228c:	4b94      	ldr	r3, [pc, #592]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	f003 0318 	and.w	r3, r3, #24
 8002294:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002296:	4b92      	ldr	r3, [pc, #584]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0310 	and.w	r3, r3, #16
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d005      	beq.n	80022be <HAL_RCC_OscConfig+0x46>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	2b18      	cmp	r3, #24
 80022b6:	d114      	bne.n	80022e2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d111      	bne.n	80022e2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	f000 bc08 	b.w	8002adc <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80022cc:	4b84      	ldr	r3, [pc, #528]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	041b      	lsls	r3, r3, #16
 80022da:	4981      	ldr	r1, [pc, #516]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80022e0:	e040      	b.n	8002364 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d023      	beq.n	8002332 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022ea:	4b7d      	ldr	r3, [pc, #500]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a7c      	ldr	r2, [pc, #496]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80022f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fdf9 	bl	8000eec <HAL_GetTick>
 80022fa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80022fe:	f7fe fdf5 	bl	8000eec <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e3e5      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002310:	4b73      	ldr	r3, [pc, #460]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800231c:	4b70      	ldr	r3, [pc, #448]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1b      	ldr	r3, [r3, #32]
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	496d      	ldr	r1, [pc, #436]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800232c:	4313      	orrs	r3, r2
 800232e:	618b      	str	r3, [r1, #24]
 8002330:	e018      	b.n	8002364 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002332:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe fdd5 	bl	8000eec <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002344:	e008      	b.n	8002358 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002346:	f7fe fdd1 	bl	8000eec <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e3c1      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f0      	bne.n	8002346 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a0 	beq.w	80024b2 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	2b10      	cmp	r3, #16
 8002376:	d005      	beq.n	8002384 <HAL_RCC_OscConfig+0x10c>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b18      	cmp	r3, #24
 800237c:	d109      	bne.n	8002392 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b03      	cmp	r3, #3
 8002382:	d106      	bne.n	8002392 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	f040 8092 	bne.w	80024b2 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e3a4      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x132>
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a4f      	ldr	r2, [pc, #316]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e058      	b.n	800245c <HAL_RCC_OscConfig+0x1e4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d112      	bne.n	80023d8 <HAL_RCC_OscConfig+0x160>
 80023b2:	4b4b      	ldr	r3, [pc, #300]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a4a      	ldr	r2, [pc, #296]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b48      	ldr	r3, [pc, #288]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a47      	ldr	r2, [pc, #284]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b45      	ldr	r3, [pc, #276]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a44      	ldr	r2, [pc, #272]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e041      	b.n	800245c <HAL_RCC_OscConfig+0x1e4>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e0:	d112      	bne.n	8002408 <HAL_RCC_OscConfig+0x190>
 80023e2:	4b3f      	ldr	r3, [pc, #252]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a3e      	ldr	r2, [pc, #248]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b3c      	ldr	r3, [pc, #240]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a3b      	ldr	r2, [pc, #236]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023f4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b39      	ldr	r3, [pc, #228]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a38      	ldr	r2, [pc, #224]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e029      	b.n	800245c <HAL_RCC_OscConfig+0x1e4>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002410:	d112      	bne.n	8002438 <HAL_RCC_OscConfig+0x1c0>
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a32      	ldr	r2, [pc, #200]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e011      	b.n	800245c <HAL_RCC_OscConfig+0x1e4>
 8002438:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b26      	ldr	r3, [pc, #152]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a25      	ldr	r2, [pc, #148]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]
 8002450:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002456:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800245a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fd42 	bl	8000eec <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800246c:	f7fe fd3e 	bl	8000eec <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b64      	cmp	r3, #100	; 0x64
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e32e      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x1f4>
 800248a:	e012      	b.n	80024b2 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248c:	f7fe fd2e 	bl	8000eec <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002494:	f7fe fd2a 	bl	8000eec <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e31a      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_RCC_OscConfig+0x268>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1f0      	bne.n	8002494 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 809a 	beq.w	80025f4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x25a>
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	2b18      	cmp	r3, #24
 80024ca:	d149      	bne.n	8002560 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d146      	bne.n	8002560 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e2fe      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
 80024de:	bf00      	nop
 80024e0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d11c      	bne.n	8002524 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80024ea:	4b9a      	ldr	r3, [pc, #616]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0218 	and.w	r2, r3, #24
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d014      	beq.n	8002524 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80024fa:	4b96      	ldr	r3, [pc, #600]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0218 	bic.w	r2, r3, #24
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4993      	ldr	r1, [pc, #588]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 800250c:	f000 fdd0 	bl	80030b0 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002510:	4b91      	ldr	r3, [pc, #580]	; (8002758 <HAL_RCC_OscConfig+0x4e0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fc9f 	bl	8000e58 <HAL_InitTick>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e2db      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fce2 	bl	8000eec <HAL_GetTick>
 8002528:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800252c:	f7fe fcde 	bl	8000eec <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e2ce      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800253e:	4b85      	ldr	r3, [pc, #532]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800254a:	4b82      	ldr	r3, [pc, #520]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	497e      	ldr	r1, [pc, #504]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800255e:	e049      	b.n	80025f4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d02c      	beq.n	80025c2 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002568:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 0218 	bic.w	r2, r3, #24
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4977      	ldr	r1, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a75      	ldr	r2, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fcb1 	bl	8000eec <HAL_GetTick>
 800258a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800258e:	f7fe fcad 	bl	8000eec <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e29d      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0f0      	beq.n	800258e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80025ac:	4b69      	ldr	r3, [pc, #420]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	4966      	ldr	r1, [pc, #408]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	610b      	str	r3, [r1, #16]
 80025c0:	e018      	b.n	80025f4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c2:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a63      	ldr	r2, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ce:	f7fe fc8d 	bl	8000eec <HAL_GetTick>
 80025d2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025d6:	f7fe fc89 	bl	8000eec <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e279      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	4b5a      	ldr	r3, [pc, #360]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d03c      	beq.n	800267a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d01c      	beq.n	8002642 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800260a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800260e:	4a51      	ldr	r2, [pc, #324]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002614:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fc68 	bl	8000eec <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002620:	f7fe fc64 	bl	8000eec <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e254      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002632:	4b48      	ldr	r3, [pc, #288]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002634:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ef      	beq.n	8002620 <HAL_RCC_OscConfig+0x3a8>
 8002640:	e01b      	b.n	800267a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002642:	4b44      	ldr	r3, [pc, #272]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002644:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002648:	4a42      	ldr	r2, [pc, #264]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800264a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800264e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002652:	f7fe fc4b 	bl	8000eec <HAL_GetTick>
 8002656:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800265a:	f7fe fc47 	bl	8000eec <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e237      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800266e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1ef      	bne.n	800265a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80d2 	beq.w	800282c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002688:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_OscConfig+0x4e4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d118      	bne.n	80026c6 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCC_OscConfig+0x4e4>)
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	4a30      	ldr	r2, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x4e4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fc24 	bl	8000eec <HAL_GetTick>
 80026a4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a8:	f7fe fc20 	bl	8000eec <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e210      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_RCC_OscConfig+0x4e4>)
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_RCC_OscConfig+0x468>
 80026ce:	4b21      	ldr	r3, [pc, #132]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d4:	4a1f      	ldr	r2, [pc, #124]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026de:	e074      	b.n	80027ca <HAL_RCC_OscConfig+0x552>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d118      	bne.n	800271a <HAL_RCC_OscConfig+0x4a2>
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026f8:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 80026fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002704:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800270a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002718:	e057      	b.n	80027ca <HAL_RCC_OscConfig+0x552>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	d11e      	bne.n	8002760 <HAL_RCC_OscConfig+0x4e8>
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002738:	4a06      	ldr	r2, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800273a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800273e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 8002744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002748:	4a02      	ldr	r2, [pc, #8]	; (8002754 <HAL_RCC_OscConfig+0x4dc>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002752:	e03a      	b.n	80027ca <HAL_RCC_OscConfig+0x552>
 8002754:	44020c00 	.word	0x44020c00
 8002758:	20000004 	.word	0x20000004
 800275c:	44020800 	.word	0x44020800
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b85      	cmp	r3, #133	; 0x85
 8002766:	d118      	bne.n	800279a <HAL_RCC_OscConfig+0x522>
 8002768:	4ba2      	ldr	r3, [pc, #648]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800276a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800276e:	4aa1      	ldr	r2, [pc, #644]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002770:	f043 0304 	orr.w	r3, r3, #4
 8002774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002778:	4b9e      	ldr	r3, [pc, #632]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800277a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800277e:	4a9d      	ldr	r2, [pc, #628]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002788:	4b9a      	ldr	r3, [pc, #616]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800278a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800278e:	4a99      	ldr	r2, [pc, #612]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002798:	e017      	b.n	80027ca <HAL_RCC_OscConfig+0x552>
 800279a:	4b96      	ldr	r3, [pc, #600]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800279c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027a0:	4a94      	ldr	r2, [pc, #592]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027aa:	4b92      	ldr	r3, [pc, #584]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b0:	4a90      	ldr	r2, [pc, #576]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027b2:	f023 0304 	bic.w	r3, r3, #4
 80027b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027ba:	4b8e      	ldr	r3, [pc, #568]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c0:	4a8c      	ldr	r2, [pc, #560]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fb8b 	bl	8000eec <HAL_GetTick>
 80027d6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fb87 	bl	8000eec <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e175      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f0:	4b80      	ldr	r3, [pc, #512]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80027f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ed      	beq.n	80027da <HAL_RCC_OscConfig+0x562>
 80027fe:	e015      	b.n	800282c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002800:	f7fe fb74 	bl	8000eec <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002806:	e00a      	b.n	800281e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002808:	f7fe fb70 	bl	8000eec <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e15e      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800281e:	4b75      	ldr	r3, [pc, #468]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ed      	bne.n	8002808 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d036      	beq.n	80028a6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	2b00      	cmp	r3, #0
 800283e:	d019      	beq.n	8002874 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002840:	4b6c      	ldr	r3, [pc, #432]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6b      	ldr	r2, [pc, #428]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002846:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800284a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fb4e 	bl	8000eec <HAL_GetTick>
 8002850:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002854:	f7fe fb4a 	bl	8000eec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e13a      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002866:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x5dc>
 8002872:	e018      	b.n	80028a6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002874:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a5e      	ldr	r2, [pc, #376]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800287a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800287e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fb34 	bl	8000eec <HAL_GetTick>
 8002884:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8002888:	f7fe fb30 	bl	8000eec <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e120      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800289a:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8115 	beq.w	8002ada <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b18      	cmp	r3, #24
 80028b4:	f000 80af 	beq.w	8002a16 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f040 8086 	bne.w	80029ce <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80028c2:	4b4c      	ldr	r3, [pc, #304]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a4b      	ldr	r2, [pc, #300]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ce:	f7fe fb0d 	bl	8000eec <HAL_GetTick>
 80028d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80028d6:	f7fe fb09 	bl	8000eec <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e0f9      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80028e8:	4b42      	ldr	r3, [pc, #264]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1f0      	bne.n	80028d6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80028f4:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80028fc:	f023 0303 	bic.w	r3, r3, #3
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002908:	0212      	lsls	r2, r2, #8
 800290a:	430a      	orrs	r2, r1
 800290c:	4939      	ldr	r1, [pc, #228]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	628b      	str	r3, [r1, #40]	; 0x28
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002916:	3b01      	subs	r3, #1
 8002918:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	3b01      	subs	r3, #1
 8002922:	025b      	lsls	r3, r3, #9
 8002924:	b29b      	uxth	r3, r3
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
 8002930:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	3b01      	subs	r3, #1
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002942:	492c      	ldr	r1, [pc, #176]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	4a29      	ldr	r2, [pc, #164]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800294e:	f023 0310 	bic.w	r3, r3, #16
 8002952:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	4a24      	ldr	r2, [pc, #144]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002964:	f043 0310 	orr.w	r3, r3, #16
 8002968:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	f023 020c 	bic.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	491f      	ldr	r1, [pc, #124]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002978:	4313      	orrs	r3, r2
 800297a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800297c:	4b1d      	ldr	r3, [pc, #116]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	f023 0220 	bic.w	r2, r3, #32
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002988:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800298a:	4313      	orrs	r3, r2
 800298c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a15      	ldr	r2, [pc, #84]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80029a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe faa1 	bl	8000eec <HAL_GetTick>
 80029aa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fa9d 	bl	8000eec <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e08d      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x736>
 80029cc:	e085      	b.n	8002ada <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <HAL_RCC_OscConfig+0x77c>)
 80029d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fa87 	bl	8000eec <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fa83 	bl	8000eec <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d903      	bls.n	80029f8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e073      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
 80029f4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80029f8:	4b3a      	ldr	r3, [pc, #232]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ee      	bne.n	80029e2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002a04:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a08:	4a36      	ldr	r2, [pc, #216]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002a0a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	6293      	str	r3, [r2, #40]	; 0x28
 8002a14:	e061      	b.n	8002ada <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002a16:	4b33      	ldr	r3, [pc, #204]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a1c:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d031      	beq.n	8002a8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d12a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d122      	bne.n	8002a8e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d11a      	bne.n	8002a8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	0a5b      	lsrs	r3, r3, #9
 8002a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d111      	bne.n	8002a8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d108      	bne.n	8002a8e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	0e1b      	lsrs	r3, r3, #24
 8002a80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e024      	b.n	8002adc <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002a92:	4b14      	ldr	r3, [pc, #80]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d01a      	beq.n	8002ada <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8002aa4:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002aaa:	f023 0310 	bic.w	r3, r3, #16
 8002aae:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fa1c 	bl	8000eec <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8002ab6:	bf00      	nop
 8002ab8:	f7fe fa18 	bl	8000eec <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d0f9      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	4a06      	ldr	r2, [pc, #24]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8002ace:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad2:	4a04      	ldr	r2, [pc, #16]	; (8002ae4 <HAL_RCC_OscConfig+0x86c>)
 8002ad4:	f043 0310 	orr.w	r3, r3, #16
 8002ad8:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	44020c00 	.word	0x44020c00

08002ae8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e19e      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b83      	ldr	r3, [pc, #524]	; (8002d0c <HAL_RCC_ClockConfig+0x224>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b80      	ldr	r3, [pc, #512]	; (8002d0c <HAL_RCC_ClockConfig+0x224>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 020f 	bic.w	r2, r3, #15
 8002b12:	497e      	ldr	r1, [pc, #504]	; (8002d0c <HAL_RCC_ClockConfig+0x224>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b7c      	ldr	r3, [pc, #496]	; (8002d0c <HAL_RCC_ClockConfig+0x224>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e186      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	4b74      	ldr	r3, [pc, #464]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d909      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002b4a:	4b71      	ldr	r3, [pc, #452]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	021b      	lsls	r3, r3, #8
 8002b58:	496d      	ldr	r1, [pc, #436]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d012      	beq.n	8002b90 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691a      	ldr	r2, [r3, #16]
 8002b6e:	4b68      	ldr	r3, [pc, #416]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	091b      	lsrs	r3, r3, #4
 8002b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d909      	bls.n	8002b90 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002b7c:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	4961      	ldr	r1, [pc, #388]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0304 	and.w	r3, r3, #4
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d010      	beq.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d908      	bls.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002bac:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4955      	ldr	r1, [pc, #340]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d908      	bls.n	8002bec <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 020f 	bic.w	r2, r3, #15
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	494a      	ldr	r1, [pc, #296]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 8093 	beq.w	8002d20 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002c02:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d121      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e113      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d115      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e107      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e0fb      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0f3      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	492c      	ldr	r1, [pc, #176]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c64:	f7fe f942 	bl	8000eec <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d112      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe f93a 	bl	8000eec <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e0d7      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f003 0318 	and.w	r3, r3, #24
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	d1ee      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x18c>
 8002c96:	e043      	b.n	8002d20 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d112      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca2:	f7fe f923 	bl	8000eec <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0c0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f003 0318 	and.w	r3, r3, #24
 8002cc0:	2b10      	cmp	r3, #16
 8002cc2:	d1ee      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x1ba>
 8002cc4:	e02c      	b.n	8002d20 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d122      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe f90c 	bl	8000eec <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0a9      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_RCC_ClockConfig+0x228>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f003 0318 	and.w	r3, r3, #24
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d1ee      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x1e8>
 8002cf2:	e015      	b.n	8002d20 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf4:	f7fe f8fa 	bl	8000eec <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d906      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e097      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d14:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 0318 	and.w	r3, r3, #24
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e9      	bne.n	8002cf4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d010      	beq.n	8002d4e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b44      	ldr	r3, [pc, #272]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d208      	bcs.n	8002d4e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8002d3c:	4b41      	ldr	r3, [pc, #260]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f023 020f 	bic.w	r2, r3, #15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	493e      	ldr	r1, [pc, #248]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d4e:	4b3e      	ldr	r3, [pc, #248]	; (8002e48 <HAL_RCC_ClockConfig+0x360>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d210      	bcs.n	8002d7e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d5c:	4b3a      	ldr	r3, [pc, #232]	; (8002e48 <HAL_RCC_ClockConfig+0x360>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f023 020f 	bic.w	r2, r3, #15
 8002d64:	4938      	ldr	r1, [pc, #224]	; (8002e48 <HAL_RCC_ClockConfig+0x360>)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6c:	4b36      	ldr	r3, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x360>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e05d      	b.n	8002e3a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d010      	beq.n	8002dac <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d208      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	4927      	ldr	r1, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d209      	bcs.n	8002dde <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	491a      	ldr	r1, [pc, #104]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d012      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	4b15      	ldr	r3, [pc, #84]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d209      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8002dfc:	4b11      	ldr	r3, [pc, #68]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	490e      	ldr	r1, [pc, #56]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e10:	f000 f822 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCC_ClockConfig+0x35c>)
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	490b      	ldr	r1, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x364>)
 8002e20:	5ccb      	ldrb	r3, [r1, r3]
 8002e22:	fa22 f303 	lsr.w	r3, r2, r3
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x368>)
 8002e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_ClockConfig+0x36c>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f812 	bl	8000e58 <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8002e38:	7afb      	ldrb	r3, [r7, #11]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	44020c00 	.word	0x44020c00
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	08009ad8 	.word	0x08009ad8
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8002e5e:	4b8c      	ldr	r3, [pc, #560]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	f003 0318 	and.w	r3, r3, #24
 8002e66:	2b08      	cmp	r3, #8
 8002e68:	d102      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e6a:	4b8a      	ldr	r3, [pc, #552]	; (8003094 <HAL_RCC_GetSysClockFreq+0x23c>)
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e107      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e70:	4b87      	ldr	r3, [pc, #540]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	f003 0318 	and.w	r3, r3, #24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d112      	bne.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002e7c:	4b84      	ldr	r3, [pc, #528]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d009      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002e88:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	4a81      	ldr	r2, [pc, #516]	; (8003098 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
 8002e98:	61fb      	str	r3, [r7, #28]
 8002e9a:	e0f1      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8002e9c:	4b7e      	ldr	r3, [pc, #504]	; (8003098 <HAL_RCC_GetSysClockFreq+0x240>)
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e0ee      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ea2:	4b7b      	ldr	r3, [pc, #492]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0318 	and.w	r3, r3, #24
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d102      	bne.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002eae:	4b7b      	ldr	r3, [pc, #492]	; (800309c <HAL_RCC_GetSysClockFreq+0x244>)
 8002eb0:	61fb      	str	r3, [r7, #28]
 8002eb2:	e0e5      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eb4:	4b76      	ldr	r3, [pc, #472]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	f003 0318 	and.w	r3, r3, #24
 8002ebc:	2b18      	cmp	r3, #24
 8002ebe:	f040 80dd 	bne.w	800307c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8002ec2:	4b73      	ldr	r3, [pc, #460]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8002ecc:	4b70      	ldr	r3, [pc, #448]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	0a1b      	lsrs	r3, r3, #8
 8002ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ed6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002ee4:	4b6a      	ldr	r3, [pc, #424]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	ee07 3a90 	vmov	s15, r3
 8002ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f000 80b7 	beq.w	8003076 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d003      	beq.n	8002f16 <HAL_RCC_GetSysClockFreq+0xbe>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	d056      	beq.n	8002fc2 <HAL_RCC_GetSysClockFreq+0x16a>
 8002f14:	e077      	b.n	8003006 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8002f16:	4b5e      	ldr	r3, [pc, #376]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0320 	and.w	r3, r3, #32
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d02d      	beq.n	8002f7e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8002f22:	4b5b      	ldr	r3, [pc, #364]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	08db      	lsrs	r3, r3, #3
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	4a5a      	ldr	r2, [pc, #360]	; (8003098 <HAL_RCC_GetSysClockFreq+0x240>)
 8002f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f32:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	ee07 3a90 	vmov	s15, r3
 8002f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4c:	4b50      	ldr	r3, [pc, #320]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f60:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f78:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8002f7c:	e065      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	ee07 3a90 	vmov	s15, r3
 8002f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f88:	eddf 6a46 	vldr	s13, [pc, #280]	; 80030a4 <HAL_RCC_GetSysClockFreq+0x24c>
 8002f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f90:	4b3f      	ldr	r3, [pc, #252]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f98:	ee07 3a90 	vmov	s15, r3
 8002f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8002fc0:	e043      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	ee07 3a90 	vmov	s15, r3
 8002fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fcc:	eddf 6a36 	vldr	s13, [pc, #216]	; 80030a8 <HAL_RCC_GetSysClockFreq+0x250>
 8002fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd4:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fdc:	ee07 3a90 	vmov	s15, r3
 8002fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fe8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003000:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003004:	e021      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	ee07 3a90 	vmov	s15, r3
 800300c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003010:	eddf 6a26 	vldr	s13, [pc, #152]	; 80030ac <HAL_RCC_GetSysClockFreq+0x254>
 8003014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 800301a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800301c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003020:	ee07 3a90 	vmov	s15, r3
 8003024:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003028:	ed97 6a02 	vldr	s12, [r7, #8]
 800302c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8003030:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003034:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800303c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003044:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003048:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCC_GetSysClockFreq+0x238>)
 800304c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304e:	0a5b      	lsrs	r3, r3, #9
 8003050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003054:	3301      	adds	r3, #1
 8003056:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003062:	edd7 6a06 	vldr	s13, [r7, #24]
 8003066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800306e:	ee17 3a90 	vmov	r3, s15
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e004      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	e001      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_RCC_GetSysClockFreq+0x240>)
 800307e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003080:	69fb      	ldr	r3, [r7, #28]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	44020c00 	.word	0x44020c00
 8003094:	003d0900 	.word	0x003d0900
 8003098:	03d09000 	.word	0x03d09000
 800309c:	017d7840 	.word	0x017d7840
 80030a0:	46000000 	.word	0x46000000
 80030a4:	4c742400 	.word	0x4c742400
 80030a8:	4bbebc20 	.word	0x4bbebc20
 80030ac:	4a742400 	.word	0x4a742400

080030b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030b4:	f7ff fed0 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 80030b8:	4602      	mov	r2, r0
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_RCC_GetHCLKFreq+0x2c>)
 80030bc:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030be:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030c2:	4907      	ldr	r1, [pc, #28]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x30>)
 80030c4:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80030c6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80030d0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80030d2:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <HAL_RCC_GetHCLKFreq+0x34>)
 80030d4:	681b      	ldr	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	44020c00 	.word	0x44020c00
 80030e0:	08009ad8 	.word	0x08009ad8
 80030e4:	20000000 	.word	0x20000000

080030e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80030ec:	f7ff ffe0 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f4:	6a1b      	ldr	r3, [r3, #32]
 80030f6:	091b      	lsrs	r3, r3, #4
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	4904      	ldr	r1, [pc, #16]	; (8003110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003108:	4618      	mov	r0, r3
 800310a:	bd80      	pop	{r7, pc}
 800310c:	44020c00 	.word	0x44020c00
 8003110:	08009ae8 	.word	0x08009ae8

08003114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003118:	f7ff ffca 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 800311c:	4602      	mov	r2, r0
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	4904      	ldr	r1, [pc, #16]	; (800313c <HAL_RCC_GetPCLK2Freq+0x28>)
 800312a:	5ccb      	ldrb	r3, [r1, r3]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003134:	4618      	mov	r0, r3
 8003136:	bd80      	pop	{r7, pc}
 8003138:	44020c00 	.word	0x44020c00
 800313c:	08009ae8 	.word	0x08009ae8

08003140 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003144:	f7ff ffb4 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HAL_RCC_GetPCLK3Freq+0x24>)
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	0b1b      	lsrs	r3, r3, #12
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	4904      	ldr	r1, [pc, #16]	; (8003168 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	44020c00 	.word	0x44020c00
 8003168:	08009ae8 	.word	0x08009ae8

0800316c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800316c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003170:	b0d8      	sub	sp, #352	; 0x160
 8003172:	af00      	add	r7, sp, #0
 8003174:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003178:	2300      	movs	r3, #0
 800317a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800317e:	2300      	movs	r3, #0
 8003180:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003190:	2500      	movs	r5, #0
 8003192:	ea54 0305 	orrs.w	r3, r4, r5
 8003196:	d00b      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003198:	4bcd      	ldr	r3, [pc, #820]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800319a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800319e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 80031a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a8:	4ac9      	ldr	r2, [pc, #804]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80031aa:	430b      	orrs	r3, r1
 80031ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b8:	f002 0801 	and.w	r8, r2, #1
 80031bc:	f04f 0900 	mov.w	r9, #0
 80031c0:	ea58 0309 	orrs.w	r3, r8, r9
 80031c4:	d042      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80031c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	2b05      	cmp	r3, #5
 80031ce:	d823      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80031d0:	a201      	add	r2, pc, #4	; (adr r2, 80031d8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d6:	bf00      	nop
 80031d8:	08003221 	.word	0x08003221
 80031dc:	080031f1 	.word	0x080031f1
 80031e0:	08003205 	.word	0x08003205
 80031e4:	08003221 	.word	0x08003221
 80031e8:	08003221 	.word	0x08003221
 80031ec:	08003221 	.word	0x08003221
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031f4:	3308      	adds	r3, #8
 80031f6:	4618      	mov	r0, r3
 80031f8:	f004 feda 	bl	8007fb0 <RCCEx_PLL2_Config>
 80031fc:	4603      	mov	r3, r0
 80031fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003202:	e00e      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003204:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003208:	3330      	adds	r3, #48	; 0x30
 800320a:	4618      	mov	r0, r3
 800320c:	f004 ff68 	bl	80080e0 <RCCEx_PLL3_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800322a:	4ba9      	ldr	r3, [pc, #676]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800322c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003230:	f023 0107 	bic.w	r1, r3, #7
 8003234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323a:	4aa5      	ldr	r2, [pc, #660]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800323c:	430b      	orrs	r3, r1
 800323e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003242:	e003      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003248:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800324c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f002 0a02 	and.w	sl, r2, #2
 8003258:	f04f 0b00 	mov.w	fp, #0
 800325c:	ea5a 030b 	orrs.w	r3, sl, fp
 8003260:	f000 8088 	beq.w	8003374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003264:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	2b28      	cmp	r3, #40	; 0x28
 800326c:	d868      	bhi.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003349 	.word	0x08003349
 8003278:	08003341 	.word	0x08003341
 800327c:	08003341 	.word	0x08003341
 8003280:	08003341 	.word	0x08003341
 8003284:	08003341 	.word	0x08003341
 8003288:	08003341 	.word	0x08003341
 800328c:	08003341 	.word	0x08003341
 8003290:	08003341 	.word	0x08003341
 8003294:	08003319 	.word	0x08003319
 8003298:	08003341 	.word	0x08003341
 800329c:	08003341 	.word	0x08003341
 80032a0:	08003341 	.word	0x08003341
 80032a4:	08003341 	.word	0x08003341
 80032a8:	08003341 	.word	0x08003341
 80032ac:	08003341 	.word	0x08003341
 80032b0:	08003341 	.word	0x08003341
 80032b4:	0800332d 	.word	0x0800332d
 80032b8:	08003341 	.word	0x08003341
 80032bc:	08003341 	.word	0x08003341
 80032c0:	08003341 	.word	0x08003341
 80032c4:	08003341 	.word	0x08003341
 80032c8:	08003341 	.word	0x08003341
 80032cc:	08003341 	.word	0x08003341
 80032d0:	08003341 	.word	0x08003341
 80032d4:	08003349 	.word	0x08003349
 80032d8:	08003341 	.word	0x08003341
 80032dc:	08003341 	.word	0x08003341
 80032e0:	08003341 	.word	0x08003341
 80032e4:	08003341 	.word	0x08003341
 80032e8:	08003341 	.word	0x08003341
 80032ec:	08003341 	.word	0x08003341
 80032f0:	08003341 	.word	0x08003341
 80032f4:	08003349 	.word	0x08003349
 80032f8:	08003341 	.word	0x08003341
 80032fc:	08003341 	.word	0x08003341
 8003300:	08003341 	.word	0x08003341
 8003304:	08003341 	.word	0x08003341
 8003308:	08003341 	.word	0x08003341
 800330c:	08003341 	.word	0x08003341
 8003310:	08003341 	.word	0x08003341
 8003314:	08003349 	.word	0x08003349
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003318:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800331c:	3308      	adds	r3, #8
 800331e:	4618      	mov	r0, r3
 8003320:	f004 fe46 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800332a:	e00e      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800332c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003330:	3330      	adds	r3, #48	; 0x30
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fed4 	bl	80080e0 <RCCEx_PLL3_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800333e:	e004      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10c      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003352:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003358:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003362:	4a5b      	ldr	r2, [pc, #364]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003364:	430b      	orrs	r3, r1
 8003366:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800336a:	e003      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003370:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	f002 0304 	and.w	r3, r2, #4
 8003380:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800338a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d04e      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800339e:	d02c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80033a0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80033a4:	d825      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033aa:	d028      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d81f      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033b2:	2bc0      	cmp	r3, #192	; 0xc0
 80033b4:	d025      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80033b6:	2bc0      	cmp	r3, #192	; 0xc0
 80033b8:	d81b      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033ba:	2b80      	cmp	r3, #128	; 0x80
 80033bc:	d00f      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x272>
 80033be:	2b80      	cmp	r3, #128	; 0x80
 80033c0:	d817      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01f      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80033c6:	2b40      	cmp	r3, #64	; 0x40
 80033c8:	d113      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ce:	3308      	adds	r3, #8
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 fded 	bl	8007fb0 <RCCEx_PLL2_Config>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033dc:	e014      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033e2:	3330      	adds	r3, #48	; 0x30
 80033e4:	4618      	mov	r0, r3
 80033e6:	f004 fe7b 	bl	80080e0 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80033f0:	e00a      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033fa:	bf00      	nop
 80033fc:	e004      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80033fe:	bf00      	nop
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10c      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003412:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003416:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800341a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800341e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003420:	4a2b      	ldr	r2, [pc, #172]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003422:	430b      	orrs	r3, r1
 8003424:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003428:	e003      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800342e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003432:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f002 0308 	and.w	r3, r2, #8
 800343e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003442:	2300      	movs	r3, #0
 8003444:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003448:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 800344c:	460b      	mov	r3, r1
 800344e:	4313      	orrs	r3, r2
 8003450:	d056      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003452:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003456:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003458:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800345c:	d031      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800345e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003462:	d82a      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003468:	d02d      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800346a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800346e:	d824      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003470:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003474:	d029      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003476:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800347a:	d81e      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003480:	d011      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d818      	bhi.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800348c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003490:	d113      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003496:	3308      	adds	r3, #8
 8003498:	4618      	mov	r0, r3
 800349a:	f004 fd89 	bl	8007fb0 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80034a4:	e017      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80034a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034aa:	3330      	adds	r3, #48	; 0x30
 80034ac:	4618      	mov	r0, r3
 80034ae:	f004 fe17 	bl	80080e0 <RCCEx_PLL3_Config>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80034b8:	e00d      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034c0:	e009      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034c2:	bf00      	nop
 80034c4:	e007      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034c6:	bf00      	nop
 80034c8:	e005      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80034ca:	bf00      	nop
 80034cc:	e003      	b.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80034ce:	bf00      	nop
 80034d0:	44020c00 	.word	0x44020c00
        break;
 80034d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10c      	bne.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80034de:	4bbb      	ldr	r3, [pc, #748]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034e4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 80034e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ee:	4ab7      	ldr	r2, [pc, #732]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80034f6:	e003      	b.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034fc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003500:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	f002 0310 	and.w	r3, r2, #16
 800350c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003516:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800351a:	460b      	mov	r3, r1
 800351c:	4313      	orrs	r3, r2
 800351e:	d053      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003526:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800352a:	d031      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800352c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003530:	d82a      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003536:	d02d      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800353c:	d824      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800353e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003542:	d029      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003544:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003548:	d81e      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800354a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800354e:	d011      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003554:	d818      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d020      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800355a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800355e:	d113      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003564:	3308      	adds	r3, #8
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fd22 	bl	8007fb0 <RCCEx_PLL2_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003572:	e014      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003574:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003578:	3330      	adds	r3, #48	; 0x30
 800357a:	4618      	mov	r0, r3
 800357c:	f004 fdb0 	bl	80080e0 <RCCEx_PLL3_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003586:	e00a      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800358e:	e006      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003590:	bf00      	nop
 8003592:	e004      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003594:	bf00      	nop
 8003596:	e002      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003598:	bf00      	nop
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800359c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800359e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80035a6:	4b89      	ldr	r3, [pc, #548]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035ac:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80035b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b6:	4a85      	ldr	r2, [pc, #532]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80035b8:	430b      	orrs	r3, r1
 80035ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80035c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80035c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f002 0320 	and.w	r3, r2, #32
 80035d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80035de:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 80035e2:	460b      	mov	r3, r1
 80035e4:	4313      	orrs	r3, r2
 80035e6:	d053      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80035e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ee:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80035f2:	d031      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80035f4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80035f8:	d82a      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80035fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035fe:	d02d      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003600:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003604:	d824      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003606:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800360a:	d029      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800360c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003610:	d81e      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003616:	d011      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d818      	bhi.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d020      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003622:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003626:	d113      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362c:	3308      	adds	r3, #8
 800362e:	4618      	mov	r0, r3
 8003630:	f004 fcbe 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003634:	4603      	mov	r3, r0
 8003636:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800363a:	e014      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800363c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003640:	3330      	adds	r3, #48	; 0x30
 8003642:	4618      	mov	r0, r3
 8003644:	f004 fd4c 	bl	80080e0 <RCCEx_PLL3_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800364e:	e00a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003656:	e006      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003658:	bf00      	nop
 800365a:	e004      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800365c:	bf00      	nop
 800365e:	e002      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003660:	bf00      	nop
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003666:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800366e:	4b57      	ldr	r3, [pc, #348]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003674:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a53      	ldr	r2, [pc, #332]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003680:	430b      	orrs	r3, r1
 8003682:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003686:	e003      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003688:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800368c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003690:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800369c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036a0:	2300      	movs	r3, #0
 80036a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036a6:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80036aa:	460b      	mov	r3, r1
 80036ac:	4313      	orrs	r3, r2
 80036ae:	d053      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80036b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036ba:	d031      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80036bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036c0:	d82a      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c6:	d02d      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80036c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036cc:	d824      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036d2:	d029      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80036d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036d8:	d81e      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036de:	d011      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80036e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036e4:	d818      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d020      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80036ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ee:	d113      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f4:	3308      	adds	r3, #8
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 fc5a 	bl	8007fb0 <RCCEx_PLL2_Config>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003702:	e014      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003704:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003708:	3330      	adds	r3, #48	; 0x30
 800370a:	4618      	mov	r0, r3
 800370c:	f004 fce8 	bl	80080e0 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8003716:	e00a      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003720:	bf00      	nop
 8003722:	e004      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003724:	bf00      	nop
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800373c:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8003740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003746:	4a21      	ldr	r2, [pc, #132]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003748:	430b      	orrs	r3, r1
 800374a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003754:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003758:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003764:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800376e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d055      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8003778:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800377c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800377e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003782:	d033      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x680>
 8003784:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003788:	d82c      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800378a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800378e:	d02f      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8003790:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003794:	d826      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003796:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800379a:	d02b      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800379c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037a0:	d820      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037a6:	d013      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80037a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ac:	d81a      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d022      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80037b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b6:	d115      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037bc:	3308      	adds	r3, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 fbf6 	bl	8007fb0 <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037ca:	e016      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80037cc:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80037d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037d4:	3330      	adds	r3, #48	; 0x30
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 fc82 	bl	80080e0 <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80037e2:	e00a      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80037ea:	e006      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037ec:	bf00      	nop
 80037ee:	e004      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037f0:	bf00      	nop
 80037f2:	e002      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037f4:	bf00      	nop
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80037f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8003802:	4bbb      	ldr	r3, [pc, #748]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003804:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003808:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800380c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003812:	4ab7      	ldr	r2, [pc, #732]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003814:	430b      	orrs	r3, r1
 8003816:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003820:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003824:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8003830:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800383a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d053      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8003844:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800384a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800384e:	d031      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8003850:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003854:	d82a      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385a:	d02d      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800385c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003860:	d824      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x740>
 8003862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003866:	d029      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x750>
 8003868:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800386c:	d81e      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x740>
 800386e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003872:	d011      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8003874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003878:	d818      	bhi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x740>
 800387a:	2b00      	cmp	r3, #0
 800387c:	d020      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800387e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003882:	d113      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003888:	3308      	adds	r3, #8
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fb90 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003890:	4603      	mov	r3, r0
 8003892:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8003896:	e014      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800389c:	3330      	adds	r3, #48	; 0x30
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 fc1e 	bl	80080e0 <RCCEx_PLL3_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80038aa:	e00a      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038b2:	e006      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038b4:	bf00      	nop
 80038b6:	e004      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038b8:	bf00      	nop
 80038ba:	e002      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038bc:	bf00      	nop
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80038c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80038ca:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80038d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80038d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038da:	4a85      	ldr	r2, [pc, #532]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80038dc:	430b      	orrs	r3, r1
 80038de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80038e2:	e003      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038e8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80038ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80038f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003902:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d055      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 800390c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003914:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8003918:	d031      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x812>
 800391a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800391e:	d82a      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003924:	d02d      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x816>
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800392a:	d824      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800392c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003930:	d029      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8003932:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003936:	d81e      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393c:	d011      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800393e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003942:	d818      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8003948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800394c:	d113      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800394e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003952:	3308      	adds	r3, #8
 8003954:	4618      	mov	r0, r3
 8003956:	f004 fb2b 	bl	8007fb0 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003960:	e014      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003962:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003966:	3330      	adds	r3, #48	; 0x30
 8003968:	4618      	mov	r0, r3
 800396a:	f004 fbb9 	bl	80080e0 <RCCEx_PLL3_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8003974:	e00a      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800397c:	e006      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800398a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800398c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10d      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8003994:	4b56      	ldr	r3, [pc, #344]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800399a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800399e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a6:	4a52      	ldr	r2, [pc, #328]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80039a8:	430b      	orrs	r3, r1
 80039aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80039ae:	e003      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80039b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80039c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80039d2:	460b      	mov	r3, r1
 80039d4:	4313      	orrs	r3, r2
 80039d6:	d044      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80039d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d823      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80039e4:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a05 	.word	0x08003a05
 80039f4:	08003a19 	.word	0x08003a19
 80039f8:	08003a35 	.word	0x08003a35
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a08:	3308      	adds	r3, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f004 fad0 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003a16:	e00e      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a1c:	3330      	adds	r3, #48	; 0x30
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fb5e 	bl	80080e0 <RCCEx_PLL3_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8003a2a:	e004      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a32:	e000      	b.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8003a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a36:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10d      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003a3e:	4b2c      	ldr	r3, [pc, #176]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003a44:	f023 0107 	bic.w	r1, r3, #7
 8003a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a50:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003a52:	430b      	orrs	r3, r1
 8003a54:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003a58:	e003      	b.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a5e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003a6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a78:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	d04f      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8003a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	2b50      	cmp	r3, #80	; 0x50
 8003a8c:	d029      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003a8e:	2b50      	cmp	r3, #80	; 0x50
 8003a90:	d823      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d027      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d81f      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003a9a:	2b30      	cmp	r3, #48	; 0x30
 8003a9c:	d025      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8003a9e:	2b30      	cmp	r3, #48	; 0x30
 8003aa0:	d81b      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d00f      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d817      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d022      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d113      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f004 fa79 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ac4:	e017      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ac6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aca:	3330      	adds	r3, #48	; 0x30
 8003acc:	4618      	mov	r0, r3
 8003ace:	f004 fb07 	bl	80080e0 <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8003ad8:	e00d      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ae0:	e009      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e007      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e005      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8003aea:	bf00      	nop
 8003aec:	e003      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8003aee:	bf00      	nop
 8003af0:	44020c00 	.word	0x44020c00
        break;
 8003af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10d      	bne.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8003afe:	4baf      	ldr	r3, [pc, #700]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003b04:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003b08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	4aaa      	ldr	r2, [pc, #680]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003b12:	430b      	orrs	r3, r1
 8003b14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003b18:	e003      	b.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003b2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b38:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	d055      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b4e:	d031      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8003b50:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003b54:	d82a      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b5a:	d02d      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8003b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b60:	d824      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b66:	d029      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8003b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b6c:	d81e      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b72:	d011      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8003b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b78:	d818      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d020      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8003b7e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b82:	d113      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b88:	3308      	adds	r3, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f004 fa10 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003b96:	e014      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b9c:	3330      	adds	r3, #48	; 0x30
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f004 fa9e 	bl	80080e0 <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003bb2:	e006      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bb4:	bf00      	nop
 8003bb6:	e004      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bb8:	bf00      	nop
 8003bba:	e002      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bbc:	bf00      	nop
 8003bbe:	e000      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8003bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10d      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003bca:	4b7c      	ldr	r3, [pc, #496]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bd0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bdc:	4a77      	ldr	r2, [pc, #476]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003be4:	e003      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003c04:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	d03d      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003c0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c1a:	d01b      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8003c1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c20:	d814      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c26:	d017      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8003c28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2c:	d80e      	bhi.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d014      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d109      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c38:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3c:	3330      	adds	r3, #48	; 0x30
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 fa4e 	bl	80080e0 <RCCEx_PLL3_Config>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003c4a:	e008      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c52:	e004      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c54:	bf00      	nop
 8003c56:	e002      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8003c5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003c66:	4b55      	ldr	r3, [pc, #340]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003c6c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003c70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c78:	4a50      	ldr	r2, [pc, #320]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003c80:	e003      	b.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c86:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003c96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ca0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	d03d      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003caa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cb6:	d01b      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8003cb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cbc:	d814      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003cbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc2:	d017      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8003cc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc8:	d80e      	bhi.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d014      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8003cce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cd2:	d109      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cd8:	3330      	adds	r3, #48	; 0x30
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f004 fa00 	bl	80080e0 <RCCEx_PLL3_Config>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cee:	e004      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cf0:	bf00      	nop
 8003cf2:	e002      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8003cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003d02:	4b2e      	ldr	r3, [pc, #184]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d08:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8003d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d14:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003d1c:	e003      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d22:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003d3c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003d40:	460b      	mov	r3, r1
 8003d42:	4313      	orrs	r3, r2
 8003d44:	d040      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8003d46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d52:	d01b      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8003d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d58:	d814      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d5e:	d017      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d64:	d80e      	bhi.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d014      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003d6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d6e:	d109      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d74:	3330      	adds	r3, #48	; 0x30
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 f9b2 	bl	80080e0 <RCCEx_PLL3_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8003d82:	e008      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d8a:	e004      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d8c:	bf00      	nop
 8003d8e:	e002      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8003d94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d110      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003da0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003da4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003da8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db0:	4a02      	ldr	r2, [pc, #8]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8003db2:	430b      	orrs	r3, r1
 8003db4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003db8:	e006      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8003dba:	bf00      	nop
 8003dbc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dc4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8003dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003dde:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4313      	orrs	r3, r2
 8003de6:	d03d      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8003de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003df4:	d01b      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8003df6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dfa:	d814      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003dfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e00:	d017      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8003e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e06:	d80e      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d014      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e10:	d109      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e16:	3330      	adds	r3, #48	; 0x30
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 f961 	bl	80080e0 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e2c:	e004      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e32:	bf00      	nop
 8003e34:	e000      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8003e36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10d      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8003e40:	4bbe      	ldr	r3, [pc, #760]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e46:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e52:	4aba      	ldr	r2, [pc, #744]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d035      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e88:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e90:	d015      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8003e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e96:	d80e      	bhi.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8003e9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea0:	d109      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ea2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ea6:	3330      	adds	r3, #48	; 0x30
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f004 f919 	bl	80080e0 <RCCEx_PLL3_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003eb4:	e006      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ebc:	e002      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8003ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ec4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003ecc:	4b9b      	ldr	r3, [pc, #620]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ed2:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8003ed6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003eda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ede:	4a97      	ldr	r2, [pc, #604]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003eec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef8:	2100      	movs	r1, #0
 8003efa:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8003efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8003f10:	4b8a      	ldr	r3, [pc, #552]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4a89      	ldr	r2, [pc, #548]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f1a:	61d3      	str	r3, [r2, #28]
 8003f1c:	4b87      	ldr	r3, [pc, #540]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003f28:	4a84      	ldr	r2, [pc, #528]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f44:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	d055      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8003f4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f56:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f5a:	d031      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8003f5c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f60:	d82a      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f66:	d02d      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d824      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f72:	d029      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003f74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f78:	d81e      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f7e:	d011      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8003f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f84:	d818      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d020      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8e:	d113      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f94:	3308      	adds	r3, #8
 8003f96:	4618      	mov	r0, r3
 8003f98:	f004 f80a 	bl	8007fb0 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003fa2:	e014      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa8:	3330      	adds	r3, #48	; 0x30
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 f898 	bl	80080e0 <RCCEx_PLL3_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8003fb6:	e00a      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fbe:	e006      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e002      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fc8:	bf00      	nop
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10d      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003fdc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003fe0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fe8:	4a54      	ldr	r2, [pc, #336]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003ff0:	e003      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ffa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004006:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004010:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004014:	460b      	mov	r3, r1
 8004016:	4313      	orrs	r3, r2
 8004018:	d055      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800401a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800401e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004022:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004026:	d031      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004028:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800402c:	d82a      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800402e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004032:	d02d      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004038:	d824      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800403a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800403e:	d029      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004040:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004044:	d81e      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404a:	d011      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800404c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004050:	d818      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d113      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800405c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004060:	3308      	adds	r3, #8
 8004062:	4618      	mov	r0, r3
 8004064:	f003 ffa4 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800406e:	e014      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004070:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004074:	3330      	adds	r3, #48	; 0x30
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f832 	bl	80080e0 <RCCEx_PLL3_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004082:	e00a      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800408a:	e006      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800408c:	bf00      	nop
 800408e:	e004      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004098:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10d      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80040a2:	4b26      	ldr	r3, [pc, #152]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80040a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80040ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80040b4:	4a21      	ldr	r2, [pc, #132]	; (800413c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80040c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	2100      	movs	r1, #0
 80040d0:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d057      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80040e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f2:	d033      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80040f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040f8:	d82c      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80040fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040fe:	d02f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004104:	d826      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004106:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800410a:	d02b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 800410c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004110:	d820      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004116:	d013      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800411c:	d81a      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d022      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004126:	d115      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004128:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800412c:	3308      	adds	r3, #8
 800412e:	4618      	mov	r0, r3
 8004130:	f003 ff3e 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800413a:	e016      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800413c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004144:	3330      	adds	r3, #48	; 0x30
 8004146:	4618      	mov	r0, r3
 8004148:	f003 ffca 	bl	80080e0 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004152:	e00a      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800415a:	e006      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800415c:	bf00      	nop
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004172:	4bbb      	ldr	r3, [pc, #748]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004174:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004178:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800417c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004180:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004184:	4ab6      	ldr	r2, [pc, #728]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004186:	430b      	orrs	r3, r1
 8004188:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004192:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004196:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	2100      	movs	r1, #0
 80041a0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d055      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80041b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041be:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80041c2:	d031      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80041c4:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80041c8:	d82a      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ce:	d02d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80041d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d4:	d824      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041da:	d029      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80041dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80041e0:	d81e      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041e6:	d011      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80041e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041ec:	d818      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d020      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f6:	d113      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041fc:	3308      	adds	r3, #8
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fed6 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004204:	4603      	mov	r3, r0
 8004206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800420a:	e014      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800420c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004210:	3330      	adds	r3, #48	; 0x30
 8004212:	4618      	mov	r0, r3
 8004214:	f003 ff64 	bl	80080e0 <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800421e:	e00a      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004226:	e006      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004228:	bf00      	nop
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004236:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10d      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800423e:	4b88      	ldr	r3, [pc, #544]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004240:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004244:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004248:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800424c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004250:	4a83      	ldr	r2, [pc, #524]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004252:	430b      	orrs	r3, r1
 8004254:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800425e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004262:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	2100      	movs	r1, #0
 800426c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004278:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d055      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004282:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004286:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800428a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800428e:	d031      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004290:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004294:	d82a      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800429a:	d02d      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800429c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042a0:	d824      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042a6:	d029      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80042a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80042ac:	d81e      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b2:	d011      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80042b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80042b8:	d818      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d020      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80042be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042c2:	d113      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042c8:	3308      	adds	r3, #8
 80042ca:	4618      	mov	r0, r3
 80042cc:	f003 fe70 	bl	8007fb0 <RCCEx_PLL2_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042d6:	e014      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042dc:	3330      	adds	r3, #48	; 0x30
 80042de:	4618      	mov	r0, r3
 80042e0:	f003 fefe 	bl	80080e0 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80042ea:	e00a      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042f2:	e006      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042f4:	bf00      	nop
 80042f6:	e004      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042f8:	bf00      	nop
 80042fa:	e002      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80042fc:	bf00      	nop
 80042fe:	e000      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004302:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10d      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800430a:	4b55      	ldr	r3, [pc, #340]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800430c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004310:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004318:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800431c:	4a50      	ldr	r2, [pc, #320]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800431e:	430b      	orrs	r3, r1
 8004320:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800432a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800432e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	2100      	movs	r1, #0
 8004338:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004344:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d055      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800434e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004352:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800435a:	d031      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800435c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004360:	d82a      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d02d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d824      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800436e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004372:	d029      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004374:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004378:	d81e      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800437a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800437e:	d011      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004380:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004384:	d818      	bhi.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d020      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800438a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438e:	d113      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004390:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004394:	3308      	adds	r3, #8
 8004396:	4618      	mov	r0, r3
 8004398:	f003 fe0a 	bl	8007fb0 <RCCEx_PLL2_Config>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80043a2:	e014      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043a8:	3330      	adds	r3, #48	; 0x30
 80043aa:	4618      	mov	r0, r3
 80043ac:	f003 fe98 	bl	80080e0 <RCCEx_PLL3_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80043b6:	e00a      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043be:	e006      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043c0:	bf00      	nop
 80043c2:	e004      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80043cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10d      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80043dc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80043e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043e8:	4a1d      	ldr	r2, [pc, #116]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80043ea:	430b      	orrs	r3, r1
 80043ec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80043f0:	e003      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043f6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004402:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800440a:	2300      	movs	r3, #0
 800440c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004410:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004414:	460b      	mov	r3, r1
 8004416:	4313      	orrs	r3, r2
 8004418:	d055      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800441a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004422:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004426:	d035      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800442c:	d82e      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800442e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004432:	d031      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004434:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004438:	d828      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800443a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800443e:	d01b      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004444:	d822      	bhi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444e:	d009      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004450:	e01c      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004452:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	4a02      	ldr	r2, [pc, #8]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800445c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800445e:	e01c      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004460:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004468:	3308      	adds	r3, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f003 fda0 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004476:	e010      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800447c:	3330      	adds	r3, #48	; 0x30
 800447e:	4618      	mov	r0, r3
 8004480:	f003 fe2e 	bl	80080e0 <RCCEx_PLL3_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800448a:	e006      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004492:	e002      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004494:	bf00      	nop
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80044a2:	4bc3      	ldr	r3, [pc, #780]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80044ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044b4:	4abe      	ldr	r2, [pc, #760]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80044b6:	430b      	orrs	r3, r1
 80044b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80044c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044d6:	2300      	movs	r3, #0
 80044d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80044dc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80044e0:	460b      	mov	r3, r1
 80044e2:	4313      	orrs	r3, r2
 80044e4:	d051      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80044e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80044ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f2:	d033      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80044f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044f8:	d82c      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80044fa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80044fe:	d02d      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004500:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004504:	d826      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800450a:	d019      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 800450c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004510:	d820      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004516:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800451a:	d007      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 800451c:	e01a      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451e:	4ba4      	ldr	r3, [pc, #656]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	4aa3      	ldr	r2, [pc, #652]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800452a:	e018      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800452c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004530:	3308      	adds	r3, #8
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fd3c 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004538:	4603      	mov	r3, r0
 800453a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800453e:	e00e      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004544:	3330      	adds	r3, #48	; 0x30
 8004546:	4618      	mov	r0, r3
 8004548:	f003 fdca 	bl	80080e0 <RCCEx_PLL3_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004552:	e004      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800455a:	e000      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800455c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10d      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004566:	4b92      	ldr	r3, [pc, #584]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800456c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004570:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004574:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004578:	4a8d      	ldr	r2, [pc, #564]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800457a:	430b      	orrs	r3, r1
 800457c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004580:	e003      	b.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004582:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004586:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800458a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004596:	67bb      	str	r3, [r7, #120]	; 0x78
 8004598:	2300      	movs	r3, #0
 800459a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800459c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d032      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80045a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80045ae:	2b05      	cmp	r3, #5
 80045b0:	d80f      	bhi.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d211      	bcs.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d911      	bls.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d109      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045c2:	3308      	adds	r3, #8
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 fcf3 	bl	8007fb0 <RCCEx_PLL2_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045d0:	e006      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045d8:	e002      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045da:	bf00      	nop
 80045dc:	e000      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80045de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10d      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80045e8:	4b71      	ldr	r3, [pc, #452]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045ee:	f023 0107 	bic.w	r1, r3, #7
 80045f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80045fa:	4a6d      	ldr	r2, [pc, #436]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80045fc:	430b      	orrs	r3, r1
 80045fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004602:	e003      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004608:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800460c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	2100      	movs	r1, #0
 8004616:	6739      	str	r1, [r7, #112]	; 0x70
 8004618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800461c:	677b      	str	r3, [r7, #116]	; 0x74
 800461e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d024      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800462c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004634:	2b08      	cmp	r3, #8
 8004636:	d005      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800463e:	e002      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004640:	bf00      	nop
 8004642:	e000      	b.n	8004646 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004646:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10d      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800464e:	4b58      	ldr	r3, [pc, #352]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004654:	f023 0108 	bic.w	r1, r3, #8
 8004658:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800465c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004660:	4a53      	ldr	r2, [pc, #332]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004662:	430b      	orrs	r3, r1
 8004664:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004668:	e003      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800466e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004672:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800467e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004680:	2300      	movs	r3, #0
 8004682:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004684:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004688:	460b      	mov	r3, r1
 800468a:	4313      	orrs	r3, r2
 800468c:	f000 80b9 	beq.w	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004690:	4b48      	ldr	r3, [pc, #288]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	4a47      	ldr	r2, [pc, #284]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800469c:	f7fc fc26 	bl	8000eec <HAL_GetTick>
 80046a0:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046a4:	e00b      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a6:	f7fc fc21 	bl	8000eec <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d903      	bls.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046bc:	e005      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80046be:	4b3d      	ldr	r3, [pc, #244]	; (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0ed      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80046ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 8093 	bne.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d4:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80046e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d023      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80046ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ee:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80046f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046fa:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80046fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004704:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004708:	4b29      	ldr	r3, [pc, #164]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800470a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470e:	4a28      	ldr	r2, [pc, #160]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004714:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004718:	4b25      	ldr	r3, [pc, #148]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800471a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471e:	4a24      	ldr	r2, [pc, #144]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004724:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004728:	4a21      	ldr	r2, [pc, #132]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800472a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800472e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004732:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d019      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800473e:	f7fc fbd5 	bl	8000eec <HAL_GetTick>
 8004742:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004746:	e00d      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004748:	f7fc fbd0 	bl	8000eec <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004752:	1ad2      	subs	r2, r2, r3
 8004754:	f241 3388 	movw	r3, #5000	; 0x1388
 8004758:	429a      	cmp	r2, r3
 800475a:	d903      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8004762:	e006      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004766:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ea      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8004772:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004776:	2b00      	cmp	r3, #0
 8004778:	d13a      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800477a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800477e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8004782:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800478a:	d115      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800478c:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004794:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004798:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047a2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80047a6:	4a02      	ldr	r2, [pc, #8]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80047a8:	430b      	orrs	r3, r1
 80047aa:	61d3      	str	r3, [r2, #28]
 80047ac:	e00a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80047ae:	bf00      	nop
 80047b0:	44020c00 	.word	0x44020c00
 80047b4:	44020800 	.word	0x44020800
 80047b8:	4b9f      	ldr	r3, [pc, #636]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4a9e      	ldr	r2, [pc, #632]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80047c2:	61d3      	str	r3, [r2, #28]
 80047c4:	4b9c      	ldr	r3, [pc, #624]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047ca:	4a9b      	ldr	r2, [pc, #620]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047d4:	4b98      	ldr	r3, [pc, #608]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047d6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80047da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047de:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80047e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e6:	4a94      	ldr	r2, [pc, #592]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047ee:	e008      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047f4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80047f8:	e003      	b.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047fe:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480a:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800480e:	663b      	str	r3, [r7, #96]	; 0x60
 8004810:	2300      	movs	r3, #0
 8004812:	667b      	str	r3, [r7, #100]	; 0x64
 8004814:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004818:	460b      	mov	r3, r1
 800481a:	4313      	orrs	r3, r2
 800481c:	d035      	beq.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800481e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004822:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004826:	2b30      	cmp	r3, #48	; 0x30
 8004828:	d014      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800482a:	2b30      	cmp	r3, #48	; 0x30
 800482c:	d80e      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800482e:	2b20      	cmp	r3, #32
 8004830:	d012      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8004832:	2b20      	cmp	r3, #32
 8004834:	d80a      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8004836:	2b00      	cmp	r3, #0
 8004838:	d010      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800483a:	2b10      	cmp	r3, #16
 800483c:	d106      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483e:	4b7e      	ldr	r3, [pc, #504]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	4a7d      	ldr	r2, [pc, #500]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004848:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800484a:	e008      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004852:	e004      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004854:	bf00      	nop
 8004856:	e002      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8004858:	bf00      	nop
 800485a:	e000      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800485c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800485e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10d      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004866:	4b74      	ldr	r3, [pc, #464]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800486c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004874:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004878:	4a6f      	ldr	r2, [pc, #444]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800487a:	430b      	orrs	r3, r1
 800487c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004882:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004886:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800488a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004892:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004896:	65bb      	str	r3, [r7, #88]	; 0x58
 8004898:	2300      	movs	r3, #0
 800489a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800489c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80048a0:	460b      	mov	r3, r1
 80048a2:	4313      	orrs	r3, r2
 80048a4:	d033      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80048a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048aa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d007      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80048b6:	e010      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b8:	4b5f      	ldr	r3, [pc, #380]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	4a5e      	ldr	r2, [pc, #376]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048c2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048c4:	e00d      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ca:	3308      	adds	r3, #8
 80048cc:	4618      	mov	r0, r3
 80048ce:	f003 fb6f 	bl	8007fb0 <RCCEx_PLL2_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80048d8:	e003      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80048e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10d      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80048ea:	4b53      	ldr	r3, [pc, #332]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80048f0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80048f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80048fc:	4a4e      	ldr	r2, [pc, #312]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80048fe:	430b      	orrs	r3, r1
 8004900:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004904:	e003      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800490a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800490e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800491a:	653b      	str	r3, [r7, #80]	; 0x50
 800491c:	2300      	movs	r3, #0
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004924:	460b      	mov	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	d033      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800492a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800492e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d007      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800493a:	e010      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800493c:	4b3e      	ldr	r3, [pc, #248]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800493e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004940:	4a3d      	ldr	r2, [pc, #244]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004946:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8004948:	e00d      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800494a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800494e:	3308      	adds	r3, #8
 8004950:	4618      	mov	r0, r3
 8004952:	f003 fb2d 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004966:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10d      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800496e:	4b32      	ldr	r3, [pc, #200]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004970:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004974:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004978:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800497c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8004980:	4a2d      	ldr	r2, [pc, #180]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004982:	430b      	orrs	r3, r1
 8004984:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004988:	e003      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800498e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004992:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800499e:	64bb      	str	r3, [r7, #72]	; 0x48
 80049a0:	2300      	movs	r3, #0
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80049a8:	460b      	mov	r3, r1
 80049aa:	4313      	orrs	r3, r2
 80049ac:	d04a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80049ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d827      	bhi.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80049ba:	a201      	add	r2, pc, #4	; (adr r2, 80049c0 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80049bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c0:	080049d5 	.word	0x080049d5
 80049c4:	080049e3 	.word	0x080049e3
 80049c8:	080049f7 	.word	0x080049f7
 80049cc:	08004a13 	.word	0x08004a13
 80049d0:	08004a13 	.word	0x08004a13
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049d4:	4b18      	ldr	r3, [pc, #96]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80049da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049de:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049e0:	e018      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049e6:	3308      	adds	r3, #8
 80049e8:	4618      	mov	r0, r3
 80049ea:	f003 fae1 	bl	8007fb0 <RCCEx_PLL2_Config>
 80049ee:	4603      	mov	r3, r0
 80049f0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80049f4:	e00e      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049fa:	3330      	adds	r3, #48	; 0x30
 80049fc:	4618      	mov	r0, r3
 80049fe:	f003 fb6f 	bl	80080e0 <RCCEx_PLL3_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004a08:	e004      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a10:	e000      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8004a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10f      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a22:	f023 0107 	bic.w	r1, r3, #7
 8004a26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a2e:	4a02      	ldr	r2, [pc, #8]	; (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8004a30:	430b      	orrs	r3, r1
 8004a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a36:	e005      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8004a38:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004a50:	643b      	str	r3, [r7, #64]	; 0x40
 8004a52:	2300      	movs	r3, #0
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
 8004a56:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f000 8081 	beq.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8004a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004a6a:	2b20      	cmp	r3, #32
 8004a6c:	d85f      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004af9 	.word	0x08004af9
 8004a78:	08004b2f 	.word	0x08004b2f
 8004a7c:	08004b2f 	.word	0x08004b2f
 8004a80:	08004b2f 	.word	0x08004b2f
 8004a84:	08004b2f 	.word	0x08004b2f
 8004a88:	08004b2f 	.word	0x08004b2f
 8004a8c:	08004b2f 	.word	0x08004b2f
 8004a90:	08004b2f 	.word	0x08004b2f
 8004a94:	08004b07 	.word	0x08004b07
 8004a98:	08004b2f 	.word	0x08004b2f
 8004a9c:	08004b2f 	.word	0x08004b2f
 8004aa0:	08004b2f 	.word	0x08004b2f
 8004aa4:	08004b2f 	.word	0x08004b2f
 8004aa8:	08004b2f 	.word	0x08004b2f
 8004aac:	08004b2f 	.word	0x08004b2f
 8004ab0:	08004b2f 	.word	0x08004b2f
 8004ab4:	08004b1b 	.word	0x08004b1b
 8004ab8:	08004b2f 	.word	0x08004b2f
 8004abc:	08004b2f 	.word	0x08004b2f
 8004ac0:	08004b2f 	.word	0x08004b2f
 8004ac4:	08004b2f 	.word	0x08004b2f
 8004ac8:	08004b2f 	.word	0x08004b2f
 8004acc:	08004b2f 	.word	0x08004b2f
 8004ad0:	08004b2f 	.word	0x08004b2f
 8004ad4:	08004b37 	.word	0x08004b37
 8004ad8:	08004b2f 	.word	0x08004b2f
 8004adc:	08004b2f 	.word	0x08004b2f
 8004ae0:	08004b2f 	.word	0x08004b2f
 8004ae4:	08004b2f 	.word	0x08004b2f
 8004ae8:	08004b2f 	.word	0x08004b2f
 8004aec:	08004b2f 	.word	0x08004b2f
 8004af0:	08004b2f 	.word	0x08004b2f
 8004af4:	08004b37 	.word	0x08004b37
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af8:	4bab      	ldr	r3, [pc, #684]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	4aaa      	ldr	r2, [pc, #680]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b02:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b04:	e018      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f003 fa4f 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b18:	e00e      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1e:	3330      	adds	r3, #48	; 0x30
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 fadd 	bl	80080e0 <RCCEx_PLL3_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8004b2c:	e004      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b34:	e000      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8004b36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b38:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004b40:	4b99      	ldr	r3, [pc, #612]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004b4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b52:	4a95      	ldr	r2, [pc, #596]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004b54:	430b      	orrs	r3, r1
 8004b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004b5a:	e003      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004b64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b70:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b72:	2300      	movs	r3, #0
 8004b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	d04e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8c:	d02e      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8004b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b92:	d827      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b94:	2bc0      	cmp	r3, #192	; 0xc0
 8004b96:	d02b      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8004b98:	2bc0      	cmp	r3, #192	; 0xc0
 8004b9a:	d823      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d017      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8004ba0:	2b80      	cmp	r3, #128	; 0x80
 8004ba2:	d81f      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d007      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8004bac:	e01a      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bae:	4b7e      	ldr	r3, [pc, #504]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb2:	4a7d      	ldr	r2, [pc, #500]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bb8:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bba:	e01a      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f003 f9f4 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004bce:	e010      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bd4:	3330      	adds	r3, #48	; 0x30
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f003 fa82 	bl	80080e0 <RCCEx_PLL3_Config>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004be2:	e006      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bea:	e002      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bec:	bf00      	nop
 8004bee:	e000      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8004bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10d      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004bfa:	4b6b      	ldr	r3, [pc, #428]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c00:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004c04:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c0c:	4a66      	ldr	r2, [pc, #408]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c14:	e003      	b.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c1a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8004c1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c2a:	633b      	str	r3, [r7, #48]	; 0x30
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c30:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c34:	460b      	mov	r3, r1
 8004c36:	4313      	orrs	r3, r2
 8004c38:	d055      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8004c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004c42:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c46:	d031      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8004c48:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004c4c:	d82a      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c52:	d02d      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c58:	d824      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c5e:	d029      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8004c60:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004c64:	d81e      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6a:	d011      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8004c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c70:	d818      	bhi.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d020      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8004c76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c7a:	d113      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c80:	3308      	adds	r3, #8
 8004c82:	4618      	mov	r0, r3
 8004c84:	f003 f994 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004c8e:	e014      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c94:	3330      	adds	r3, #48	; 0x30
 8004c96:	4618      	mov	r0, r3
 8004c98:	f003 fa22 	bl	80080e0 <RCCEx_PLL3_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8004ca2:	e00a      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004caa:	e006      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cac:	bf00      	nop
 8004cae:	e004      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cb0:	bf00      	nop
 8004cb2:	e002      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cb4:	bf00      	nop
 8004cb6:	e000      	b.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8004cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10d      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8004cc2:	4b39      	ldr	r3, [pc, #228]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cc8:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8004ccc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004cd4:	4a34      	ldr	r2, [pc, #208]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cdc:	e003      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cde:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ce2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8004ce6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cf8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	d058      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8004d02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d0a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d0e:	d031      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8004d10:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004d14:	d82a      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d1a:	d02d      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8004d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d20:	d824      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d26:	d029      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8004d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d2c:	d81e      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d32:	d011      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8004d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d38:	d818      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d020      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	d113      	bne.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d48:	3308      	adds	r3, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f003 f930 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004d50:	4603      	mov	r3, r0
 8004d52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d56:	e014      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d5c:	3330      	adds	r3, #48	; 0x30
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f003 f9be 	bl	80080e0 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e00a      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d72:	e006      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d74:	bf00      	nop
 8004d76:	e004      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e002      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d7c:	bf00      	nop
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8004d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d82:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d110      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d9c:	4902      	ldr	r1, [pc, #8]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004da4:	e006      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8004da6:	bf00      	nop
 8004da8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004db0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	6239      	str	r1, [r7, #32]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d055      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8004dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd8:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004ddc:	d031      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8004dde:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004de2:	d82a      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004de8:	d02d      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8004dea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dee:	d824      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004df0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004df4:	d029      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8004df6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004dfa:	d81e      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e00:	d011      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8004e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e06:	d818      	bhi.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e10:	d113      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e16:	3308      	adds	r3, #8
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f003 f8c9 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e24:	e014      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e26:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e2a:	3330      	adds	r3, #48	; 0x30
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f003 f957 	bl	80080e0 <RCCEx_PLL3_Config>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004e38:	e00a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e40:	e006      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e42:	bf00      	nop
 8004e44:	e004      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e46:	bf00      	nop
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e4a:	bf00      	nop
 8004e4c:	e000      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8004e4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e50:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d10d      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8004e58:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8004e62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e6a:	4984      	ldr	r1, [pc, #528]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8004e72:	e003      	b.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e78:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	2100      	movs	r1, #0
 8004e86:	61b9      	str	r1, [r7, #24]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	61fb      	str	r3, [r7, #28]
 8004e8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d03d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d81c      	bhi.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee7 	.word	0x08004ee7
 8004eb0:	08004ebd 	.word	0x08004ebd
 8004eb4:	08004ecb 	.word	0x08004ecb
 8004eb8:	08004ee7 	.word	0x08004ee7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ebc:	4b6f      	ldr	r3, [pc, #444]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec0:	4a6e      	ldr	r2, [pc, #440]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec6:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8004ec8:	e00e      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ece:	3308      	adds	r3, #8
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f003 f86d 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8004edc:	e004      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10d      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004ef0:	4b62      	ldr	r3, [pc, #392]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004ef2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ef6:	f023 0203 	bic.w	r2, r3, #3
 8004efa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004efe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004f02:	495e      	ldr	r1, [pc, #376]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8004f0a:	e003      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	6139      	str	r1, [r7, #16]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	d03a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8004f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f3c:	d00e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8004f3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f42:	d815      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d017      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4c:	d110      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f4e:	4b4b      	ldr	r3, [pc, #300]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	4a4a      	ldr	r2, [pc, #296]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f58:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f5a:	e00e      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f60:	3308      	adds	r3, #8
 8004f62:	4618      	mov	r0, r3
 8004f64:	f003 f824 	bl	8007fb0 <RCCEx_PLL2_Config>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004f6e:	e004      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f76:	e000      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8004f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f7a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10d      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8004f82:	4b3e      	ldr	r3, [pc, #248]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f94:	4939      	ldr	r1, [pc, #228]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8004f9c:	e003      	b.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fa2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fa6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	2100      	movs	r1, #0
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	d038      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004fc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fc6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004fca:	2b30      	cmp	r3, #48	; 0x30
 8004fcc:	d01b      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8004fce:	2b30      	cmp	r3, #48	; 0x30
 8004fd0:	d815      	bhi.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d002      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8004fd6:	2b20      	cmp	r3, #32
 8004fd8:	d007      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8004fda:	e010      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fdc:	4b27      	ldr	r3, [pc, #156]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	4a26      	ldr	r2, [pc, #152]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8004fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe6:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00e      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fee:	3330      	adds	r3, #48	; 0x30
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f003 f875 	bl	80080e0 <RCCEx_PLL3_Config>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004ffc:	e004      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005004:	e000      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005008:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005010:	4b1a      	ldr	r3, [pc, #104]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005016:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800501a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800501e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005022:	4916      	ldr	r1, [pc, #88]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005024:	4313      	orrs	r3, r2
 8005026:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800502c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005030:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503c:	2100      	movs	r1, #0
 800503e:	6039      	str	r1, [r7, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	607b      	str	r3, [r7, #4]
 8005046:	e9d7 1200 	ldrd	r1, r2, [r7]
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	d00c      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005050:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005052:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800505a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800505e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005062:	4906      	ldr	r1, [pc, #24]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 800506a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 800506e:	4618      	mov	r0, r3
 8005070:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005074:	46bd      	mov	sp, r7
 8005076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800507a:	bf00      	nop
 800507c:	44020c00 	.word	0x44020c00

08005080 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005080:	b480      	push	{r7}
 8005082:	b08b      	sub	sp, #44	; 0x2c
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005088:	4bad      	ldr	r3, [pc, #692]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005090:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005092:	4bab      	ldr	r3, [pc, #684]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800509c:	4ba8      	ldr	r3, [pc, #672]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050a6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80050a8:	4ba5      	ldr	r3, [pc, #660]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80050b2:	4ba3      	ldr	r3, [pc, #652]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8126 	beq.w	8005322 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d053      	beq.n	8005184 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d86f      	bhi.n	80051c2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d003      	beq.n	80050f0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d02b      	beq.n	8005146 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 80050ee:	e068      	b.n	80051c2 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050f0:	4b93      	ldr	r3, [pc, #588]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	08db      	lsrs	r3, r3, #3
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	4a92      	ldr	r2, [pc, #584]	; (8005344 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	ee07 3a90 	vmov	s15, r3
 8005108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	ee07 3a90 	vmov	s15, r3
 8005120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005124:	ed97 6a04 	vldr	s12, [r7, #16]
 8005128:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800512c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005140:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005144:	e068      	b.n	8005218 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005150:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800534c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a04 	vldr	s12, [r7, #16]
 8005166:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005182:	e049      	b.n	8005218 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005350 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	ee07 3a90 	vmov	s15, r3
 800519c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80051a4:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051bc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80051c0:	e02a      	b.n	8005218 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051c2:	4b5f      	ldr	r3, [pc, #380]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	08db      	lsrs	r3, r3, #3
 80051c8:	f003 0303 	and.w	r3, r3, #3
 80051cc:	4a5d      	ldr	r2, [pc, #372]	; (8005344 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	ee07 3a90 	vmov	s15, r3
 80051da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80051fa:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005348 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80051fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800520a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005212:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005216:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005218:	4b49      	ldr	r3, [pc, #292]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005220:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005224:	d121      	bne.n	800526a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005226:	4b46      	ldr	r3, [pc, #280]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d017      	beq.n	8005262 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005232:	4b43      	ldr	r3, [pc, #268]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005236:	0a5b      	lsrs	r3, r3, #9
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800524c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	e006      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e002      	b.n	8005270 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005270:	4b33      	ldr	r3, [pc, #204]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800527c:	d121      	bne.n	80052c2 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800527e:	4b30      	ldr	r3, [pc, #192]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d017      	beq.n	80052ba <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800528a:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800528c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005294:	ee07 3a90 	vmov	s15, r3
 8005298:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800529c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80052a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80052a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	e006      	b.n	80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	605a      	str	r2, [r3, #4]
 80052c0:	e002      	b.n	80052c8 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d4:	d121      	bne.n	800531a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80052d6:	4b1a      	ldr	r3, [pc, #104]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d017      	beq.n	8005312 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052e2:	4b17      	ldr	r3, [pc, #92]	; (8005340 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80052e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052e6:	0e1b      	lsrs	r3, r3, #24
 80052e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ec:	ee07 3a90 	vmov	s15, r3
 80052f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80052f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80052fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005308:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005310:	e010      	b.n	8005334 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
}
 8005318:	e00c      	b.n	8005334 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	609a      	str	r2, [r3, #8]
}
 8005320:	e008      	b.n	8005334 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	372c      	adds	r7, #44	; 0x2c
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	44020c00 	.word	0x44020c00
 8005344:	03d09000 	.word	0x03d09000
 8005348:	46000000 	.word	0x46000000
 800534c:	4a742400 	.word	0x4a742400
 8005350:	4bbebc20 	.word	0x4bbebc20

08005354 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005354:	b480      	push	{r7}
 8005356:	b08b      	sub	sp, #44	; 0x2c
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800535c:	4bad      	ldr	r3, [pc, #692]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800535e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005364:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005366:	4bab      	ldr	r3, [pc, #684]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536a:	f003 0303 	and.w	r3, r3, #3
 800536e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005370:	4ba8      	ldr	r3, [pc, #672]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005374:	0a1b      	lsrs	r3, r3, #8
 8005376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800537a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800537c:	4ba5      	ldr	r3, [pc, #660]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005386:	4ba3      	ldr	r3, [pc, #652]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	08db      	lsrs	r3, r3, #3
 800538c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	fb02 f303 	mul.w	r3, r2, r3
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 8126 	beq.w	80055f6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d053      	beq.n	8005458 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d86f      	bhi.n	8005496 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d003      	beq.n	80053c4 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d02b      	beq.n	800541a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80053c2:	e068      	b.n	8005496 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053c4:	4b93      	ldr	r3, [pc, #588]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	4a92      	ldr	r2, [pc, #584]	; (8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80053d0:	fa22 f303 	lsr.w	r3, r2, r3
 80053d4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	ee07 3a90 	vmov	s15, r3
 80053dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80053fc:	eddf 5a87 	vldr	s11, [pc, #540]	; 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005400:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005404:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005408:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800540c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005414:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005418:	e068      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	ee07 3a90 	vmov	s15, r3
 8005420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005424:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005620 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005428:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	ed97 6a04 	vldr	s12, [r7, #16]
 800543a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800543e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005456:	e049      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	ee07 3a90 	vmov	s15, r3
 8005470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005474:	ed97 6a04 	vldr	s12, [r7, #16]
 8005478:	eddf 5a68 	vldr	s11, [pc, #416]	; 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800547c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005490:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005494:	e02a      	b.n	80054ec <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005496:	4b5f      	ldr	r3, [pc, #380]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	08db      	lsrs	r3, r3, #3
 800549c:	f003 0303 	and.w	r3, r3, #3
 80054a0:	4a5d      	ldr	r2, [pc, #372]	; (8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80054a2:	fa22 f303 	lsr.w	r3, r2, r3
 80054a6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80054ce:	eddf 5a53 	vldr	s11, [pc, #332]	; 800561c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80054d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80054ea:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80054ec:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f8:	d121      	bne.n	800553e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80054fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d017      	beq.n	8005536 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005506:	4b43      	ldr	r3, [pc, #268]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	0a5b      	lsrs	r3, r3, #9
 800550c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005510:	ee07 3a90 	vmov	s15, r3
 8005514:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800551c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005520:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	e006      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	e002      	b.n	8005544 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005544:	4b33      	ldr	r3, [pc, #204]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800554c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005550:	d121      	bne.n	8005596 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005552:	4b30      	ldr	r3, [pc, #192]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d017      	beq.n	800558e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800555e:	4b2d      	ldr	r3, [pc, #180]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005562:	0c1b      	lsrs	r3, r3, #16
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005568:	ee07 3a90 	vmov	s15, r3
 800556c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005570:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005574:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005578:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800557c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005584:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]
 800558c:	e006      	b.n	800559c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	e002      	b.n	800559c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800559c:	4b1d      	ldr	r3, [pc, #116]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055a8:	d121      	bne.n	80055ee <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80055aa:	4b1a      	ldr	r3, [pc, #104]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d017      	beq.n	80055e6 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80055b6:	4b17      	ldr	r3, [pc, #92]	; (8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	0e1b      	lsrs	r3, r3, #24
 80055bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80055c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80055d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80055d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055e4:	e010      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
}
 80055ec:	e00c      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	e008      	b.n	8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	372c      	adds	r7, #44	; 0x2c
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	44020c00 	.word	0x44020c00
 8005618:	03d09000 	.word	0x03d09000
 800561c:	46000000 	.word	0x46000000
 8005620:	4a742400 	.word	0x4a742400
 8005624:	4bbebc20 	.word	0x4bbebc20

08005628 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005628:	b480      	push	{r7}
 800562a:	b08b      	sub	sp, #44	; 0x2c
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005630:	4bad      	ldr	r3, [pc, #692]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005638:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800563a:	4bab      	ldr	r3, [pc, #684]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005644:	4ba8      	ldr	r3, [pc, #672]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	0a1b      	lsrs	r3, r3, #8
 800564a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800564e:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005650:	4ba5      	ldr	r3, [pc, #660]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	f003 0310 	and.w	r3, r3, #16
 8005658:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800565a:	4ba3      	ldr	r3, [pc, #652]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800565c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565e:	08db      	lsrs	r3, r3, #3
 8005660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	fb02 f303 	mul.w	r3, r2, r3
 800566a:	ee07 3a90 	vmov	s15, r3
 800566e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005672:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8126 	beq.w	80058ca <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	2b03      	cmp	r3, #3
 8005682:	d053      	beq.n	800572c <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b03      	cmp	r3, #3
 8005688:	d86f      	bhi.n	800576a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d003      	beq.n	8005698 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d02b      	beq.n	80056ee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005696:	e068      	b.n	800576a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005698:	4b93      	ldr	r3, [pc, #588]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	4a92      	ldr	r2, [pc, #584]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	ee07 3a90 	vmov	s15, r3
 80056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056c2:	6a3b      	ldr	r3, [r7, #32]
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056cc:	ed97 6a04 	vldr	s12, [r7, #16]
 80056d0:	eddf 5a87 	vldr	s11, [pc, #540]	; 80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80056d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80056ec:	e068      	b.n	80057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80056fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a04 	vldr	s12, [r7, #16]
 800570e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800572a:	e049      	b.n	80057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a70 	vldr	s13, [pc, #448]	; 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005748:	ed97 6a04 	vldr	s12, [r7, #16]
 800574c:	eddf 5a68 	vldr	s11, [pc, #416]	; 80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800575c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005764:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005768:	e02a      	b.n	80057c0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800576a:	4b5f      	ldr	r3, [pc, #380]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	4a5d      	ldr	r2, [pc, #372]	; (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	ee07 3a90 	vmov	s15, r3
 8005782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	ee07 3a90 	vmov	s15, r3
 800578c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005790:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579e:	ed97 6a04 	vldr	s12, [r7, #16]
 80057a2:	eddf 5a53 	vldr	s11, [pc, #332]	; 80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80057a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80057be:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057c0:	4b49      	ldr	r3, [pc, #292]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057cc:	d121      	bne.n	8005812 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80057ce:	4b46      	ldr	r3, [pc, #280]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057da:	4b43      	ldr	r3, [pc, #268]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	0a5b      	lsrs	r3, r3, #9
 80057e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80057ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057f0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80057f4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005800:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005818:	4b33      	ldr	r3, [pc, #204]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d121      	bne.n	800586a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005826:	4b30      	ldr	r3, [pc, #192]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800582a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d017      	beq.n	8005862 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005832:	4b2d      	ldr	r3, [pc, #180]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	0c1b      	lsrs	r3, r3, #16
 8005838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583c:	ee07 3a90 	vmov	s15, r3
 8005840:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005848:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800584c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005858:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	e006      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	e002      	b.n	8005870 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005870:	4b1d      	ldr	r3, [pc, #116]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587c:	d121      	bne.n	80058c2 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800587e:	4b1a      	ldr	r3, [pc, #104]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d017      	beq.n	80058ba <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800588c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588e:	0e1b      	lsrs	r3, r3, #24
 8005890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005894:	ee07 3a90 	vmov	s15, r3
 8005898:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800589c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80058a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80058a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058b0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80058b8:	e010      	b.n	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	609a      	str	r2, [r3, #8]
}
 80058c0:	e00c      	b.n	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	372c      	adds	r7, #44	; 0x2c
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	44020c00 	.word	0x44020c00
 80058ec:	03d09000 	.word	0x03d09000
 80058f0:	46000000 	.word	0x46000000
 80058f4:	4a742400 	.word	0x4a742400
 80058f8:	4bbebc20 	.word	0x4bbebc20

080058fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b08f      	sub	sp, #60	; 0x3c
 8005900:	af00      	add	r7, sp, #0
 8005902:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800590a:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 800590e:	4321      	orrs	r1, r4
 8005910:	d150      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005912:	4b26      	ldr	r3, [pc, #152]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005914:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005918:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800591c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800591e:	4b23      	ldr	r3, [pc, #140]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005924:	f003 0302 	and.w	r3, r3, #2
 8005928:	2b02      	cmp	r3, #2
 800592a:	d108      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005932:	d104      	bne.n	800593e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005938:	637b      	str	r3, [r7, #52]	; 0x34
 800593a:	f002 bb2a 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005940:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800594c:	d108      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005954:	d104      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8005956:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800595a:	637b      	str	r3, [r7, #52]	; 0x34
 800595c:	f002 bb19 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8005960:	4b12      	ldr	r3, [pc, #72]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800596c:	d119      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005974:	d115      	bne.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800597e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005982:	d30a      	bcc.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8005984:	4b09      	ldr	r3, [pc, #36]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	0a1b      	lsrs	r3, r3, #8
 800598a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800598e:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8005996:	f002 bafc 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800599e:	f002 baf8 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
 80059a6:	f002 baf4 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059aa:	bf00      	nop
 80059ac:	44020c00 	.word	0x44020c00
 80059b0:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80059b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059b8:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80059bc:	ea50 0104 	orrs.w	r1, r0, r4
 80059c0:	f001 8275 	beq.w	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80059c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059c8:	2801      	cmp	r0, #1
 80059ca:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80059ce:	f082 82dd 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059d6:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 80059da:	ea50 0104 	orrs.w	r1, r0, r4
 80059de:	f001 816c 	beq.w	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80059e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059e6:	2801      	cmp	r0, #1
 80059e8:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 80059ec:	f082 82ce 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80059f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80059f4:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80059f8:	ea50 0104 	orrs.w	r1, r0, r4
 80059fc:	f001 8602 	beq.w	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8005a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a04:	2801      	cmp	r0, #1
 8005a06:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8005a0a:	f082 82bf 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a12:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 8005a16:	ea50 0104 	orrs.w	r1, r0, r4
 8005a1a:	f001 854c 	beq.w	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8005a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a22:	2801      	cmp	r0, #1
 8005a24:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8005a28:	f082 82b0 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a30:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8005a34:	ea50 0104 	orrs.w	r1, r0, r4
 8005a38:	f001 849e 	beq.w	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8005a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a40:	2801      	cmp	r0, #1
 8005a42:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 8005a46:	f082 82a1 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a4e:	f1a1 0420 	sub.w	r4, r1, #32
 8005a52:	ea50 0104 	orrs.w	r1, r0, r4
 8005a56:	f001 83e8 	beq.w	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8005a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a5e:	2801      	cmp	r0, #1
 8005a60:	f171 0120 	sbcs.w	r1, r1, #32
 8005a64:	f082 8292 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a6c:	f1a1 0410 	sub.w	r4, r1, #16
 8005a70:	ea50 0104 	orrs.w	r1, r0, r4
 8005a74:	f002 8256 	beq.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8005a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a7c:	2801      	cmp	r0, #1
 8005a7e:	f171 0110 	sbcs.w	r1, r1, #16
 8005a82:	f082 8283 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a8a:	f1a1 0408 	sub.w	r4, r1, #8
 8005a8e:	ea50 0104 	orrs.w	r1, r0, r4
 8005a92:	f002 81cc 	beq.w	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8005a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005a9a:	2801      	cmp	r0, #1
 8005a9c:	f171 0108 	sbcs.w	r1, r1, #8
 8005aa0:	f082 8274 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aa8:	1f0c      	subs	r4, r1, #4
 8005aaa:	ea50 0104 	orrs.w	r1, r0, r4
 8005aae:	f001 8648 	beq.w	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8005ab2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ab6:	2801      	cmp	r0, #1
 8005ab8:	f171 0104 	sbcs.w	r1, r1, #4
 8005abc:	f082 8266 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005ac0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ac4:	1e8c      	subs	r4, r1, #2
 8005ac6:	ea50 0104 	orrs.w	r1, r0, r4
 8005aca:	f002 8143 	beq.w	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8005ace:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ad2:	2801      	cmp	r0, #1
 8005ad4:	f171 0102 	sbcs.w	r1, r1, #2
 8005ad8:	f082 8258 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ae0:	1e4c      	subs	r4, r1, #1
 8005ae2:	ea50 0104 	orrs.w	r1, r0, r4
 8005ae6:	f002 80ce 	beq.w	8007c86 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8005aea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005aee:	2801      	cmp	r0, #1
 8005af0:	f171 0101 	sbcs.w	r1, r1, #1
 8005af4:	f082 824a 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8005b00:	4321      	orrs	r1, r4
 8005b02:	f002 8059 	beq.w	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8005b06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b0a:	4cd9      	ldr	r4, [pc, #868]	; (8005e70 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	f171 0100 	sbcs.w	r1, r1, #0
 8005b12:	f082 823b 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1a:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8005b1e:	4321      	orrs	r1, r4
 8005b20:	f001 87d9 	beq.w	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8005b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b28:	4cd2      	ldr	r4, [pc, #840]	; (8005e74 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005b2a:	42a0      	cmp	r0, r4
 8005b2c:	f171 0100 	sbcs.w	r1, r1, #0
 8005b30:	f082 822c 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b38:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8005b3c:	4321      	orrs	r1, r4
 8005b3e:	f001 8751 	beq.w	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8005b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b46:	4ccc      	ldr	r4, [pc, #816]	; (8005e78 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005b48:	42a0      	cmp	r0, r4
 8005b4a:	f171 0100 	sbcs.w	r1, r1, #0
 8005b4e:	f082 821d 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b56:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8005b5a:	4321      	orrs	r1, r4
 8005b5c:	f001 869a 	beq.w	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8005b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b64:	4cc5      	ldr	r4, [pc, #788]	; (8005e7c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8005b66:	42a0      	cmp	r0, r4
 8005b68:	f171 0100 	sbcs.w	r1, r1, #0
 8005b6c:	f082 820e 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b74:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8005b78:	4321      	orrs	r1, r4
 8005b7a:	f001 8612 	beq.w	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8005b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b82:	4cbf      	ldr	r4, [pc, #764]	; (8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8005b84:	42a0      	cmp	r0, r4
 8005b86:	f171 0100 	sbcs.w	r1, r1, #0
 8005b8a:	f082 81ff 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005b8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b92:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8005b96:	4321      	orrs	r1, r4
 8005b98:	f002 817e 	beq.w	8007e98 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8005b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ba0:	4cb8      	ldr	r4, [pc, #736]	; (8005e84 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8005ba2:	42a0      	cmp	r0, r4
 8005ba4:	f171 0100 	sbcs.w	r1, r1, #0
 8005ba8:	f082 81f0 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bb0:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8005bb4:	4321      	orrs	r1, r4
 8005bb6:	f000 829e 	beq.w	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8005bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbe:	4cb2      	ldr	r4, [pc, #712]	; (8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	f171 0100 	sbcs.w	r1, r1, #0
 8005bc6:	f082 81e1 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bce:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8005bd2:	4321      	orrs	r1, r4
 8005bd4:	f000 826d 	beq.w	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8005bd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bdc:	4cab      	ldr	r4, [pc, #684]	; (8005e8c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8005bde:	42a0      	cmp	r0, r4
 8005be0:	f171 0100 	sbcs.w	r1, r1, #0
 8005be4:	f082 81d2 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005be8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bec:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8005bf0:	4321      	orrs	r1, r4
 8005bf2:	f001 800d 	beq.w	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8005bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bfa:	4ca5      	ldr	r4, [pc, #660]	; (8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	f171 0100 	sbcs.w	r1, r1, #0
 8005c02:	f082 81c3 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c0a:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8005c0e:	4321      	orrs	r1, r4
 8005c10:	f000 81d0 	beq.w	8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8005c14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c18:	4c9e      	ldr	r4, [pc, #632]	; (8005e94 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8005c1a:	42a0      	cmp	r0, r4
 8005c1c:	f171 0100 	sbcs.w	r1, r1, #0
 8005c20:	f082 81b4 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c28:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8005c2c:	4321      	orrs	r1, r4
 8005c2e:	f000 8142 	beq.w	8005eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8005c32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c36:	4c98      	ldr	r4, [pc, #608]	; (8005e98 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005c38:	42a0      	cmp	r0, r4
 8005c3a:	f171 0100 	sbcs.w	r1, r1, #0
 8005c3e:	f082 81a5 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c46:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8005c4a:	4321      	orrs	r1, r4
 8005c4c:	f001 824e 	beq.w	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8005c50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c54:	4c91      	ldr	r4, [pc, #580]	; (8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005c56:	42a0      	cmp	r0, r4
 8005c58:	f171 0100 	sbcs.w	r1, r1, #0
 8005c5c:	f082 8196 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c64:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8005c68:	4321      	orrs	r1, r4
 8005c6a:	f001 8197 	beq.w	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8005c6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c72:	4c8b      	ldr	r4, [pc, #556]	; (8005ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005c74:	42a0      	cmp	r0, r4
 8005c76:	f171 0100 	sbcs.w	r1, r1, #0
 8005c7a:	f082 8187 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c82:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8005c86:	4321      	orrs	r1, r4
 8005c88:	f001 8154 	beq.w	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8005c8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c90:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8005c94:	f171 0100 	sbcs.w	r1, r1, #0
 8005c98:	f082 8178 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005c9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ca0:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8005ca4:	4321      	orrs	r1, r4
 8005ca6:	f001 80b7 	beq.w	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8005caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cae:	f248 0401 	movw	r4, #32769	; 0x8001
 8005cb2:	42a0      	cmp	r0, r4
 8005cb4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cb8:	f082 8168 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cc0:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8005cc4:	4321      	orrs	r1, r4
 8005cc6:	f001 8064 	beq.w	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8005cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cce:	f244 0401 	movw	r4, #16385	; 0x4001
 8005cd2:	42a0      	cmp	r0, r4
 8005cd4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cd8:	f082 8158 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ce0:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8005ce4:	4321      	orrs	r1, r4
 8005ce6:	f001 8011 	beq.w	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8005cea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005cee:	f242 0401 	movw	r4, #8193	; 0x2001
 8005cf2:	42a0      	cmp	r0, r4
 8005cf4:	f171 0100 	sbcs.w	r1, r1, #0
 8005cf8:	f082 8148 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005cfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d00:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8005d04:	4321      	orrs	r1, r4
 8005d06:	f000 871e 	beq.w	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8005d0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d0e:	f241 0401 	movw	r4, #4097	; 0x1001
 8005d12:	42a0      	cmp	r0, r4
 8005d14:	f171 0100 	sbcs.w	r1, r1, #0
 8005d18:	f082 8138 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d20:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8005d24:	4321      	orrs	r1, r4
 8005d26:	f000 86a8 	beq.w	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8005d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d2e:	f640 0401 	movw	r4, #2049	; 0x801
 8005d32:	42a0      	cmp	r0, r4
 8005d34:	f171 0100 	sbcs.w	r1, r1, #0
 8005d38:	f082 8128 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d40:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005d44:	4321      	orrs	r1, r4
 8005d46:	f000 8632 	beq.w	80069ae <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8005d4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4e:	f240 4401 	movw	r4, #1025	; 0x401
 8005d52:	42a0      	cmp	r0, r4
 8005d54:	f171 0100 	sbcs.w	r1, r1, #0
 8005d58:	f082 8118 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d60:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8005d64:	4321      	orrs	r1, r4
 8005d66:	f000 85b0 	beq.w	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f240 2401 	movw	r4, #513	; 0x201
 8005d72:	42a0      	cmp	r0, r4
 8005d74:	f171 0100 	sbcs.w	r1, r1, #0
 8005d78:	f082 8108 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d80:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8005d84:	4321      	orrs	r1, r4
 8005d86:	f000 8535 	beq.w	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8005d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d8e:	f240 1401 	movw	r4, #257	; 0x101
 8005d92:	42a0      	cmp	r0, r4
 8005d94:	f171 0100 	sbcs.w	r1, r1, #0
 8005d98:	f082 80f8 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005da0:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8005da4:	4321      	orrs	r1, r4
 8005da6:	f000 84ba 	beq.w	800671e <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8005daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dae:	2881      	cmp	r0, #129	; 0x81
 8005db0:	f171 0100 	sbcs.w	r1, r1, #0
 8005db4:	f082 80ea 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005db8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dbc:	2821      	cmp	r0, #33	; 0x21
 8005dbe:	f171 0100 	sbcs.w	r1, r1, #0
 8005dc2:	d26f      	bcs.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005dc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dc8:	4301      	orrs	r1, r0
 8005dca:	f002 80df 	beq.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005dce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005dd2:	1e42      	subs	r2, r0, #1
 8005dd4:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8005dd8:	2a20      	cmp	r2, #32
 8005dda:	f173 0100 	sbcs.w	r1, r3, #0
 8005dde:	f082 80d5 	bcs.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005de2:	2a1f      	cmp	r2, #31
 8005de4:	f202 80d2 	bhi.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8005de8:	a101      	add	r1, pc, #4	; (adr r1, 8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8005dea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005dee:	bf00      	nop
 8005df0:	08006151 	.word	0x08006151
 8005df4:	0800621d 	.word	0x0800621d
 8005df8:	08007f8d 	.word	0x08007f8d
 8005dfc:	080062dd 	.word	0x080062dd
 8005e00:	08007f8d 	.word	0x08007f8d
 8005e04:	08007f8d 	.word	0x08007f8d
 8005e08:	08007f8d 	.word	0x08007f8d
 8005e0c:	080063ad 	.word	0x080063ad
 8005e10:	08007f8d 	.word	0x08007f8d
 8005e14:	08007f8d 	.word	0x08007f8d
 8005e18:	08007f8d 	.word	0x08007f8d
 8005e1c:	08007f8d 	.word	0x08007f8d
 8005e20:	08007f8d 	.word	0x08007f8d
 8005e24:	08007f8d 	.word	0x08007f8d
 8005e28:	08007f8d 	.word	0x08007f8d
 8005e2c:	0800648f 	.word	0x0800648f
 8005e30:	08007f8d 	.word	0x08007f8d
 8005e34:	08007f8d 	.word	0x08007f8d
 8005e38:	08007f8d 	.word	0x08007f8d
 8005e3c:	08007f8d 	.word	0x08007f8d
 8005e40:	08007f8d 	.word	0x08007f8d
 8005e44:	08007f8d 	.word	0x08007f8d
 8005e48:	08007f8d 	.word	0x08007f8d
 8005e4c:	08007f8d 	.word	0x08007f8d
 8005e50:	08007f8d 	.word	0x08007f8d
 8005e54:	08007f8d 	.word	0x08007f8d
 8005e58:	08007f8d 	.word	0x08007f8d
 8005e5c:	08007f8d 	.word	0x08007f8d
 8005e60:	08007f8d 	.word	0x08007f8d
 8005e64:	08007f8d 	.word	0x08007f8d
 8005e68:	08007f8d 	.word	0x08007f8d
 8005e6c:	08006565 	.word	0x08006565
 8005e70:	80000001 	.word	0x80000001
 8005e74:	40000001 	.word	0x40000001
 8005e78:	20000001 	.word	0x20000001
 8005e7c:	10000001 	.word	0x10000001
 8005e80:	08000001 	.word	0x08000001
 8005e84:	04000001 	.word	0x04000001
 8005e88:	00800001 	.word	0x00800001
 8005e8c:	00400001 	.word	0x00400001
 8005e90:	00200001 	.word	0x00200001
 8005e94:	00100001 	.word	0x00100001
 8005e98:	00080001 	.word	0x00080001
 8005e9c:	00040001 	.word	0x00040001
 8005ea0:	00020001 	.word	0x00020001
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8005eac:	430b      	orrs	r3, r1
 8005eae:	f000 83c4 	beq.w	800663a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8005eb2:	f002 b86b 	b.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005eb6:	4ba1      	ldr	r3, [pc, #644]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ebc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ec8:	d036      	beq.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ed0:	d86b      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ed8:	d02b      	beq.n	8005f32 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ee0:	d863      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ee8:	d01b      	beq.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ef0:	d85b      	bhi.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005efe:	d008      	beq.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8005f00:	e053      	b.n	8005faa <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f02:	f107 0320 	add.w	r3, r7, #32
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff f8ba 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f10:	e04e      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f12:	f107 0314 	add.w	r3, r7, #20
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fa1c 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f20:	e046      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff fb7e 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f30:	e03e      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005f32:	4b83      	ldr	r3, [pc, #524]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f36:	e03b      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f38:	4b80      	ldr	r3, [pc, #512]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f42:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f44:	4b7d      	ldr	r3, [pc, #500]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d10c      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8005f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f56:	4b79      	ldr	r3, [pc, #484]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	08db      	lsrs	r3, r3, #3
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	4a78      	ldr	r2, [pc, #480]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	637b      	str	r3, [r7, #52]	; 0x34
 8005f68:	e01e      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f6a:	4b74      	ldr	r3, [pc, #464]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f76:	d106      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7e:	d102      	bne.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f80:	4b71      	ldr	r3, [pc, #452]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
 8005f84:	e010      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f86:	4b6d      	ldr	r3, [pc, #436]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f9a:	d102      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f9c:	4b6b      	ldr	r3, [pc, #428]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8005f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa0:	e002      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005fa6:	e003      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8005fa8:	e002      	b.n	8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fae:	bf00      	nop
          }
        }
        break;
 8005fb0:	f001 bfef 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005fb4:	4b61      	ldr	r3, [pc, #388]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fba:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fc6:	d036      	beq.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fce:	d86b      	bhi.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005fd6:	d02b      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005fde:	d863      	bhi.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe6:	d01b      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d85b      	bhi.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d004      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ffc:	d008      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8005ffe:	e053      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006000:	f107 0320 	add.w	r3, r7, #32
 8006004:	4618      	mov	r0, r3
 8006006:	f7ff f83b 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800600e:	e04e      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff f99d 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800601e:	e046      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff faff 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800602e:	e03e      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006034:	e03b      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006036:	4b41      	ldr	r3, [pc, #260]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800603c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006042:	4b3e      	ldr	r3, [pc, #248]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b02      	cmp	r3, #2
 800604c:	d10c      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d109      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006054:	4b39      	ldr	r3, [pc, #228]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	08db      	lsrs	r3, r3, #3
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	4a39      	ldr	r2, [pc, #228]	; (8006144 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006060:	fa22 f303 	lsr.w	r3, r2, r3
 8006064:	637b      	str	r3, [r7, #52]	; 0x34
 8006066:	e01e      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006068:	4b34      	ldr	r3, [pc, #208]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006074:	d106      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607c:	d102      	bne.n	8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800607e:	4b32      	ldr	r3, [pc, #200]	; (8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006080:	637b      	str	r3, [r7, #52]	; 0x34
 8006082:	e010      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006084:	4b2d      	ldr	r3, [pc, #180]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006090:	d106      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006098:	d102      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800609a:	4b2c      	ldr	r3, [pc, #176]	; (800614c <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
 800609e:	e002      	b.n	80060a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80060a0:	2300      	movs	r3, #0
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80060a6:	e002      	b.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060ac:	bf00      	nop
          }
        }
        break;
 80060ae:	f001 bf70 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80060b2:	4b22      	ldr	r3, [pc, #136]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060bc:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d108      	bne.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060c4:	f107 0320 	add.w	r3, r7, #32
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe ffd9 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80060d2:	f001 bf5e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d108      	bne.n	80060ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060dc:	f107 0314 	add.w	r3, r7, #20
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7ff f937 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ea:	f001 bf52 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80060ee:	2300      	movs	r3, #0
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060f2:	f001 bf4e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80060f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006100:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	2b00      	cmp	r3, #0
 8006106:	d108      	bne.n	800611a <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006108:	f107 0320 	add.w	r3, r7, #32
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe ffb7 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006116:	f001 bf3c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	d108      	bne.n	8006132 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006120:	f107 0314 	add.w	r3, r7, #20
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff f915 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800612e:	f001 bf30 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006136:	f001 bf2c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800613a:	bf00      	nop
 800613c:	44020c00 	.word	0x44020c00
 8006140:	00bb8000 	.word	0x00bb8000
 8006144:	03d09000 	.word	0x03d09000
 8006148:	003d0900 	.word	0x003d0900
 800614c:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006150:	4b9d      	ldr	r3, [pc, #628]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006156:	f003 0307 	and.w	r3, r3, #7
 800615a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006162:	f7fc ffd7 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8006166:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006168:	f001 bf13 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800616c:	4b96      	ldr	r3, [pc, #600]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006174:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	d107      	bne.n	8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006180:	f107 0314 	add.w	r3, r7, #20
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff f8e5 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
 800618e:	e043      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006190:	4b8d      	ldr	r3, [pc, #564]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d10a      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d107      	bne.n	80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a4:	f107 0308 	add.w	r3, r7, #8
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fa3d 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e031      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061b4:	4b84      	ldr	r3, [pc, #528]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d10c      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d109      	bne.n	80061da <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061c6:	4b80      	ldr	r3, [pc, #512]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	08db      	lsrs	r3, r3, #3
 80061cc:	f003 0303 	and.w	r3, r3, #3
 80061d0:	4a7e      	ldr	r2, [pc, #504]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80061d2:	fa22 f303 	lsr.w	r3, r2, r3
 80061d6:	637b      	str	r3, [r7, #52]	; 0x34
 80061d8:	e01e      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80061da:	4b7b      	ldr	r3, [pc, #492]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e6:	d105      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d102      	bne.n	80061f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80061ee:	4b78      	ldr	r3, [pc, #480]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	e011      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061f4:	4b74      	ldr	r3, [pc, #464]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80061f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d106      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006204:	2b05      	cmp	r3, #5
 8006206:	d103      	bne.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
 800620e:	e003      	b.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006214:	f001 bebd 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006218:	f001 bebb 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800621c:	4b6a      	ldr	r3, [pc, #424]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800621e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006226:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622a:	2b00      	cmp	r3, #0
 800622c:	d104      	bne.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800622e:	f7fc ff5b 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006232:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006234:	f001 bead 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006238:	4b63      	ldr	r3, [pc, #396]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006244:	d10a      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2b08      	cmp	r3, #8
 800624a:	d107      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff f87f 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
 800625a:	e03d      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800625c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625e:	2b10      	cmp	r3, #16
 8006260:	d108      	bne.n	8006274 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff f9de 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006270:	f001 be8f 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006274:	4b54      	ldr	r3, [pc, #336]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b02      	cmp	r3, #2
 800627e:	d10c      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006282:	2b18      	cmp	r3, #24
 8006284:	d109      	bne.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006286:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	4a4e      	ldr	r2, [pc, #312]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	e01e      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800629a:	4b4b      	ldr	r3, [pc, #300]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a6:	d105      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80062a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062aa:	2b20      	cmp	r3, #32
 80062ac:	d102      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80062ae:	4b48      	ldr	r3, [pc, #288]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	e011      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80062b4:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d106      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	2b28      	cmp	r3, #40	; 0x28
 80062c6:	d103      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80062c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062cc:	637b      	str	r3, [r7, #52]	; 0x34
 80062ce:	e003      	b.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062d4:	f001 be5d 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80062d8:	f001 be5b 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80062dc:	4b3a      	ldr	r3, [pc, #232]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80062e2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80062e6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80062e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d104      	bne.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80062ee:	f7fc fefb 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80062f2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80062f4:	f001 be4d 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80062f8:	4b33      	ldr	r3, [pc, #204]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006304:	d10a      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d107      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800630c:	f107 0314 	add.w	r3, r7, #20
 8006310:	4618      	mov	r0, r3
 8006312:	f7ff f81f 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	e045      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800631c:	4b2a      	ldr	r3, [pc, #168]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006328:	d10a      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	2b80      	cmp	r3, #128	; 0x80
 800632e:	d107      	bne.n	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	4618      	mov	r0, r3
 8006336:	f7ff f977 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	637b      	str	r3, [r7, #52]	; 0x34
 800633e:	e033      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006340:	4b21      	ldr	r3, [pc, #132]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b02      	cmp	r3, #2
 800634a:	d10c      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 800634c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634e:	2bc0      	cmp	r3, #192	; 0xc0
 8006350:	d109      	bne.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800635e:	fa22 f303 	lsr.w	r3, r2, r3
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
 8006364:	e020      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800636e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006372:	d106      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637a:	d102      	bne.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800637c:	4b14      	ldr	r3, [pc, #80]	; (80063d0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
 8006380:	e012      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b02      	cmp	r3, #2
 800638e:	d107      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006392:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006396:	d103      	bne.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
 800639e:	e003      	b.n	80063a8 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063a4:	f001 bdf5 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063a8:	f001 bdf3 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063ac:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80063ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063b2:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80063b6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80063be:	f7fc fe93 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80063c2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80063c4:	f001 bde5 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80063c8:	44020c00 	.word	0x44020c00
 80063cc:	03d09000 	.word	0x03d09000
 80063d0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80063d4:	4ba0      	ldr	r3, [pc, #640]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063e0:	d10b      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d107      	bne.n	80063fa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe ffb0 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	637b      	str	r3, [r7, #52]	; 0x34
 80063f8:	e047      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80063fa:	4b97      	ldr	r3, [pc, #604]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006406:	d10b      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640e:	d107      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff f907 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	637b      	str	r3, [r7, #52]	; 0x34
 800641e:	e034      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006420:	4b8d      	ldr	r3, [pc, #564]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d10d      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 800642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006434:	4b88      	ldr	r3, [pc, #544]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	4a87      	ldr	r2, [pc, #540]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	637b      	str	r3, [r7, #52]	; 0x34
 8006446:	e020      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006448:	4b83      	ldr	r3, [pc, #524]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006454:	d106      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800645c:	d102      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800645e:	4b80      	ldr	r3, [pc, #512]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006460:	637b      	str	r3, [r7, #52]	; 0x34
 8006462:	e012      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006464:	4b7c      	ldr	r3, [pc, #496]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d107      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006478:	d103      	bne.n	8006482 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800647a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647e:	637b      	str	r3, [r7, #52]	; 0x34
 8006480:	e003      	b.n	800648a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006486:	f001 bd84 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800648a:	f001 bd82 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800648e:	4b72      	ldr	r3, [pc, #456]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006494:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006498:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7fc fe22 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80064a4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80064a6:	f001 bd74 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80064aa:	4b6b      	ldr	r3, [pc, #428]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064b6:	d10b      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d107      	bne.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c0:	f107 0314 	add.w	r3, r7, #20
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fe ff45 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	e047      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80064d0:	4b61      	ldr	r3, [pc, #388]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064dc:	d10b      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064e4:	d107      	bne.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff f89c 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	e034      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80064f6:	4b58      	ldr	r3, [pc, #352]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d10d      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006508:	d109      	bne.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800650a:	4b53      	ldr	r3, [pc, #332]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	08db      	lsrs	r3, r3, #3
 8006510:	f003 0303 	and.w	r3, r3, #3
 8006514:	4a51      	ldr	r2, [pc, #324]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	637b      	str	r3, [r7, #52]	; 0x34
 800651c:	e020      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 800651e:	4b4e      	ldr	r3, [pc, #312]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652a:	d106      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006532:	d102      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006534:	4b4a      	ldr	r3, [pc, #296]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006536:	637b      	str	r3, [r7, #52]	; 0x34
 8006538:	e012      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800653a:	4b47      	ldr	r3, [pc, #284]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d107      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800654e:	d103      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	e003      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800655c:	f001 bd19 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006560:	f001 bd17 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006564:	4b3c      	ldr	r3, [pc, #240]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006566:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800656a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800656e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006576:	f7fc fdb7 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800657a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800657c:	f001 bd09 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006580:	4b35      	ldr	r3, [pc, #212]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800658c:	d10b      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006594:	d107      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006596:	f107 0314 	add.w	r3, r7, #20
 800659a:	4618      	mov	r0, r3
 800659c:	f7fe feda 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
 80065a4:	e047      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80065a6:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b2:	d10b      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80065b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ba:	d107      	bne.n	80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065bc:	f107 0308 	add.w	r3, r7, #8
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff f831 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
 80065ca:	e034      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80065cc:	4b22      	ldr	r3, [pc, #136]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d10d      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80065de:	d109      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065e0:	4b1d      	ldr	r3, [pc, #116]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	08db      	lsrs	r3, r3, #3
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	4a1c      	ldr	r2, [pc, #112]	; (800665c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
 80065f2:	e020      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006600:	d106      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006608:	d102      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800660a:	4b15      	ldr	r3, [pc, #84]	; (8006660 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	e012      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006616:	f003 0302 	and.w	r3, r3, #2
 800661a:	2b02      	cmp	r3, #2
 800661c:	d107      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006624:	d103      	bne.n	800662e <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
 800662c:	e003      	b.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006632:	f001 bcae 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006636:	f001 bcac 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800663c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006640:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006644:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10b      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800664c:	f7fc fd4c 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006650:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006652:	f001 bc9e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006656:	bf00      	nop
 8006658:	44020c00 	.word	0x44020c00
 800665c:	03d09000 	.word	0x03d09000
 8006660:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006664:	4ba0      	ldr	r3, [pc, #640]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800666c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006670:	d10b      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006678:	d107      	bne.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800667a:	f107 0314 	add.w	r3, r7, #20
 800667e:	4618      	mov	r0, r3
 8006680:	f7fe fe68 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
 8006688:	e047      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800668a:	4b97      	ldr	r3, [pc, #604]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006696:	d10b      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800669e:	d107      	bne.n	80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a0:	f107 0308 	add.w	r3, r7, #8
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe ffbf 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	e034      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80066b0:	4b8d      	ldr	r3, [pc, #564]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d10d      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80066bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066be:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80066c2:	d109      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066c4:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	08db      	lsrs	r3, r3, #3
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	4a87      	ldr	r2, [pc, #540]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	e020      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80066d8:	4b83      	ldr	r3, [pc, #524]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066e4:	d106      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ec:	d102      	bne.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80066ee:	4b80      	ldr	r3, [pc, #512]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80066f0:	637b      	str	r3, [r7, #52]	; 0x34
 80066f2:	e012      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80066f4:	4b7c      	ldr	r3, [pc, #496]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80066f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d107      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006708:	d103      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800670a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800670e:	637b      	str	r3, [r7, #52]	; 0x34
 8006710:	e003      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8006712:	2300      	movs	r3, #0
 8006714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006716:	f001 bc3c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800671a:	f001 bc3a 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800671e:	4b72      	ldr	r3, [pc, #456]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006724:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006728:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800672a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006730:	f7fc fcda 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006734:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8006736:	f001 bc2c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800673a:	4b6b      	ldr	r3, [pc, #428]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006746:	d10b      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800674e:	d107      	bne.n	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006750:	f107 0314 	add.w	r3, r7, #20
 8006754:	4618      	mov	r0, r3
 8006756:	f7fe fdfd 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
 800675e:	e047      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8006760:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676c:	d10b      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006774:	d107      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006776:	f107 0308 	add.w	r3, r7, #8
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe ff54 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
 8006784:	e034      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8006786:	4b58      	ldr	r3, [pc, #352]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b02      	cmp	r3, #2
 8006790:	d10d      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006798:	d109      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800679a:	4b53      	ldr	r3, [pc, #332]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	08db      	lsrs	r3, r3, #3
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	4a51      	ldr	r2, [pc, #324]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	637b      	str	r3, [r7, #52]	; 0x34
 80067ac:	e020      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80067ae:	4b4e      	ldr	r3, [pc, #312]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ba:	d106      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80067bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067c2:	d102      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80067c4:	4b4a      	ldr	r3, [pc, #296]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	e012      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d107      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80067de:	d103      	bne.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80067e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ec:	f001 bbd1 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067f0:	f001 bbcf 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80067f4:	4b3c      	ldr	r3, [pc, #240]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80067f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80067fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80067fe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	2b00      	cmp	r3, #0
 8006804:	d104      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006806:	f7fc fc6f 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 800680a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800680c:	f001 bbc1 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8006810:	4b35      	ldr	r3, [pc, #212]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800681c:	d10b      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800681e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006824:	d107      	bne.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006826:	f107 0314 	add.w	r3, r7, #20
 800682a:	4618      	mov	r0, r3
 800682c:	f7fe fd92 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	637b      	str	r3, [r7, #52]	; 0x34
 8006834:	e047      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8006836:	4b2c      	ldr	r3, [pc, #176]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800683e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006842:	d10b      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800684a:	d107      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800684c:	f107 0308 	add.w	r3, r7, #8
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fee9 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	e034      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800685c:	4b22      	ldr	r3, [pc, #136]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b02      	cmp	r3, #2
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800686e:	d109      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006870:	4b1d      	ldr	r3, [pc, #116]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	08db      	lsrs	r3, r3, #3
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	4a1c      	ldr	r2, [pc, #112]	; (80068ec <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800687c:	fa22 f303 	lsr.w	r3, r2, r3
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
 8006882:	e020      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8006884:	4b18      	ldr	r3, [pc, #96]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d106      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8006892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006894:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006898:	d102      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800689a:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800689c:	637b      	str	r3, [r7, #52]	; 0x34
 800689e:	e012      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80068a0:	4b11      	ldr	r3, [pc, #68]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d107      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80068b4:	d103      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	637b      	str	r3, [r7, #52]	; 0x34
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c2:	f001 bb66 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068c6:	f001 bb64 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80068ca:	4b07      	ldr	r3, [pc, #28]	; (80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80068cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068d0:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80068d4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80068dc:	f7fc fc04 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80068e0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80068e2:	f001 bb56 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80068e6:	bf00      	nop
 80068e8:	44020c00 	.word	0x44020c00
 80068ec:	03d09000 	.word	0x03d09000
 80068f0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80068f4:	4ba1      	ldr	r3, [pc, #644]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006900:	d10b      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8006902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006908:	d107      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800690a:	f107 0314 	add.w	r3, r7, #20
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe fd20 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	637b      	str	r3, [r7, #52]	; 0x34
 8006918:	e047      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800691a:	4b98      	ldr	r3, [pc, #608]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006926:	d10b      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800692e:	d107      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006930:	f107 0308 	add.w	r3, r7, #8
 8006934:	4618      	mov	r0, r3
 8006936:	f7fe fe77 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
 800693e:	e034      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8006940:	4b8e      	ldr	r3, [pc, #568]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0302 	and.w	r3, r3, #2
 8006948:	2b02      	cmp	r3, #2
 800694a:	d10d      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006952:	d109      	bne.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006954:	4b89      	ldr	r3, [pc, #548]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	08db      	lsrs	r3, r3, #3
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	4a88      	ldr	r2, [pc, #544]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
 8006964:	637b      	str	r3, [r7, #52]	; 0x34
 8006966:	e020      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8006968:	4b84      	ldr	r3, [pc, #528]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006974:	d106      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8006976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697c:	d102      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800697e:	4b81      	ldr	r3, [pc, #516]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
 8006982:	e012      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8006984:	4b7d      	ldr	r3, [pc, #500]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006986:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	2b02      	cmp	r3, #2
 8006990:	d107      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8006998:	d103      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800699e:	637b      	str	r3, [r7, #52]	; 0x34
 80069a0:	e003      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069a6:	f001 baf4 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069aa:	f001 baf2 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80069ae:	4b73      	ldr	r3, [pc, #460]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80069ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7fc fb92 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 80069c4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80069c6:	f001 bae4 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80069ca:	4b6c      	ldr	r3, [pc, #432]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069d6:	d10a      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d107      	bne.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069de:	f107 0314 	add.w	r3, r7, #20
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe fcb6 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	637b      	str	r3, [r7, #52]	; 0x34
 80069ec:	e043      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80069ee:	4b63      	ldr	r3, [pc, #396]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fa:	d10a      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d107      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe fe0e 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a10:	e031      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8006a12:	4b5a      	ldr	r3, [pc, #360]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d109      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a24:	4b55      	ldr	r3, [pc, #340]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	08db      	lsrs	r3, r3, #3
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	4a54      	ldr	r2, [pc, #336]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
 8006a36:	e01e      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8006a38:	4b50      	ldr	r3, [pc, #320]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a44:	d105      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d102      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8006a4c:	4b4d      	ldr	r3, [pc, #308]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a50:	e011      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8006a52:	4b4a      	ldr	r3, [pc, #296]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a58:	f003 0302 	and.w	r3, r3, #2
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d106      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8006a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a62:	2b05      	cmp	r3, #5
 8006a64:	d103      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8006a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	e003      	b.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a72:	f001 ba8e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a76:	f001 ba8c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8006a7a:	4b40      	ldr	r3, [pc, #256]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a7c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a84:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fc fb2c 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006a90:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8006a92:	f001 ba7e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa2:	d10a      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d107      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fe fc50 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab8:	e043      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8006aba:	4b30      	ldr	r3, [pc, #192]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ac6:	d10a      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d107      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ace:	f107 0308 	add.w	r3, r7, #8
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe fda8 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
 8006adc:	e031      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8006ade:	4b27      	ldr	r3, [pc, #156]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d10c      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8006aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aec:	2b30      	cmp	r3, #48	; 0x30
 8006aee:	d109      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006af0:	4b22      	ldr	r3, [pc, #136]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	08db      	lsrs	r3, r3, #3
 8006af6:	f003 0303 	and.w	r3, r3, #3
 8006afa:	4a21      	ldr	r2, [pc, #132]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
 8006b00:	637b      	str	r3, [r7, #52]	; 0x34
 8006b02:	e01e      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8006b04:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b10:	d105      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	2b40      	cmp	r3, #64	; 0x40
 8006b16:	d102      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8006b18:	4b1a      	ldr	r3, [pc, #104]	; (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	e011      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8006b1e:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d106      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8006b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2e:	2b50      	cmp	r3, #80	; 0x50
 8006b30:	d103      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8006b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b36:	637b      	str	r3, [r7, #52]	; 0x34
 8006b38:	e003      	b.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b3e:	f001 ba28 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b42:	f001 ba26 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8006b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b4c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006b50:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006b58:	f7fc faf2 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8006b5c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b5e:	f001 ba18 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b68:	d10e      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6a:	f107 0314 	add.w	r3, r7, #20
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7fe fbf0 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b78:	f001 ba0b 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b7c:	44020c00 	.word	0x44020c00
 8006b80:	03d09000 	.word	0x03d09000
 8006b84:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b8e:	d108      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b90:	f107 0308 	add.w	r3, r7, #8
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fd47 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b9e:	f001 b9f8 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ba2:	4ba4      	ldr	r3, [pc, #656]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d10d      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006bb4:	d109      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bb6:	4b9f      	ldr	r3, [pc, #636]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	08db      	lsrs	r3, r3, #3
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	4a9d      	ldr	r2, [pc, #628]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc8:	e020      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006bca:	4b9a      	ldr	r3, [pc, #616]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd6:	d106      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006bde:	d102      	bne.n	8006be6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8006be0:	4b96      	ldr	r3, [pc, #600]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006be2:	637b      	str	r3, [r7, #52]	; 0x34
 8006be4:	e012      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006be6:	4b93      	ldr	r3, [pc, #588]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006bfa:	d103      	bne.n	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8006bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c08:	f001 b9c3 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c0c:	f001 b9c1 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c10:	4b88      	ldr	r3, [pc, #544]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d104      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006c22:	f7fc fa45 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8006c26:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006c28:	f001 b9b3 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d104      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fc f911 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8006c36:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006c38:	f001 b9ab 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d108      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c42:	f107 0314 	add.w	r3, r7, #20
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fb84 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c50:	f001 b99f 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006c54:	4b77      	ldr	r3, [pc, #476]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c60:	d105      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d102      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8006c68:	4b75      	ldr	r3, [pc, #468]	; (8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	e023      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006c6e:	4b71      	ldr	r3, [pc, #452]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0302 	and.w	r3, r3, #2
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d10c      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d109      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c80:	4b6c      	ldr	r3, [pc, #432]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	08db      	lsrs	r3, r3, #3
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	4a6b      	ldr	r2, [pc, #428]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c90:	637b      	str	r3, [r7, #52]	; 0x34
 8006c92:	e010      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006c94:	4b67      	ldr	r3, [pc, #412]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca0:	d105      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d102      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8006ca8:	4b64      	ldr	r3, [pc, #400]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006caa:	637b      	str	r3, [r7, #52]	; 0x34
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb2:	f001 b96e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cb6:	f001 b96c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006cba:	4b5e      	ldr	r3, [pc, #376]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006cc6:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006cc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8006cda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	e012      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006ce2:	4b54      	ldr	r3, [pc, #336]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cf0:	d106      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d103      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8006cf8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cfe:	e003      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006d00:	2300      	movs	r3, #0
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006d04:	f001 b945 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d08:	f001 b943 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006d0c:	4b49      	ldr	r3, [pc, #292]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d16:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d1e:	f7fc f9e3 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006d22:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d24:	f001 b935 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8006d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d2e:	d108      	bne.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d30:	f107 0308 	add.w	r3, r7, #8
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fe fc77 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d3e:	f001 b928 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006d42:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d10d      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d54:	d109      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d56:	4b37      	ldr	r3, [pc, #220]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	08db      	lsrs	r3, r3, #3
 8006d5c:	f003 0303 	and.w	r3, r3, #3
 8006d60:	4a35      	ldr	r2, [pc, #212]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006d62:	fa22 f303 	lsr.w	r3, r2, r3
 8006d66:	637b      	str	r3, [r7, #52]	; 0x34
 8006d68:	e011      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006d6a:	4b32      	ldr	r3, [pc, #200]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d76:	d106      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8006d80:	4b2e      	ldr	r3, [pc, #184]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
 8006d84:	e003      	b.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d8a:	f001 b902 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d8e:	f001 b900 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006d92:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006d94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d98:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006d9c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d104      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006da4:	f7fc f9a0 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006da8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006daa:	f001 b8f2 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006db4:	d108      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fe fc34 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dc4:	f001 b8e5 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006dc8:	4b1a      	ldr	r3, [pc, #104]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d10d      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006dda:	d109      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ddc:	4b15      	ldr	r3, [pc, #84]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	08db      	lsrs	r3, r3, #3
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	4a14      	ldr	r2, [pc, #80]	; (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8006de8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
 8006dee:	e011      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8006df0:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dfc:	d106      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e04:	d102      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	e003      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e10:	f001 b8bf 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e14:	f001 b8bd 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8006e1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006e1e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006e22:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006e2a:	f7fc f989 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8006e2e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e30:	f001 b8af 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e34:	44020c00 	.word	0x44020c00
 8006e38:	03d09000 	.word	0x03d09000
 8006e3c:	003d0900 	.word	0x003d0900
 8006e40:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e4a:	d108      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fe fbe9 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e5a:	f001 b89a 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8006e5e:	4b9f      	ldr	r3, [pc, #636]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d10d      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e70:	d109      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e72:	4b9a      	ldr	r3, [pc, #616]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f003 0303 	and.w	r3, r3, #3
 8006e7c:	4a98      	ldr	r2, [pc, #608]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e82:	637b      	str	r3, [r7, #52]	; 0x34
 8006e84:	e011      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8006e86:	4b95      	ldr	r3, [pc, #596]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e92:	d106      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e9a:	d102      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8006e9c:	4b91      	ldr	r3, [pc, #580]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea0:	e003      	b.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ea6:	f001 b874 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006eaa:	f001 b872 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006eae:	4b8b      	ldr	r3, [pc, #556]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006eb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006eb4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006eb8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d104      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006ec0:	f7fc f93e 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8006ec4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ec6:	f001 b864 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ed0:	d108      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ed2:	f107 0308 	add.w	r3, r7, #8
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fba6 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ee0:	f001 b857 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006ee4:	4b7d      	ldr	r3, [pc, #500]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d10d      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ef6:	d109      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ef8:	4b78      	ldr	r3, [pc, #480]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	08db      	lsrs	r3, r3, #3
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	4a77      	ldr	r2, [pc, #476]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8006f0c:	4b73      	ldr	r3, [pc, #460]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f18:	d106      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f20:	d102      	bne.n	8006f28 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8006f22:	4b70      	ldr	r3, [pc, #448]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
 8006f26:	e003      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f2c:	f001 b831 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f30:	f001 b82f 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8006f34:	4b69      	ldr	r3, [pc, #420]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f3a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d104      	bne.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f46:	f7fc f8cf 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8006f4a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f4c:	f001 b821 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f56:	d108      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f58:	f107 0308 	add.w	r3, r7, #8
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fb63 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f66:	f001 b814 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8006f6a:	4b5c      	ldr	r3, [pc, #368]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d10e      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8006f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f7c:	d10a      	bne.n	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f7e:	4b57      	ldr	r3, [pc, #348]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	08db      	lsrs	r3, r3, #3
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	4a55      	ldr	r2, [pc, #340]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8006f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f90:	f000 bfff 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f98:	f000 bffb 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006f9c:	4b4f      	ldr	r3, [pc, #316]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8006f9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006fa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006fae:	d056      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006fb6:	f200 808b 	bhi.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc0:	d03e      	beq.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc8:	f200 8082 	bhi.w	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd2:	d027      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fda:	d879      	bhi.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe2:	d017      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fea:	d871      	bhi.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff8:	d004      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8006ffa:	e069      	b.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006ffc:	f7fc f8a0 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8007000:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007002:	e068      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007004:	f107 0314 	add.w	r3, r7, #20
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe f9a3 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007012:	e060      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007014:	f107 0308 	add.w	r3, r7, #8
 8007018:	4618      	mov	r0, r3
 800701a:	f7fe fb05 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007022:	e058      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007024:	4b2d      	ldr	r3, [pc, #180]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b02      	cmp	r3, #2
 8007030:	d103      	bne.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007036:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007038:	e04d      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800703e:	e04a      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007040:	4b26      	ldr	r3, [pc, #152]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800704a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704e:	d103      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007050:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007056:	e03e      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800705c:	e03b      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800705e:	4b1f      	ldr	r3, [pc, #124]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007064:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800706a:	4b1c      	ldr	r3, [pc, #112]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b02      	cmp	r3, #2
 8007074:	d10c      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d109      	bne.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800707c:	4b17      	ldr	r3, [pc, #92]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	08db      	lsrs	r3, r3, #3
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	4a16      	ldr	r2, [pc, #88]	; (80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007088:	fa22 f303 	lsr.w	r3, r2, r3
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
 800708e:	e01e      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007090:	4b12      	ldr	r3, [pc, #72]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800709c:	d106      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800709e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d102      	bne.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80070a6:	4b0f      	ldr	r3, [pc, #60]	; (80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
 80070aa:	e010      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ac:	4b0b      	ldr	r3, [pc, #44]	; (80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070b8:	d106      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c0:	d102      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80070c2:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80070cc:	e003      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80070ce:	e002      	b.n	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80070d4:	bf00      	nop
          }
        }
        break;
 80070d6:	f000 bf5c 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80070da:	bf00      	nop
 80070dc:	44020c00 	.word	0x44020c00
 80070e0:	03d09000 	.word	0x03d09000
 80070e4:	003d0900 	.word	0x003d0900
 80070e8:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80070ec:	4b9e      	ldr	r3, [pc, #632]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80070ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80070f2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80070f6:	633b      	str	r3, [r7, #48]	; 0x30
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80070fe:	d056      	beq.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007106:	f200 808b 	bhi.w	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007110:	d03e      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007118:	f200 8082 	bhi.w	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007122:	d027      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800712a:	d879      	bhi.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800712c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007132:	d017      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	d871      	bhi.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	2b00      	cmp	r3, #0
 8007140:	d004      	beq.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007148:	d004      	beq.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800714a:	e069      	b.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800714c:	f7fb ffcc 	bl	80030e8 <HAL_RCC_GetPCLK1Freq>
 8007150:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007152:	e068      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007154:	f107 0314 	add.w	r3, r7, #20
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe f8fb 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007162:	e060      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007164:	f107 0308 	add.w	r3, r7, #8
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fa5d 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007172:	e058      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007174:	4b7c      	ldr	r3, [pc, #496]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007186:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007188:	e04d      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800718e:	e04a      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007190:	4b75      	ldr	r3, [pc, #468]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007196:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800719a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800719e:	d103      	bne.n	80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80071a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80071a6:	e03e      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80071ac:	e03b      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80071ae:	4b6e      	ldr	r3, [pc, #440]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071ba:	4b6b      	ldr	r3, [pc, #428]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071cc:	4b66      	ldr	r3, [pc, #408]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	08db      	lsrs	r3, r3, #3
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	4a65      	ldr	r2, [pc, #404]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80071d8:	fa22 f303 	lsr.w	r3, r2, r3
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	e01e      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071e0:	4b61      	ldr	r3, [pc, #388]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ec:	d106      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f4:	d102      	bne.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071f6:	4b5e      	ldr	r3, [pc, #376]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
 80071fa:	e010      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071fc:	4b5a      	ldr	r3, [pc, #360]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007208:	d106      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800720a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007210:	d102      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007212:	4b58      	ldr	r3, [pc, #352]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007214:	637b      	str	r3, [r7, #52]	; 0x34
 8007216:	e002      	b.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007218:	2300      	movs	r3, #0
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800721c:	e003      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800721e:	e002      	b.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007220:	2300      	movs	r3, #0
 8007222:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007224:	bf00      	nop
          }
        }
        break;
 8007226:	f000 beb4 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800722a:	4b4f      	ldr	r3, [pc, #316]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800722c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007230:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007234:	633b      	str	r3, [r7, #48]	; 0x30
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800723c:	d056      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007244:	f200 808b 	bhi.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800724e:	d03e      	beq.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007252:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007256:	f200 8082 	bhi.w	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007260:	d027      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007264:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007268:	d879      	bhi.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800726a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007270:	d017      	beq.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007278:	d871      	bhi.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800727a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d004      	beq.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007288:	e069      	b.n	800735e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800728a:	f7fb ff59 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 800728e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007290:	e068      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007292:	f107 0314 	add.w	r3, r7, #20
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe f85c 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072a0:	e060      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072a2:	f107 0308 	add.w	r3, r7, #8
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fe f9be 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072b0:	e058      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072b2:	4b2d      	ldr	r3, [pc, #180]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d103      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80072c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072c6:	e04d      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80072c8:	2300      	movs	r3, #0
 80072ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072cc:	e04a      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80072ce:	4b26      	ldr	r3, [pc, #152]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072dc:	d103      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80072de:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072e2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80072e4:	e03e      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80072ea:	e03b      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072f8:	4b1b      	ldr	r3, [pc, #108]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0302 	and.w	r3, r3, #2
 8007300:	2b02      	cmp	r3, #2
 8007302:	d10c      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	2b00      	cmp	r3, #0
 8007308:	d109      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800730a:	4b17      	ldr	r3, [pc, #92]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	08db      	lsrs	r3, r3, #3
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	4a15      	ldr	r2, [pc, #84]	; (800736c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007316:	fa22 f303 	lsr.w	r3, r2, r3
 800731a:	637b      	str	r3, [r7, #52]	; 0x34
 800731c:	e01e      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800731e:	4b12      	ldr	r3, [pc, #72]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800732a:	d106      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d102      	bne.n	800733a <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	e010      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800733a:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007346:	d106      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734e:	d102      	bne.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
 8007354:	e002      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007356:	2300      	movs	r3, #0
 8007358:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800735c:	e002      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007362:	bf00      	nop
          }
        }
        break;
 8007364:	f000 be15 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007368:	44020c00 	.word	0x44020c00
 800736c:	03d09000 	.word	0x03d09000
 8007370:	003d0900 	.word	0x003d0900
 8007374:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007378:	4b9e      	ldr	r3, [pc, #632]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800737a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800737e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007382:	633b      	str	r3, [r7, #48]	; 0x30
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800738a:	d056      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007392:	f200 808b 	bhi.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800739c:	d03e      	beq.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800739e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073a4:	f200 8082 	bhi.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073ae:	d027      	beq.n	8007400 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80073b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073b6:	d879      	bhi.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073be:	d017      	beq.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073c6:	d871      	bhi.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d004      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80073ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073d4:	d004      	beq.n	80073e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80073d6:	e069      	b.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80073d8:	f7fb feb2 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 80073dc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80073de:	e068      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073e0:	f107 0314 	add.w	r3, r7, #20
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fd ffb5 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073ee:	e060      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe f917 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80073fe:	e058      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007400:	4b7c      	ldr	r3, [pc, #496]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007402:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b02      	cmp	r3, #2
 800740c:	d103      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007414:	e04d      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800741a:	e04a      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800741c:	4b75      	ldr	r3, [pc, #468]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800741e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800742a:	d103      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800742c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007432:	e03e      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007438:	e03b      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800743a:	4b6e      	ldr	r3, [pc, #440]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800743c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007440:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007446:	4b6b      	ldr	r3, [pc, #428]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0302 	and.w	r3, r3, #2
 800744e:	2b02      	cmp	r3, #2
 8007450:	d10c      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007458:	4b66      	ldr	r3, [pc, #408]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	08db      	lsrs	r3, r3, #3
 800745e:	f003 0303 	and.w	r3, r3, #3
 8007462:	4a65      	ldr	r2, [pc, #404]	; (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007464:	fa22 f303 	lsr.w	r3, r2, r3
 8007468:	637b      	str	r3, [r7, #52]	; 0x34
 800746a:	e01e      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800746c:	4b61      	ldr	r3, [pc, #388]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007478:	d106      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007480:	d102      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007482:	4b5e      	ldr	r3, [pc, #376]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
 8007486:	e010      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007488:	4b5a      	ldr	r3, [pc, #360]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007494:	d106      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800749c:	d102      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800749e:	4b58      	ldr	r3, [pc, #352]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	e002      	b.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80074a8:	e003      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80074aa:	e002      	b.n	80074b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80074b0:	bf00      	nop
          }
        }
        break;
 80074b2:	f000 bd6e 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80074b6:	4b4f      	ldr	r3, [pc, #316]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80074b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80074bc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80074c0:	633b      	str	r3, [r7, #48]	; 0x30
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80074c8:	d056      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80074d0:	f200 808b 	bhi.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074da:	d03e      	beq.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074e2:	f200 8082 	bhi.w	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074ec:	d027      	beq.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80074f4:	d879      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074fc:	d017      	beq.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80074fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007504:	d871      	bhi.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	2b00      	cmp	r3, #0
 800750a:	d004      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800750c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007512:	d004      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007514:	e069      	b.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007516:	f7fb fe13 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 800751a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800751c:	e068      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800751e:	f107 0314 	add.w	r3, r7, #20
 8007522:	4618      	mov	r0, r3
 8007524:	f7fd ff16 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800752c:	e060      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe f878 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800753c:	e058      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800753e:	4b2d      	ldr	r3, [pc, #180]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d103      	bne.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800754c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007550:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007552:	e04d      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007558:	e04a      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800755a:	4b26      	ldr	r3, [pc, #152]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800755c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007568:	d103      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800756a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007570:	e03e      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007576:	e03b      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007578:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800757a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800757e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007584:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0302 	and.w	r3, r3, #2
 800758c:	2b02      	cmp	r3, #2
 800758e:	d10c      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007596:	4b17      	ldr	r3, [pc, #92]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	08db      	lsrs	r3, r3, #3
 800759c:	f003 0303 	and.w	r3, r3, #3
 80075a0:	4a15      	ldr	r2, [pc, #84]	; (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	637b      	str	r3, [r7, #52]	; 0x34
 80075a8:	e01e      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075aa:	4b12      	ldr	r3, [pc, #72]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075b6:	d106      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80075b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075be:	d102      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075c0:	4b0e      	ldr	r3, [pc, #56]	; (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
 80075c4:	e010      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075c6:	4b0b      	ldr	r3, [pc, #44]	; (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075d2:	d106      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80075d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075da:	d102      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075dc:	4b08      	ldr	r3, [pc, #32]	; (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
 80075e0:	e002      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80075e6:	e003      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80075ee:	bf00      	nop
          }
        }
        break;
 80075f0:	f000 bccf 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80075f4:	44020c00 	.word	0x44020c00
 80075f8:	03d09000 	.word	0x03d09000
 80075fc:	003d0900 	.word	0x003d0900
 8007600:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007604:	4b9e      	ldr	r3, [pc, #632]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007606:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800760a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800760e:	633b      	str	r3, [r7, #48]	; 0x30
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007616:	d056      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761e:	f200 808b 	bhi.w	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007628:	d03e      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	f200 8082 	bhi.w	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800763a:	d027      	beq.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007642:	d879      	bhi.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764a:	d017      	beq.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007652:	d871      	bhi.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2b00      	cmp	r3, #0
 8007658:	d004      	beq.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007660:	d004      	beq.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007662:	e069      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007664:	f7fb fd6c 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8007668:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800766a:	e068      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800766c:	f107 0314 	add.w	r3, r7, #20
 8007670:	4618      	mov	r0, r3
 8007672:	f7fd fe6f 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800767a:	e060      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800767c:	f107 0308 	add.w	r3, r7, #8
 8007680:	4618      	mov	r0, r3
 8007682:	f7fd ffd1 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800768a:	e058      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800768c:	4b7c      	ldr	r3, [pc, #496]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800768e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b02      	cmp	r3, #2
 8007698:	d103      	bne.n	80076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800769a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076a0:	e04d      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076a6:	e04a      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80076a8:	4b75      	ldr	r3, [pc, #468]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b6:	d103      	bne.n	80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80076b8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076bc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80076be:	e03e      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80076c4:	e03b      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80076c6:	4b6e      	ldr	r3, [pc, #440]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80076d2:	4b6b      	ldr	r3, [pc, #428]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d10c      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d109      	bne.n	80076f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076e4:	4b66      	ldr	r3, [pc, #408]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	08db      	lsrs	r3, r3, #3
 80076ea:	f003 0303 	and.w	r3, r3, #3
 80076ee:	4a65      	ldr	r2, [pc, #404]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
 80076f6:	e01e      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80076f8:	4b61      	ldr	r3, [pc, #388]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007704:	d106      	bne.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8007706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770c:	d102      	bne.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800770e:	4b5e      	ldr	r3, [pc, #376]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007710:	637b      	str	r3, [r7, #52]	; 0x34
 8007712:	e010      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007714:	4b5a      	ldr	r3, [pc, #360]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007720:	d106      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007728:	d102      	bne.n	8007730 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800772a:	4b58      	ldr	r3, [pc, #352]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800772c:	637b      	str	r3, [r7, #52]	; 0x34
 800772e:	e002      	b.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007734:	e003      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8007736:	e002      	b.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800773c:	bf00      	nop
          }
        }
        break;
 800773e:	f000 bc28 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007742:	4b4f      	ldr	r3, [pc, #316]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800774c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800774e:	4b4c      	ldr	r3, [pc, #304]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800775a:	d106      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8007762:	4b4a      	ldr	r3, [pc, #296]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007766:	f000 bc14 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800776a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007770:	d108      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007772:	f107 0320 	add.w	r3, r7, #32
 8007776:	4618      	mov	r0, r3
 8007778:	f7fd fc82 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007780:	f000 bc07 	b.w	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007786:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778a:	d107      	bne.n	800779c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800778c:	f107 0314 	add.w	r3, r7, #20
 8007790:	4618      	mov	r0, r3
 8007792:	f7fd fddf 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800779a:	e3fa      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a0:	e3f7      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80077a2:	4b37      	ldr	r3, [pc, #220]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80077a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	633b      	str	r3, [r7, #48]	; 0x30
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d861      	bhi.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	080077d1 	.word	0x080077d1
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	08007801 	.word	0x08007801
 80077cc:	08007807 	.word	0x08007807
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077d0:	f107 0320 	add.w	r3, r7, #32
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fd fc53 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80077da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077de:	e04e      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077e0:	f107 0314 	add.w	r3, r7, #20
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fdb5 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077ee:	e046      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077f0:	f107 0308 	add.w	r3, r7, #8
 80077f4:	4618      	mov	r0, r3
 80077f6:	f7fd ff17 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80077fe:	e03e      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007800:	4b23      	ldr	r3, [pc, #140]	; (8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007804:	e03b      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007806:	4b1e      	ldr	r3, [pc, #120]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800780c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007810:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007812:	4b1b      	ldr	r3, [pc, #108]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b02      	cmp	r3, #2
 800781c:	d10c      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d109      	bne.n	8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007824:	4b16      	ldr	r3, [pc, #88]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	08db      	lsrs	r3, r3, #3
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	4a15      	ldr	r2, [pc, #84]	; (8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
 8007836:	e01e      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007838:	4b11      	ldr	r3, [pc, #68]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007844:	d106      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8007846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784c:	d102      	bne.n	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800784e:	4b0e      	ldr	r3, [pc, #56]	; (8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8007850:	637b      	str	r3, [r7, #52]	; 0x34
 8007852:	e010      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007860:	d106      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007868:	d102      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
 800786e:	e002      	b.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007874:	e003      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8007876:	e002      	b.n	800787e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800787c:	bf00      	nop
          }
        }
        break;
 800787e:	e388      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007880:	44020c00 	.word	0x44020c00
 8007884:	03d09000 	.word	0x03d09000
 8007888:	003d0900 	.word	0x003d0900
 800788c:	017d7840 	.word	0x017d7840
 8007890:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007894:	4ba9      	ldr	r3, [pc, #676]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800789a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800789e:	633b      	str	r3, [r7, #48]	; 0x30
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	f200 809a 	bhi.w	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	08007935 	.word	0x08007935
 80078b4:	080079dd 	.word	0x080079dd
 80078b8:	080079dd 	.word	0x080079dd
 80078bc:	080079dd 	.word	0x080079dd
 80078c0:	080079dd 	.word	0x080079dd
 80078c4:	080079dd 	.word	0x080079dd
 80078c8:	080079dd 	.word	0x080079dd
 80078cc:	080079dd 	.word	0x080079dd
 80078d0:	08007945 	.word	0x08007945
 80078d4:	080079dd 	.word	0x080079dd
 80078d8:	080079dd 	.word	0x080079dd
 80078dc:	080079dd 	.word	0x080079dd
 80078e0:	080079dd 	.word	0x080079dd
 80078e4:	080079dd 	.word	0x080079dd
 80078e8:	080079dd 	.word	0x080079dd
 80078ec:	080079dd 	.word	0x080079dd
 80078f0:	08007955 	.word	0x08007955
 80078f4:	080079dd 	.word	0x080079dd
 80078f8:	080079dd 	.word	0x080079dd
 80078fc:	080079dd 	.word	0x080079dd
 8007900:	080079dd 	.word	0x080079dd
 8007904:	080079dd 	.word	0x080079dd
 8007908:	080079dd 	.word	0x080079dd
 800790c:	080079dd 	.word	0x080079dd
 8007910:	08007965 	.word	0x08007965
 8007914:	080079dd 	.word	0x080079dd
 8007918:	080079dd 	.word	0x080079dd
 800791c:	080079dd 	.word	0x080079dd
 8007920:	080079dd 	.word	0x080079dd
 8007924:	080079dd 	.word	0x080079dd
 8007928:	080079dd 	.word	0x080079dd
 800792c:	080079dd 	.word	0x080079dd
 8007930:	0800796b 	.word	0x0800796b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007934:	f107 0320 	add.w	r3, r7, #32
 8007938:	4618      	mov	r0, r3
 800793a:	f7fd fba1 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007942:	e04e      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007944:	f107 0314 	add.w	r3, r7, #20
 8007948:	4618      	mov	r0, r3
 800794a:	f7fd fd03 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007952:	e046      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007954:	f107 0308 	add.w	r3, r7, #8
 8007958:	4618      	mov	r0, r3
 800795a:	f7fd fe65 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007962:	e03e      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007964:	4b76      	ldr	r3, [pc, #472]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007968:	e03b      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800796a:	4b74      	ldr	r3, [pc, #464]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800796c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007970:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007976:	4b71      	ldr	r3, [pc, #452]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b02      	cmp	r3, #2
 8007980:	d10c      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8007982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007988:	4b6c      	ldr	r3, [pc, #432]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	08db      	lsrs	r3, r3, #3
 800798e:	f003 0303 	and.w	r3, r3, #3
 8007992:	4a6c      	ldr	r2, [pc, #432]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007994:	fa22 f303 	lsr.w	r3, r2, r3
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
 800799a:	e01e      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800799c:	4b67      	ldr	r3, [pc, #412]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d106      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079b0:	d102      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80079b2:	4b65      	ldr	r3, [pc, #404]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80079b4:	637b      	str	r3, [r7, #52]	; 0x34
 80079b6:	e010      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079b8:	4b60      	ldr	r3, [pc, #384]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079c4:	d106      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80079c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079cc:	d102      	bne.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80079ce:	4b5f      	ldr	r3, [pc, #380]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
 80079d2:	e002      	b.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80079d8:	e003      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079e0:	bf00      	nop
          }
        }
        break;
 80079e2:	e2d6      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80079e4:	4b55      	ldr	r3, [pc, #340]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80079e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80079ee:	633b      	str	r3, [r7, #48]	; 0x30
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f6:	d031      	beq.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80079f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fe:	d866      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	2bc0      	cmp	r3, #192	; 0xc0
 8007a04:	d027      	beq.n	8007a56 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2bc0      	cmp	r3, #192	; 0xc0
 8007a0a:	d860      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2b80      	cmp	r3, #128	; 0x80
 8007a10:	d019      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d85a      	bhi.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8007a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a20:	2b40      	cmp	r3, #64	; 0x40
 8007a22:	d008      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8007a24:	e053      	b.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a26:	f107 0320 	add.w	r3, r7, #32
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fd fb28 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a34:	e04e      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a36:	f107 0314 	add.w	r3, r7, #20
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fd fc8a 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a44:	e046      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fd fdec 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a54:	e03e      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a56:	4b3a      	ldr	r3, [pc, #232]	; (8007b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a5a:	e03b      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a5c:	4b37      	ldr	r3, [pc, #220]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a62:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a68:	4b34      	ldr	r3, [pc, #208]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d10c      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d109      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a7a:	4b30      	ldr	r3, [pc, #192]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	4a2f      	ldr	r2, [pc, #188]	; (8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8007a86:	fa22 f303 	lsr.w	r3, r2, r3
 8007a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8c:	e01e      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a8e:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a9a:	d106      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa2:	d102      	bne.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa8:	e010      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007aaa:	4b24      	ldr	r3, [pc, #144]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab6:	d106      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8007ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007abe:	d102      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007ac0:	4b22      	ldr	r3, [pc, #136]	; (8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8007ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8007acc:	e002      	b.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ad2:	bf00      	nop
          }
        }
        break;
 8007ad4:	e25d      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8007ad6:	4b19      	ldr	r3, [pc, #100]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007adc:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8007ae0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d103      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fb fb14 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8007aec:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007aee:	e250      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8007af0:	4b12      	ldr	r3, [pc, #72]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007afc:	d10b      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b04:	d107      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b06:	f107 0314 	add.w	r3, r7, #20
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fd fc22 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	637b      	str	r3, [r7, #52]	; 0x34
 8007b14:	e04f      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d115      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b2a:	d111      	bne.n	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2c:	f107 0308 	add.w	r3, r7, #8
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fd fd79 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3a:	e03c      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8007b3c:	44020c00 	.word	0x44020c00
 8007b40:	00bb8000 	.word	0x00bb8000
 8007b44:	03d09000 	.word	0x03d09000
 8007b48:	003d0900 	.word	0x003d0900
 8007b4c:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8007b50:	4b94      	ldr	r3, [pc, #592]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d10d      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007b62:	d109      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b64:	4b8f      	ldr	r3, [pc, #572]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	08db      	lsrs	r3, r3, #3
 8007b6a:	f003 0303 	and.w	r3, r3, #3
 8007b6e:	4a8e      	ldr	r2, [pc, #568]	; (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007b70:	fa22 f303 	lsr.w	r3, r2, r3
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
 8007b76:	e01e      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8007b78:	4b8a      	ldr	r3, [pc, #552]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b84:	d106      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b8c:	d102      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8007b8e:	4b87      	ldr	r3, [pc, #540]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	e010      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8007b94:	4b83      	ldr	r3, [pc, #524]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba0:	d106      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ba8:	d102      	bne.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8007baa:	4b81      	ldr	r3, [pc, #516]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
 8007bae:	e002      	b.n	8007bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bb4:	e1ed      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007bb6:	e1ec      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8007bb8:	4b7a      	ldr	r3, [pc, #488]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bbe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007bc2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8007bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d103      	bne.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007bca:	f7fb fab9 	bl	8003140 <HAL_RCC_GetPCLK3Freq>
 8007bce:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007bd0:	e1df      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8007bd2:	4b74      	ldr	r3, [pc, #464]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bde:	d10b      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8007be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fd fbb1 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf6:	e045      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8007bf8:	4b6a      	ldr	r3, [pc, #424]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c04:	d10b      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0c:	d107      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c0e:	f107 0308 	add.w	r3, r7, #8
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fd fd08 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c1c:	e032      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8007c1e:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d10d      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c30:	d109      	bne.n	8007c46 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c32:	4b5c      	ldr	r3, [pc, #368]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	08db      	lsrs	r3, r3, #3
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	4a5a      	ldr	r2, [pc, #360]	; (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c42:	637b      	str	r3, [r7, #52]	; 0x34
 8007c44:	e01e      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8007c46:	4b57      	ldr	r3, [pc, #348]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c52:	d106      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c5a:	d102      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8007c5c:	4b53      	ldr	r3, [pc, #332]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	e010      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8007c62:	4b50      	ldr	r3, [pc, #320]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c6e:	d106      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007c76:	d102      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7c:	e002      	b.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c82:	e186      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c84:	e185      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007c86:	4b47      	ldr	r3, [pc, #284]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c8c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8007c90:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007c98:	f7fb fa3c 	bl	8003114 <HAL_RCC_GetPCLK2Freq>
 8007c9c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8007c9e:	e178      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007ca0:	4b40      	ldr	r3, [pc, #256]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cac:	d10b      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cb6:	f107 0314 	add.w	r3, r7, #20
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fd fb4a 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cc4:	e045      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007cc6:	4b37      	ldr	r3, [pc, #220]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd2:	d10b      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cda:	d107      	bne.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cdc:	f107 0308 	add.w	r3, r7, #8
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fca1 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8007cea:	e032      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007cec:	4b2d      	ldr	r3, [pc, #180]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d10d      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007cfe:	d109      	bne.n	8007d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d00:	4b28      	ldr	r3, [pc, #160]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	08db      	lsrs	r3, r3, #3
 8007d06:	f003 0303 	and.w	r3, r3, #3
 8007d0a:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8007d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
 8007d12:	e01e      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007d14:	4b23      	ldr	r3, [pc, #140]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d20:	d106      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8007d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d28:	d102      	bne.n	8007d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d2e:	e010      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007d30:	4b1c      	ldr	r3, [pc, #112]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d3c:	d106      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007d44:	d102      	bne.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8007d46:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
 8007d4a:	e002      	b.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d50:	e11f      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d52:	e11e      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007d54:	4b13      	ldr	r3, [pc, #76]	; (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8007d56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d85f      	bhi.n	8007e26 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d85 	.word	0x08007d85
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007db5 	.word	0x08007db5

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8007d7c:	f7fb f998 	bl	80030b0 <HAL_RCC_GetHCLKFreq>
 8007d80:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d82:	e053      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007d84:	f107 0320 	add.w	r3, r7, #32
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fd f979 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d92:	e04b      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d94:	f107 0314 	add.w	r3, r7, #20
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fd fadb 	bl	8005354 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007da2:	e043      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007da4:	44020c00 	.word	0x44020c00
 8007da8:	03d09000 	.word	0x03d09000
 8007dac:	003d0900 	.word	0x003d0900
 8007db0:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007db4:	4b79      	ldr	r3, [pc, #484]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007dba:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007dc0:	4b76      	ldr	r3, [pc, #472]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d10c      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dd2:	4b72      	ldr	r3, [pc, #456]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	08db      	lsrs	r3, r3, #3
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	4a70      	ldr	r2, [pc, #448]	; (8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
 8007de4:	e01e      	b.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007de6:	4b6d      	ldr	r3, [pc, #436]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007df2:	d106      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8007df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d102      	bne.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007dfc:	4b69      	ldr	r3, [pc, #420]	; (8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8007dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007e00:	e010      	b.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007e02:	4b66      	ldr	r3, [pc, #408]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e0e:	d106      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8007e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e16:	d102      	bne.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e18:	4b63      	ldr	r3, [pc, #396]	; (8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	e002      	b.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e22:	e003      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e2a:	bf00      	nop
          }
        }
        break;
 8007e2c:	e0b1      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007e2e:	4b5b      	ldr	r3, [pc, #364]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e38:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007e3a:	4b58      	ldr	r3, [pc, #352]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d106      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e52:	637b      	str	r3, [r7, #52]	; 0x34
 8007e54:	e01f      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007e56:	4b51      	ldr	r3, [pc, #324]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e64:	d106      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	2b40      	cmp	r3, #64	; 0x40
 8007e6a:	d103      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8007e6c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
 8007e72:	e010      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007e74:	4b49      	ldr	r3, [pc, #292]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e80:	d106      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	2b80      	cmp	r3, #128	; 0x80
 8007e86:	d103      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8007e88:	f248 0312 	movw	r3, #32786	; 0x8012
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e002      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007e94:	e07d      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e96:	e07c      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007e98:	4b40      	ldr	r3, [pc, #256]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ea2:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007ea4:	4b3d      	ldr	r3, [pc, #244]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb0:	d105      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8007eb8:	4b3c      	ldr	r3, [pc, #240]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
 8007ebc:	e031      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007ebe:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007eca:	d10a      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ece:	2b10      	cmp	r3, #16
 8007ed0:	d107      	bne.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ed2:	f107 0320 	add.w	r3, r7, #32
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fd f8d2 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee0:	e01f      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007ee2:	4b2e      	ldr	r3, [pc, #184]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007ee4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ee8:	f003 0302 	and.w	r3, r3, #2
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d106      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8007ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef2:	2b20      	cmp	r3, #32
 8007ef4:	d103      	bne.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8007ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
 8007efc:	e011      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007efe:	4b27      	ldr	r3, [pc, #156]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f0c:	d106      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	2b30      	cmp	r3, #48	; 0x30
 8007f12:	d103      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8007f14:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	e002      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007f20:	e037      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f22:	e036      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f2e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d107      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f36:	f107 0320 	add.w	r3, r7, #32
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fd f8a0 	bl	8005080 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007f44:	e025      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f52:	d10a      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d107      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f5a:	f107 0308 	add.w	r3, r7, #8
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd fb62 	bl	8005628 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
 8007f68:	e00f      	b.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f76:	d105      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	2b30      	cmp	r3, #48	; 0x30
 8007f7c:	d102      	bne.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8007f80:	637b      	str	r3, [r7, #52]	; 0x34
 8007f82:	e002      	b.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8007f88:	e003      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f8a:	e002      	b.n	8007f92 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f90:	bf00      	nop
    }
  }

  return (frequency);
 8007f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	373c      	adds	r7, #60	; 0x3c
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd90      	pop	{r4, r7, pc}
 8007f9c:	44020c00 	.word	0x44020c00
 8007fa0:	03d09000 	.word	0x03d09000
 8007fa4:	003d0900 	.word	0x003d0900
 8007fa8:	017d7840 	.word	0x017d7840
 8007fac:	02dc6c00 	.word	0x02dc6c00

08007fb0 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007fb8:	4b48      	ldr	r3, [pc, #288]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a47      	ldr	r2, [pc, #284]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8007fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007fc4:	f7f8 ff92 	bl	8000eec <HAL_GetTick>
 8007fc8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fca:	e008      	b.n	8007fde <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fcc:	f7f8 ff8e 	bl	8000eec <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d901      	bls.n	8007fde <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e07a      	b.n	80080d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fde:	4b3f      	ldr	r3, [pc, #252]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1f0      	bne.n	8007fcc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007fea:	4b3c      	ldr	r3, [pc, #240]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ff2:	f023 0303 	bic.w	r3, r3, #3
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	6811      	ldr	r1, [r2, #0]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6852      	ldr	r2, [r2, #4]
 8007ffe:	0212      	lsls	r2, r2, #8
 8008000:	430a      	orrs	r2, r1
 8008002:	4936      	ldr	r1, [pc, #216]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008004:	4313      	orrs	r3, r2
 8008006:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	3b01      	subs	r3, #1
 800800e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	3b01      	subs	r3, #1
 8008018:	025b      	lsls	r3, r3, #9
 800801a:	b29b      	uxth	r3, r3
 800801c:	431a      	orrs	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	3b01      	subs	r3, #1
 8008024:	041b      	lsls	r3, r3, #16
 8008026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	3b01      	subs	r3, #1
 8008032:	061b      	lsls	r3, r3, #24
 8008034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008038:	4928      	ldr	r1, [pc, #160]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800803a:	4313      	orrs	r3, r2
 800803c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800803e:	4b27      	ldr	r3, [pc, #156]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	f023 020c 	bic.w	r2, r3, #12
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	4924      	ldr	r1, [pc, #144]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800804c:	4313      	orrs	r3, r2
 800804e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008050:	4b22      	ldr	r3, [pc, #136]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	f023 0220 	bic.w	r2, r3, #32
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	69db      	ldr	r3, [r3, #28]
 800805c:	491f      	ldr	r1, [pc, #124]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800805e:	4313      	orrs	r3, r2
 8008060:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	491c      	ldr	r1, [pc, #112]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800806c:	4313      	orrs	r3, r2
 800806e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008070:	4b1a      	ldr	r3, [pc, #104]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	4a19      	ldr	r2, [pc, #100]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008076:	f023 0310 	bic.w	r3, r3, #16
 800807a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800807c:	4b17      	ldr	r3, [pc, #92]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008084:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	6a12      	ldr	r2, [r2, #32]
 800808c:	00d2      	lsls	r2, r2, #3
 800808e:	4913      	ldr	r1, [pc, #76]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008090:	4313      	orrs	r3, r2
 8008092:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008094:	4b11      	ldr	r3, [pc, #68]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	4a10      	ldr	r2, [pc, #64]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 800809a:	f043 0310 	orr.w	r3, r3, #16
 800809e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80080a0:	4b0e      	ldr	r3, [pc, #56]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a0d      	ldr	r2, [pc, #52]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 80080a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80080aa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080ac:	f7f8 ff1e 	bl	8000eec <HAL_GetTick>
 80080b0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080b2:	e008      	b.n	80080c6 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080b4:	f7f8 ff1a 	bl	8000eec <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e006      	b.n	80080d4 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80080c6:	4b05      	ldr	r3, [pc, #20]	; (80080dc <RCCEx_PLL2_Config+0x12c>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 80080d2:	2300      	movs	r3, #0

}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	44020c00 	.word	0x44020c00

080080e0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 80080e8:	4b48      	ldr	r3, [pc, #288]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a47      	ldr	r2, [pc, #284]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80080ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080f2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80080f4:	f7f8 fefa 	bl	8000eec <HAL_GetTick>
 80080f8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080fa:	e008      	b.n	800810e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80080fc:	f7f8 fef6 	bl	8000eec <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e07a      	b.n	8008204 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800810e:	4b3f      	ldr	r3, [pc, #252]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1f0      	bne.n	80080fc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800811a:	4b3c      	ldr	r3, [pc, #240]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008122:	f023 0303 	bic.w	r3, r3, #3
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6811      	ldr	r1, [r2, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	6852      	ldr	r2, [r2, #4]
 800812e:	0212      	lsls	r2, r2, #8
 8008130:	430a      	orrs	r2, r1
 8008132:	4936      	ldr	r1, [pc, #216]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 8008134:	4313      	orrs	r3, r2
 8008136:	630b      	str	r3, [r1, #48]	; 0x30
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	3b01      	subs	r3, #1
 800813e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	3b01      	subs	r3, #1
 8008148:	025b      	lsls	r3, r3, #9
 800814a:	b29b      	uxth	r3, r3
 800814c:	431a      	orrs	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	3b01      	subs	r3, #1
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800815a:	431a      	orrs	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	3b01      	subs	r3, #1
 8008162:	061b      	lsls	r3, r3, #24
 8008164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008168:	4928      	ldr	r1, [pc, #160]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800816e:	4b27      	ldr	r3, [pc, #156]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 8008170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008172:	f023 020c 	bic.w	r2, r3, #12
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	699b      	ldr	r3, [r3, #24]
 800817a:	4924      	ldr	r1, [pc, #144]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 800817c:	4313      	orrs	r3, r2
 800817e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008180:	4b22      	ldr	r3, [pc, #136]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	f023 0220 	bic.w	r2, r3, #32
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	491f      	ldr	r1, [pc, #124]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 800818e:	4313      	orrs	r3, r2
 8008190:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008192:	4b1e      	ldr	r3, [pc, #120]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 8008194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	491c      	ldr	r1, [pc, #112]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 800819c:	4313      	orrs	r3, r2
 800819e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a4:	4a19      	ldr	r2, [pc, #100]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081a6:	f023 0310 	bic.w	r3, r3, #16
 80081aa:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80081ac:	4b17      	ldr	r3, [pc, #92]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081b4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6a12      	ldr	r2, [r2, #32]
 80081bc:	00d2      	lsls	r2, r2, #3
 80081be:	4913      	ldr	r1, [pc, #76]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80081c4:	4b11      	ldr	r3, [pc, #68]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c8:	4a10      	ldr	r2, [pc, #64]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081ca:	f043 0310 	orr.w	r3, r3, #16
 80081ce:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80081d0:	4b0e      	ldr	r3, [pc, #56]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a0d      	ldr	r2, [pc, #52]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80081dc:	f7f8 fe86 	bl	8000eec <HAL_GetTick>
 80081e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081e2:	e008      	b.n	80081f6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081e4:	f7f8 fe82 	bl	8000eec <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d901      	bls.n	80081f6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e006      	b.n	8008204 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <RCCEx_PLL3_Config+0x12c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0f0      	beq.n	80081e4 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	44020c00 	.word	0x44020c00

08008210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	e042      	b.n	80082a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f7f8 fb4d 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2224      	movs	r2, #36	; 0x24
 800823e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008256:	2b00      	cmp	r3, #0
 8008258:	d002      	beq.n	8008260 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fde4 	bl	8008e28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fbf3 	bl	8008a4c <UART_SetConfig>
 8008266:	4603      	mov	r3, r0
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e01b      	b.n	80082a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685a      	ldr	r2, [r3, #4]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800827e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689a      	ldr	r2, [r3, #8]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800828e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f042 0201 	orr.w	r2, r2, #1
 800829e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fe63 	bl	8008f6c <UART_CheckIdleState>
 80082a6:	4603      	mov	r3, r0
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08c      	sub	sp, #48	; 0x30
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	f040 80ad 	bne.w	8008428 <HAL_UART_Transmit_DMA+0x178>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <HAL_UART_Transmit_DMA+0x2a>
 80082d4:	88fb      	ldrh	r3, [r7, #6]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_UART_Transmit_DMA+0x2e>
    {
      return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e0a5      	b.n	800842a <HAL_UART_Transmit_DMA+0x17a>
    }

    huart->pTxBuffPtr  = pData;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	88fa      	ldrh	r2, [r7, #6]
 80082f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2221      	movs	r2, #33	; 0x21
 8008300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d06d      	beq.n	80083e8 <HAL_UART_Transmit_DMA+0x138>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008310:	4a48      	ldr	r2, [pc, #288]	; (8008434 <HAL_UART_Transmit_DMA+0x184>)
 8008312:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008318:	4a47      	ldr	r2, [pc, #284]	; (8008438 <HAL_UART_Transmit_DMA+0x188>)
 800831a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008320:	4a46      	ldr	r2, [pc, #280]	; (800843c <HAL_UART_Transmit_DMA+0x18c>)
 8008322:	669a      	str	r2, [r3, #104]	; 0x68

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	2200      	movs	r2, #0
 800832a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
         should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008334:	d106      	bne.n	8008344 <HAL_UART_Transmit_DMA+0x94>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HAL_UART_Transmit_DMA+0x94>
      {
        nbByte = Size * 2U;
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Check linked list mode */
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800834a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800834e:	2b00      	cmp	r3, #0
 8008350:	d02d      	beq.n	80083ae <HAL_UART_Transmit_DMA+0xfe>
      {
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008358:	2b00      	cmp	r3, #0
 800835a:	d024      	beq.n	80083a6 <HAL_UART_Transmit_DMA+0xf6>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008360:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01e      	beq.n	80083a6 <HAL_UART_Transmit_DMA+0xf6>
        {
          /* Set DMA data size */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800836c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008372:	609a      	str	r2, [r3, #8]

          /* Set DMA source address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)huart->pTxBuffPtr;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800837c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	60da      	str	r2, [r3, #12]

          /* Set DMA destination address */
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
            (uint32_t)&huart->Instance->TDR;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f103 0228 	add.w	r2, r3, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800838e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	611a      	str	r2, [r3, #16]

          /* Enable the UART transmit DMA channel */
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008398:	4618      	mov	r0, r3
 800839a:	f7f9 fd57 	bl	8001e4c <HAL_DMAEx_List_Start_IT>
 800839e:	4603      	mov	r3, r0
 80083a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083a4:	e012      	b.n	80083cc <HAL_UART_Transmit_DMA+0x11c>
        }
        else
        {
          /* Update status */
          status = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083ac:	e00e      	b.n	80083cc <HAL_UART_Transmit_DMA+0x11c>
        }
      }
      else
      {
        /* Enable the UART transmit DMA channel */
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083b6:	4619      	mov	r1, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3328      	adds	r3, #40	; 0x28
 80083be:	461a      	mov	r2, r3
 80083c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083c2:	f7f8 ffdf 	bl	8001384 <HAL_DMA_Start_IT>
 80083c6:	4603      	mov	r3, r0
 80083c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }

      if (status != HAL_OK)
 80083cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d009      	beq.n	80083e8 <HAL_UART_Transmit_DMA+0x138>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2210      	movs	r2, #16
 80083d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2220      	movs	r2, #32
 80083e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	e020      	b.n	800842a <HAL_UART_Transmit_DMA+0x17a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2240      	movs	r2, #64	; 0x40
 80083ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3308      	adds	r3, #8
 80083f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3308      	adds	r3, #8
 800840e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008410:	627a      	str	r2, [r7, #36]	; 0x24
 8008412:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6a39      	ldr	r1, [r7, #32]
 8008416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	61fb      	str	r3, [r7, #28]
   return(result);
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e5      	bne.n	80083f0 <HAL_UART_Transmit_DMA+0x140>

    return HAL_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	e000      	b.n	800842a <HAL_UART_Transmit_DMA+0x17a>
  }
  else
  {
    return HAL_BUSY;
 8008428:	2302      	movs	r3, #2
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3730      	adds	r7, #48	; 0x30
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	080094cf 	.word	0x080094cf
 8008438:	0800952f 	.word	0x0800952f
 800843c:	0800967b 	.word	0x0800967b

08008440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b0ae      	sub	sp, #184	; 0xb8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008466:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800846a:	f640 030f 	movw	r3, #2063	; 0x80f
 800846e:	4013      	ands	r3, r2
 8008470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (errorflags == 0U)
 8008474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d11b      	bne.n	80084b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800847c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008480:	f003 0320 	and.w	r3, r3, #32
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d105      	bne.n	80084a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d009      	beq.n	80084b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 8293 	beq.w	80089d0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      }
      return;
 80084b2:	e28d      	b.n	80089d0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 80fd 	beq.w	80086b8 <HAL_UART_IRQHandler+0x278>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80084c2:	4b7a      	ldr	r3, [pc, #488]	; (80086ac <HAL_UART_IRQHandler+0x26c>)
 80084c4:	4013      	ands	r3, r2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084ce:	4b78      	ldr	r3, [pc, #480]	; (80086b0 <HAL_UART_IRQHandler+0x270>)
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80f0 	beq.w	80086b8 <HAL_UART_IRQHandler+0x278>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d011      	beq.n	8008508 <HAL_UART_IRQHandler+0xc8>
 80084e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2201      	movs	r2, #1
 80084f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	f043 0201 	orr.w	r2, r3, #1
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008508:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800850c:	f003 0302 	and.w	r3, r3, #2
 8008510:	2b00      	cmp	r3, #0
 8008512:	d011      	beq.n	8008538 <HAL_UART_IRQHandler+0xf8>
 8008514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d00b      	beq.n	8008538 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2202      	movs	r2, #2
 8008526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800852e:	f043 0204 	orr.w	r2, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008538:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d011      	beq.n	8008568 <HAL_UART_IRQHandler+0x128>
 8008544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008548:	f003 0301 	and.w	r3, r3, #1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00b      	beq.n	8008568 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2204      	movs	r2, #4
 8008556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855e:	f043 0202 	orr.w	r2, r3, #2
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800856c:	f003 0308 	and.w	r3, r3, #8
 8008570:	2b00      	cmp	r3, #0
 8008572:	d017      	beq.n	80085a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008574:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d105      	bne.n	800858c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008580:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008584:	4b49      	ldr	r3, [pc, #292]	; (80086ac <HAL_UART_IRQHandler+0x26c>)
 8008586:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00b      	beq.n	80085a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2208      	movs	r2, #8
 8008592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f043 0208 	orr.w	r2, r3, #8
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d012      	beq.n	80085d6 <HAL_UART_IRQHandler+0x196>
 80085b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d00c      	beq.n	80085d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085cc:	f043 0220 	orr.w	r2, r3, #32
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 81f9 	beq.w	80089d4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80085ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80085f2:	f003 0320 	and.w	r3, r3, #32
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d105      	bne.n	8008606 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80085fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d005      	beq.n	800863a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800862e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008632:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008636:	2b00      	cmp	r3, #0
 8008638:	d02e      	beq.n	8008698 <HAL_UART_IRQHandler+0x258>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fee1 	bl	8009402 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d120      	bne.n	8008690 <HAL_UART_IRQHandler+0x250>
        {
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008654:	2b00      	cmp	r3, #0
 8008656:	d017      	beq.n	8008688 <HAL_UART_IRQHandler+0x248>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800865e:	4a15      	ldr	r2, [pc, #84]	; (80086b4 <HAL_UART_IRQHandler+0x274>)
 8008660:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008668:	4618      	mov	r0, r3
 800866a:	f7f8 ff67 	bl	800153c <HAL_DMA_Abort_IT>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d019      	beq.n	80086a8 <HAL_UART_IRQHandler+0x268>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800867a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008682:	4610      	mov	r0, r2
 8008684:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008686:	e00f      	b.n	80086a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f9d5 	bl	8008a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868e:	e00b      	b.n	80086a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 f9d1 	bl	8008a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008696:	e007      	b.n	80086a8 <HAL_UART_IRQHandler+0x268>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f9cd 	bl	8008a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80086a6:	e195      	b.n	80089d4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a8:	bf00      	nop
    return;
 80086aa:	e193      	b.n	80089d4 <HAL_UART_IRQHandler+0x594>
 80086ac:	10000001 	.word	0x10000001
 80086b0:	04000120 	.word	0x04000120
 80086b4:	080096fb 	.word	0x080096fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086bc:	2b01      	cmp	r3, #1
 80086be:	f040 8129 	bne.w	8008914 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80086c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086c6:	f003 0310 	and.w	r3, r3, #16
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 8122 	beq.w	8008914 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80086d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80086d4:	f003 0310 	and.w	r3, r3, #16
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 811b 	beq.w	8008914 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2210      	movs	r2, #16
 80086e4:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	f040 8091 	bne.w	8008818 <HAL_UART_IRQHandler+0x3d8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008700:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      if ((nb_remaining_rx_data > 0U)
 8008704:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008708:	2b00      	cmp	r3, #0
 800870a:	f000 8165 	beq.w	80089d8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008714:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8008718:	429a      	cmp	r2, r3
 800871a:	f080 815d 	bcs.w	80089d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8008724:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800872e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008730:	2b81      	cmp	r3, #129	; 0x81
 8008732:	d060      	beq.n	80087f6 <HAL_UART_IRQHandler+0x3b6>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008742:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008756:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800875a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800875e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e2      	bne.n	8008734 <HAL_UART_IRQHandler+0x2f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3308      	adds	r3, #8
 8008774:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008778:	e853 3f00 	ldrex	r3, [r3]
 800877c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800877e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008780:	f023 0301 	bic.w	r3, r3, #1
 8008784:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	3308      	adds	r3, #8
 800878e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008792:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008794:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008796:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008798:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1e3      	bne.n	800876e <HAL_UART_IRQHandler+0x32e>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2220      	movs	r2, #32
 80087aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2200      	movs	r2, #0
 80087b2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087bc:	e853 3f00 	ldrex	r3, [r3]
 80087c0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c4:	f023 0310 	bic.w	r3, r3, #16
 80087c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	461a      	mov	r2, r3
 80087d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80087d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80087d8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087de:	e841 2300 	strex	r3, r2, [r1]
 80087e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1e4      	bne.n	80087b4 <HAL_UART_IRQHandler+0x374>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7f8 fe27 	bl	8001444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2202      	movs	r2, #2
 80087fa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008808:	b29b      	uxth	r3, r3
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	b29b      	uxth	r3, r3
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7f7 fecb 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008816:	e0df      	b.n	80089d8 <HAL_UART_IRQHandler+0x598>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008824:	b29b      	uxth	r3, r3
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
      if ((huart->RxXferCount > 0U)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 80d1 	beq.w	80089dc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800883a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80cc 	beq.w	80089dc <HAL_UART_IRQHandler+0x59c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008858:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	461a      	mov	r2, r3
 8008862:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008866:	647b      	str	r3, [r7, #68]	; 0x44
 8008868:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800886c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800886e:	e841 2300 	strex	r3, r2, [r1]
 8008872:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1e4      	bne.n	8008844 <HAL_UART_IRQHandler+0x404>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	623b      	str	r3, [r7, #32]
   return(result);
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008890:	f023 0301 	bic.w	r3, r3, #1
 8008894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	3308      	adds	r3, #8
 800889e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80088a2:	633a      	str	r2, [r7, #48]	; 0x30
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088aa:	e841 2300 	strex	r3, r2, [r1]
 80088ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d1e1      	bne.n	800887a <HAL_UART_IRQHandler+0x43a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80088ec:	61fb      	str	r3, [r7, #28]
 80088ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f0:	69b9      	ldr	r1, [r7, #24]
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	e841 2300 	strex	r3, r2, [r1]
 80088f8:	617b      	str	r3, [r7, #20]
   return(result);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d1e4      	bne.n	80088ca <HAL_UART_IRQHandler+0x48a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2202      	movs	r2, #2
 8008904:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008906:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800890a:	4619      	mov	r1, r3
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7f7 fe4d 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008912:	e063      	b.n	80089dc <HAL_UART_IRQHandler+0x59c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <HAL_UART_IRQHandler+0x4fe>
 8008920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d008      	beq.n	800893e <HAL_UART_IRQHandler+0x4fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008934:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 ff20 	bl	800977c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800893c:	e051      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800893e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <HAL_UART_IRQHandler+0x534>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800894a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800894e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008952:	2b00      	cmp	r3, #0
 8008954:	d105      	bne.n	8008962 <HAL_UART_IRQHandler+0x522>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800895a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d008      	beq.n	8008974 <HAL_UART_IRQHandler+0x534>
  {
    if (huart->TxISR != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008966:	2b00      	cmp	r3, #0
 8008968:	d03a      	beq.n	80089e0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
    }
    return;
 8008972:	e035      	b.n	80089e0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008974:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <HAL_UART_IRQHandler+0x554>
 8008980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_UART_IRQHandler+0x554>
  {
    UART_EndTransmit_IT(huart);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 feca 	bl	8009726 <UART_EndTransmit_IT>
    return;
 8008992:	e026      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d009      	beq.n	80089b4 <HAL_UART_IRQHandler+0x574>
 80089a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_UART_IRQHandler+0x574>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fef9 	bl	80097a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b2:	e016      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80089b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d010      	beq.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
 80089c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0c      	bge.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fee1 	bl	8009790 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089ce:	e008      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80089d0:	bf00      	nop
 80089d2:	e006      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80089d4:	bf00      	nop
 80089d6:	e004      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80089d8:	bf00      	nop
 80089da:	e002      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80089dc:	bf00      	nop
 80089de:	e000      	b.n	80089e2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80089e0:	bf00      	nop
  }
}
 80089e2:	37b8      	adds	r7, #184	; 0xb8
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a50:	b094      	sub	sp, #80	; 0x50
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	4b78      	ldr	r3, [pc, #480]	; (8008c44 <UART_SetConfig+0x1f8>)
 8008a62:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	431a      	orrs	r2, r3
 8008a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a76:	69db      	ldr	r3, [r3, #28]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4971      	ldr	r1, [pc, #452]	; (8008c48 <UART_SetConfig+0x1fc>)
 8008a84:	4019      	ands	r1, r3
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8c:	430b      	orrs	r3, r1
 8008a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9c:	68d9      	ldr	r1, [r3, #12]
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	ea40 0301 	orr.w	r3, r0, r1
 8008aa6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	4b64      	ldr	r3, [pc, #400]	; (8008c44 <UART_SetConfig+0x1f8>)
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d009      	beq.n	8008acc <UART_SetConfig+0x80>
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4b63      	ldr	r3, [pc, #396]	; (8008c4c <UART_SetConfig+0x200>)
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d004      	beq.n	8008acc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac4:	6a1a      	ldr	r2, [r3, #32]
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008ad6:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae0:	430b      	orrs	r3, r1
 8008ae2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aea:	f023 000f 	bic.w	r0, r3, #15
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	ea40 0301 	orr.w	r3, r0, r1
 8008afa:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b53      	ldr	r3, [pc, #332]	; (8008c50 <UART_SetConfig+0x204>)
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d102      	bne.n	8008b0c <UART_SetConfig+0xc0>
 8008b06:	2301      	movs	r3, #1
 8008b08:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b0a:	e066      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	4b50      	ldr	r3, [pc, #320]	; (8008c54 <UART_SetConfig+0x208>)
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d102      	bne.n	8008b1c <UART_SetConfig+0xd0>
 8008b16:	2302      	movs	r3, #2
 8008b18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b1a:	e05e      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	4b4d      	ldr	r3, [pc, #308]	; (8008c58 <UART_SetConfig+0x20c>)
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d102      	bne.n	8008b2c <UART_SetConfig+0xe0>
 8008b26:	2304      	movs	r3, #4
 8008b28:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b2a:	e056      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	4b4a      	ldr	r3, [pc, #296]	; (8008c5c <UART_SetConfig+0x210>)
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d102      	bne.n	8008b3c <UART_SetConfig+0xf0>
 8008b36:	2308      	movs	r3, #8
 8008b38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b3a:	e04e      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	4b47      	ldr	r3, [pc, #284]	; (8008c60 <UART_SetConfig+0x214>)
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d102      	bne.n	8008b4c <UART_SetConfig+0x100>
 8008b46:	2310      	movs	r3, #16
 8008b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b4a:	e046      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	4b44      	ldr	r3, [pc, #272]	; (8008c64 <UART_SetConfig+0x218>)
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d102      	bne.n	8008b5c <UART_SetConfig+0x110>
 8008b56:	2320      	movs	r3, #32
 8008b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b5a:	e03e      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	4b41      	ldr	r3, [pc, #260]	; (8008c68 <UART_SetConfig+0x21c>)
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d102      	bne.n	8008b6c <UART_SetConfig+0x120>
 8008b66:	2340      	movs	r3, #64	; 0x40
 8008b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b6a:	e036      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	4b3e      	ldr	r3, [pc, #248]	; (8008c6c <UART_SetConfig+0x220>)
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d102      	bne.n	8008b7c <UART_SetConfig+0x130>
 8008b76:	2380      	movs	r3, #128	; 0x80
 8008b78:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b7a:	e02e      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	4b3b      	ldr	r3, [pc, #236]	; (8008c70 <UART_SetConfig+0x224>)
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d103      	bne.n	8008b8e <UART_SetConfig+0x142>
 8008b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b8c:	e025      	b.n	8008bda <UART_SetConfig+0x18e>
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b38      	ldr	r3, [pc, #224]	; (8008c74 <UART_SetConfig+0x228>)
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d103      	bne.n	8008ba0 <UART_SetConfig+0x154>
 8008b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b9e:	e01c      	b.n	8008bda <UART_SetConfig+0x18e>
 8008ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b34      	ldr	r3, [pc, #208]	; (8008c78 <UART_SetConfig+0x22c>)
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d103      	bne.n	8008bb2 <UART_SetConfig+0x166>
 8008baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bb0:	e013      	b.n	8008bda <UART_SetConfig+0x18e>
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b31      	ldr	r3, [pc, #196]	; (8008c7c <UART_SetConfig+0x230>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d103      	bne.n	8008bc4 <UART_SetConfig+0x178>
 8008bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008bc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bc2:	e00a      	b.n	8008bda <UART_SetConfig+0x18e>
 8008bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	4b1e      	ldr	r3, [pc, #120]	; (8008c44 <UART_SetConfig+0x1f8>)
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d103      	bne.n	8008bd6 <UART_SetConfig+0x18a>
 8008bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bd4:	e001      	b.n	8008bda <UART_SetConfig+0x18e>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <UART_SetConfig+0x1f8>)
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d005      	beq.n	8008bf0 <UART_SetConfig+0x1a4>
 8008be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <UART_SetConfig+0x200>)
 8008bea:	429a      	cmp	r2, r3
 8008bec:	f040 8094 	bne.w	8008d18 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	623b      	str	r3, [r7, #32]
 8008bf6:	627a      	str	r2, [r7, #36]	; 0x24
 8008bf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bfc:	f7fc fe7e 	bl	80058fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008c00:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80f7 	beq.w	8008df8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	4a1c      	ldr	r2, [pc, #112]	; (8008c80 <UART_SetConfig+0x234>)
 8008c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c14:	461a      	mov	r2, r3
 8008c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	4613      	mov	r3, r2
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	4413      	add	r3, r2
 8008c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d305      	bcc.n	8008c3a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d924      	bls.n	8008c84 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c40:	e069      	b.n	8008d16 <UART_SetConfig+0x2ca>
 8008c42:	bf00      	nop
 8008c44:	44002400 	.word	0x44002400
 8008c48:	cfff69f3 	.word	0xcfff69f3
 8008c4c:	54002400 	.word	0x54002400
 8008c50:	40013800 	.word	0x40013800
 8008c54:	40004400 	.word	0x40004400
 8008c58:	40004800 	.word	0x40004800
 8008c5c:	40004c00 	.word	0x40004c00
 8008c60:	40005000 	.word	0x40005000
 8008c64:	40006400 	.word	0x40006400
 8008c68:	40007800 	.word	0x40007800
 8008c6c:	40007c00 	.word	0x40007c00
 8008c70:	40008000 	.word	0x40008000
 8008c74:	40006800 	.word	0x40006800
 8008c78:	40006c00 	.word	0x40006c00
 8008c7c:	40008400 	.word	0x40008400
 8008c80:	08009af0 	.word	0x08009af0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c86:	2200      	movs	r2, #0
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	61fa      	str	r2, [r7, #28]
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c90:	4a64      	ldr	r2, [pc, #400]	; (8008e24 <UART_SetConfig+0x3d8>)
 8008c92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2200      	movs	r2, #0
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	617a      	str	r2, [r7, #20]
 8008c9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ca2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008ca6:	f7f7 faf1 	bl	800028c <__aeabi_uldivmod>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4610      	mov	r0, r2
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	020b      	lsls	r3, r1, #8
 8008cbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cc0:	0202      	lsls	r2, r0, #8
 8008cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc4:	6849      	ldr	r1, [r1, #4]
 8008cc6:	0849      	lsrs	r1, r1, #1
 8008cc8:	2000      	movs	r0, #0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	4605      	mov	r5, r0
 8008cce:	eb12 0804 	adds.w	r8, r2, r4
 8008cd2:	eb43 0905 	adc.w	r9, r3, r5
 8008cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	60fa      	str	r2, [r7, #12]
 8008ce0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	f7f7 fad0 	bl	800028c <__aeabi_uldivmod>
 8008cec:	4602      	mov	r2, r0
 8008cee:	460b      	mov	r3, r1
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cfa:	d308      	bcc.n	8008d0e <UART_SetConfig+0x2c2>
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d02:	d204      	bcs.n	8008d0e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8008d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d0a:	60da      	str	r2, [r3, #12]
 8008d0c:	e003      	b.n	8008d16 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008d14:	e070      	b.n	8008df8 <UART_SetConfig+0x3ac>
 8008d16:	e06f      	b.n	8008df8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d20:	d13c      	bne.n	8008d9c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d24:	2200      	movs	r2, #0
 8008d26:	603b      	str	r3, [r7, #0]
 8008d28:	607a      	str	r2, [r7, #4]
 8008d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008d2e:	f7fc fde5 	bl	80058fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008d32:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d05e      	beq.n	8008df8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	4a39      	ldr	r2, [pc, #228]	; (8008e24 <UART_SetConfig+0x3d8>)
 8008d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d4c:	005a      	lsls	r2, r3, #1
 8008d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	085b      	lsrs	r3, r3, #1
 8008d54:	441a      	add	r2, r3
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d62:	2b0f      	cmp	r3, #15
 8008d64:	d916      	bls.n	8008d94 <UART_SetConfig+0x348>
 8008d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d6c:	d212      	bcs.n	8008d94 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f023 030f 	bic.w	r3, r3, #15
 8008d76:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	085b      	lsrs	r3, r3, #1
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	f003 0307 	and.w	r3, r3, #7
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d86:	4313      	orrs	r3, r2
 8008d88:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008d90:	60da      	str	r2, [r3, #12]
 8008d92:	e031      	b.n	8008df8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d9a:	e02d      	b.n	8008df8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d9e:	2200      	movs	r2, #0
 8008da0:	469a      	mov	sl, r3
 8008da2:	4693      	mov	fp, r2
 8008da4:	4650      	mov	r0, sl
 8008da6:	4659      	mov	r1, fp
 8008da8:	f7fc fda8 	bl	80058fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008dac:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d021      	beq.n	8008df8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	4a1a      	ldr	r2, [pc, #104]	; (8008e24 <UART_SetConfig+0x3d8>)
 8008dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	441a      	add	r2, r3
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dda:	2b0f      	cmp	r3, #15
 8008ddc:	d909      	bls.n	8008df2 <UART_SetConfig+0x3a6>
 8008dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008de4:	d205      	bcs.n	8008df2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60da      	str	r2, [r3, #12]
 8008df0:	e002      	b.n	8008df8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	2201      	movs	r2, #1
 8008e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	2200      	movs	r2, #0
 8008e12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008e14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3750      	adds	r7, #80	; 0x50
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e22:	bf00      	nop
 8008e24:	08009af0 	.word	0x08009af0

08008e28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e34:	f003 0308 	and.w	r3, r3, #8
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00a      	beq.n	8008e52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	430a      	orrs	r2, r1
 8008e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebc:	f003 0310 	and.w	r3, r3, #16
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	430a      	orrs	r2, r1
 8008efa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d01a      	beq.n	8008f3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f26:	d10a      	bne.n	8008f3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	605a      	str	r2, [r3, #4]
  }
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b098      	sub	sp, #96	; 0x60
 8008f70:	af02      	add	r7, sp, #8
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f7c:	f7f7 ffb6 	bl	8000eec <HAL_GetTick>
 8008f80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d12f      	bne.n	8008ff0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f88e 	bl	80090c0 <UART_WaitOnFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d022      	beq.n	8008ff0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb2:	e853 3f00 	ldrex	r3, [r3]
 8008fb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fbe:	653b      	str	r3, [r7, #80]	; 0x50
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8008fca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd0:	e841 2300 	strex	r3, r2, [r1]
 8008fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1e6      	bne.n	8008faa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008fec:	2303      	movs	r3, #3
 8008fee:	e063      	b.n	80090b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d149      	bne.n	8009092 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009006:	2200      	movs	r2, #0
 8009008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 f857 	bl	80090c0 <UART_WaitOnFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d03c      	beq.n	8009092 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	623b      	str	r3, [r7, #32]
   return(result);
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800902c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009036:	633b      	str	r3, [r7, #48]	; 0x30
 8009038:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800903c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e6      	bne.n	8009018 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	3308      	adds	r3, #8
 8009050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	e853 3f00 	ldrex	r3, [r3]
 8009058:	60fb      	str	r3, [r7, #12]
   return(result);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f023 0301 	bic.w	r3, r3, #1
 8009060:	64bb      	str	r3, [r7, #72]	; 0x48
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800906a:	61fa      	str	r2, [r7, #28]
 800906c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	69b9      	ldr	r1, [r7, #24]
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	617b      	str	r3, [r7, #20]
   return(result);
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e5      	bne.n	800904a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2220      	movs	r2, #32
 8009082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e012      	b.n	80090b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3758      	adds	r7, #88	; 0x58
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	603b      	str	r3, [r7, #0]
 80090cc:	4613      	mov	r3, r2
 80090ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090d0:	e049      	b.n	8009166 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090d8:	d045      	beq.n	8009166 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090da:	f7f7 ff07 	bl	8000eec <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d302      	bcc.n	80090f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e048      	b.n	8009186 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d031      	beq.n	8009166 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	69db      	ldr	r3, [r3, #28]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b08      	cmp	r3, #8
 800910e:	d110      	bne.n	8009132 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2208      	movs	r2, #8
 8009116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f972 	bl	8009402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2208      	movs	r2, #8
 8009122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e029      	b.n	8009186 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800913c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009140:	d111      	bne.n	8009166 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800914a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f000 f958 	bl	8009402 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2220      	movs	r2, #32
 8009156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e00f      	b.n	8009186 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	69da      	ldr	r2, [r3, #28]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4013      	ands	r3, r2
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	429a      	cmp	r2, r3
 8009174:	bf0c      	ite	eq
 8009176:	2301      	moveq	r3, #1
 8009178:	2300      	movne	r3, #0
 800917a:	b2db      	uxtb	r3, r3
 800917c:	461a      	mov	r2, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	429a      	cmp	r2, r3
 8009182:	d0a6      	beq.n	80090d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b098      	sub	sp, #96	; 0x60
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	4613      	mov	r3, r2
 800919c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  uint16_t nbByte = Size;
 800919e:	88fb      	ldrh	r3, [r7, #6]
 80091a0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

  huart->pRxBuffPtr = pData;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68ba      	ldr	r2, [r7, #8]
 80091a8:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2222      	movs	r2, #34	; 0x22
 80091be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d07c      	beq.n	80092c6 <UART_Start_Receive_DMA+0x136>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d2:	4a68      	ldr	r2, [pc, #416]	; (8009374 <UART_Start_Receive_DMA+0x1e4>)
 80091d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091dc:	4a66      	ldr	r2, [pc, #408]	; (8009378 <UART_Start_Receive_DMA+0x1e8>)
 80091de:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091e6:	4a65      	ldr	r2, [pc, #404]	; (800937c <UART_Start_Receive_DMA+0x1ec>)
 80091e8:	669a      	str	r2, [r3, #104]	; 0x68

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091f0:	2200      	movs	r2, #0
 80091f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, so nbByte should be equal to Size * 2 */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fc:	d107      	bne.n	800920e <UART_Start_Receive_DMA+0x7e>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <UART_Start_Receive_DMA+0x7e>
    {
      nbByte = Size * 2U;
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
    }

    /* Check linked list mode */
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921a:	2b00      	cmp	r3, #0
 800921c:	d034      	beq.n	8009288 <UART_Start_Receive_DMA+0xf8>
    {
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009226:	2b00      	cmp	r3, #0
 8009228:	d02a      	beq.n	8009280 <UART_Start_Receive_DMA+0xf0>
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d023      	beq.n	8009280 <UART_Start_Receive_DMA+0xf0>
      {
        /* Set DMA data size */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8009246:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
          (uint32_t)&huart->Instance->RDR;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f103 0224 	add.w	r2, r3, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	611a      	str	r2, [r3, #16]

        /* Enable the UART receive DMA channel */
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009272:	4618      	mov	r0, r3
 8009274:	f7f8 fdea 	bl	8001e4c <HAL_DMAEx_List_Start_IT>
 8009278:	4603      	mov	r3, r0
 800927a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800927e:	e014      	b.n	80092aa <UART_Start_Receive_DMA+0x11a>
      }
      else
      {
        /* Update status */
        status = HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009286:	e010      	b.n	80092aa <UART_Start_Receive_DMA+0x11a>
      }
    }
    else
    {
      /* Enable the UART receive DMA channel */
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3324      	adds	r3, #36	; 0x24
 8009294:	4619      	mov	r1, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929a:	461a      	mov	r2, r3
 800929c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80092a0:	f7f8 f870 	bl	8001384 <HAL_DMA_Start_IT>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }

    if (status != HAL_OK)
 80092aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d009      	beq.n	80092c6 <UART_Start_Receive_DMA+0x136>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2210      	movs	r2, #16
 80092b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2220      	movs	r2, #32
 80092be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	e051      	b.n	800936a <UART_Start_Receive_DMA+0x1da>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	691b      	ldr	r3, [r3, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d018      	beq.n	8009300 <UART_Start_Receive_DMA+0x170>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ee:	64ba      	str	r2, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80092f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e6      	bne.n	80092ce <UART_Start_Receive_DMA+0x13e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	657b      	str	r3, [r7, #84]	; 0x54
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009320:	63ba      	str	r2, [r7, #56]	; 0x38
 8009322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800932e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_Start_Receive_DMA+0x170>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3308      	adds	r3, #8
 800933a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	617b      	str	r3, [r7, #20]
   return(result);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800934a:	653b      	str	r3, [r7, #80]	; 0x50
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009354:	627a      	str	r2, [r7, #36]	; 0x24
 8009356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6a39      	ldr	r1, [r7, #32]
 800935a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	61fb      	str	r3, [r7, #28]
   return(result);
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e5      	bne.n	8009334 <UART_Start_Receive_DMA+0x1a4>

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3760      	adds	r7, #96	; 0x60
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	0800954b 	.word	0x0800954b
 8009378:	0800963d 	.word	0x0800963d
 800937c:	0800967b 	.word	0x0800967b

08009380 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b08f      	sub	sp, #60	; 0x3c
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	e853 3f00 	ldrex	r3, [r3]
 8009394:	61fb      	str	r3, [r7, #28]
   return(result);
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800939c:	637b      	str	r3, [r7, #52]	; 0x34
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e6      	bne.n	8009388 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80093d0:	633b      	str	r3, [r7, #48]	; 0x30
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093da:	61ba      	str	r2, [r7, #24]
 80093dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093de:	6979      	ldr	r1, [r7, #20]
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	e841 2300 	strex	r3, r2, [r1]
 80093e6:	613b      	str	r3, [r7, #16]
   return(result);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1e5      	bne.n	80093ba <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2220      	movs	r2, #32
 80093f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80093f6:	bf00      	nop
 80093f8:	373c      	adds	r7, #60	; 0x3c
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009402:	b480      	push	{r7}
 8009404:	b095      	sub	sp, #84	; 0x54
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800941e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009428:	643b      	str	r3, [r7, #64]	; 0x40
 800942a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800942e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e6      	bne.n	800940a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	3308      	adds	r3, #8
 8009442:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	61fb      	str	r3, [r7, #28]
   return(result);
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009452:	f023 0301 	bic.w	r3, r3, #1
 8009456:	64bb      	str	r3, [r7, #72]	; 0x48
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3308      	adds	r3, #8
 800945e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e3      	bne.n	800943c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009478:	2b01      	cmp	r3, #1
 800947a:	d118      	bne.n	80094ae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	60bb      	str	r3, [r7, #8]
   return(result);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f023 0310 	bic.w	r3, r3, #16
 8009490:	647b      	str	r3, [r7, #68]	; 0x44
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	461a      	mov	r2, r3
 8009498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949a:	61bb      	str	r3, [r7, #24]
 800949c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6979      	ldr	r1, [r7, #20]
 80094a0:	69ba      	ldr	r2, [r7, #24]
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	613b      	str	r3, [r7, #16]
   return(result);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e6      	bne.n	800947c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094c2:	bf00      	nop
 80094c4:	3754      	adds	r7, #84	; 0x54
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b08a      	sub	sp, #40	; 0x28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e0:	2b81      	cmp	r3, #129	; 0x81
 80094e2:	d01d      	beq.n	8009520 <UART_DMATransmitCplt+0x52>
  {
    huart->TxXferCount = 0U;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	2200      	movs	r2, #0
 80094e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009500:	623b      	str	r3, [r7, #32]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	61fb      	str	r3, [r7, #28]
 800950c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	69b9      	ldr	r1, [r7, #24]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	617b      	str	r3, [r7, #20]
   return(result);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e6      	bne.n	80094ec <UART_DMATransmitCplt+0x1e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800951e:	e002      	b.n	8009526 <UART_DMATransmitCplt+0x58>
    HAL_UART_TxCpltCallback(huart);
 8009520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009522:	f7ff fa61 	bl	80089e8 <HAL_UART_TxCpltCallback>
}
 8009526:	bf00      	nop
 8009528:	3728      	adds	r7, #40	; 0x28
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800953c:	68f8      	ldr	r0, [r7, #12]
 800953e:	f7ff fa5d 	bl	80089fc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b096      	sub	sp, #88	; 0x58
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009556:	657b      	str	r3, [r7, #84]	; 0x54

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955c:	2b81      	cmp	r3, #129	; 0x81
 800955e:	d057      	beq.n	8009610 <UART_DMAReceiveCplt+0xc6>
  {
    huart->RxXferCount = 0U;
 8009560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009562:	2200      	movs	r2, #0
 8009564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	e853 3f00 	ldrex	r3, [r3]
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800957c:	653b      	str	r3, [r7, #80]	; 0x50
 800957e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	461a      	mov	r2, r3
 8009584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009586:	647b      	str	r3, [r7, #68]	; 0x44
 8009588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800958c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800958e:	e841 2300 	strex	r3, r2, [r1]
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1e6      	bne.n	8009568 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800959a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	e853 3f00 	ldrex	r3, [r3]
 80095a8:	623b      	str	r3, [r7, #32]
   return(result);
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	f023 0301 	bic.w	r3, r3, #1
 80095b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3308      	adds	r3, #8
 80095b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ba:	633a      	str	r2, [r7, #48]	; 0x30
 80095bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e5      	bne.n	800959a <UART_DMAReceiveCplt+0x50>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80095ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d0:	2220      	movs	r2, #32
 80095d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d118      	bne.n	8009610 <UART_DMAReceiveCplt+0xc6>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	e853 3f00 	ldrex	r3, [r3]
 80095ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0310 	bic.w	r3, r3, #16
 80095f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80095f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	69b9      	ldr	r1, [r7, #24]
 8009602:	69fa      	ldr	r2, [r7, #28]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	617b      	str	r3, [r7, #20]
   return(result);
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e6      	bne.n	80095de <UART_DMAReceiveCplt+0x94>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009612:	2200      	movs	r2, #0
 8009614:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800961a:	2b01      	cmp	r3, #1
 800961c:	d107      	bne.n	800962e <UART_DMAReceiveCplt+0xe4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800961e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009624:	4619      	mov	r1, r3
 8009626:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009628:	f7f6 ffc0 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800962c:	e002      	b.n	8009634 <UART_DMAReceiveCplt+0xea>
    HAL_UART_RxCpltCallback(huart);
 800962e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009630:	f7ff f9ee 	bl	8008a10 <HAL_UART_RxCpltCallback>
}
 8009634:	bf00      	nop
 8009636:	3758      	adds	r7, #88	; 0x58
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009648:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009654:	2b01      	cmp	r3, #1
 8009656:	d109      	bne.n	800966c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800965e:	085b      	lsrs	r3, r3, #1
 8009660:	b29b      	uxth	r3, r3
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f7f6 ffa1 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800966a:	e002      	b.n	8009672 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff f9d9 	bl	8008a24 <HAL_UART_RxHalfCpltCallback>
}
 8009672:	bf00      	nop
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009686:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009696:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096a2:	2b80      	cmp	r3, #128	; 0x80
 80096a4:	d109      	bne.n	80096ba <UART_DMAError+0x40>
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b21      	cmp	r3, #33	; 0x21
 80096aa:	d106      	bne.n	80096ba <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80096b4:	6978      	ldr	r0, [r7, #20]
 80096b6:	f7ff fe63 	bl	8009380 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c4:	2b40      	cmp	r3, #64	; 0x40
 80096c6:	d109      	bne.n	80096dc <UART_DMAError+0x62>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b22      	cmp	r3, #34	; 0x22
 80096cc:	d106      	bne.n	80096dc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	f7ff fe93 	bl	8009402 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096e2:	f043 0210 	orr.w	r2, r3, #16
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ec:	6978      	ldr	r0, [r7, #20]
 80096ee:	f7ff f9a3 	bl	8008a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f2:	bf00      	nop
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b084      	sub	sp, #16
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009706:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	f7ff f98d 	bl	8008a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800971e:	bf00      	nop
 8009720:	3710      	adds	r7, #16
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009726:	b580      	push	{r7, lr}
 8009728:	b088      	sub	sp, #32
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	60bb      	str	r3, [r7, #8]
   return(result);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009742:	61fb      	str	r3, [r7, #28]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	461a      	mov	r2, r3
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	61bb      	str	r3, [r7, #24]
 800974e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6979      	ldr	r1, [r7, #20]
 8009752:	69ba      	ldr	r2, [r7, #24]
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	613b      	str	r3, [r7, #16]
   return(result);
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e6      	bne.n	800972e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2220      	movs	r2, #32
 8009764:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff f93a 	bl	80089e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009774:	bf00      	nop
 8009776:	3720      	adds	r7, #32
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d101      	bne.n	80097ce <HAL_UARTEx_DisableFifoMode+0x16>
 80097ca:	2302      	movs	r3, #2
 80097cc:	e027      	b.n	800981e <HAL_UARTEx_DisableFifoMode+0x66>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2224      	movs	r2, #36	; 0x24
 80097da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0201 	bic.w	r2, r2, #1
 80097f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2220      	movs	r2, #32
 8009810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800981c:	2300      	movs	r3, #0
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800983a:	2b01      	cmp	r3, #1
 800983c:	d101      	bne.n	8009842 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800983e:	2302      	movs	r3, #2
 8009840:	e02d      	b.n	800989e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2201      	movs	r2, #1
 8009846:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2224      	movs	r2, #36	; 0x24
 800984e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	681a      	ldr	r2, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 0201 	bic.w	r2, r2, #1
 8009868:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f8a4 	bl	80099cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2220      	movs	r2, #32
 8009890:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b084      	sub	sp, #16
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	6078      	str	r0, [r7, #4]
 80098ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d101      	bne.n	80098be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098ba:	2302      	movs	r3, #2
 80098bc:	e02d      	b.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2224      	movs	r2, #36	; 0x24
 80098ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 0201 	bic.w	r2, r2, #1
 80098e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f866 	bl	80099cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b08c      	sub	sp, #48	; 0x30
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	4613      	mov	r3, r2
 800992e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009936:	2b20      	cmp	r3, #32
 8009938:	d142      	bne.n	80099c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d002      	beq.n	8009946 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8009940:	88fb      	ldrh	r3, [r7, #6]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e03b      	b.n	80099c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2200      	movs	r2, #0
 8009954:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009956:	88fb      	ldrh	r3, [r7, #6]
 8009958:	461a      	mov	r2, r3
 800995a:	68b9      	ldr	r1, [r7, #8]
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff fc17 	bl	8009190 <UART_Start_Receive_DMA>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8009968:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800996c:	2b00      	cmp	r3, #0
 800996e:	d124      	bne.n	80099ba <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009974:	2b01      	cmp	r3, #1
 8009976:	d11d      	bne.n	80099b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2210      	movs	r2, #16
 800997e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	617b      	str	r3, [r7, #20]
   return(result);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f043 0310 	orr.w	r3, r3, #16
 8009994:	62bb      	str	r3, [r7, #40]	; 0x28
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	461a      	mov	r2, r3
 800999c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
 80099a0:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6a39      	ldr	r1, [r7, #32]
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e6      	bne.n	8009980 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80099b2:	e002      	b.n	80099ba <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80099b4:	2301      	movs	r3, #1
 80099b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80099ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80099be:	e000      	b.n	80099c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80099c0:	2302      	movs	r3, #2
  }
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3730      	adds	r7, #48	; 0x30
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b085      	sub	sp, #20
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d108      	bne.n	80099ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099ec:	e031      	b.n	8009a52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099ee:	2308      	movs	r3, #8
 80099f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80099f2:	2308      	movs	r3, #8
 80099f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	0e5b      	lsrs	r3, r3, #25
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 0307 	and.w	r3, r3, #7
 8009a04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0f5b      	lsrs	r3, r3, #29
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	7b3a      	ldrb	r2, [r7, #12]
 8009a1a:	4911      	ldr	r1, [pc, #68]	; (8009a60 <UARTEx_SetNbDataToProcess+0x94>)
 8009a1c:	5c8a      	ldrb	r2, [r1, r2]
 8009a1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a22:	7b3a      	ldrb	r2, [r7, #12]
 8009a24:	490f      	ldr	r1, [pc, #60]	; (8009a64 <UARTEx_SetNbDataToProcess+0x98>)
 8009a26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	7b7a      	ldrb	r2, [r7, #13]
 8009a38:	4909      	ldr	r1, [pc, #36]	; (8009a60 <UARTEx_SetNbDataToProcess+0x94>)
 8009a3a:	5c8a      	ldrb	r2, [r1, r2]
 8009a3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a40:	7b7a      	ldrb	r2, [r7, #13]
 8009a42:	4908      	ldr	r1, [pc, #32]	; (8009a64 <UARTEx_SetNbDataToProcess+0x98>)
 8009a44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a46:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a4a:	b29a      	uxth	r2, r3
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	08009b08 	.word	0x08009b08
 8009a64:	08009b10 	.word	0x08009b10

08009a68 <memset>:
 8009a68:	4402      	add	r2, r0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d100      	bne.n	8009a72 <memset+0xa>
 8009a70:	4770      	bx	lr
 8009a72:	f803 1b01 	strb.w	r1, [r3], #1
 8009a76:	e7f9      	b.n	8009a6c <memset+0x4>

08009a78 <__libc_init_array>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4d0d      	ldr	r5, [pc, #52]	; (8009ab0 <__libc_init_array+0x38>)
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	4c0d      	ldr	r4, [pc, #52]	; (8009ab4 <__libc_init_array+0x3c>)
 8009a80:	1b64      	subs	r4, r4, r5
 8009a82:	10a4      	asrs	r4, r4, #2
 8009a84:	42a6      	cmp	r6, r4
 8009a86:	d109      	bne.n	8009a9c <__libc_init_array+0x24>
 8009a88:	4d0b      	ldr	r5, [pc, #44]	; (8009ab8 <__libc_init_array+0x40>)
 8009a8a:	2600      	movs	r6, #0
 8009a8c:	4c0b      	ldr	r4, [pc, #44]	; (8009abc <__libc_init_array+0x44>)
 8009a8e:	f000 f817 	bl	8009ac0 <_init>
 8009a92:	1b64      	subs	r4, r4, r5
 8009a94:	10a4      	asrs	r4, r4, #2
 8009a96:	42a6      	cmp	r6, r4
 8009a98:	d105      	bne.n	8009aa6 <__libc_init_array+0x2e>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa0:	3601      	adds	r6, #1
 8009aa2:	4798      	blx	r3
 8009aa4:	e7ee      	b.n	8009a84 <__libc_init_array+0xc>
 8009aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aaa:	3601      	adds	r6, #1
 8009aac:	4798      	blx	r3
 8009aae:	e7f2      	b.n	8009a96 <__libc_init_array+0x1e>
 8009ab0:	08009b20 	.word	0x08009b20
 8009ab4:	08009b20 	.word	0x08009b20
 8009ab8:	08009b20 	.word	0x08009b20
 8009abc:	08009b24 	.word	0x08009b24

08009ac0 <_init>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	bf00      	nop
 8009ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ac6:	bc08      	pop	{r3}
 8009ac8:	469e      	mov	lr, r3
 8009aca:	4770      	bx	lr

08009acc <_fini>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	bf00      	nop
 8009ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ad2:	bc08      	pop	{r3}
 8009ad4:	469e      	mov	lr, r3
 8009ad6:	4770      	bx	lr
