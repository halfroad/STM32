
UniversalSynchronousAsynchronousReceiverTransmitter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a4c  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007c98  08007c98  00017c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ce8  08007ce8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007ce8  08007ce8  00017ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cf0  08007cf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cf0  08007cf0  00017cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cf4  08007cf4  00017cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08007d04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08007d04  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d96e  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018ac  00000000  00000000  0002d9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002f2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000740  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030885  00000000  00000000  00030348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d37f  00000000  00000000  00060bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00133460  00000000  00000000  0006df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002694  00000000  00000000  001a13ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  001a3a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08007c80 	.word	0x08007c80

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08007c80 	.word	0x08007c80

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b0:	f000 b982 	b.w	80005b8 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002d2:	460d      	mov	r5, r1
 80002d4:	4604      	mov	r4, r0
 80002d6:	460f      	mov	r7, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d146      	bne.n	800036a <__udivmoddi4+0x9e>
 80002dc:	428a      	cmp	r2, r1
 80002de:	4694      	mov	ip, r2
 80002e0:	d95e      	bls.n	80003a0 <__udivmoddi4+0xd4>
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	b143      	cbz	r3, 80002fa <__udivmoddi4+0x2e>
 80002e8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	409c      	lsls	r4, r3
 80002f4:	fa20 f202 	lsr.w	r2, r0, r2
 80002f8:	4317      	orrs	r7, r2
 80002fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fe:	fa1f f58c 	uxth.w	r5, ip
 8000302:	0c22      	lsrs	r2, r4, #16
 8000304:	fbb7 f1fe 	udiv	r1, r7, lr
 8000308:	fb0e 7711 	mls	r7, lr, r1, r7
 800030c:	fb01 f005 	mul.w	r0, r1, r5
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	4290      	cmp	r0, r2
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x5e>
 8000318:	eb1c 0202 	adds.w	r2, ip, r2
 800031c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x5c>
 8000322:	4290      	cmp	r0, r2
 8000324:	f200 8134 	bhi.w	8000590 <__udivmoddi4+0x2c4>
 8000328:	4639      	mov	r1, r7
 800032a:	1a12      	subs	r2, r2, r0
 800032c:	b2a4      	uxth	r4, r4
 800032e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000332:	fb0e 2210 	mls	r2, lr, r0, r2
 8000336:	fb00 f505 	mul.w	r5, r0, r5
 800033a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033e:	42a5      	cmp	r5, r4
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x88>
 8000342:	eb1c 0404 	adds.w	r4, ip, r4
 8000346:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x86>
 800034c:	42a5      	cmp	r5, r4
 800034e:	f200 8119 	bhi.w	8000584 <__udivmoddi4+0x2b8>
 8000352:	4610      	mov	r0, r2
 8000354:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000358:	1b64      	subs	r4, r4, r5
 800035a:	2100      	movs	r1, #0
 800035c:	b11e      	cbz	r6, 8000366 <__udivmoddi4+0x9a>
 800035e:	40dc      	lsrs	r4, r3
 8000360:	2300      	movs	r3, #0
 8000362:	e9c6 4300 	strd	r4, r3, [r6]
 8000366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0xb4>
 800036e:	2e00      	cmp	r6, #0
 8000370:	f000 80fc 	beq.w	800056c <__udivmoddi4+0x2a0>
 8000374:	2100      	movs	r1, #0
 8000376:	e9c6 0500 	strd	r0, r5, [r6]
 800037a:	4608      	mov	r0, r1
 800037c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000380:	fab3 f183 	clz	r1, r3
 8000384:	2900      	cmp	r1, #0
 8000386:	d14c      	bne.n	8000422 <__udivmoddi4+0x156>
 8000388:	42ab      	cmp	r3, r5
 800038a:	f0c0 80f2 	bcc.w	8000572 <__udivmoddi4+0x2a6>
 800038e:	4282      	cmp	r2, r0
 8000390:	f240 80ef 	bls.w	8000572 <__udivmoddi4+0x2a6>
 8000394:	4608      	mov	r0, r1
 8000396:	2e00      	cmp	r6, #0
 8000398:	d0e5      	beq.n	8000366 <__udivmoddi4+0x9a>
 800039a:	e9c6 4700 	strd	r4, r7, [r6]
 800039e:	e7e2      	b.n	8000366 <__udivmoddi4+0x9a>
 80003a0:	b902      	cbnz	r2, 80003a4 <__udivmoddi4+0xd8>
 80003a2:	deff      	udf	#255	; 0xff
 80003a4:	fab2 f382 	clz	r3, r2
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 809f 	bne.w	80004ec <__udivmoddi4+0x220>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003b4:	fa1f f78c 	uxth.w	r7, ip
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f5fe 	udiv	r5, r2, lr
 80003be:	fb0e 2015 	mls	r0, lr, r5, r2
 80003c2:	0c22      	lsrs	r2, r4, #16
 80003c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003c8:	fb07 f005 	mul.w	r0, r7, r5
 80003cc:	4290      	cmp	r0, r2
 80003ce:	d90f      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003d0:	eb1c 0202 	adds.w	r2, ip, r2
 80003d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003d8:	bf2c      	ite	cs
 80003da:	f04f 0901 	movcs.w	r9, #1
 80003de:	f04f 0900 	movcc.w	r9, #0
 80003e2:	4290      	cmp	r0, r2
 80003e4:	d903      	bls.n	80003ee <__udivmoddi4+0x122>
 80003e6:	f1b9 0f00 	cmp.w	r9, #0
 80003ea:	f000 80ce 	beq.w	800058a <__udivmoddi4+0x2be>
 80003ee:	4645      	mov	r5, r8
 80003f0:	1a12      	subs	r2, r2, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003f8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	42a7      	cmp	r7, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x14e>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000410:	d202      	bcs.n	8000418 <__udivmoddi4+0x14c>
 8000412:	42a7      	cmp	r7, r4
 8000414:	f200 80b3 	bhi.w	800057e <__udivmoddi4+0x2b2>
 8000418:	4610      	mov	r0, r2
 800041a:	1be4      	subs	r4, r4, r7
 800041c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000420:	e79c      	b.n	800035c <__udivmoddi4+0x90>
 8000422:	f1c1 0420 	rsb	r4, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa05 fc01 	lsl.w	ip, r5, r1
 800042c:	fa22 f704 	lsr.w	r7, r2, r4
 8000430:	40e5      	lsrs	r5, r4
 8000432:	408a      	lsls	r2, r1
 8000434:	431f      	orrs	r7, r3
 8000436:	fa20 f304 	lsr.w	r3, r0, r4
 800043a:	4088      	lsls	r0, r1
 800043c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000440:	ea43 030c 	orr.w	r3, r3, ip
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800044c:	fbb5 fef8 	udiv	lr, r5, r8
 8000450:	fb08 551e 	mls	r5, r8, lr, r5
 8000454:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000458:	fb0e f90c 	mul.w	r9, lr, ip
 800045c:	45a9      	cmp	r9, r5
 800045e:	d90e      	bls.n	800047e <__udivmoddi4+0x1b2>
 8000460:	197d      	adds	r5, r7, r5
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000466:	bf2c      	ite	cs
 8000468:	f04f 0b01 	movcs.w	fp, #1
 800046c:	f04f 0b00 	movcc.w	fp, #0
 8000470:	45a9      	cmp	r9, r5
 8000472:	d903      	bls.n	800047c <__udivmoddi4+0x1b0>
 8000474:	f1bb 0f00 	cmp.w	fp, #0
 8000478:	f000 808d 	beq.w	8000596 <__udivmoddi4+0x2ca>
 800047c:	46d6      	mov	lr, sl
 800047e:	eba5 0509 	sub.w	r5, r5, r9
 8000482:	fa1f f983 	uxth.w	r9, r3
 8000486:	fbb5 f3f8 	udiv	r3, r5, r8
 800048a:	fb08 5513 	mls	r5, r8, r3, r5
 800048e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000492:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000496:	45ac      	cmp	ip, r5
 8000498:	d906      	bls.n	80004a8 <__udivmoddi4+0x1dc>
 800049a:	197d      	adds	r5, r7, r5
 800049c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004a0:	d201      	bcs.n	80004a6 <__udivmoddi4+0x1da>
 80004a2:	45ac      	cmp	ip, r5
 80004a4:	d87e      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004a6:	4643      	mov	r3, r8
 80004a8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80004ac:	eba5 050c 	sub.w	r5, r5, ip
 80004b0:	fba3 9802 	umull	r9, r8, r3, r2
 80004b4:	4545      	cmp	r5, r8
 80004b6:	46ce      	mov	lr, r9
 80004b8:	46c4      	mov	ip, r8
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0x1f6>
 80004bc:	d106      	bne.n	80004cc <__udivmoddi4+0x200>
 80004be:	4548      	cmp	r0, r9
 80004c0:	d204      	bcs.n	80004cc <__udivmoddi4+0x200>
 80004c2:	3b01      	subs	r3, #1
 80004c4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d06f      	beq.n	80005b0 <__udivmoddi4+0x2e4>
 80004d0:	ebb0 020e 	subs.w	r2, r0, lr
 80004d4:	eb65 050c 	sbc.w	r5, r5, ip
 80004d8:	40ca      	lsrs	r2, r1
 80004da:	fa05 f404 	lsl.w	r4, r5, r4
 80004de:	40cd      	lsrs	r5, r1
 80004e0:	4618      	mov	r0, r3
 80004e2:	4314      	orrs	r4, r2
 80004e4:	2100      	movs	r1, #0
 80004e6:	e9c6 4500 	strd	r4, r5, [r6]
 80004ea:	e73c      	b.n	8000366 <__udivmoddi4+0x9a>
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	f1c3 0220 	rsb	r2, r3, #32
 80004f4:	4099      	lsls	r1, r3
 80004f6:	409c      	lsls	r4, r3
 80004f8:	40d5      	lsrs	r5, r2
 80004fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000502:	fa1f f78c 	uxth.w	r7, ip
 8000506:	fbb5 f0fe 	udiv	r0, r5, lr
 800050a:	430a      	orrs	r2, r1
 800050c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000510:	0c11      	lsrs	r1, r2, #16
 8000512:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000516:	fb00 f507 	mul.w	r5, r0, r7
 800051a:	428d      	cmp	r5, r1
 800051c:	d90e      	bls.n	800053c <__udivmoddi4+0x270>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	bf2c      	ite	cs
 8000528:	f04f 0901 	movcs.w	r9, #1
 800052c:	f04f 0900 	movcc.w	r9, #0
 8000530:	428d      	cmp	r5, r1
 8000532:	d902      	bls.n	800053a <__udivmoddi4+0x26e>
 8000534:	f1b9 0f00 	cmp.w	r9, #0
 8000538:	d031      	beq.n	800059e <__udivmoddi4+0x2d2>
 800053a:	4640      	mov	r0, r8
 800053c:	1b49      	subs	r1, r1, r5
 800053e:	b292      	uxth	r2, r2
 8000540:	fbb1 f5fe 	udiv	r5, r1, lr
 8000544:	fb0e 1115 	mls	r1, lr, r5, r1
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	fb05 f107 	mul.w	r1, r5, r7
 8000550:	4291      	cmp	r1, r2
 8000552:	d907      	bls.n	8000564 <__udivmoddi4+0x298>
 8000554:	eb1c 0202 	adds.w	r2, ip, r2
 8000558:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800055c:	d201      	bcs.n	8000562 <__udivmoddi4+0x296>
 800055e:	4291      	cmp	r1, r2
 8000560:	d823      	bhi.n	80005aa <__udivmoddi4+0x2de>
 8000562:	4645      	mov	r5, r8
 8000564:	1a52      	subs	r2, r2, r1
 8000566:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800056a:	e726      	b.n	80003ba <__udivmoddi4+0xee>
 800056c:	4631      	mov	r1, r6
 800056e:	4630      	mov	r0, r6
 8000570:	e6f9      	b.n	8000366 <__udivmoddi4+0x9a>
 8000572:	1a84      	subs	r4, r0, r2
 8000574:	eb65 0203 	sbc.w	r2, r5, r3
 8000578:	2001      	movs	r0, #1
 800057a:	4617      	mov	r7, r2
 800057c:	e70b      	b.n	8000396 <__udivmoddi4+0xca>
 800057e:	4464      	add	r4, ip
 8000580:	3802      	subs	r0, #2
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14e>
 8000584:	4464      	add	r4, ip
 8000586:	3802      	subs	r0, #2
 8000588:	e6e4      	b.n	8000354 <__udivmoddi4+0x88>
 800058a:	3d02      	subs	r5, #2
 800058c:	4462      	add	r2, ip
 800058e:	e72f      	b.n	80003f0 <__udivmoddi4+0x124>
 8000590:	3902      	subs	r1, #2
 8000592:	4462      	add	r2, ip
 8000594:	e6c9      	b.n	800032a <__udivmoddi4+0x5e>
 8000596:	f1ae 0e02 	sub.w	lr, lr, #2
 800059a:	443d      	add	r5, r7
 800059c:	e76f      	b.n	800047e <__udivmoddi4+0x1b2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	e7cb      	b.n	800053c <__udivmoddi4+0x270>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443d      	add	r5, r7
 80005a8:	e77e      	b.n	80004a8 <__udivmoddi4+0x1dc>
 80005aa:	3d02      	subs	r5, #2
 80005ac:	4462      	add	r2, ip
 80005ae:	e7d9      	b.n	8000564 <__udivmoddi4+0x298>
 80005b0:	4618      	mov	r0, r3
 80005b2:	4631      	mov	r1, r6
 80005b4:	e6d7      	b.n	8000366 <__udivmoddi4+0x9a>
 80005b6:	bf00      	nop

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b590      	push	{r4, r7, lr}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fa7f 	bl	8000ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f823 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f8cd 	bl	8000768 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80005ce:	f000 f877 	bl	80006c0 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 80005d2:	f000 f87d 	bl	80006d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char message[] = "Hello, world!\n";
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <main+0x4c>)
 80005d8:	463c      	mov	r4, r7
 80005da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005dc:	c407      	stmia	r4!, {r0, r1, r2}
 80005de:	8023      	strh	r3, [r4, #0]
 80005e0:	3402      	adds	r4, #2
 80005e2:	0c1b      	lsrs	r3, r3, #16
 80005e4:	7023      	strb	r3, [r4, #0]

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
  while (1)
  {
  	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80005e6:	463b      	mov	r3, r7
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff fe4f 	bl	800028c <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	4639      	mov	r1, r7
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f8:	4804      	ldr	r0, [pc, #16]	; (800060c <main+0x50>)
 80005fa:	f006 fd6d 	bl	80070d8 <HAL_UART_Transmit>

  	  HAL_Delay(1000);
 80005fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000602:	f000 fadb 	bl	8000bbc <HAL_Delay>
  	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000606:	e7ee      	b.n	80005e6 <main+0x2a>
 8000608:	08007c98 	.word	0x08007c98
 800060c:	20000028 	.word	0x20000028

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b09c      	sub	sp, #112	; 0x70
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2250      	movs	r2, #80	; 0x50
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fb02 	bl	8007c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <SystemClock_Config+0xac>)
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	4a20      	ldr	r2, [pc, #128]	; (80006bc <SystemClock_Config+0xac>)
 800063c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000640:	6113      	str	r3, [r2, #16]
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <SystemClock_Config+0xac>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064e:	bf00      	nop
 8000650:	4b1a      	ldr	r3, [pc, #104]	; (80006bc <SystemClock_Config+0xac>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	2b08      	cmp	r3, #8
 800065a:	d1f9      	bne.n	8000650 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 8000664:	2308      	movs	r3, #8
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2340      	movs	r3, #64	; 0x40
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066c:	2300      	movs	r3, #0
 800066e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 0320 	add.w	r3, r7, #32
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fd13 	bl	80010a0 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000680:	f000 f8b6 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	231f      	movs	r3, #31
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2101      	movs	r1, #1
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f934 	bl	8001910 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ae:	f000 f89f 	bl	80007f0 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3770      	adds	r7, #112	; 0x70
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	44020800 	.word	0x44020800

080006c0 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
	...

080006d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006d6:	4a23      	ldr	r2, [pc, #140]	; (8000764 <MX_USART3_UART_Init+0x94>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_USART3_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_USART3_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_USART3_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART3_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART3_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x90>)
 800071a:	f006 fc8d 	bl	8007038 <HAL_UART_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f864 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_USART3_UART_Init+0x90>)
 800072c:	f007 f9b2 	bl	8007a94 <HAL_UARTEx_SetTxFifoThreshold>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f85b 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x90>)
 800073e:	f007 f9e7 	bl	8007b10 <HAL_UARTEx_SetRxFifoThreshold>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f852 	bl	80007f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_USART3_UART_Init+0x90>)
 800074e:	f007 f968 	bl	8007a22 <HAL_UARTEx_DisableFifoMode>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f84a 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000028 	.word	0x20000028
 8000764:	40004800 	.word	0x40004800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000784:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0x80>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000794:	f003 0302 	and.w	r3, r3, #2
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0x80>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_GPIO_Init+0x80>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2101      	movs	r1, #1
 80007be:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0x84>)
 80007c0:	f000 fc56 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80007c4:	2301      	movs	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0x84>)
 80007dc:	f000 faf6 	bl	8000dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	44020c00 	.word	0x44020c00
 80007ec:	42020400 	.word	0x42020400

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>

080007fa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b0cc      	sub	sp, #304	; 0x130
 800080c:	af00      	add	r7, sp, #0
 800080e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000812:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000816:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800082c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000830:	4618      	mov	r0, r3
 8000832:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000836:	461a      	mov	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f007 f9f5 	bl	8007c28 <memset>
  if(huart->Instance==USART3)
 800083e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a33      	ldr	r2, [pc, #204]	; (8000918 <HAL_UART_MspInit+0x110>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d15d      	bne.n	800090c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000854:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000858:	f04f 0204 	mov.w	r2, #4
 800085c:	f04f 0300 	mov.w	r3, #0
 8000860:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000868:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800086c:	2200      	movs	r2, #0
 800086e:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000870:	f107 0310 	add.w	r3, r7, #16
 8000874:	4618      	mov	r0, r3
 8000876:	f001 fb8d 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000880:	f7ff ffb6 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000884:	4b25      	ldr	r3, [pc, #148]	; (800091c <HAL_UART_MspInit+0x114>)
 8000886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800088a:	4a24      	ldr	r2, [pc, #144]	; (800091c <HAL_UART_MspInit+0x114>)
 800088c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000890:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000894:	4b21      	ldr	r3, [pc, #132]	; (800091c <HAL_UART_MspInit+0x114>)
 8000896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800089a:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800089e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008a2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008ac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80008b0:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <HAL_UART_MspInit+0x114>)
 80008b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_UART_MspInit+0x114>)
 80008ba:	f043 0308 	orr.w	r3, r3, #8
 80008be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <HAL_UART_MspInit+0x114>)
 80008c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c8:	f003 0208 	and.w	r2, r3, #8
 80008cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008d0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008da:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80008de:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008fa:	2307      	movs	r3, #7
 80008fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <HAL_UART_MspInit+0x118>)
 8000908:	f000 fa60 	bl	8000dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800090c:	bf00      	nop
 800090e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40004800 	.word	0x40004800
 800091c:	44020c00 	.word	0x44020c00
 8000920:	42020c00 	.word	0x42020c00

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <NMI_Handler+0x4>

0800092a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <HardFault_Handler+0x4>

08000930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <MemManage_Handler+0x4>

08000936 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <UsageFault_Handler+0x4>

08000942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000970:	f000 f904 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}

08000978 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800097e:	4b35      	ldr	r3, [pc, #212]	; (8000a54 <SystemInit+0xdc>)
 8000980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000984:	4a33      	ldr	r2, [pc, #204]	; (8000a54 <SystemInit+0xdc>)
 8000986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800098e:	4b32      	ldr	r3, [pc, #200]	; (8000a58 <SystemInit+0xe0>)
 8000990:	2201      	movs	r2, #1
 8000992:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000994:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <SystemInit+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <SystemInit+0xe0>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <SystemInit+0xe0>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	492c      	ldr	r1, [pc, #176]	; (8000a58 <SystemInit+0xe0>)
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <SystemInit+0xe4>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <SystemInit+0xe0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 80009b2:	4b29      	ldr	r3, [pc, #164]	; (8000a58 <SystemInit+0xe0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80009b8:	4b27      	ldr	r3, [pc, #156]	; (8000a58 <SystemInit+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80009be:	4b26      	ldr	r3, [pc, #152]	; (8000a58 <SystemInit+0xe0>)
 80009c0:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <SystemInit+0xe8>)
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <SystemInit+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80009ca:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <SystemInit+0xe0>)
 80009cc:	4a24      	ldr	r2, [pc, #144]	; (8000a60 <SystemInit+0xe8>)
 80009ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <SystemInit+0xe0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <SystemInit+0xe0>)
 80009d8:	4a21      	ldr	r2, [pc, #132]	; (8000a60 <SystemInit+0xe8>)
 80009da:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <SystemInit+0xe0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009e2:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <SystemInit+0xe0>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <SystemInit+0xe0>)
 80009e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <SystemInit+0xe0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <SystemInit+0xdc>)
 80009f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009fa:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <SystemInit+0xec>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000a04:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000a0c:	d003      	beq.n	8000a16 <SystemInit+0x9e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000a14:	d117      	bne.n	8000a46 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <SystemInit+0xec>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d005      	beq.n	8000a2e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <SystemInit+0xec>)
 8000a24:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <SystemInit+0xf0>)
 8000a26:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <SystemInit+0xec>)
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <SystemInit+0xf4>)
 8000a2c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <SystemInit+0xec>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <SystemInit+0xec>)
 8000a34:	f043 0302 	orr.w	r3, r3, #2
 8000a38:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <SystemInit+0xec>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <SystemInit+0xec>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
  }
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00
 8000a58:	44020c00 	.word	0x44020c00
 8000a5c:	eae2eae3 	.word	0xeae2eae3
 8000a60:	01010280 	.word	0x01010280
 8000a64:	40022000 	.word	0x40022000
 8000a68:	08192a3b 	.word	0x08192a3b
 8000a6c:	4c5d6e7f 	.word	0x4c5d6e7f

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a74:	f7ff ff80 	bl	8000978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f007 f8cb 	bl	8007c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff fd8b 	bl	80005bc <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab4:	08007cf8 	.word	0x08007cf8
  ldr r2, =_sbss
 8000ab8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000abc:	200000c0 	.word	0x200000c0

08000ac0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_IRQHandler>
	...

08000ac4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f94d 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000ace:	f001 f8d7 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <HAL_Init+0x40>)
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	f003 030f 	and.w	r3, r3, #15
 8000adc:	490a      	ldr	r1, [pc, #40]	; (8000b08 <HAL_Init+0x44>)
 8000ade:	5ccb      	ldrb	r3, [r1, r3]
 8000ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_Init+0x48>)
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	200f      	movs	r0, #15
 8000aea:	f000 f811 	bl	8000b10 <HAL_InitTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e002      	b.n	8000afe <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000af8:	f7ff fe7f 	bl	80007fa <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	44020c00 	.word	0x44020c00
 8000b08:	08007ca8 	.word	0x08007ca8
 8000b0c:	20000000 	.word	0x20000000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_InitTick+0x60>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e021      	b.n	8000b68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <HAL_InitTick+0x64>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_InitTick+0x60>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f939 	bl	8000db2 <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b58:	f000 f911 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <HAL_InitTick+0x68>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	200000bc 	.word	0x200000bc

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	200000bc 	.word	0x200000bc

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	88fb      	ldrh	r3, [r7, #6]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff47 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff5e 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ffb2 	bl	8000d24 <SysTick_Config>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000dda:	e136      	b.n	800104a <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f000 8128 	beq.w	8001044 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x38>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b12      	cmp	r3, #18
 8000e02:	d125      	bne.n	8000e50 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	f003 0307 	and.w	r3, r3, #7
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	220f      	movs	r2, #15
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	691b      	ldr	r3, [r3, #16]
 8000e2c:	f003 020f 	and.w	r2, r3, #15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	6979      	ldr	r1, [r7, #20]
 8000e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0203 	and.w	r2, r3, #3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	697a      	ldr	r2, [r7, #20]
 8000e82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d00b      	beq.n	8000ea4 <HAL_GPIO_Init+0xd8>
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d007      	beq.n	8000ea4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e98:	2b11      	cmp	r3, #17
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d130      	bne.n	8000f06 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	697a      	ldr	r2, [r7, #20]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	68da      	ldr	r2, [r3, #12]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eda:	2201      	movs	r2, #1
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	091b      	lsrs	r3, r3, #4
 8000ef0:	f003 0201 	and.w	r2, r3, #1
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d017      	beq.n	8000f3e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	4013      	ands	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d07c      	beq.n	8001044 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000f4a:	4a47      	ldr	r2, [pc, #284]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3318      	adds	r3, #24
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f56:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	220f      	movs	r2, #15
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	697a      	ldr	r2, [r7, #20]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0a9a      	lsrs	r2, r3, #10
 8000f72:	4b3e      	ldr	r3, [pc, #248]	; (800106c <HAL_GPIO_Init+0x2a0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	f002 0203 	and.w	r2, r2, #3
 8000f7c:	00d2      	lsls	r2, r2, #3
 8000f7e:	4093      	lsls	r3, r2
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000f86:	4938      	ldr	r1, [pc, #224]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3318      	adds	r3, #24
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000fb8:	4a2b      	ldr	r2, [pc, #172]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8000fea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000fee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800100e:	4a16      	ldr	r2, [pc, #88]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_GPIO_Init+0x29c>)
 8001018:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800101c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	4013      	ands	r3, r2
 8001026:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_GPIO_Init+0x29c>)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3301      	adds	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aec1 	bne.w	8000ddc <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	44022000 	.word	0x44022000
 800106c:	002f7f7f 	.word	0x002f7f7f

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f000 bc28 	b.w	8001904 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010b4:	4b94      	ldr	r3, [pc, #592]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	f003 0318 	and.w	r3, r3, #24
 80010bc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80010be:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d05b      	beq.n	800118c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	2b08      	cmp	r3, #8
 80010d8:	d005      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	2b18      	cmp	r3, #24
 80010de:	d114      	bne.n	800110a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d111      	bne.n	800110a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f000 bc08 	b.w	8001904 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	041b      	lsls	r3, r3, #16
 8001102:	4981      	ldr	r1, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001104:	4313      	orrs	r3, r2
 8001106:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001108:	e040      	b.n	800118c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d023      	beq.n	800115a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001112:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a7c      	ldr	r2, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111e:	f7ff fd41 	bl	8000ba4 <HAL_GetTick>
 8001122:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001124:	e008      	b.n	8001138 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001126:	f7ff fd3d 	bl	8000ba4 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	2b02      	cmp	r3, #2
 8001132:	d901      	bls.n	8001138 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8001134:	2303      	movs	r3, #3
 8001136:	e3e5      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001138:	4b73      	ldr	r3, [pc, #460]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001140:	2b00      	cmp	r3, #0
 8001142:	d0f0      	beq.n	8001126 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001144:	4b70      	ldr	r3, [pc, #448]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	041b      	lsls	r3, r3, #16
 8001152:	496d      	ldr	r1, [pc, #436]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001154:	4313      	orrs	r3, r2
 8001156:	618b      	str	r3, [r1, #24]
 8001158:	e018      	b.n	800118c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800115a:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fd1d 	bl	8000ba4 <HAL_GetTick>
 800116a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800116e:	f7ff fd19 	bl	8000ba4 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e3c1      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001180:	4b61      	ldr	r3, [pc, #388]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1f0      	bne.n	800116e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80a0 	beq.w	80012da <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	2b10      	cmp	r3, #16
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x10c>
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b18      	cmp	r3, #24
 80011a4:	d109      	bne.n	80011ba <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 8092 	bne.w	80012da <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e3a4      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c2:	d106      	bne.n	80011d2 <HAL_RCC_OscConfig+0x132>
 80011c4:	4b50      	ldr	r3, [pc, #320]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	e058      	b.n	8001284 <HAL_RCC_OscConfig+0x1e4>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d112      	bne.n	8001200 <HAL_RCC_OscConfig+0x160>
 80011da:	4b4b      	ldr	r3, [pc, #300]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a4a      	ldr	r2, [pc, #296]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	4b48      	ldr	r3, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a47      	ldr	r2, [pc, #284]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b45      	ldr	r3, [pc, #276]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a44      	ldr	r2, [pc, #272]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e041      	b.n	8001284 <HAL_RCC_OscConfig+0x1e4>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d112      	bne.n	8001230 <HAL_RCC_OscConfig+0x190>
 800120a:	4b3f      	ldr	r3, [pc, #252]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a3e      	ldr	r2, [pc, #248]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b3c      	ldr	r3, [pc, #240]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a3b      	ldr	r2, [pc, #236]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800121c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a38      	ldr	r2, [pc, #224]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e029      	b.n	8001284 <HAL_RCC_OscConfig+0x1e4>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001238:	d112      	bne.n	8001260 <HAL_RCC_OscConfig+0x1c0>
 800123a:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a32      	ldr	r2, [pc, #200]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b30      	ldr	r3, [pc, #192]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800124c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a2c      	ldr	r2, [pc, #176]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e011      	b.n	8001284 <HAL_RCC_OscConfig+0x1e4>
 8001260:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a28      	ldr	r2, [pc, #160]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a22      	ldr	r2, [pc, #136]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 800127e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc8a 	bl	8000ba4 <HAL_GetTick>
 8001290:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc86 	bl	8000ba4 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e32e      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x1f4>
 80012b2:	e012      	b.n	80012da <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc76 	bl	8000ba4 <HAL_GetTick>
 80012b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc72 	bl	8000ba4 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e31a      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x268>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	f000 809a 	beq.w	800141c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x25a>
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	2b18      	cmp	r3, #24
 80012f2:	d149      	bne.n	8001388 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d146      	bne.n	8001388 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e2fe      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
 8001306:	bf00      	nop
 8001308:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11c      	bne.n	800134c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001312:	4b9a      	ldr	r3, [pc, #616]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0218 	and.w	r2, r3, #24
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	429a      	cmp	r2, r3
 8001320:	d014      	beq.n	800134c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001322:	4b96      	ldr	r3, [pc, #600]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0218 	bic.w	r2, r3, #24
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	4993      	ldr	r1, [pc, #588]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001330:	4313      	orrs	r3, r2
 8001332:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8001334:	f000 fdd0 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001338:	4b91      	ldr	r3, [pc, #580]	; (8001580 <HAL_RCC_OscConfig+0x4e0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fbe7 	bl	8000b10 <HAL_InitTick>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e2db      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fc2a 	bl	8000ba4 <HAL_GetTick>
 8001350:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001354:	f7ff fc26 	bl	8000ba4 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e2ce      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001372:	4b82      	ldr	r3, [pc, #520]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	041b      	lsls	r3, r3, #16
 8001380:	497e      	ldr	r1, [pc, #504]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001382:	4313      	orrs	r3, r2
 8001384:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001386:	e049      	b.n	800141c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02c      	beq.n	80013ea <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001390:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 0218 	bic.w	r2, r3, #24
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4977      	ldr	r1, [pc, #476]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	4b76      	ldr	r3, [pc, #472]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbf9 	bl	8000ba4 <HAL_GetTick>
 80013b2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fbf5 	bl	8000ba4 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e29d      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80013d4:	4b69      	ldr	r3, [pc, #420]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	4966      	ldr	r1, [pc, #408]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	610b      	str	r3, [r1, #16]
 80013e8:	e018      	b.n	800141c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a63      	ldr	r2, [pc, #396]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fbd5 	bl	8000ba4 <HAL_GetTick>
 80013fa:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbd1 	bl	8000ba4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e279      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001410:	4b5a      	ldr	r3, [pc, #360]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d03c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01c      	beq.n	800146a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800143c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fbb0 	bl	8000ba4 <HAL_GetTick>
 8001444:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001448:	f7ff fbac 	bl	8000ba4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e254      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800145c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ef      	beq.n	8001448 <HAL_RCC_OscConfig+0x3a8>
 8001468:	e01b      	b.n	80014a2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800146c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001470:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001476:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fb93 	bl	8000ba4 <HAL_GetTick>
 800147e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001482:	f7ff fb8f 	bl	8000ba4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e237      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001494:	4b39      	ldr	r3, [pc, #228]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800149a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ef      	bne.n	8001482 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80d2 	beq.w	8001654 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80014b0:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x4e4>)
 80014b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d118      	bne.n	80014ee <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_OscConfig+0x4e4>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	4a30      	ldr	r2, [pc, #192]	; (8001584 <HAL_RCC_OscConfig+0x4e4>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c8:	f7ff fb6c 	bl	8000ba4 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7ff fb68 	bl	8000ba4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e210      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <HAL_RCC_OscConfig+0x4e4>)
 80014e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d108      	bne.n	8001508 <HAL_RCC_OscConfig+0x468>
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80014f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001506:	e074      	b.n	80015f2 <HAL_RCC_OscConfig+0x552>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d118      	bne.n	8001542 <HAL_RCC_OscConfig+0x4a2>
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001516:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800152c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001536:	4a11      	ldr	r2, [pc, #68]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001540:	e057      	b.n	80015f2 <HAL_RCC_OscConfig+0x552>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b05      	cmp	r3, #5
 8001548:	d11e      	bne.n	8001588 <HAL_RCC_OscConfig+0x4e8>
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800154c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800155c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001566:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 800156c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001570:	4a02      	ldr	r2, [pc, #8]	; (800157c <HAL_RCC_OscConfig+0x4dc>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800157a:	e03a      	b.n	80015f2 <HAL_RCC_OscConfig+0x552>
 800157c:	44020c00 	.word	0x44020c00
 8001580:	20000004 	.word	0x20000004
 8001584:	44020800 	.word	0x44020800
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b85      	cmp	r3, #133	; 0x85
 800158e:	d118      	bne.n	80015c2 <HAL_RCC_OscConfig+0x522>
 8001590:	4ba2      	ldr	r3, [pc, #648]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001596:	4aa1      	ldr	r2, [pc, #644]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015a0:	4b9e      	ldr	r3, [pc, #632]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015a6:	4a9d      	ldr	r2, [pc, #628]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015b0:	4b9a      	ldr	r3, [pc, #616]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015b6:	4a99      	ldr	r2, [pc, #612]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015c0:	e017      	b.n	80015f2 <HAL_RCC_OscConfig+0x552>
 80015c2:	4b96      	ldr	r3, [pc, #600]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015c8:	4a94      	ldr	r2, [pc, #592]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015d2:	4b92      	ldr	r3, [pc, #584]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d8:	4a90      	ldr	r2, [pc, #576]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015e2:	4b8e      	ldr	r3, [pc, #568]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e8:	4a8c      	ldr	r2, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80015ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015fa:	f7ff fad3 	bl	8000ba4 <HAL_GetTick>
 80015fe:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001600:	e00a      	b.n	8001618 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001602:	f7ff facf 	bl	8000ba4 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001610:	4293      	cmp	r3, r2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e175      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001618:	4b80      	ldr	r3, [pc, #512]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800161a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0ed      	beq.n	8001602 <HAL_RCC_OscConfig+0x562>
 8001626:	e015      	b.n	8001654 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001628:	f7ff fabc 	bl	8000ba4 <HAL_GetTick>
 800162c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800162e:	e00a      	b.n	8001646 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001630:	f7ff fab8 	bl	8000ba4 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e15e      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001646:	4b75      	ldr	r3, [pc, #468]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1ed      	bne.n	8001630 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b00      	cmp	r3, #0
 800165e:	d036      	beq.n	80016ce <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b00      	cmp	r3, #0
 8001666:	d019      	beq.n	800169c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001668:	4b6c      	ldr	r3, [pc, #432]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a6b      	ldr	r2, [pc, #428]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800166e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001672:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001674:	f7ff fa96 	bl	8000ba4 <HAL_GetTick>
 8001678:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800167c:	f7ff fa92 	bl	8000ba4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e13a      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800168e:	4b63      	ldr	r3, [pc, #396]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x5dc>
 800169a:	e018      	b.n	80016ce <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800169c:	4b5f      	ldr	r3, [pc, #380]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a5e      	ldr	r2, [pc, #376]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80016a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fa7c 	bl	8000ba4 <HAL_GetTick>
 80016ac:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80016b0:	f7ff fa78 	bl	8000ba4 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e120      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80016c2:	4b56      	ldr	r3, [pc, #344]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8115 	beq.w	8001902 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2b18      	cmp	r3, #24
 80016dc:	f000 80af 	beq.w	800183e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	f040 8086 	bne.w	80017f6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80016f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa55 	bl	8000ba4 <HAL_GetTick>
 80016fa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fa51 	bl	8000ba4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e0f9      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001710:	4b42      	ldr	r3, [pc, #264]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800171c:	4b3f      	ldr	r3, [pc, #252]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001724:	f023 0303 	bic.w	r3, r3, #3
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001730:	0212      	lsls	r2, r2, #8
 8001732:	430a      	orrs	r2, r1
 8001734:	4939      	ldr	r1, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001736:	4313      	orrs	r3, r2
 8001738:	628b      	str	r3, [r1, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173e:	3b01      	subs	r3, #1
 8001740:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001748:	3b01      	subs	r3, #1
 800174a:	025b      	lsls	r3, r3, #9
 800174c:	b29b      	uxth	r3, r3
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001754:	3b01      	subs	r3, #1
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	3b01      	subs	r3, #1
 8001764:	061b      	lsls	r3, r3, #24
 8001766:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800176a:	492c      	ldr	r1, [pc, #176]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800176c:	4313      	orrs	r3, r2
 800176e:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001776:	f023 0310 	bic.w	r3, r3, #16
 800177a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001780:	4a26      	ldr	r2, [pc, #152]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178a:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 800178c:	f043 0310 	orr.w	r3, r3, #16
 8001790:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001792:	4b22      	ldr	r3, [pc, #136]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f023 020c 	bic.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	491f      	ldr	r1, [pc, #124]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f023 0220 	bic.w	r2, r3, #32
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017b0:	491a      	ldr	r1, [pc, #104]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a15      	ldr	r2, [pc, #84]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ce:	f7ff f9e9 	bl	8000ba4 <HAL_GetTick>
 80017d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f9e5 	bl	8000ba4 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e08d      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x736>
 80017f4:	e085      	b.n	8001902 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <HAL_RCC_OscConfig+0x77c>)
 80017fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001802:	f7ff f9cf 	bl	8000ba4 <HAL_GetTick>
 8001806:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800180a:	f7ff f9cb 	bl	8000ba4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d903      	bls.n	8001820 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e073      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
 800181c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800182c:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	4a36      	ldr	r2, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 8001832:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	6293      	str	r3, [r2, #40]	; 0x28
 800183c:	e061      	b.n	8001902 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001844:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 8001846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001848:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b01      	cmp	r3, #1
 8001850:	d031      	beq.n	80018b6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800185c:	429a      	cmp	r2, r3
 800185e:	d12a      	bne.n	80018b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800186c:	429a      	cmp	r2, r3
 800186e:	d122      	bne.n	80018b6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d11a      	bne.n	80018b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	0a5b      	lsrs	r3, r3, #9
 8001884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d111      	bne.n	80018b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	0c1b      	lsrs	r3, r3, #16
 8001896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800189e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d108      	bne.n	80018b6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	0e1b      	lsrs	r3, r3, #24
 80018a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e024      	b.n	8001904 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018be:	08db      	lsrs	r3, r3, #3
 80018c0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d01a      	beq.n	8001902 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018d2:	f023 0310 	bic.w	r3, r3, #16
 80018d6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f964 	bl	8000ba4 <HAL_GetTick>
 80018dc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80018de:	bf00      	nop
 80018e0:	f7ff f960 	bl	8000ba4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d0f9      	beq.n	80018e0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_RCC_OscConfig+0x86c>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	44020c00 	.word	0x44020c00

08001910 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e19e      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b83      	ldr	r3, [pc, #524]	; (8001b34 <HAL_RCC_ClockConfig+0x224>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d910      	bls.n	8001954 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b80      	ldr	r3, [pc, #512]	; (8001b34 <HAL_RCC_ClockConfig+0x224>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f023 020f 	bic.w	r2, r3, #15
 800193a:	497e      	ldr	r1, [pc, #504]	; (8001b34 <HAL_RCC_ClockConfig+0x224>)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	4313      	orrs	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <HAL_RCC_ClockConfig+0x224>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 030f 	and.w	r3, r3, #15
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e186      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0310 	and.w	r3, r3, #16
 800195c:	2b00      	cmp	r3, #0
 800195e:	d012      	beq.n	8001986 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800196e:	429a      	cmp	r2, r3
 8001970:	d909      	bls.n	8001986 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	021b      	lsls	r3, r3, #8
 8001980:	496d      	ldr	r1, [pc, #436]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001982:	4313      	orrs	r3, r2
 8001984:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d012      	beq.n	80019b8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691a      	ldr	r2, [r3, #16]
 8001996:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	091b      	lsrs	r3, r3, #4
 800199c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d909      	bls.n	80019b8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80019a4:	4b64      	ldr	r3, [pc, #400]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	691b      	ldr	r3, [r3, #16]
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4961      	ldr	r1, [pc, #388]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80019d4:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4955      	ldr	r1, [pc, #340]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 80019f8:	6a1b      	ldr	r3, [r3, #32]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d908      	bls.n	8001a14 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001a02:	4b4d      	ldr	r3, [pc, #308]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	f023 020f 	bic.w	r2, r3, #15
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	494a      	ldr	r1, [pc, #296]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8093 	beq.w	8001b48 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a2a:	4b43      	ldr	r3, [pc, #268]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e113      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4b3d      	ldr	r3, [pc, #244]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e107      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001a5a:	4b37      	ldr	r3, [pc, #220]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0fb      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0f3      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001a7a:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	492c      	ldr	r1, [pc, #176]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f88a 	bl	8000ba4 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d112      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f7ff f882 	bl	8000ba4 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e0d7      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab2:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 0318 	and.w	r3, r3, #24
 8001aba:	2b18      	cmp	r3, #24
 8001abc:	d1ee      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x18c>
 8001abe:	e043      	b.n	8001b48 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d112      	bne.n	8001aee <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001aca:	f7ff f86b 	bl	8000ba4 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0c0      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f003 0318 	and.w	r3, r3, #24
 8001ae8:	2b10      	cmp	r3, #16
 8001aea:	d1ee      	bne.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
 8001aec:	e02c      	b.n	8001b48 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d122      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff f854 	bl	8000ba4 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0a9      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x228>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f003 0318 	and.w	r3, r3, #24
 8001b16:	2b08      	cmp	r3, #8
 8001b18:	d1ee      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x1e8>
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1c:	f7ff f842 	bl	8000ba4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d906      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e097      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	f003 0318 	and.w	r3, r3, #24
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1e9      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	4b44      	ldr	r3, [pc, #272]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d208      	bcs.n	8001b76 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f023 020f 	bic.w	r2, r3, #15
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	493e      	ldr	r1, [pc, #248]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b76:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d210      	bcs.n	8001ba6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b84:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 020f 	bic.w	r2, r3, #15
 8001b8c:	4938      	ldr	r1, [pc, #224]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_ClockConfig+0x360>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e05d      	b.n	8001c62 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d010      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68da      	ldr	r2, [r3, #12]
 8001bb6:	4b2d      	ldr	r3, [pc, #180]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d208      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4927      	ldr	r1, [pc, #156]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	4b21      	ldr	r3, [pc, #132]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d209      	bcs.n	8001c06 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	491a      	ldr	r1, [pc, #104]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695a      	ldr	r2, [r3, #20]
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d209      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c38:	f000 f822 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <HAL_RCC_ClockConfig+0x35c>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490b      	ldr	r1, [pc, #44]	; (8001c74 <HAL_RCC_ClockConfig+0x364>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_RCC_ClockConfig+0x368>)
 8001c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x36c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe ff5a 	bl	8000b10 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001c60:	7afb      	ldrb	r3, [r7, #11]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	44020c00 	.word	0x44020c00
 8001c70:	40022000 	.word	0x40022000
 8001c74:	08007ca8 	.word	0x08007ca8
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	20000004 	.word	0x20000004

08001c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001c86:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0318 	and.w	r3, r3, #24
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d102      	bne.n	8001c98 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001c92:	4b8a      	ldr	r3, [pc, #552]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x23c>)
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e107      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c98:	4b87      	ldr	r3, [pc, #540]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f003 0318 	and.w	r3, r3, #24
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d112      	bne.n	8001cca <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001ca4:	4b84      	ldr	r3, [pc, #528]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d009      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001cb0:	4b81      	ldr	r3, [pc, #516]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	4a81      	ldr	r2, [pc, #516]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc0:	61fb      	str	r3, [r7, #28]
 8001cc2:	e0f1      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001cc4:	4b7e      	ldr	r3, [pc, #504]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	e0ee      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cca:	4b7b      	ldr	r3, [pc, #492]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 0318 	and.w	r3, r3, #24
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd6:	4b7b      	ldr	r3, [pc, #492]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0x244>)
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	e0e5      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cdc:	4b76      	ldr	r3, [pc, #472]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 0318 	and.w	r3, r3, #24
 8001ce4:	2b18      	cmp	r3, #24
 8001ce6:	f040 80dd 	bne.w	8001ea4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001cea:	4b73      	ldr	r3, [pc, #460]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001cf4:	4b70      	ldr	r3, [pc, #448]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cfe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001d00:	4b6d      	ldr	r3, [pc, #436]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	fb02 f303 	mul.w	r3, r2, r3
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d24:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80b7 	beq.w	8001e9e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0xbe>
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d056      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x16a>
 8001d3c:	e077      	b.n	8001e2e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001d3e:	4b5e      	ldr	r3, [pc, #376]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d02d      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d4a:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	08db      	lsrs	r3, r3, #3
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	4a5a      	ldr	r2, [pc, #360]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	ee07 3a90 	vmov	s15, r3
 8001d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	ee07 3a90 	vmov	s15, r3
 8001d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d7c:	ee07 3a90 	vmov	s15, r3
 8001d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d84:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d88:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8001d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001da4:	e065      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	ee07 3a90 	vmov	s15, r3
 8001dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db0:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ecc <HAL_RCC_GetSysClockFreq+0x24c>
 8001db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dcc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8001dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001de4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001de8:	e043      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df4:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001ed0 <HAL_RCC_GetSysClockFreq+0x250>
 8001df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e10:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001e2c:	e021      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e38:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ed4 <HAL_RCC_GetSysClockFreq+0x254>
 8001e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e54:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001ec8 <HAL_RCC_GetSysClockFreq+0x248>
 8001e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001e70:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	0a5b      	lsrs	r3, r3, #9
 8001e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	e004      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
 8001ea2:	e001      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x240>)
 8001ea6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001ea8:	69fb      	ldr	r3, [r7, #28]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	; 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	44020c00 	.word	0x44020c00
 8001ebc:	003d0900 	.word	0x003d0900
 8001ec0:	03d09000 	.word	0x03d09000
 8001ec4:	017d7840 	.word	0x017d7840
 8001ec8:	46000000 	.word	0x46000000
 8001ecc:	4c742400 	.word	0x4c742400
 8001ed0:	4bbebc20 	.word	0x4bbebc20
 8001ed4:	4a742400 	.word	0x4a742400

08001ed8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001edc:	f7ff fed0 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x2c>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001ee6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001eea:	4907      	ldr	r1, [pc, #28]	; (8001f08 <HAL_RCC_GetHCLKFreq+0x30>)
 8001eec:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001eee:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x34>)
 8001ef8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001efa:	4b04      	ldr	r3, [pc, #16]	; (8001f0c <HAL_RCC_GetHCLKFreq+0x34>)
 8001efc:	681b      	ldr	r3, [r3, #0]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	44020c00 	.word	0x44020c00
 8001f08:	08007ca8 	.word	0x08007ca8
 8001f0c:	20000000 	.word	0x20000000

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8001f14:	f7ff ffe0 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	44020c00 	.word	0x44020c00
 8001f38:	08007cb8 	.word	0x08007cb8

08001f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8001f40:	f7ff ffca 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f44:	4602      	mov	r2, r0
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	0a1b      	lsrs	r3, r3, #8
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	4904      	ldr	r1, [pc, #16]	; (8001f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f52:	5ccb      	ldrb	r3, [r1, r3]
 8001f54:	f003 031f 	and.w	r3, r3, #31
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	44020c00 	.word	0x44020c00
 8001f64:	08007cb8 	.word	0x08007cb8

08001f68 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8001f6c:	f7ff ffb4 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_GetPCLK3Freq+0x24>)
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	0b1b      	lsrs	r3, r3, #12
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4904      	ldr	r1, [pc, #16]	; (8001f90 <HAL_RCC_GetPCLK3Freq+0x28>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	44020c00 	.word	0x44020c00
 8001f90:	08007cb8 	.word	0x08007cb8

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8001f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f98:	b0d8      	sub	sp, #352	; 0x160
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8001fac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8001fb8:	2500      	movs	r5, #0
 8001fba:	ea54 0305 	orrs.w	r3, r4, r5
 8001fbe:	d00b      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8001fc0:	4bcd      	ldr	r3, [pc, #820]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc6:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8001fca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4ac9      	ldr	r2, [pc, #804]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8001fd2:	430b      	orrs	r3, r1
 8001fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f002 0801 	and.w	r8, r2, #1
 8001fe4:	f04f 0900 	mov.w	r9, #0
 8001fe8:	ea58 0309 	orrs.w	r3, r8, r9
 8001fec:	d042      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8001fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8001ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff4:	2b05      	cmp	r3, #5
 8001ff6:	d823      	bhi.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8001ff8:	a201      	add	r2, pc, #4	; (adr r2, 8002000 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002049 	.word	0x08002049
 8002004:	08002019 	.word	0x08002019
 8002008:	0800202d 	.word	0x0800202d
 800200c:	08002049 	.word	0x08002049
 8002010:	08002049 	.word	0x08002049
 8002014:	08002049 	.word	0x08002049
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002018:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800201c:	3308      	adds	r3, #8
 800201e:	4618      	mov	r0, r3
 8002020:	f004 feda 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800202a:	e00e      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800202c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002030:	3330      	adds	r3, #48	; 0x30
 8002032:	4618      	mov	r0, r3
 8002034:	f004 ff68 	bl	8006f08 <RCCEx_PLL3_Config>
 8002038:	4603      	mov	r3, r0
 800203a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800203e:	e004      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002046:	e000      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8002048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800204a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002052:	4ba9      	ldr	r3, [pc, #676]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002054:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002058:	f023 0107 	bic.w	r1, r3, #7
 800205c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002062:	4aa5      	ldr	r2, [pc, #660]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002064:	430b      	orrs	r3, r1
 8002066:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800206a:	e003      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800206c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002070:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002074:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f002 0a02 	and.w	sl, r2, #2
 8002080:	f04f 0b00 	mov.w	fp, #0
 8002084:	ea5a 030b 	orrs.w	r3, sl, fp
 8002088:	f000 8088 	beq.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800208c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	2b28      	cmp	r3, #40	; 0x28
 8002094:	d868      	bhi.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002096:	a201      	add	r2, pc, #4	; (adr r2, 800209c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800209c:	08002171 	.word	0x08002171
 80020a0:	08002169 	.word	0x08002169
 80020a4:	08002169 	.word	0x08002169
 80020a8:	08002169 	.word	0x08002169
 80020ac:	08002169 	.word	0x08002169
 80020b0:	08002169 	.word	0x08002169
 80020b4:	08002169 	.word	0x08002169
 80020b8:	08002169 	.word	0x08002169
 80020bc:	08002141 	.word	0x08002141
 80020c0:	08002169 	.word	0x08002169
 80020c4:	08002169 	.word	0x08002169
 80020c8:	08002169 	.word	0x08002169
 80020cc:	08002169 	.word	0x08002169
 80020d0:	08002169 	.word	0x08002169
 80020d4:	08002169 	.word	0x08002169
 80020d8:	08002169 	.word	0x08002169
 80020dc:	08002155 	.word	0x08002155
 80020e0:	08002169 	.word	0x08002169
 80020e4:	08002169 	.word	0x08002169
 80020e8:	08002169 	.word	0x08002169
 80020ec:	08002169 	.word	0x08002169
 80020f0:	08002169 	.word	0x08002169
 80020f4:	08002169 	.word	0x08002169
 80020f8:	08002169 	.word	0x08002169
 80020fc:	08002171 	.word	0x08002171
 8002100:	08002169 	.word	0x08002169
 8002104:	08002169 	.word	0x08002169
 8002108:	08002169 	.word	0x08002169
 800210c:	08002169 	.word	0x08002169
 8002110:	08002169 	.word	0x08002169
 8002114:	08002169 	.word	0x08002169
 8002118:	08002169 	.word	0x08002169
 800211c:	08002171 	.word	0x08002171
 8002120:	08002169 	.word	0x08002169
 8002124:	08002169 	.word	0x08002169
 8002128:	08002169 	.word	0x08002169
 800212c:	08002169 	.word	0x08002169
 8002130:	08002169 	.word	0x08002169
 8002134:	08002169 	.word	0x08002169
 8002138:	08002169 	.word	0x08002169
 800213c:	08002171 	.word	0x08002171
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002140:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002144:	3308      	adds	r3, #8
 8002146:	4618      	mov	r0, r3
 8002148:	f004 fe46 	bl	8006dd8 <RCCEx_PLL2_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002152:	e00e      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002154:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002158:	3330      	adds	r3, #48	; 0x30
 800215a:	4618      	mov	r0, r3
 800215c:	f004 fed4 	bl	8006f08 <RCCEx_PLL3_Config>
 8002160:	4603      	mov	r3, r0
 8002162:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8002166:	e004      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800216e:	e000      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8002170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002172:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10c      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800217a:	4b5f      	ldr	r3, [pc, #380]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800217c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002180:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002184:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	4a5b      	ldr	r2, [pc, #364]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800218c:	430b      	orrs	r3, r1
 800218e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002192:	e003      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002194:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002198:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800219c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f002 0304 	and.w	r3, r2, #4
 80021a8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80021b2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80021b6:	460b      	mov	r3, r1
 80021b8:	4313      	orrs	r3, r2
 80021ba:	d04e      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80021bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021c2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021c6:	d02c      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80021c8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80021cc:	d825      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80021ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d2:	d028      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80021d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021d8:	d81f      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80021da:	2bc0      	cmp	r3, #192	; 0xc0
 80021dc:	d025      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x296>
 80021de:	2bc0      	cmp	r3, #192	; 0xc0
 80021e0:	d81b      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d00f      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x272>
 80021e6:	2b80      	cmp	r3, #128	; 0x80
 80021e8:	d817      	bhi.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x286>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01f      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 80021ee:	2b40      	cmp	r3, #64	; 0x40
 80021f0:	d113      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80021f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021f6:	3308      	adds	r3, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f004 fded 	bl	8006dd8 <RCCEx_PLL2_Config>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002204:	e014      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002206:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800220a:	3330      	adds	r3, #48	; 0x30
 800220c:	4618      	mov	r0, r3
 800220e:	f004 fe7b 	bl	8006f08 <RCCEx_PLL3_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8002218:	e00a      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002220:	e006      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002222:	bf00      	nop
 8002224:	e004      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8002226:	bf00      	nop
 8002228:	e002      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800222a:	bf00      	nop
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800222e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002230:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10c      	bne.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002238:	4b2f      	ldr	r3, [pc, #188]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800223a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800223e:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002248:	4a2b      	ldr	r2, [pc, #172]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800224a:	430b      	orrs	r3, r1
 800224c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002250:	e003      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002252:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002256:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800225a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f002 0308 	and.w	r3, r2, #8
 8002266:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002270:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8002274:	460b      	mov	r3, r1
 8002276:	4313      	orrs	r3, r2
 8002278:	d056      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 800227a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800227e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002280:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002284:	d031      	beq.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002286:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800228a:	d82a      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002290:	d02d      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002296:	d824      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002298:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800229c:	d029      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 800229e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80022a2:	d81e      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80022a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a8:	d011      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80022aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ae:	d818      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d023      	beq.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80022b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022b8:	d113      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80022ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022be:	3308      	adds	r3, #8
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fd89 	bl	8006dd8 <RCCEx_PLL2_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80022cc:	e017      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80022ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022d2:	3330      	adds	r3, #48	; 0x30
 80022d4:	4618      	mov	r0, r3
 80022d6:	f004 fe17 	bl	8006f08 <RCCEx_PLL3_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80022e0:	e00d      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80022e8:	e009      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80022ea:	bf00      	nop
 80022ec:	e007      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80022ee:	bf00      	nop
 80022f0:	e005      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 80022f2:	bf00      	nop
 80022f4:	e003      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80022f6:	bf00      	nop
 80022f8:	44020c00 	.word	0x44020c00
        break;
 80022fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002306:	4bbb      	ldr	r3, [pc, #748]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800230c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002310:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002316:	4ab7      	ldr	r2, [pc, #732]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002318:	430b      	orrs	r3, r1
 800231a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800231e:	e003      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002324:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f002 0310 	and.w	r3, r2, #16
 8002334:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800233e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8002342:	460b      	mov	r3, r1
 8002344:	4313      	orrs	r3, r2
 8002346:	d053      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8002348:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800234c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800234e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002352:	d031      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002354:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002358:	d82a      	bhi.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800235a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800235e:	d02d      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8002360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002364:	d824      	bhi.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800236a:	d029      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800236c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002370:	d81e      	bhi.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002376:	d011      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d818      	bhi.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800237e:	2b00      	cmp	r3, #0
 8002380:	d020      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8002382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002386:	d113      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800238c:	3308      	adds	r3, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f004 fd22 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800239a:	e014      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800239c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023a0:	3330      	adds	r3, #48	; 0x30
 80023a2:	4618      	mov	r0, r3
 80023a4:	f004 fdb0 	bl	8006f08 <RCCEx_PLL3_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80023ae:	e00a      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80023b6:	e006      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80023b8:	bf00      	nop
 80023ba:	e004      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80023bc:	bf00      	nop
 80023be:	e002      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80023c0:	bf00      	nop
 80023c2:	e000      	b.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80023c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80023ce:	4b89      	ldr	r3, [pc, #548]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80023d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80023d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023de:	4a85      	ldr	r2, [pc, #532]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80023e0:	430b      	orrs	r3, r1
 80023e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023e6:	e003      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023ec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80023f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f002 0320 	and.w	r3, r2, #32
 80023fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002406:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 800240a:	460b      	mov	r3, r1
 800240c:	4313      	orrs	r3, r2
 800240e:	d053      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800241a:	d031      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800241c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8002420:	d82a      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002426:	d02d      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800242c:	d824      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800242e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002432:	d029      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8002434:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002438:	d81e      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d011      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8002440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002444:	d818      	bhi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d020      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800244a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244e:	d113      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002454:	3308      	adds	r3, #8
 8002456:	4618      	mov	r0, r3
 8002458:	f004 fcbe 	bl	8006dd8 <RCCEx_PLL2_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002462:	e014      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002464:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002468:	3330      	adds	r3, #48	; 0x30
 800246a:	4618      	mov	r0, r3
 800246c:	f004 fd4c 	bl	8006f08 <RCCEx_PLL3_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8002476:	e00a      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800247e:	e006      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002480:	bf00      	nop
 8002482:	e004      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002484:	bf00      	nop
 8002486:	e002      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002488:	bf00      	nop
 800248a:	e000      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800248c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800248e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10c      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8002496:	4b57      	ldr	r3, [pc, #348]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002498:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800249c:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80024a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a53      	ldr	r2, [pc, #332]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80024a8:	430b      	orrs	r3, r1
 80024aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80024ae:	e003      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80024b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80024b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80024c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80024ce:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80024d2:	460b      	mov	r3, r1
 80024d4:	4313      	orrs	r3, r2
 80024d6:	d053      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 80024d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024e2:	d031      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80024e4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80024e8:	d82a      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80024ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024ee:	d02d      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80024f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f4:	d824      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80024f6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80024fa:	d029      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80024fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002500:	d81e      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002502:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002506:	d011      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002508:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800250c:	d818      	bhi.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d020      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002512:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002516:	d113      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002518:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800251c:	3308      	adds	r3, #8
 800251e:	4618      	mov	r0, r3
 8002520:	f004 fc5a 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002524:	4603      	mov	r3, r0
 8002526:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800252a:	e014      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800252c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002530:	3330      	adds	r3, #48	; 0x30
 8002532:	4618      	mov	r0, r3
 8002534:	f004 fce8 	bl	8006f08 <RCCEx_PLL3_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800253e:	e00a      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002546:	e006      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002548:	bf00      	nop
 800254a:	e004      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800254c:	bf00      	nop
 800254e:	e002      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002550:	bf00      	nop
 8002552:	e000      	b.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8002554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002556:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800255e:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002564:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8002568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002570:	430b      	orrs	r3, r1
 8002572:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002576:	e003      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002578:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800257c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002580:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800258c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002590:	2300      	movs	r3, #0
 8002592:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002596:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 800259a:	460b      	mov	r3, r1
 800259c:	4313      	orrs	r3, r2
 800259e:	d055      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80025a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025a6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025aa:	d033      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80025ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80025b0:	d82c      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b6:	d02f      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80025b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025bc:	d826      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025c2:	d02b      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80025c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80025c8:	d820      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ce:	d013      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80025d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025d4:	d81a      	bhi.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d022      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80025da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025de:	d115      	bne.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80025e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025e4:	3308      	adds	r3, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f004 fbf6 	bl	8006dd8 <RCCEx_PLL2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80025f2:	e016      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80025f4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80025f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025fc:	3330      	adds	r3, #48	; 0x30
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fc82 	bl	8006f08 <RCCEx_PLL3_Config>
 8002604:	4603      	mov	r3, r0
 8002606:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800260a:	e00a      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002612:	e006      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002614:	bf00      	nop
 8002616:	e004      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002618:	bf00      	nop
 800261a:	e002      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800261c:	bf00      	nop
 800261e:	e000      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8002620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800262a:	4bbb      	ldr	r3, [pc, #748]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800262c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002630:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002634:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002638:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800263a:	4ab7      	ldr	r2, [pc, #732]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800263c:	430b      	orrs	r3, r1
 800263e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002642:	e003      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002644:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002648:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800264c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002658:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002662:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002666:	460b      	mov	r3, r1
 8002668:	4313      	orrs	r3, r2
 800266a:	d053      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800266c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002672:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002676:	d031      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002678:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800267c:	d82a      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800267e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002682:	d02d      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d824      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800268a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268e:	d029      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002690:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002694:	d81e      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269a:	d011      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800269c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a0:	d818      	bhi.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80026a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026aa:	d113      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80026ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026b0:	3308      	adds	r3, #8
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fb90 	bl	8006dd8 <RCCEx_PLL2_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80026be:	e014      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80026c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026c4:	3330      	adds	r3, #48	; 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 fc1e 	bl	8006f08 <RCCEx_PLL3_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80026d2:	e00a      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80026da:	e006      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80026dc:	bf00      	nop
 80026de:	e004      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80026e0:	bf00      	nop
 80026e2:	e002      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80026e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80026f2:	4b89      	ldr	r3, [pc, #548]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80026f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80026fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002702:	4a85      	ldr	r2, [pc, #532]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002704:	430b      	orrs	r3, r1
 8002706:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800270a:	e003      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800270c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002710:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002714:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002720:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800272a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800272e:	460b      	mov	r3, r1
 8002730:	4313      	orrs	r3, r2
 8002732:	d055      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8002734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800273c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002740:	d031      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8002742:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8002746:	d82a      	bhi.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800274c:	d02d      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x816>
 800274e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002752:	d824      	bhi.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002754:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002758:	d029      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800275a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800275e:	d81e      	bhi.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8002760:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002764:	d011      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8002766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800276a:	d818      	bhi.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8002770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002774:	d113      	bne.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800277a:	3308      	adds	r3, #8
 800277c:	4618      	mov	r0, r3
 800277e:	f004 fb2b 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002788:	e014      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800278a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800278e:	3330      	adds	r3, #48	; 0x30
 8002790:	4618      	mov	r0, r3
 8002792:	f004 fbb9 	bl	8006f08 <RCCEx_PLL3_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800279c:	e00a      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80027a6:	bf00      	nop
 80027a8:	e004      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80027aa:	bf00      	nop
 80027ac:	e002      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80027ae:	bf00      	nop
 80027b0:	e000      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80027b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10d      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80027bc:	4b56      	ldr	r3, [pc, #344]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80027be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027c2:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80027c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ce:	4a52      	ldr	r2, [pc, #328]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80027d0:	430b      	orrs	r3, r1
 80027d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027d6:	e003      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80027dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80027e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80027ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027f6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027fa:	460b      	mov	r3, r1
 80027fc:	4313      	orrs	r3, r2
 80027fe:	d044      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002800:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	2b05      	cmp	r3, #5
 800280a:	d823      	bhi.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800280c:	a201      	add	r2, pc, #4	; (adr r2, 8002814 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	0800285d 	.word	0x0800285d
 8002818:	0800282d 	.word	0x0800282d
 800281c:	08002841 	.word	0x08002841
 8002820:	0800285d 	.word	0x0800285d
 8002824:	0800285d 	.word	0x0800285d
 8002828:	0800285d 	.word	0x0800285d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800282c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002830:	3308      	adds	r3, #8
 8002832:	4618      	mov	r0, r3
 8002834:	f004 fad0 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002838:	4603      	mov	r3, r0
 800283a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800283e:	e00e      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002840:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002844:	3330      	adds	r3, #48	; 0x30
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fb5e 	bl	8006f08 <RCCEx_PLL3_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8002852:	e004      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800285a:	e000      	b.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800285c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800285e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002868:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800286c:	f023 0107 	bic.w	r1, r3, #7
 8002870:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002878:	4a27      	ldr	r2, [pc, #156]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800287a:	430b      	orrs	r3, r1
 800287c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002880:	e003      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002882:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002886:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800288a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002896:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80028a0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80028a4:	460b      	mov	r3, r1
 80028a6:	4313      	orrs	r3, r2
 80028a8:	d04f      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80028aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	2b50      	cmp	r3, #80	; 0x50
 80028b4:	d029      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80028b6:	2b50      	cmp	r3, #80	; 0x50
 80028b8:	d823      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d027      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80028be:	2b40      	cmp	r3, #64	; 0x40
 80028c0:	d81f      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80028c2:	2b30      	cmp	r3, #48	; 0x30
 80028c4:	d025      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80028c6:	2b30      	cmp	r3, #48	; 0x30
 80028c8:	d81b      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d00f      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d817      	bhi.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d022      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d113      	bne.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028de:	3308      	adds	r3, #8
 80028e0:	4618      	mov	r0, r3
 80028e2:	f004 fa79 	bl	8006dd8 <RCCEx_PLL2_Config>
 80028e6:	4603      	mov	r3, r0
 80028e8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80028ec:	e017      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028f2:	3330      	adds	r3, #48	; 0x30
 80028f4:	4618      	mov	r0, r3
 80028f6:	f004 fb07 	bl	8006f08 <RCCEx_PLL3_Config>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002900:	e00d      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002908:	e009      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800290a:	bf00      	nop
 800290c:	e007      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800290e:	bf00      	nop
 8002910:	e005      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002912:	bf00      	nop
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8002916:	bf00      	nop
 8002918:	44020c00 	.word	0x44020c00
        break;
 800291c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10d      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8002926:	4baf      	ldr	r3, [pc, #700]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002928:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800292c:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	4aaa      	ldr	r2, [pc, #680]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800293a:	430b      	orrs	r3, r1
 800293c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002940:	e003      	b.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002942:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002946:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002956:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800295a:	2300      	movs	r3, #0
 800295c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002960:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002964:	460b      	mov	r3, r1
 8002966:	4313      	orrs	r3, r2
 8002968:	d055      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800296a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800296e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002972:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002976:	d031      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002978:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800297c:	d82a      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800297e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002982:	d02d      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002988:	d824      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800298a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800298e:	d029      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002994:	d81e      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002996:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800299a:	d011      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800299c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a0:	d818      	bhi.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d020      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80029a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029aa:	d113      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029b0:	3308      	adds	r3, #8
 80029b2:	4618      	mov	r0, r3
 80029b4:	f004 fa10 	bl	8006dd8 <RCCEx_PLL2_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80029be:	e014      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80029c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029c4:	3330      	adds	r3, #48	; 0x30
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fa9e 	bl	8006f08 <RCCEx_PLL3_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80029d2:	e00a      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80029da:	e006      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80029dc:	bf00      	nop
 80029de:	e004      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80029e0:	bf00      	nop
 80029e2:	e002      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80029e4:	bf00      	nop
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80029e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029ea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80029f2:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80029f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80029fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a04:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a06:	430b      	orrs	r3, r1
 8002a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a0c:	e003      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a12:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002a2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002a30:	460b      	mov	r3, r1
 8002a32:	4313      	orrs	r3, r2
 8002a34:	d03d      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a42:	d01b      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8002a44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a48:	d814      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002a4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a4e:	d017      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002a50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a54:	d80e      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d014      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8002a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a64:	3330      	adds	r3, #48	; 0x30
 8002a66:	4618      	mov	r0, r3
 8002a68:	f004 fa4e 	bl	8006f08 <RCCEx_PLL3_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002a72:	e008      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a7a:	e004      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002a7c:	bf00      	nop
 8002a7e:	e002      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002a80:	bf00      	nop
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002a8e:	4b55      	ldr	r3, [pc, #340]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002a94:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa0:	4a50      	ldr	r2, [pc, #320]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002aa8:	e003      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002aae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ac8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	d03d      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ade:	d01b      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8002ae0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ae4:	d814      	bhi.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002ae6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002aea:	d017      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8002aec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af0:	d80e      	bhi.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d014      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8002af6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afa:	d109      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b00:	3330      	adds	r3, #48	; 0x30
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fa00 	bl	8006f08 <RCCEx_PLL3_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002b0e:	e008      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b16:	e004      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002b18:	bf00      	nop
 8002b1a:	e002      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002b1c:	bf00      	nop
 8002b1e:	e000      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002b2a:	4b2e      	ldr	r3, [pc, #184]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b30:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b3c:	4a29      	ldr	r2, [pc, #164]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b44:	e003      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b64:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b68:	460b      	mov	r3, r1
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002b6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002b7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b80:	d814      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b86:	d017      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b8c:	d80e      	bhi.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d014      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b96:	d109      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b9c:	3330      	adds	r3, #48	; 0x30
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 f9b2 	bl	8006f08 <RCCEx_PLL3_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002baa:	e008      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002bb2:	e004      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d110      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002bc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002bcc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002bd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bd8:	4a02      	ldr	r2, [pc, #8]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002be0:	e006      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8002be2:	bf00      	nop
 8002be4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bec:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c06:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	d03d      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8002c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c1c:	d01b      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8002c1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c22:	d814      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c28:	d017      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c2e:	d80e      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d014      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8002c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c38:	d109      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c3e:	3330      	adds	r3, #48	; 0x30
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 f961 	bl	8006f08 <RCCEx_PLL3_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8002c4c:	e008      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c54:	e004      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10d      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002c68:	4bbe      	ldr	r3, [pc, #760]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c6e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002c72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c7a:	4aba      	ldr	r2, [pc, #744]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c82:	e003      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c84:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c88:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c94:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002c98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ca2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	d035      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8002cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002cbe:	d80e      	bhi.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d109      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cce:	3330      	adds	r3, #48	; 0x30
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 f919 	bl	8006f08 <RCCEx_PLL3_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002cdc:	e006      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002ce4:	e002      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002cf4:	4b9b      	ldr	r3, [pc, #620]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002cf6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cfa:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002cfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d06:	4a97      	ldr	r2, [pc, #604]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d14:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	2100      	movs	r1, #0
 8002d22:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002d38:	4b8a      	ldr	r3, [pc, #552]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a89      	ldr	r2, [pc, #548]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d42:	61d3      	str	r3, [r2, #28]
 8002d44:	4b87      	ldr	r3, [pc, #540]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d46:	69d9      	ldr	r1, [r3, #28]
 8002d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d4c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002d50:	4a84      	ldr	r2, [pc, #528]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d52:	430b      	orrs	r3, r1
 8002d54:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002d62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d6c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d70:	460b      	mov	r3, r1
 8002d72:	4313      	orrs	r3, r2
 8002d74:	d055      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002d7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d82:	d031      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8002d84:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002d88:	d82a      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d8e:	d02d      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d94:	d824      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d9a:	d029      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da0:	d81e      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da6:	d011      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8002da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dac:	d818      	bhi.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d020      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db6:	d113      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f004 f80a 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002dca:	e014      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002dcc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dd0:	3330      	adds	r3, #48	; 0x30
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 f898 	bl	8006f08 <RCCEx_PLL3_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002dde:	e00a      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002de6:	e006      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002de8:	bf00      	nop
 8002dea:	e004      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002dec:	bf00      	nop
 8002dee:	e002      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002df0:	bf00      	nop
 8002df2:	e000      	b.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10d      	bne.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002dfe:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002e00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e04:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002e08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e10:	4a54      	ldr	r2, [pc, #336]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002e12:	430b      	orrs	r3, r1
 8002e14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002e18:	e003      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e1e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002e2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e32:	2300      	movs	r3, #0
 8002e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e38:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	d055      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e4a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e4e:	d031      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8002e50:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e54:	d82a      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002e56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5a:	d02d      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e60:	d824      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002e62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e66:	d029      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8002e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e6c:	d81e      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002e6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e72:	d011      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8002e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e78:	d818      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d020      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	d113      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e88:	3308      	adds	r3, #8
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 ffa4 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002e96:	e014      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e9c:	3330      	adds	r3, #48	; 0x30
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 f832 	bl	8006f08 <RCCEx_PLL3_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002eaa:	e00a      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002eb2:	e006      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002eb4:	bf00      	nop
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002eb8:	bf00      	nop
 8002eba:	e002      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002ecc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ed0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ed8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ee4:	e003      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002eea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8002eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8002efc:	f003 0320 	and.w	r3, r3, #32
 8002f00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	d057      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8002f0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f1a:	d033      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8002f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f20:	d82c      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002f22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f26:	d02f      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8002f28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f2c:	d826      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002f2e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f32:	d02b      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8002f34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f38:	d820      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002f3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f3e:	d013      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f44:	d81a      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d022      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8002f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f54:	3308      	adds	r3, #8
 8002f56:	4618      	mov	r0, r3
 8002f58:	f003 ff3e 	bl	8006dd8 <RCCEx_PLL2_Config>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8002f62:	e016      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8002f64:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f6c:	3330      	adds	r3, #48	; 0x30
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f003 ffca 	bl	8006f08 <RCCEx_PLL3_Config>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f82:	e006      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002f84:	bf00      	nop
 8002f86:	e004      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002f88:	bf00      	nop
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8002f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f92:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10d      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8002f9a:	4bbb      	ldr	r3, [pc, #748]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002f9c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002fa0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002fa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fac:	4ab6      	ldr	r2, [pc, #728]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002fb4:	e003      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002fba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8002fbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8002fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002fd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	d055      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8002fde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fe6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002fea:	d031      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8002fec:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8002ff0:	d82a      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ff6:	d02d      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8002ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffc:	d824      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8002ffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003002:	d029      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8003004:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003008:	d81e      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800300a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800300e:	d011      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003010:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003014:	d818      	bhi.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d020      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800301a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301e:	d113      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003020:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003024:	3308      	adds	r3, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fed6 	bl	8006dd8 <RCCEx_PLL2_Config>
 800302c:	4603      	mov	r3, r0
 800302e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003032:	e014      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003038:	3330      	adds	r3, #48	; 0x30
 800303a:	4618      	mov	r0, r3
 800303c:	f003 ff64 	bl	8006f08 <RCCEx_PLL3_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8003046:	e00a      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800304e:	e006      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003050:	bf00      	nop
 8003052:	e004      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003054:	bf00      	nop
 8003056:	e002      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800305c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10d      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8003066:	4b88      	ldr	r3, [pc, #544]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003068:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800306c:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8003070:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003078:	4a83      	ldr	r2, [pc, #524]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800307a:	430b      	orrs	r3, r1
 800307c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003082:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003086:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800308a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	2100      	movs	r1, #0
 8003094:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80030a4:	460b      	mov	r3, r1
 80030a6:	4313      	orrs	r3, r2
 80030a8:	d055      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80030aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030b2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030b6:	d031      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80030b8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80030bc:	d82a      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80030be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c2:	d02d      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80030c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030c8:	d824      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80030ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ce:	d029      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80030d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030d4:	d81e      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80030d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030da:	d011      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80030dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030e0:	d818      	bhi.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d020      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80030e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030ea:	d113      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030f0:	3308      	adds	r3, #8
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fe70 	bl	8006dd8 <RCCEx_PLL2_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80030fe:	e014      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003100:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003104:	3330      	adds	r3, #48	; 0x30
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fefe 	bl	8006f08 <RCCEx_PLL3_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003112:	e00a      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800311a:	e006      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800311c:	bf00      	nop
 800311e:	e004      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003120:	bf00      	nop
 8003122:	e002      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003124:	bf00      	nop
 8003126:	e000      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8003128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8003132:	4b55      	ldr	r3, [pc, #340]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003134:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003138:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800313c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003144:	4a50      	ldr	r2, [pc, #320]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003146:	430b      	orrs	r3, r1
 8003148:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800314c:	e003      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003152:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003156:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	2100      	movs	r1, #0
 8003160:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800316c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003170:	460b      	mov	r3, r1
 8003172:	4313      	orrs	r3, r2
 8003174:	d055      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8003176:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800317a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800317e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003182:	d031      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8003184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003188:	d82a      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d02d      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d824      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800319a:	d029      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 800319c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031a0:	d81e      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80031a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a6:	d011      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80031a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ac:	d818      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d020      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80031b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b6:	d113      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031bc:	3308      	adds	r3, #8
 80031be:	4618      	mov	r0, r3
 80031c0:	f003 fe0a 	bl	8006dd8 <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80031ca:	e014      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80031cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031d0:	3330      	adds	r3, #48	; 0x30
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 fe98 	bl	8006f08 <RCCEx_PLL3_Config>
 80031d8:	4603      	mov	r3, r0
 80031da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80031de:	e00a      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031e6:	e006      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80031e8:	bf00      	nop
 80031ea:	e004      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80031ec:	bf00      	nop
 80031ee:	e002      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80031f0:	bf00      	nop
 80031f2:	e000      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 80031f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10d      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80031fe:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003200:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003204:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003208:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800320c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003212:	430b      	orrs	r3, r1
 8003214:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800321e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003222:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800322e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003238:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800323c:	460b      	mov	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	d055      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8003242:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003246:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800324a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800324e:	d035      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8003250:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003254:	d82e      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003256:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800325a:	d031      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 800325c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003260:	d828      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8003262:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003266:	d01b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8003268:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800326c:	d822      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d009      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003278:	e01c      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327a:	4b03      	ldr	r3, [pc, #12]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	4a02      	ldr	r2, [pc, #8]	; (8003288 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003286:	e01c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003288:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800328c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003290:	3308      	adds	r3, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fda0 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800329e:	e010      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80032a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032a4:	3330      	adds	r3, #48	; 0x30
 80032a6:	4618      	mov	r0, r3
 80032a8:	f003 fe2e 	bl	8006f08 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80032b2:	e006      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80032c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10d      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80032ca:	4bc3      	ldr	r3, [pc, #780]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80032cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032d0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80032d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032dc:	4abe      	ldr	r2, [pc, #760]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80032de:	430b      	orrs	r3, r1
 80032e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80032ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80032fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003304:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003308:	460b      	mov	r3, r1
 800330a:	4313      	orrs	r3, r2
 800330c:	d051      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800330e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003312:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331a:	d033      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800331c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003320:	d82c      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8003322:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003326:	d02d      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8003328:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800332c:	d826      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d019      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8003334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003338:	d820      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800333e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003342:	d007      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8003344:	e01a      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003346:	4ba4      	ldr	r3, [pc, #656]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	4aa3      	ldr	r2, [pc, #652]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800334c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003350:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003352:	e018      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003354:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003358:	3308      	adds	r3, #8
 800335a:	4618      	mov	r0, r3
 800335c:	f003 fd3c 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003366:	e00e      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800336c:	3330      	adds	r3, #48	; 0x30
 800336e:	4618      	mov	r0, r3
 8003370:	f003 fdca 	bl	8006f08 <RCCEx_PLL3_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800337a:	e004      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003382:	e000      	b.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8003384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10d      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003394:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80033a0:	4a8d      	ldr	r2, [pc, #564]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033a8:	e003      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80033ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80033b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80033be:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c0:	2300      	movs	r3, #0
 80033c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80033c4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80033c8:	460b      	mov	r3, r1
 80033ca:	4313      	orrs	r3, r2
 80033cc:	d032      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80033ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033d2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80033d6:	2b05      	cmp	r3, #5
 80033d8:	d80f      	bhi.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d211      	bcs.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d911      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d109      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033ea:	3308      	adds	r3, #8
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 fcf3 	bl	8006dd8 <RCCEx_PLL2_Config>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80033f8:	e006      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003400:	e002      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003402:	bf00      	nop
 8003404:	e000      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8003406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003408:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10d      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003410:	4b71      	ldr	r3, [pc, #452]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003416:	f023 0107 	bic.w	r1, r3, #7
 800341a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800341e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003422:	4a6d      	ldr	r2, [pc, #436]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003424:	430b      	orrs	r3, r1
 8003426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800342a:	e003      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003430:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003434:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	2100      	movs	r1, #0
 800343e:	6739      	str	r1, [r7, #112]	; 0x70
 8003440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003444:	677b      	str	r3, [r7, #116]	; 0x74
 8003446:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d024      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8003450:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800345c:	2b08      	cmp	r3, #8
 800345e:	d005      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003466:	e002      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8003468:	bf00      	nop
 800346a:	e000      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800346c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10d      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003476:	4b58      	ldr	r3, [pc, #352]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003478:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800347c:	f023 0108 	bic.w	r1, r3, #8
 8003480:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003484:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003488:	4a53      	ldr	r2, [pc, #332]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800348a:	430b      	orrs	r3, r1
 800348c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003496:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800349a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80034a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a8:	2300      	movs	r3, #0
 80034aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034ac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80034b0:	460b      	mov	r3, r1
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f000 80b9 	beq.w	800362a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80034b8:	4b48      	ldr	r3, [pc, #288]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	4a47      	ldr	r2, [pc, #284]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034c4:	f7fd fb6e 	bl	8000ba4 <HAL_GetTick>
 80034c8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034cc:	e00b      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7fd fb69 	bl	8000ba4 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d903      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034e4:	e005      	b.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034e6:	4b3d      	ldr	r3, [pc, #244]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ed      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80034f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8093 	bne.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80034fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800350a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d023      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8003512:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003516:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 800351a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800351e:	4293      	cmp	r3, r2
 8003520:	d01b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003536:	4a28      	ldr	r2, [pc, #160]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800354c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003550:	4a21      	ldr	r2, [pc, #132]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003552:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003556:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800355a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003566:	f7fd fb1d 	bl	8000ba4 <HAL_GetTick>
 800356a:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	e00d      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fd fb18 	bl	8000ba4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800357a:	1ad2      	subs	r2, r2, r3
 800357c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003580:	429a      	cmp	r2, r3
 8003582:	d903      	bls.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 800358a:	e006      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800358e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ea      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800359a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d13a      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80035a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035a6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80035aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b2:	d115      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80035bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80035c0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80035ce:	4a02      	ldr	r2, [pc, #8]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	61d3      	str	r3, [r2, #28]
 80035d4:	e00a      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80035d6:	bf00      	nop
 80035d8:	44020c00 	.word	0x44020c00
 80035dc:	44020800 	.word	0x44020800
 80035e0:	4b9f      	ldr	r3, [pc, #636]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a9e      	ldr	r2, [pc, #632]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035ea:	61d3      	str	r3, [r2, #28]
 80035ec:	4b9c      	ldr	r3, [pc, #624]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f2:	4a9b      	ldr	r2, [pc, #620]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035fc:	4b98      	ldr	r3, [pc, #608]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80035fe:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003602:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003606:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	4a94      	ldr	r2, [pc, #592]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003610:	430b      	orrs	r3, r1
 8003612:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003616:	e008      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003618:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800361c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003626:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800362a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003636:	663b      	str	r3, [r7, #96]	; 0x60
 8003638:	2300      	movs	r3, #0
 800363a:	667b      	str	r3, [r7, #100]	; 0x64
 800363c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003640:	460b      	mov	r3, r1
 8003642:	4313      	orrs	r3, r2
 8003644:	d035      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003646:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800364a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800364e:	2b30      	cmp	r3, #48	; 0x30
 8003650:	d014      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8003652:	2b30      	cmp	r3, #48	; 0x30
 8003654:	d80e      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8003656:	2b20      	cmp	r3, #32
 8003658:	d012      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800365a:	2b20      	cmp	r3, #32
 800365c:	d80a      	bhi.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003662:	2b10      	cmp	r3, #16
 8003664:	d106      	bne.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003666:	4b7e      	ldr	r3, [pc, #504]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800366c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003670:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800367a:	e004      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003686:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800368e:	4b74      	ldr	r3, [pc, #464]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003690:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003694:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800369c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036a0:	4a6f      	ldr	r2, [pc, #444]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036be:	65bb      	str	r3, [r7, #88]	; 0x58
 80036c0:	2300      	movs	r3, #0
 80036c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036c4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d033      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80036ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036d2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d007      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80036de:	e010      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e0:	4b5f      	ldr	r3, [pc, #380]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	4a5e      	ldr	r2, [pc, #376]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ea:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80036ec:	e00d      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80036ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036f2:	3308      	adds	r3, #8
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fb6f 	bl	8006dd8 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10d      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003718:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800371c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003720:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8003724:	4a4e      	ldr	r2, [pc, #312]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003726:	430b      	orrs	r3, r1
 8003728:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003732:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003736:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003742:	653b      	str	r3, [r7, #80]	; 0x50
 8003744:	2300      	movs	r3, #0
 8003746:	657b      	str	r3, [r7, #84]	; 0x54
 8003748:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d033      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8003752:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003756:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d007      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8003762:	e010      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	4a3d      	ldr	r2, [pc, #244]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800376e:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003770:	e00d      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003772:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003776:	3308      	adds	r3, #8
 8003778:	4618      	mov	r0, r3
 800377a:	f003 fb2d 	bl	8006dd8 <RCCEx_PLL2_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8003784:	e003      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800378c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800378e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8003796:	4b32      	ldr	r3, [pc, #200]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003798:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800379c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80037a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037a8:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80037aa:	430b      	orrs	r3, r1
 80037ac:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80037b0:	e003      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037b6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80037ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80037c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c8:	2300      	movs	r3, #0
 80037ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80037d0:	460b      	mov	r3, r1
 80037d2:	4313      	orrs	r3, r2
 80037d4:	d04a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80037d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d827      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	080037fd 	.word	0x080037fd
 80037ec:	0800380b 	.word	0x0800380b
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	0800383b 	.word	0x0800383b
 80037f8:	0800383b 	.word	0x0800383b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003806:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003808:	e018      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800380a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800380e:	3308      	adds	r3, #8
 8003810:	4618      	mov	r0, r3
 8003812:	f003 fae1 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800381c:	e00e      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800381e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003822:	3330      	adds	r3, #48	; 0x30
 8003824:	4618      	mov	r0, r3
 8003826:	f003 fb6f 	bl	8006f08 <RCCEx_PLL3_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003830:	e004      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003838:	e000      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800383a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800383c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384a:	f023 0107 	bic.w	r1, r3, #7
 800384e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003856:	4a02      	ldr	r2, [pc, #8]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003858:	430b      	orrs	r3, r1
 800385a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800385e:	e005      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8003860:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003868:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800386c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003878:	643b      	str	r3, [r7, #64]	; 0x40
 800387a:	2300      	movs	r3, #0
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
 800387e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	f000 8081 	beq.w	800398c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800388a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800388e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003892:	2b20      	cmp	r3, #32
 8003894:	d85f      	bhi.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	08003921 	.word	0x08003921
 80038a0:	08003957 	.word	0x08003957
 80038a4:	08003957 	.word	0x08003957
 80038a8:	08003957 	.word	0x08003957
 80038ac:	08003957 	.word	0x08003957
 80038b0:	08003957 	.word	0x08003957
 80038b4:	08003957 	.word	0x08003957
 80038b8:	08003957 	.word	0x08003957
 80038bc:	0800392f 	.word	0x0800392f
 80038c0:	08003957 	.word	0x08003957
 80038c4:	08003957 	.word	0x08003957
 80038c8:	08003957 	.word	0x08003957
 80038cc:	08003957 	.word	0x08003957
 80038d0:	08003957 	.word	0x08003957
 80038d4:	08003957 	.word	0x08003957
 80038d8:	08003957 	.word	0x08003957
 80038dc:	08003943 	.word	0x08003943
 80038e0:	08003957 	.word	0x08003957
 80038e4:	08003957 	.word	0x08003957
 80038e8:	08003957 	.word	0x08003957
 80038ec:	08003957 	.word	0x08003957
 80038f0:	08003957 	.word	0x08003957
 80038f4:	08003957 	.word	0x08003957
 80038f8:	08003957 	.word	0x08003957
 80038fc:	0800395f 	.word	0x0800395f
 8003900:	08003957 	.word	0x08003957
 8003904:	08003957 	.word	0x08003957
 8003908:	08003957 	.word	0x08003957
 800390c:	08003957 	.word	0x08003957
 8003910:	08003957 	.word	0x08003957
 8003914:	08003957 	.word	0x08003957
 8003918:	08003957 	.word	0x08003957
 800391c:	0800395f 	.word	0x0800395f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4bab      	ldr	r3, [pc, #684]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	4aaa      	ldr	r2, [pc, #680]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800392a:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800392c:	e018      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800392e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003932:	3308      	adds	r3, #8
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fa4f 	bl	8006dd8 <RCCEx_PLL2_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003940:	e00e      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003942:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003946:	3330      	adds	r3, #48	; 0x30
 8003948:	4618      	mov	r0, r3
 800394a:	f003 fadd 	bl	8006f08 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800395e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003960:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10d      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003968:	4b99      	ldr	r3, [pc, #612]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800396a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800396e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003972:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800397a:	4a95      	ldr	r2, [pc, #596]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800397c:	430b      	orrs	r3, r1
 800397e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003982:	e003      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003984:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003988:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800398c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003994:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
 800399a:	2300      	movs	r3, #0
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800399e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d04e      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80039a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d02e      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ba:	d827      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80039bc:	2bc0      	cmp	r3, #192	; 0xc0
 80039be:	d02b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80039c0:	2bc0      	cmp	r3, #192	; 0xc0
 80039c2:	d823      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d017      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d81f      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d002      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80039d0:	2b40      	cmp	r3, #64	; 0x40
 80039d2:	d007      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80039d4:	e01a      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d6:	4b7e      	ldr	r3, [pc, #504]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	4a7d      	ldr	r2, [pc, #500]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039e2:	e01a      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039e8:	3308      	adds	r3, #8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f003 f9f4 	bl	8006dd8 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80039f6:	e010      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039fc:	3330      	adds	r3, #48	; 0x30
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fa82 	bl	8006f08 <RCCEx_PLL3_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a0a:	e006      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a12:	e002      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003a14:	bf00      	nop
 8003a16:	e000      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003a22:	4b6b      	ldr	r3, [pc, #428]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003a2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a34:	4a66      	ldr	r2, [pc, #408]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a3c:	e003      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a42:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003a46:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
 8003a58:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	d055      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003a6a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a6e:	d031      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8003a70:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003a74:	d82a      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7a:	d02d      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8003a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a80:	d824      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003a82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a86:	d029      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8003a88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a8c:	d81e      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d011      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8003a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a98:	d818      	bhi.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8003a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa2:	d113      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 f994 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003abc:	3330      	adds	r3, #48	; 0x30
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f003 fa22 	bl	8006f08 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ad2:	e006      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003ad4:	bf00      	nop
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003ad8:	bf00      	nop
 8003ada:	e002      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10d      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af0:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003af8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003afc:	4a34      	ldr	r2, [pc, #208]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b0a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8003b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003b1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b20:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003b24:	460b      	mov	r3, r1
 8003b26:	4313      	orrs	r3, r2
 8003b28:	d058      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8003b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b32:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b36:	d031      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8003b38:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003b3c:	d82a      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b42:	d02d      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8003b44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b48:	d824      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003b4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b4e:	d029      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8003b50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b54:	d81e      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003b56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5a:	d011      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8003b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b60:	d818      	bhi.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d020      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8003b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6a:	d113      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b70:	3308      	adds	r3, #8
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 f930 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e014      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b84:	3330      	adds	r3, #48	; 0x30
 8003b86:	4618      	mov	r0, r3
 8003b88:	f003 f9be 	bl	8006f08 <RCCEx_PLL3_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003b92:	e00a      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b9a:	e006      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003b9c:	bf00      	nop
 8003b9e:	e004      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ba0:	bf00      	nop
 8003ba2:	e002      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e000      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003baa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8003bb2:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003bb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bc4:	4902      	ldr	r1, [pc, #8]	; (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003bcc:	e006      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8003bce:	bf00      	nop
 8003bd0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bd8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	2100      	movs	r1, #0
 8003be6:	6239      	str	r1, [r7, #32]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
 8003bee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	d055      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8003bf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c00:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003c04:	d031      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8003c06:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003c0a:	d82a      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c10:	d02d      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8003c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c16:	d824      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003c18:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003c1c:	d029      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8003c1e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003c22:	d81e      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d011      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8003c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2e:	d818      	bhi.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8003c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c38:	d113      	bne.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c3e:	3308      	adds	r3, #8
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 f8c9 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c4c:	e014      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c52:	3330      	adds	r3, #48	; 0x30
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 f957 	bl	8006f08 <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c60:	e00a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c68:	e006      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e004      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e002      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003c72:	bf00      	nop
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c78:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8003c80:	4b88      	ldr	r3, [pc, #544]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c86:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8003c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c92:	4984      	ldr	r1, [pc, #528]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ca0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	2100      	movs	r1, #0
 8003cae:	61b9      	str	r1, [r7, #24]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	61fb      	str	r3, [r7, #28]
 8003cb6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	d03d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d81c      	bhi.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003d0f 	.word	0x08003d0f
 8003cd8:	08003ce5 	.word	0x08003ce5
 8003cdc:	08003cf3 	.word	0x08003cf3
 8003ce0:	08003d0f 	.word	0x08003d0f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cee:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f003 f86d 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003d04:	e004      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d0c:	e000      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8003d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d10:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10d      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003d18:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d2a:	495e      	ldr	r1, [pc, #376]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003d32:	e003      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d38:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d44:	2100      	movs	r1, #0
 8003d46:	6139      	str	r1, [r7, #16]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003d52:	460b      	mov	r3, r1
 8003d54:	4313      	orrs	r3, r2
 8003d56:	d03a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d5c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003d60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d64:	d00e      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8003d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6a:	d815      	bhi.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d017      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8003d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d74:	d110      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d76:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d80:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d82:	e00e      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d88:	3308      	adds	r3, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f003 f824 	bl	8006dd8 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8003da0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003daa:	4b3e      	ldr	r3, [pc, #248]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003db4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003db8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dbc:	4939      	ldr	r1, [pc, #228]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003dc4:	e003      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	f003 0310 	and.w	r3, r3, #16
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003de4:	460b      	mov	r3, r1
 8003de6:	4313      	orrs	r3, r2
 8003de8:	d038      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003dea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dee:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003df2:	2b30      	cmp	r3, #48	; 0x30
 8003df4:	d01b      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8003df6:	2b30      	cmp	r3, #48	; 0x30
 8003df8:	d815      	bhi.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8003dfa:	2b10      	cmp	r3, #16
 8003dfc:	d002      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d007      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8003e02:	e010      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	4a26      	ldr	r2, [pc, #152]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e10:	e00e      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e16:	3330      	adds	r3, #48	; 0x30
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f003 f875 	bl	8006f08 <RCCEx_PLL3_Config>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003e24:	e004      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e2c:	e000      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8003e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e30:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003e38:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e46:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e4a:	4916      	ldr	r1, [pc, #88]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003e52:	e003      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e54:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e58:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e64:	2100      	movs	r1, #0
 8003e66:	6039      	str	r1, [r7, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	607b      	str	r3, [r7, #4]
 8003e6e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e72:	460b      	mov	r3, r1
 8003e74:	4313      	orrs	r3, r2
 8003e76:	d00c      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003e78:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e86:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003e8a:	4906      	ldr	r1, [pc, #24]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8003e92:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea2:	bf00      	nop
 8003ea4:	44020c00 	.word	0x44020c00

08003ea8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b08b      	sub	sp, #44	; 0x2c
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003eb0:	4bad      	ldr	r3, [pc, #692]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003eba:	4bab      	ldr	r3, [pc, #684]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003ec4:	4ba8      	ldr	r3, [pc, #672]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ece:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003ed0:	4ba5      	ldr	r3, [pc, #660]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003eda:	4ba3      	ldr	r3, [pc, #652]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	08db      	lsrs	r3, r3, #3
 8003ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	fb02 f303 	mul.w	r3, r2, r3
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 8126 	beq.w	800414a <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	2b03      	cmp	r3, #3
 8003f02:	d053      	beq.n	8003fac <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d86f      	bhi.n	8003fea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d02b      	beq.n	8003f6e <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003f16:	e068      	b.n	8003fea <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003f18:	4b93      	ldr	r3, [pc, #588]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	08db      	lsrs	r3, r3, #3
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	4a92      	ldr	r2, [pc, #584]	; (800416c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
 8003f28:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	ee07 3a90 	vmov	s15, r3
 8003f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	ee07 3a90 	vmov	s15, r3
 8003f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	ee07 3a90 	vmov	s15, r3
 8003f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f50:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003f54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f68:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003f6c:	e068      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f78:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004174 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8003f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8003f8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003faa:	e049      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fc8:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fcc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fe4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8003fe8:	e02a      	b.n	8004040 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fea:	4b5f      	ldr	r3, [pc, #380]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	08db      	lsrs	r3, r3, #3
 8003ff0:	f003 0303 	and.w	r3, r3, #3
 8003ff4:	4a5d      	ldr	r2, [pc, #372]	; (800416c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffa:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	ee07 3a90 	vmov	s15, r3
 800400c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004022:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004170 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800403e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004040:	4b49      	ldr	r3, [pc, #292]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004048:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800404c:	d121      	bne.n	8004092 <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800404e:	4b46      	ldr	r3, [pc, #280]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d017      	beq.n	800408a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800405a:	4b43      	ldr	r3, [pc, #268]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800405c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 800406c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004070:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004074:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004080:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e006      	b.n	8004098 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e002      	b.n	8004098 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004098:	4b33      	ldr	r3, [pc, #204]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040a4:	d121      	bne.n	80040ea <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80040a6:	4b30      	ldr	r3, [pc, #192]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040b2:	4b2d      	ldr	r3, [pc, #180]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80040c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80040cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80040d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	e006      	b.n	80040f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	e002      	b.n	80040f0 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040f0:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040fc:	d121      	bne.n	8004142 <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	0e1b      	lsrs	r3, r3, #24
 8004110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004114:	ee07 3a90 	vmov	s15, r3
 8004118:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800411c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004120:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004124:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800412c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004130:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004138:	e010      	b.n	800415c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
}
 8004140:	e00c      	b.n	800415c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	e008      	b.n	800415c <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	372c      	adds	r7, #44	; 0x2c
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	44020c00 	.word	0x44020c00
 800416c:	03d09000 	.word	0x03d09000
 8004170:	46000000 	.word	0x46000000
 8004174:	4a742400 	.word	0x4a742400
 8004178:	4bbebc20 	.word	0x4bbebc20

0800417c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 800417c:	b480      	push	{r7}
 800417e:	b08b      	sub	sp, #44	; 0x2c
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004184:	4bad      	ldr	r3, [pc, #692]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418c:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800418e:	4bab      	ldr	r3, [pc, #684]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004198:	4ba8      	ldr	r3, [pc, #672]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	0a1b      	lsrs	r3, r3, #8
 800419e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a2:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80041a4:	4ba5      	ldr	r3, [pc, #660]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80041ae:	4ba3      	ldr	r3, [pc, #652]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	08db      	lsrs	r3, r3, #3
 80041b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041b8:	697a      	ldr	r2, [r7, #20]
 80041ba:	fb02 f303 	mul.w	r3, r2, r3
 80041be:	ee07 3a90 	vmov	s15, r3
 80041c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041c6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 8126 	beq.w	800441e <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d053      	beq.n	8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d86f      	bhi.n	80042be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d02b      	beq.n	8004242 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 80041ea:	e068      	b.n	80042be <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80041ec:	4b93      	ldr	r3, [pc, #588]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	08db      	lsrs	r3, r3, #3
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	4a92      	ldr	r2, [pc, #584]	; (8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80041f8:	fa22 f303 	lsr.w	r3, r2, r3
 80041fc:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	ee07 3a90 	vmov	s15, r3
 8004204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004220:	ed97 6a04 	vldr	s12, [r7, #16]
 8004224:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800422c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800423c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004240:	e068      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	ee07 3a90 	vmov	s15, r3
 8004248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8004448 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	ee07 3a90 	vmov	s15, r3
 800425a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004262:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800426a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800427e:	e049      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	ee07 3a90 	vmov	s15, r3
 8004286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800444c <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 800428e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	ee07 3a90 	vmov	s15, r3
 8004298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429c:	ed97 6a04 	vldr	s12, [r7, #16]
 80042a0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80042a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80042bc:	e02a      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80042be:	4b5f      	ldr	r3, [pc, #380]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	08db      	lsrs	r3, r3, #3
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	4a5d      	ldr	r2, [pc, #372]	; (8004440 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80042ca:	fa22 f303 	lsr.w	r3, r2, r3
 80042ce:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80042f6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004444 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004312:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004314:	4b49      	ldr	r3, [pc, #292]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800431c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004320:	d121      	bne.n	8004366 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004322:	4b46      	ldr	r3, [pc, #280]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d017      	beq.n	800435e <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800432e:	4b43      	ldr	r3, [pc, #268]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	0a5b      	lsrs	r3, r3, #9
 8004334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004344:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004348:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800434c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004354:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	e006      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e002      	b.n	800436c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800436c:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004378:	d121      	bne.n	80043be <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800437a:	4b30      	ldr	r3, [pc, #192]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d017      	beq.n	80043b6 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004386:	4b2d      	ldr	r3, [pc, #180]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438a:	0c1b      	lsrs	r3, r3, #16
 800438c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004390:	ee07 3a90 	vmov	s15, r3
 8004394:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800439c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80043a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ac:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	e006      	b.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	e002      	b.n	80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043c4:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043d0:	d121      	bne.n	8004416 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d017      	beq.n	800440e <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	0e1b      	lsrs	r3, r3, #24
 80043e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043e8:	ee07 3a90 	vmov	s15, r3
 80043ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80043f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80043fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004400:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004404:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800440c:	e010      	b.n	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	e00c      	b.n	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	609a      	str	r2, [r3, #8]
}
 800441c:	e008      	b.n	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
}
 8004430:	bf00      	nop
 8004432:	372c      	adds	r7, #44	; 0x2c
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	44020c00 	.word	0x44020c00
 8004440:	03d09000 	.word	0x03d09000
 8004444:	46000000 	.word	0x46000000
 8004448:	4a742400 	.word	0x4a742400
 800444c:	4bbebc20 	.word	0x4bbebc20

08004450 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8004450:	b480      	push	{r7}
 8004452:	b08b      	sub	sp, #44	; 0x2c
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8004458:	4bad      	ldr	r3, [pc, #692]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004460:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8004462:	4bab      	ldr	r3, [pc, #684]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800446c:	4ba8      	ldr	r3, [pc, #672]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	0a1b      	lsrs	r3, r3, #8
 8004472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004476:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004478:	4ba5      	ldr	r3, [pc, #660]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8004482:	4ba3      	ldr	r3, [pc, #652]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004486:	08db      	lsrs	r3, r3, #3
 8004488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8126 	beq.w	80046f2 <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d053      	beq.n	8004554 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d86f      	bhi.n	8004592 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d02b      	beq.n	8004516 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80044be:	e068      	b.n	8004592 <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80044c0:	4b93      	ldr	r3, [pc, #588]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	08db      	lsrs	r3, r3, #3
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	4a92      	ldr	r2, [pc, #584]	; (8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
 80044d0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	ee07 3a90 	vmov	s15, r3
 80044d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f4:	ed97 6a04 	vldr	s12, [r7, #16]
 80044f8:	eddf 5a87 	vldr	s11, [pc, #540]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80044fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004500:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004508:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800450c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004510:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8004514:	e068      	b.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004520:	eddf 6a7e 	vldr	s13, [pc, #504]	; 800471c <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8004524:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	ee07 3a90 	vmov	s15, r3
 800452e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004532:	ed97 6a04 	vldr	s12, [r7, #16]
 8004536:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800453a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800453e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004542:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800454a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004552:	e049      	b.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	ee07 3a90 	vmov	s15, r3
 800455a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800455e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8004562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	ee07 3a90 	vmov	s15, r3
 800456c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004570:	ed97 6a04 	vldr	s12, [r7, #16]
 8004574:	eddf 5a68 	vldr	s11, [pc, #416]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800457c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800458c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004590:	e02a      	b.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004592:	4b5f      	ldr	r3, [pc, #380]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	08db      	lsrs	r3, r3, #3
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	4a5d      	ldr	r2, [pc, #372]	; (8004714 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800459e:	fa22 f303 	lsr.w	r3, r2, r3
 80045a2:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	ee07 3a90 	vmov	s15, r3
 80045b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a04 	vldr	s12, [r7, #16]
 80045ca:	eddf 5a53 	vldr	s11, [pc, #332]	; 8004718 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80045e6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80045e8:	4b49      	ldr	r3, [pc, #292]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045f4:	d121      	bne.n	800463a <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80045f6:	4b46      	ldr	r3, [pc, #280]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8004602:	4b43      	ldr	r3, [pc, #268]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	0a5b      	lsrs	r3, r3, #9
 8004608:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8004614:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004618:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800461c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004628:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004640:	4b33      	ldr	r3, [pc, #204]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800464c:	d121      	bne.n	8004692 <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800465a:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800465c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800466c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004670:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004674:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004680:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	605a      	str	r2, [r3, #4]
 8004688:	e006      	b.n	8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	e002      	b.n	8004698 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004698:	4b1d      	ldr	r3, [pc, #116]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a4:	d121      	bne.n	80046ea <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80046a6:	4b1a      	ldr	r3, [pc, #104]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d017      	beq.n	80046e2 <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80046b2:	4b17      	ldr	r3, [pc, #92]	; (8004710 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	0e1b      	lsrs	r3, r3, #24
 80046b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80046c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80046cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80046d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046d8:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80046e0:	e010      	b.n	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	e00c      	b.n	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	609a      	str	r2, [r3, #8]
}
 80046f0:	e008      	b.n	8004704 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	609a      	str	r2, [r3, #8]
}
 8004704:	bf00      	nop
 8004706:	372c      	adds	r7, #44	; 0x2c
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	44020c00 	.word	0x44020c00
 8004714:	03d09000 	.word	0x03d09000
 8004718:	46000000 	.word	0x46000000
 800471c:	4a742400 	.word	0x4a742400
 8004720:	4bbebc20 	.word	0x4bbebc20

08004724 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004724:	b590      	push	{r4, r7, lr}
 8004726:	b08f      	sub	sp, #60	; 0x3c
 8004728:	af00      	add	r7, sp, #0
 800472a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800472e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004732:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8004736:	4321      	orrs	r1, r4
 8004738:	d150      	bne.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800473c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004740:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004744:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004746:	4b23      	ldr	r3, [pc, #140]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d108      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475a:	d104      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800475c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004760:	637b      	str	r3, [r7, #52]	; 0x34
 8004762:	f002 bb2a 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800476c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004774:	d108      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477c:	d104      	bne.n	8004788 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800477e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
 8004784:	f002 bb19 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004788:	4b12      	ldr	r3, [pc, #72]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004794:	d119      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800479c:	d115      	bne.n	80047ca <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800479e:	4b0d      	ldr	r3, [pc, #52]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80047a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047aa:	d30a      	bcc.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80047ac:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80047be:	f002 bafc 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80047c6:	f002 baf8 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
 80047ce:	f002 baf4 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80047d2:	bf00      	nop
 80047d4:	44020c00 	.word	0x44020c00
 80047d8:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80047dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047e0:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 80047e4:	ea50 0104 	orrs.w	r1, r0, r4
 80047e8:	f001 8275 	beq.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80047ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047f0:	2801      	cmp	r0, #1
 80047f2:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 80047f6:	f082 82dd 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80047fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047fe:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 8004802:	ea50 0104 	orrs.w	r1, r0, r4
 8004806:	f001 816c 	beq.w	8005ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800480a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800480e:	2801      	cmp	r0, #1
 8004810:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8004814:	f082 82ce 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800481c:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 8004820:	ea50 0104 	orrs.w	r1, r0, r4
 8004824:	f001 8602 	beq.w	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8004828:	e9d7 0100 	ldrd	r0, r1, [r7]
 800482c:	2801      	cmp	r0, #1
 800482e:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 8004832:	f082 82bf 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800483a:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800483e:	ea50 0104 	orrs.w	r1, r0, r4
 8004842:	f001 854c 	beq.w	80062de <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8004846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800484a:	2801      	cmp	r0, #1
 800484c:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 8004850:	f082 82b0 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004858:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 800485c:	ea50 0104 	orrs.w	r1, r0, r4
 8004860:	f001 849e 	beq.w	80061a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8004864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004868:	2801      	cmp	r0, #1
 800486a:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800486e:	f082 82a1 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004876:	f1a1 0420 	sub.w	r4, r1, #32
 800487a:	ea50 0104 	orrs.w	r1, r0, r4
 800487e:	f001 83e8 	beq.w	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8004882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004886:	2801      	cmp	r0, #1
 8004888:	f171 0120 	sbcs.w	r1, r1, #32
 800488c:	f082 8292 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004894:	f1a1 0410 	sub.w	r4, r1, #16
 8004898:	ea50 0104 	orrs.w	r1, r0, r4
 800489c:	f002 8256 	beq.w	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80048a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a4:	2801      	cmp	r0, #1
 80048a6:	f171 0110 	sbcs.w	r1, r1, #16
 80048aa:	f082 8283 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b2:	f1a1 0408 	sub.w	r4, r1, #8
 80048b6:	ea50 0104 	orrs.w	r1, r0, r4
 80048ba:	f002 81cc 	beq.w	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80048be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c2:	2801      	cmp	r0, #1
 80048c4:	f171 0108 	sbcs.w	r1, r1, #8
 80048c8:	f082 8274 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048d0:	1f0c      	subs	r4, r1, #4
 80048d2:	ea50 0104 	orrs.w	r1, r0, r4
 80048d6:	f001 8648 	beq.w	800656a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80048da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048de:	2801      	cmp	r0, #1
 80048e0:	f171 0104 	sbcs.w	r1, r1, #4
 80048e4:	f082 8266 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048ec:	1e8c      	subs	r4, r1, #2
 80048ee:	ea50 0104 	orrs.w	r1, r0, r4
 80048f2:	f002 8143 	beq.w	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80048f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048fa:	2801      	cmp	r0, #1
 80048fc:	f171 0102 	sbcs.w	r1, r1, #2
 8004900:	f082 8258 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004904:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004908:	1e4c      	subs	r4, r1, #1
 800490a:	ea50 0104 	orrs.w	r1, r0, r4
 800490e:	f002 80ce 	beq.w	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8004912:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004916:	2801      	cmp	r0, #1
 8004918:	f171 0101 	sbcs.w	r1, r1, #1
 800491c:	f082 824a 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004920:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004924:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8004928:	4321      	orrs	r1, r4
 800492a:	f002 8059 	beq.w	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800492e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004932:	4cd9      	ldr	r4, [pc, #868]	; (8004c98 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8004934:	42a0      	cmp	r0, r4
 8004936:	f171 0100 	sbcs.w	r1, r1, #0
 800493a:	f082 823b 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800493e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004942:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8004946:	4321      	orrs	r1, r4
 8004948:	f001 87d9 	beq.w	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800494c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004950:	4cd2      	ldr	r4, [pc, #840]	; (8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8004952:	42a0      	cmp	r0, r4
 8004954:	f171 0100 	sbcs.w	r1, r1, #0
 8004958:	f082 822c 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800495c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004960:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8004964:	4321      	orrs	r1, r4
 8004966:	f001 8751 	beq.w	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800496a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800496e:	4ccc      	ldr	r4, [pc, #816]	; (8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8004970:	42a0      	cmp	r0, r4
 8004972:	f171 0100 	sbcs.w	r1, r1, #0
 8004976:	f082 821d 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800497a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800497e:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8004982:	4321      	orrs	r1, r4
 8004984:	f001 869a 	beq.w	80066bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8004988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800498c:	4cc5      	ldr	r4, [pc, #788]	; (8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800498e:	42a0      	cmp	r0, r4
 8004990:	f171 0100 	sbcs.w	r1, r1, #0
 8004994:	f082 820e 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004998:	e9d7 0100 	ldrd	r0, r1, [r7]
 800499c:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80049a0:	4321      	orrs	r1, r4
 80049a2:	f001 8612 	beq.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80049a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049aa:	4cbf      	ldr	r4, [pc, #764]	; (8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	f171 0100 	sbcs.w	r1, r1, #0
 80049b2:	f082 81ff 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ba:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80049be:	4321      	orrs	r1, r4
 80049c0:	f002 817e 	beq.w	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80049c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049c8:	4cb8      	ldr	r4, [pc, #736]	; (8004cac <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80049ca:	42a0      	cmp	r0, r4
 80049cc:	f171 0100 	sbcs.w	r1, r1, #0
 80049d0:	f082 81f0 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049d8:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 80049dc:	4321      	orrs	r1, r4
 80049de:	f000 829e 	beq.w	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80049e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e6:	4cb2      	ldr	r4, [pc, #712]	; (8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	f171 0100 	sbcs.w	r1, r1, #0
 80049ee:	f082 81e1 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049f6:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 80049fa:	4321      	orrs	r1, r4
 80049fc:	f000 826d 	beq.w	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a04:	4cab      	ldr	r4, [pc, #684]	; (8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a06:	42a0      	cmp	r0, r4
 8004a08:	f171 0100 	sbcs.w	r1, r1, #0
 8004a0c:	f082 81d2 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a14:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8004a18:	4321      	orrs	r1, r4
 8004a1a:	f001 800d 	beq.w	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8004a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a22:	4ca5      	ldr	r4, [pc, #660]	; (8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	f171 0100 	sbcs.w	r1, r1, #0
 8004a2a:	f082 81c3 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a32:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8004a36:	4321      	orrs	r1, r4
 8004a38:	f000 81d0 	beq.w	8004ddc <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8004a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a40:	4c9e      	ldr	r4, [pc, #632]	; (8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004a42:	42a0      	cmp	r0, r4
 8004a44:	f171 0100 	sbcs.w	r1, r1, #0
 8004a48:	f082 81b4 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a50:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8004a54:	4321      	orrs	r1, r4
 8004a56:	f000 8142 	beq.w	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8004a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a5e:	4c98      	ldr	r4, [pc, #608]	; (8004cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	f171 0100 	sbcs.w	r1, r1, #0
 8004a66:	f082 81a5 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a6e:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8004a72:	4321      	orrs	r1, r4
 8004a74:	f001 824e 	beq.w	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8004a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a7c:	4c91      	ldr	r4, [pc, #580]	; (8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004a7e:	42a0      	cmp	r0, r4
 8004a80:	f171 0100 	sbcs.w	r1, r1, #0
 8004a84:	f082 8196 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a8c:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8004a90:	4321      	orrs	r1, r4
 8004a92:	f001 8197 	beq.w	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a9a:	4c8b      	ldr	r4, [pc, #556]	; (8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004a9c:	42a0      	cmp	r0, r4
 8004a9e:	f171 0100 	sbcs.w	r1, r1, #0
 8004aa2:	f082 8187 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aaa:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8004aae:	4321      	orrs	r1, r4
 8004ab0:	f001 8154 	beq.w	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8004ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab8:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8004abc:	f171 0100 	sbcs.w	r1, r1, #0
 8004ac0:	f082 8178 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac8:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8004acc:	4321      	orrs	r1, r4
 8004ace:	f001 80b7 	beq.w	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8004ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad6:	f248 0401 	movw	r4, #32769	; 0x8001
 8004ada:	42a0      	cmp	r0, r4
 8004adc:	f171 0100 	sbcs.w	r1, r1, #0
 8004ae0:	f082 8168 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ae4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae8:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8004aec:	4321      	orrs	r1, r4
 8004aee:	f001 8064 	beq.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8004af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af6:	f244 0401 	movw	r4, #16385	; 0x4001
 8004afa:	42a0      	cmp	r0, r4
 8004afc:	f171 0100 	sbcs.w	r1, r1, #0
 8004b00:	f082 8158 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b08:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8004b0c:	4321      	orrs	r1, r4
 8004b0e:	f001 8011 	beq.w	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8004b12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b16:	f242 0401 	movw	r4, #8193	; 0x2001
 8004b1a:	42a0      	cmp	r0, r4
 8004b1c:	f171 0100 	sbcs.w	r1, r1, #0
 8004b20:	f082 8148 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b28:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8004b2c:	4321      	orrs	r1, r4
 8004b2e:	f000 871e 	beq.w	800596e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8004b32:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b36:	f241 0401 	movw	r4, #4097	; 0x1001
 8004b3a:	42a0      	cmp	r0, r4
 8004b3c:	f171 0100 	sbcs.w	r1, r1, #0
 8004b40:	f082 8138 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b48:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8004b4c:	4321      	orrs	r1, r4
 8004b4e:	f000 86a8 	beq.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004b52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b56:	f640 0401 	movw	r4, #2049	; 0x801
 8004b5a:	42a0      	cmp	r0, r4
 8004b5c:	f171 0100 	sbcs.w	r1, r1, #0
 8004b60:	f082 8128 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b68:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8004b6c:	4321      	orrs	r1, r4
 8004b6e:	f000 8632 	beq.w	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8004b72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b76:	f240 4401 	movw	r4, #1025	; 0x401
 8004b7a:	42a0      	cmp	r0, r4
 8004b7c:	f171 0100 	sbcs.w	r1, r1, #0
 8004b80:	f082 8118 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b88:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8004b8c:	4321      	orrs	r1, r4
 8004b8e:	f000 85b0 	beq.w	80056f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8004b92:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b96:	f240 2401 	movw	r4, #513	; 0x201
 8004b9a:	42a0      	cmp	r0, r4
 8004b9c:	f171 0100 	sbcs.w	r1, r1, #0
 8004ba0:	f082 8108 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ba4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ba8:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8004bac:	4321      	orrs	r1, r4
 8004bae:	f000 8535 	beq.w	800561c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004bb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bb6:	f240 1401 	movw	r4, #257	; 0x101
 8004bba:	42a0      	cmp	r0, r4
 8004bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8004bc0:	f082 80f8 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bc8:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8004bcc:	4321      	orrs	r1, r4
 8004bce:	f000 84ba 	beq.w	8005546 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8004bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bd6:	2881      	cmp	r0, #129	; 0x81
 8004bd8:	f171 0100 	sbcs.w	r1, r1, #0
 8004bdc:	f082 80ea 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004be4:	2821      	cmp	r0, #33	; 0x21
 8004be6:	f171 0100 	sbcs.w	r1, r1, #0
 8004bea:	d26f      	bcs.n	8004ccc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf0:	4301      	orrs	r1, r0
 8004bf2:	f002 80df 	beq.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfa:	1e42      	subs	r2, r0, #1
 8004bfc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8004c00:	2a20      	cmp	r2, #32
 8004c02:	f173 0100 	sbcs.w	r1, r3, #0
 8004c06:	f082 80d5 	bcs.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c0a:	2a1f      	cmp	r2, #31
 8004c0c:	f202 80d2 	bhi.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c10:	a101      	add	r1, pc, #4	; (adr r1, 8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004c12:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004f79 	.word	0x08004f79
 8004c1c:	08005045 	.word	0x08005045
 8004c20:	08006db5 	.word	0x08006db5
 8004c24:	08005105 	.word	0x08005105
 8004c28:	08006db5 	.word	0x08006db5
 8004c2c:	08006db5 	.word	0x08006db5
 8004c30:	08006db5 	.word	0x08006db5
 8004c34:	080051d5 	.word	0x080051d5
 8004c38:	08006db5 	.word	0x08006db5
 8004c3c:	08006db5 	.word	0x08006db5
 8004c40:	08006db5 	.word	0x08006db5
 8004c44:	08006db5 	.word	0x08006db5
 8004c48:	08006db5 	.word	0x08006db5
 8004c4c:	08006db5 	.word	0x08006db5
 8004c50:	08006db5 	.word	0x08006db5
 8004c54:	080052b7 	.word	0x080052b7
 8004c58:	08006db5 	.word	0x08006db5
 8004c5c:	08006db5 	.word	0x08006db5
 8004c60:	08006db5 	.word	0x08006db5
 8004c64:	08006db5 	.word	0x08006db5
 8004c68:	08006db5 	.word	0x08006db5
 8004c6c:	08006db5 	.word	0x08006db5
 8004c70:	08006db5 	.word	0x08006db5
 8004c74:	08006db5 	.word	0x08006db5
 8004c78:	08006db5 	.word	0x08006db5
 8004c7c:	08006db5 	.word	0x08006db5
 8004c80:	08006db5 	.word	0x08006db5
 8004c84:	08006db5 	.word	0x08006db5
 8004c88:	08006db5 	.word	0x08006db5
 8004c8c:	08006db5 	.word	0x08006db5
 8004c90:	08006db5 	.word	0x08006db5
 8004c94:	0800538d 	.word	0x0800538d
 8004c98:	80000001 	.word	0x80000001
 8004c9c:	40000001 	.word	0x40000001
 8004ca0:	20000001 	.word	0x20000001
 8004ca4:	10000001 	.word	0x10000001
 8004ca8:	08000001 	.word	0x08000001
 8004cac:	04000001 	.word	0x04000001
 8004cb0:	00800001 	.word	0x00800001
 8004cb4:	00400001 	.word	0x00400001
 8004cb8:	00200001 	.word	0x00200001
 8004cbc:	00100001 	.word	0x00100001
 8004cc0:	00080001 	.word	0x00080001
 8004cc4:	00040001 	.word	0x00040001
 8004cc8:	00020001 	.word	0x00020001
 8004ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cd0:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	f000 83c4 	beq.w	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8004cda:	f002 b86b 	b.w	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004cde:	4ba1      	ldr	r3, [pc, #644]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ce4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cf0:	d036      	beq.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cf8:	d86b      	bhi.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d00:	d02b      	beq.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d08:	d863      	bhi.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d10:	d01b      	beq.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d18:	d85b      	bhi.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d004      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d26:	d008      	beq.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004d28:	e053      	b.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d2a:	f107 0320 	add.w	r3, r7, #32
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7ff f8ba 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d38:	e04e      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fa1c 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d48:	e046      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fb7e 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d58:	e03e      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004d5a:	4b83      	ldr	r3, [pc, #524]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004d5e:	e03b      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d60:	4b80      	ldr	r3, [pc, #512]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d66:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d6c:	4b7d      	ldr	r3, [pc, #500]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d10c      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004d7e:	4b79      	ldr	r3, [pc, #484]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	4a78      	ldr	r2, [pc, #480]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d90:	e01e      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d92:	4b74      	ldr	r3, [pc, #464]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d9e:	d106      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da6:	d102      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004da8:	4b71      	ldr	r3, [pc, #452]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
 8004dac:	e010      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004dae:	4b6d      	ldr	r3, [pc, #436]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dba:	d106      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8004dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc2:	d102      	bne.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004dc4:	4b6b      	ldr	r3, [pc, #428]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc8:	e002      	b.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004dce:	e003      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8004dd0:	e002      	b.n	8004dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004dd6:	bf00      	nop
          }
        }
        break;
 8004dd8:	f001 bfef 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004ddc:	4b61      	ldr	r3, [pc, #388]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004de2:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004de6:	633b      	str	r3, [r7, #48]	; 0x30
 8004de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dee:	d036      	beq.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d86b      	bhi.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dfe:	d02b      	beq.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e06:	d863      	bhi.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0e:	d01b      	beq.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e16:	d85b      	bhi.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d004      	beq.n	8004e28 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e24:	d008      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8004e26:	e053      	b.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e28:	f107 0320 	add.w	r3, r7, #32
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff f83b 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e36:	e04e      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff f99d 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e46:	e046      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e48:	f107 0308 	add.w	r3, r7, #8
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff faff 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e56:	e03e      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004e58:	4b43      	ldr	r3, [pc, #268]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e5c:	e03b      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e64:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004e68:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e6a:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d109      	bne.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e7c:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	08db      	lsrs	r3, r3, #3
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	4a39      	ldr	r2, [pc, #228]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004e88:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e8e:	e01e      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e90:	4b34      	ldr	r3, [pc, #208]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9c:	d106      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d102      	bne.n	8004eac <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004ea6:	4b32      	ldr	r3, [pc, #200]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eaa:	e010      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec0:	d102      	bne.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	e002      	b.n	8004ece <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004ecc:	e003      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8004ece:	e002      	b.n	8004ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ed4:	bf00      	nop
          }
        }
        break;
 8004ed6:	f001 bf70 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004eda:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eec:	f107 0320 	add.w	r3, r7, #32
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ffd9 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004efa:	f001 bf5e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	d108      	bne.n	8004f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f04:	f107 0314 	add.w	r3, r7, #20
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff f937 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f12:	f001 bf52 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f1a:	f001 bf4e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8004f1e:	4b11      	ldr	r3, [pc, #68]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f30:	f107 0320 	add.w	r3, r7, #32
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe ffb7 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f3e:	f001 bf3c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d108      	bne.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f48:	f107 0314 	add.w	r3, r7, #20
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff f915 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f56:	f001 bf30 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f5e:	f001 bf2c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004f62:	bf00      	nop
 8004f64:	44020c00 	.word	0x44020c00
 8004f68:	00bb8000 	.word	0x00bb8000
 8004f6c:	03d09000 	.word	0x03d09000
 8004f70:	003d0900 	.word	0x003d0900
 8004f74:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004f78:	4b9d      	ldr	r3, [pc, #628]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f7e:	f003 0307 	and.w	r3, r3, #7
 8004f82:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8004f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8004f8a:	f7fc ffd7 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8004f8e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8004f90:	f001 bf13 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8004f94:	4b96      	ldr	r3, [pc, #600]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d107      	bne.n	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fa8:	f107 0314 	add.w	r3, r7, #20
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff f8e5 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb6:	e043      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8004fb8:	4b8d      	ldr	r3, [pc, #564]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc4:	d10a      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d107      	bne.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff fa3d 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	e031      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8004fdc:	4b84      	ldr	r3, [pc, #528]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d10c      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d109      	bne.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004fee:	4b80      	ldr	r3, [pc, #512]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	08db      	lsrs	r3, r3, #3
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	4a7e      	ldr	r2, [pc, #504]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8005000:	e01e      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005002:	4b7b      	ldr	r3, [pc, #492]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800500a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800500e:	d105      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	2b04      	cmp	r3, #4
 8005014:	d102      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8005016:	4b78      	ldr	r3, [pc, #480]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005018:	637b      	str	r3, [r7, #52]	; 0x34
 800501a:	e011      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800501c:	4b74      	ldr	r3, [pc, #464]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800501e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d106      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b05      	cmp	r3, #5
 800502e:	d103      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8005030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005034:	637b      	str	r3, [r7, #52]	; 0x34
 8005036:	e003      	b.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800503c:	f001 bebd 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005040:	f001 bebb 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005044:	4b6a      	ldr	r3, [pc, #424]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005046:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800504a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800504e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	2b00      	cmp	r3, #0
 8005054:	d104      	bne.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005056:	f7fc ff5b 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800505a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800505c:	f001 bead 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005060:	4b63      	ldr	r3, [pc, #396]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800506c:	d10a      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	2b08      	cmp	r3, #8
 8005072:	d107      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005074:	f107 0314 	add.w	r3, r7, #20
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff f87f 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
 8005082:	e03d      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8005084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005086:	2b10      	cmp	r3, #16
 8005088:	d108      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f9de 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005098:	f001 be8f 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800509c:	4b54      	ldr	r3, [pc, #336]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d10c      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050aa:	2b18      	cmp	r3, #24
 80050ac:	d109      	bne.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80050ae:	4b50      	ldr	r3, [pc, #320]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	08db      	lsrs	r3, r3, #3
 80050b4:	f003 0303 	and.w	r3, r3, #3
 80050b8:	4a4e      	ldr	r2, [pc, #312]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	637b      	str	r3, [r7, #52]	; 0x34
 80050c0:	e01e      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80050c2:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ce:	d105      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80050d6:	4b48      	ldr	r3, [pc, #288]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80050d8:	637b      	str	r3, [r7, #52]	; 0x34
 80050da:	e011      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80050dc:	4b44      	ldr	r3, [pc, #272]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d106      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80050ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ec:	2b28      	cmp	r3, #40	; 0x28
 80050ee:	d103      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80050f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f4:	637b      	str	r3, [r7, #52]	; 0x34
 80050f6:	e003      	b.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050fc:	f001 be5d 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005100:	f001 be5b 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005104:	4b3a      	ldr	r3, [pc, #232]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800510a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800510e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	2b00      	cmp	r3, #0
 8005114:	d104      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005116:	f7fc fefb 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800511a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800511c:	f001 be4d 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8005120:	4b33      	ldr	r3, [pc, #204]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800512c:	d10a      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	2b40      	cmp	r3, #64	; 0x40
 8005132:	d107      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005134:	f107 0314 	add.w	r3, r7, #20
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff f81f 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	637b      	str	r3, [r7, #52]	; 0x34
 8005142:	e045      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8005144:	4b2a      	ldr	r3, [pc, #168]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005150:	d10a      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8005152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d107      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005158:	f107 0308 	add.w	r3, r7, #8
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff f977 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	637b      	str	r3, [r7, #52]	; 0x34
 8005166:	e033      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005168:	4b21      	ldr	r3, [pc, #132]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d10c      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	2bc0      	cmp	r3, #192	; 0xc0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	08db      	lsrs	r3, r3, #3
 8005180:	f003 0303 	and.w	r3, r3, #3
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005186:	fa22 f303 	lsr.w	r3, r2, r3
 800518a:	637b      	str	r3, [r7, #52]	; 0x34
 800518c:	e020      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 800518e:	4b18      	ldr	r3, [pc, #96]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519a:	d106      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a2:	d102      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80051a6:	637b      	str	r3, [r7, #52]	; 0x34
 80051a8:	e012      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d107      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80051be:	d103      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051c4:	637b      	str	r3, [r7, #52]	; 0x34
 80051c6:	e003      	b.n	80051d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80051cc:	f001 bdf5 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80051d0:	f001 bdf3 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80051da:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10a      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80051e6:	f7fc fe93 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80051ea:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80051ec:	f001 bde5 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80051f0:	44020c00 	.word	0x44020c00
 80051f4:	03d09000 	.word	0x03d09000
 80051f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80051fc:	4ba0      	ldr	r3, [pc, #640]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005208:	d10b      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005210:	d107      	bne.n	8005222 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005212:	f107 0314 	add.w	r3, r7, #20
 8005216:	4618      	mov	r0, r3
 8005218:	f7fe ffb0 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	637b      	str	r3, [r7, #52]	; 0x34
 8005220:	e047      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8005222:	4b97      	ldr	r3, [pc, #604]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800522e:	d10b      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005236:	d107      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005238:	f107 0308 	add.w	r3, r7, #8
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff f907 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
 8005246:	e034      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005248:	4b8d      	ldr	r3, [pc, #564]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b02      	cmp	r3, #2
 8005252:	d10d      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800525a:	d109      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800525c:	4b88      	ldr	r3, [pc, #544]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	08db      	lsrs	r3, r3, #3
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	4a87      	ldr	r2, [pc, #540]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005268:	fa22 f303 	lsr.w	r3, r2, r3
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	e020      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8005270:	4b83      	ldr	r3, [pc, #524]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005284:	d102      	bne.n	800528c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8005286:	4b80      	ldr	r3, [pc, #512]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
 800528a:	e012      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800528c:	4b7c      	ldr	r3, [pc, #496]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800528e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b02      	cmp	r3, #2
 8005298:	d107      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80052a0:	d103      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80052a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	e003      	b.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80052ae:	f001 bd84 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80052b2:	f001 bd82 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80052b6:	4b72      	ldr	r3, [pc, #456]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80052bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80052c8:	f7fc fe22 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80052cc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80052ce:	f001 bd74 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80052d2:	4b6b      	ldr	r3, [pc, #428]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052de:	d10b      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e6:	d107      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fe ff45 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	e047      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80052f8:	4b61      	ldr	r3, [pc, #388]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d10b      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800530c:	d107      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f89c 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	e034      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800531e:	4b58      	ldr	r3, [pc, #352]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b02      	cmp	r3, #2
 8005328:	d10d      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005330:	d109      	bne.n	8005346 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005332:	4b53      	ldr	r3, [pc, #332]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	4a51      	ldr	r2, [pc, #324]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	637b      	str	r3, [r7, #52]	; 0x34
 8005344:	e020      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8005346:	4b4e      	ldr	r3, [pc, #312]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005352:	d106      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535a:	d102      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 800535c:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800535e:	637b      	str	r3, [r7, #52]	; 0x34
 8005360:	e012      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005362:	4b47      	ldr	r3, [pc, #284]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b02      	cmp	r3, #2
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005376:	d103      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	e003      	b.n	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005384:	f001 bd19 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005388:	f001 bd17 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 800538c:	4b3c      	ldr	r3, [pc, #240]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800538e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005392:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8005396:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800539e:	f7fc fdb7 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80053a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80053a4:	f001 bd09 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80053a8:	4b35      	ldr	r3, [pc, #212]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053b4:	d10b      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053bc:	d107      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe feda 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
 80053cc:	e047      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80053ce:	4b2c      	ldr	r3, [pc, #176]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053da:	d10b      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff f831 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	637b      	str	r3, [r7, #52]	; 0x34
 80053f2:	e034      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80053f4:	4b22      	ldr	r3, [pc, #136]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d10d      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005406:	d109      	bne.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005408:	4b1d      	ldr	r3, [pc, #116]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	08db      	lsrs	r3, r3, #3
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
 8005418:	637b      	str	r3, [r7, #52]	; 0x34
 800541a:	e020      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800541c:	4b18      	ldr	r3, [pc, #96]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d106      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005430:	d102      	bne.n	8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8005432:	4b15      	ldr	r3, [pc, #84]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	e012      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8005438:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800543a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d107      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800544c:	d103      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800544e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	e003      	b.n	800545e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800545a:	f001 bcae 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800545e:	f001 bcac 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005464:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005468:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 800546c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800546e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005474:	f7fc fd4c 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005478:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800547a:	f001 bc9e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800547e:	bf00      	nop
 8005480:	44020c00 	.word	0x44020c00
 8005484:	03d09000 	.word	0x03d09000
 8005488:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 800548c:	4ba0      	ldr	r3, [pc, #640]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005498:	d10b      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054a0:	d107      	bne.n	80054b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054a2:	f107 0314 	add.w	r3, r7, #20
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fe68 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
 80054b0:	e047      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80054b2:	4b97      	ldr	r3, [pc, #604]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054be:	d10b      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80054c6:	d107      	bne.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054c8:	f107 0308 	add.w	r3, r7, #8
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe ffbf 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	637b      	str	r3, [r7, #52]	; 0x34
 80054d6:	e034      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80054d8:	4b8d      	ldr	r3, [pc, #564]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d10d      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80054ea:	d109      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054ec:	4b88      	ldr	r3, [pc, #544]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	08db      	lsrs	r3, r3, #3
 80054f2:	f003 0303 	and.w	r3, r3, #3
 80054f6:	4a87      	ldr	r2, [pc, #540]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
 80054fc:	637b      	str	r3, [r7, #52]	; 0x34
 80054fe:	e020      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005500:	4b83      	ldr	r3, [pc, #524]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800550c:	d106      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005514:	d102      	bne.n	800551c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8005516:	4b80      	ldr	r3, [pc, #512]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
 800551a:	e012      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800551c:	4b7c      	ldr	r3, [pc, #496]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800551e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b02      	cmp	r3, #2
 8005528:	d107      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005530:	d103      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8005532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	e003      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800553a:	2300      	movs	r3, #0
 800553c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800553e:	f001 bc3c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005542:	f001 bc3a 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8005546:	4b72      	ldr	r3, [pc, #456]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005548:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800554c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005550:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b00      	cmp	r3, #0
 8005556:	d104      	bne.n	8005562 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fc fcda 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 800555c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800555e:	f001 bc2c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8005562:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800556a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800556e:	d10b      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005576:	d107      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005578:	f107 0314 	add.w	r3, r7, #20
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe fdfd 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	e047      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005588:	4b61      	ldr	r3, [pc, #388]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005590:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005594:	d10b      	bne.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800559c:	d107      	bne.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800559e:	f107 0308 	add.w	r3, r7, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe ff54 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	637b      	str	r3, [r7, #52]	; 0x34
 80055ac:	e034      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80055ae:	4b58      	ldr	r3, [pc, #352]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d10d      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80055c0:	d109      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055c2:	4b53      	ldr	r3, [pc, #332]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	08db      	lsrs	r3, r3, #3
 80055c8:	f003 0303 	and.w	r3, r3, #3
 80055cc:	4a51      	ldr	r2, [pc, #324]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80055ce:	fa22 f303 	lsr.w	r3, r2, r3
 80055d2:	637b      	str	r3, [r7, #52]	; 0x34
 80055d4:	e020      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80055d6:	4b4e      	ldr	r3, [pc, #312]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ea:	d102      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80055ec:	4b4a      	ldr	r3, [pc, #296]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
 80055f0:	e012      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80055f2:	4b47      	ldr	r3, [pc, #284]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d107      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005606:	d103      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005608:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	e003      	b.n	8005618 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005614:	f001 bbd1 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005618:	f001 bbcf 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800561c:	4b3c      	ldr	r3, [pc, #240]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800561e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005622:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005626:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8005628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800562e:	f7fc fc6f 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005632:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8005634:	f001 bbc1 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8005638:	4b35      	ldr	r3, [pc, #212]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005644:	d10b      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800564c:	d107      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0314 	add.w	r3, r7, #20
 8005652:	4618      	mov	r0, r3
 8005654:	f7fe fd92 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
 800565c:	e047      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800565e:	4b2c      	ldr	r3, [pc, #176]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800566a:	d10b      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005672:	d107      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005674:	f107 0308 	add.w	r3, r7, #8
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fee9 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	637b      	str	r3, [r7, #52]	; 0x34
 8005682:	e034      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8005684:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d10d      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8005690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005696:	d109      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005698:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	08db      	lsrs	r3, r3, #3
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	e020      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80056ac:	4b18      	ldr	r3, [pc, #96]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b8:	d106      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056c0:	d102      	bne.n	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
 80056c6:	e012      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80056c8:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d107      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80056dc:	d103      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80056de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
 80056e4:	e003      	b.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80056ea:	f001 bb66 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056ee:	f001 bb64 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056f8:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 80056fc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005704:	f7fc fc04 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005708:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800570a:	f001 bb56 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800570e:	bf00      	nop
 8005710:	44020c00 	.word	0x44020c00
 8005714:	03d09000 	.word	0x03d09000
 8005718:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800571c:	4ba1      	ldr	r3, [pc, #644]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005728:	d10b      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005730:	d107      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005732:	f107 0314 	add.w	r3, r7, #20
 8005736:	4618      	mov	r0, r3
 8005738:	f7fe fd20 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	637b      	str	r3, [r7, #52]	; 0x34
 8005740:	e047      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8005742:	4b98      	ldr	r3, [pc, #608]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800574a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574e:	d10b      	bne.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005756:	d107      	bne.n	8005768 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fe77 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	637b      	str	r3, [r7, #52]	; 0x34
 8005766:	e034      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8005768:	4b8e      	ldr	r3, [pc, #568]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b02      	cmp	r3, #2
 8005772:	d10d      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800577a:	d109      	bne.n	8005790 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800577c:	4b89      	ldr	r3, [pc, #548]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	08db      	lsrs	r3, r3, #3
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	4a88      	ldr	r2, [pc, #544]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005788:	fa22 f303 	lsr.w	r3, r2, r3
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
 800578e:	e020      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005790:	4b84      	ldr	r3, [pc, #528]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800579c:	d106      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d102      	bne.n	80057ac <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80057a6:	4b81      	ldr	r3, [pc, #516]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
 80057aa:	e012      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80057ac:	4b7d      	ldr	r3, [pc, #500]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d107      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80057c0:	d103      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80057c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
 80057c8:	e003      	b.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80057ce:	f001 baf4 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80057d2:	f001 baf2 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80057d6:	4b73      	ldr	r3, [pc, #460]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80057dc:	f003 0307 	and.w	r3, r3, #7
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fc fb92 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80057ec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80057ee:	f001 bae4 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80057f2:	4b6c      	ldr	r3, [pc, #432]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057fe:	d10a      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8005800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005802:	2b01      	cmp	r3, #1
 8005804:	d107      	bne.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005806:	f107 0314 	add.w	r3, r7, #20
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe fcb6 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	637b      	str	r3, [r7, #52]	; 0x34
 8005814:	e043      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8005816:	4b63      	ldr	r3, [pc, #396]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800581e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005822:	d10a      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	2b02      	cmp	r3, #2
 8005828:	d107      	bne.n	800583a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fe0e 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
 8005838:	e031      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800583a:	4b5a      	ldr	r3, [pc, #360]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d10c      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	2b03      	cmp	r3, #3
 800584a:	d109      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800584c:	4b55      	ldr	r3, [pc, #340]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a54      	ldr	r2, [pc, #336]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	637b      	str	r3, [r7, #52]	; 0x34
 800585e:	e01e      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8005860:	4b50      	ldr	r3, [pc, #320]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800586c:	d105      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800586e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005870:	2b04      	cmp	r3, #4
 8005872:	d102      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8005874:	4b4d      	ldr	r3, [pc, #308]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005876:	637b      	str	r3, [r7, #52]	; 0x34
 8005878:	e011      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800587a:	4b4a      	ldr	r3, [pc, #296]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800587c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d106      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	2b05      	cmp	r3, #5
 800588c:	d103      	bne.n	8005896 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800588e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
 8005894:	e003      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8005896:	2300      	movs	r3, #0
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800589a:	f001 ba8e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800589e:	f001 ba8c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80058a2:	4b40      	ldr	r3, [pc, #256]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80058a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ac:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d104      	bne.n	80058be <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fc fb2c 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 80058b8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80058ba:	f001 ba7e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80058be:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ca:	d10a      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d107      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058d2:	f107 0314 	add.w	r3, r7, #20
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fc50 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	637b      	str	r3, [r7, #52]	; 0x34
 80058e0:	e043      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80058e2:	4b30      	ldr	r3, [pc, #192]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ee:	d10a      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d107      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fda8 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	637b      	str	r3, [r7, #52]	; 0x34
 8005904:	e031      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8005906:	4b27      	ldr	r3, [pc, #156]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b02      	cmp	r3, #2
 8005910:	d10c      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d109      	bne.n	800592c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005918:	4b22      	ldr	r3, [pc, #136]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	08db      	lsrs	r3, r3, #3
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	4a21      	ldr	r2, [pc, #132]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005924:	fa22 f303 	lsr.w	r3, r2, r3
 8005928:	637b      	str	r3, [r7, #52]	; 0x34
 800592a:	e01e      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005938:	d105      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d102      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8005940:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005942:	637b      	str	r3, [r7, #52]	; 0x34
 8005944:	e011      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8005946:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800594c:	f003 0302 	and.w	r3, r3, #2
 8005950:	2b02      	cmp	r3, #2
 8005952:	d106      	bne.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b50      	cmp	r3, #80	; 0x50
 8005958:	d103      	bne.n	8005962 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
 8005960:	e003      	b.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005966:	f001 ba28 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800596a:	f001 ba26 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005974:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005978:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005980:	f7fc faf2 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8005984:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005986:	f001 ba18 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005990:	d10e      	bne.n	80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005992:	f107 0314 	add.w	r3, r7, #20
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fbf0 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059a0:	f001 ba0b 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059a4:	44020c00 	.word	0x44020c00
 80059a8:	03d09000 	.word	0x03d09000
 80059ac:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059b6:	d108      	bne.n	80059ca <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059b8:	f107 0308 	add.w	r3, r7, #8
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fe fd47 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059c6:	f001 b9f8 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80059ca:	4ba4      	ldr	r3, [pc, #656]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d10d      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80059d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059dc:	d109      	bne.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059de:	4b9f      	ldr	r3, [pc, #636]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	08db      	lsrs	r3, r3, #3
 80059e4:	f003 0303 	and.w	r3, r3, #3
 80059e8:	4a9d      	ldr	r2, [pc, #628]	; (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80059ea:	fa22 f303 	lsr.w	r3, r2, r3
 80059ee:	637b      	str	r3, [r7, #52]	; 0x34
 80059f0:	e020      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80059f2:	4b9a      	ldr	r3, [pc, #616]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fe:	d106      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a06:	d102      	bne.n	8005a0e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8005a08:	4b96      	ldr	r3, [pc, #600]	; (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0c:	e012      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005a0e:	4b93      	ldr	r3, [pc, #588]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d107      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005a22:	d103      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8005a24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2a:	e003      	b.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a30:	f001 b9c3 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a34:	f001 b9c1 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005a38:	4b88      	ldr	r3, [pc, #544]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d104      	bne.n	8005a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005a4a:	f7fc fa45 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8005a4e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005a50:	f001 b9b3 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d104      	bne.n	8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8005a5a:	f7fc f911 	bl	8001c80 <HAL_RCC_GetSysClockFreq>
 8005a5e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005a60:	f001 b9ab 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d108      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6a:	f107 0314 	add.w	r3, r7, #20
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fb84 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a78:	f001 b99f 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005a7c:	4b77      	ldr	r3, [pc, #476]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a88:	d105      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	2b03      	cmp	r3, #3
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8005a90:	4b75      	ldr	r3, [pc, #468]	; (8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	e023      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005a96:	4b71      	ldr	r3, [pc, #452]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d109      	bne.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005aa8:	4b6c      	ldr	r3, [pc, #432]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	4a6b      	ldr	r2, [pc, #428]	; (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aba:	e010      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005abc:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac8:	d105      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	2b05      	cmp	r3, #5
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8005ad0:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad4:	e003      	b.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ada:	f001 b96e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ade:	f001 b96c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005ae2:	4b5e      	ldr	r3, [pc, #376]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005ae4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005aee:	4b5b      	ldr	r3, [pc, #364]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d106      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8005b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
 8005b08:	e012      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005b0a:	4b54      	ldr	r3, [pc, #336]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b18:	d106      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d103      	bne.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8005b20:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
 8005b26:	e003      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8005b2c:	f001 b945 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b30:	f001 b943 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005b34:	4b49      	ldr	r3, [pc, #292]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b3e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005b46:	f7fc f9e3 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005b4a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005b4c:	f001 b935 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b56:	d108      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b58:	f107 0308 	add.w	r3, r7, #8
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fe fc77 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b66:	f001 b928 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005b6a:	4b3c      	ldr	r3, [pc, #240]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d10d      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b7c:	d109      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	08db      	lsrs	r3, r3, #3
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	4a35      	ldr	r2, [pc, #212]	; (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b90:	e011      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005b92:	4b32      	ldr	r3, [pc, #200]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9e:	d106      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ba6:	d102      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8005ba8:	4b2e      	ldr	r3, [pc, #184]	; (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bac:	e003      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bb2:	f001 b902 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005bb6:	f001 b900 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005bba:	4b28      	ldr	r3, [pc, #160]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005bbc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bc0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d104      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bcc:	f7fc f9a0 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005bd0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bd2:	f001 b8f2 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bdc:	d108      	bne.n	8005bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bde:	f107 0308 	add.w	r3, r7, #8
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7fe fc34 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bec:	f001 b8e5 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005bf0:	4b1a      	ldr	r3, [pc, #104]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d10d      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c02:	d109      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c04:	4b15      	ldr	r3, [pc, #84]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	08db      	lsrs	r3, r3, #3
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	4a14      	ldr	r2, [pc, #80]	; (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	637b      	str	r3, [r7, #52]	; 0x34
 8005c16:	e011      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005c18:	4b10      	ldr	r3, [pc, #64]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c24:	d106      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005c2c:	d102      	bne.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8005c2e:	4b0d      	ldr	r3, [pc, #52]	; (8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005c30:	637b      	str	r3, [r7, #52]	; 0x34
 8005c32:	e003      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c38:	f001 b8bf 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c3c:	f001 b8bd 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c46:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005c4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005c52:	f7fc f989 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8005c56:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c58:	f001 b8af 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c5c:	44020c00 	.word	0x44020c00
 8005c60:	03d09000 	.word	0x03d09000
 8005c64:	003d0900 	.word	0x003d0900
 8005c68:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d108      	bne.n	8005c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c74:	f107 0308 	add.w	r3, r7, #8
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fbe9 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c82:	f001 b89a 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005c86:	4b9f      	ldr	r3, [pc, #636]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d10d      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c98:	d109      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c9a:	4b9a      	ldr	r3, [pc, #616]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	08db      	lsrs	r3, r3, #3
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	4a98      	ldr	r2, [pc, #608]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8005caa:	637b      	str	r3, [r7, #52]	; 0x34
 8005cac:	e011      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005cae:	4b95      	ldr	r3, [pc, #596]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cba:	d106      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cc2:	d102      	bne.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8005cc4:	4b91      	ldr	r3, [pc, #580]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005cc8:	e003      	b.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cce:	f001 b874 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005cd2:	f001 b872 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005cd6:	4b8b      	ldr	r3, [pc, #556]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005cd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cdc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005ce8:	f7fc f93e 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8005cec:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005cee:	f001 b864 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf8:	d108      	bne.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cfa:	f107 0308 	add.w	r3, r7, #8
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fba6 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d08:	f001 b857 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005d0c:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d10d      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d1e:	d109      	bne.n	8005d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d20:	4b78      	ldr	r3, [pc, #480]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	08db      	lsrs	r3, r3, #3
 8005d26:	f003 0303 	and.w	r3, r3, #3
 8005d2a:	4a77      	ldr	r2, [pc, #476]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
 8005d32:	e011      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005d34:	4b73      	ldr	r3, [pc, #460]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d40:	d106      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d48:	d102      	bne.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8005d4a:	4b70      	ldr	r3, [pc, #448]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d4e:	e003      	b.n	8005d58 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d54:	f001 b831 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d58:	f001 b82f 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005d5c:	4b69      	ldr	r3, [pc, #420]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d62:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005d66:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005d6e:	f7fc f8cf 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005d72:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d74:	f001 b821 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d7e:	d108      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d80:	f107 0308 	add.w	r3, r7, #8
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7fe fb63 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d8e:	f001 b814 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005d92:	4b5c      	ldr	r3, [pc, #368]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d10e      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005da4:	d10a      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005da6:	4b57      	ldr	r3, [pc, #348]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	08db      	lsrs	r3, r3, #3
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	4a55      	ldr	r2, [pc, #340]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005db8:	f000 bfff 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005dc0:	f000 bffb 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005dc4:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005dc6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005dd6:	d056      	beq.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8005dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005dde:	f200 808b 	bhi.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d03e      	beq.n	8005e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df0:	f200 8082 	bhi.w	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dfa:	d027      	beq.n	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e02:	d879      	bhi.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e0a:	d017      	beq.n	8005e3c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e12:	d871      	bhi.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e20:	d004      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8005e22:	e069      	b.n	8005ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005e24:	f7fc f8a0 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8005e28:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005e2a:	e068      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e2c:	f107 0314 	add.w	r3, r7, #20
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fe f9a3 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e3a:	e060      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e3c:	f107 0308 	add.w	r3, r7, #8
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fb05 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e4a:	e058      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e4c:	4b2d      	ldr	r3, [pc, #180]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d103      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8005e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e5e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005e60:	e04d      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e66:	e04a      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005e68:	4b26      	ldr	r3, [pc, #152]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e76:	d103      	bne.n	8005e80 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8005e78:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005e7e:	e03e      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005e84:	e03b      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e86:	4b1f      	ldr	r3, [pc, #124]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e8c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e92:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d10c      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8005e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ea4:	4b17      	ldr	r3, [pc, #92]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	4a16      	ldr	r2, [pc, #88]	; (8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8005eb6:	e01e      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ec4:	d106      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8005ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ecc:	d102      	bne.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005ece:	4b0f      	ldr	r3, [pc, #60]	; (8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e010      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ed4:	4b0b      	ldr	r3, [pc, #44]	; (8005f04 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ee0:	d106      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8005ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d102      	bne.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005eea:	4b09      	ldr	r3, [pc, #36]	; (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
 8005eee:	e002      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8005ef6:	e002      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005efc:	bf00      	nop
          }
        }
        break;
 8005efe:	f000 bf5c 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f02:	bf00      	nop
 8005f04:	44020c00 	.word	0x44020c00
 8005f08:	03d09000 	.word	0x03d09000
 8005f0c:	003d0900 	.word	0x003d0900
 8005f10:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005f14:	4b9e      	ldr	r3, [pc, #632]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f16:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005f1a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f26:	d056      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8005f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005f2e:	f200 808b 	bhi.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f38:	d03e      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f40:	f200 8082 	bhi.w	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f4a:	d027      	beq.n	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f52:	d879      	bhi.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f5a:	d017      	beq.n	8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f62:	d871      	bhi.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d004      	beq.n	8005f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d004      	beq.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8005f72:	e069      	b.n	8006048 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005f74:	f7fb ffcc 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8005f78:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005f7a:	e068      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7c:	f107 0314 	add.w	r3, r7, #20
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fe f8fb 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f8a:	e060      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f8c:	f107 0308 	add.w	r3, r7, #8
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7fe fa5d 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f9a:	e058      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f9c:	4b7c      	ldr	r3, [pc, #496]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d103      	bne.n	8005fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8005faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005fb0:	e04d      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fb6:	e04a      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005fb8:	4b75      	ldr	r3, [pc, #468]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005fba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fc6:	d103      	bne.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8005fc8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005fce:	e03e      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005fd4:	e03b      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005fd6:	4b6e      	ldr	r3, [pc, #440]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fdc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005fe2:	4b6b      	ldr	r3, [pc, #428]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d10c      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ff4:	4b66      	ldr	r3, [pc, #408]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	08db      	lsrs	r3, r3, #3
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	4a65      	ldr	r2, [pc, #404]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
 8006006:	e01e      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006008:	4b61      	ldr	r3, [pc, #388]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d106      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601c:	d102      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800601e:	4b5e      	ldr	r3, [pc, #376]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
 8006022:	e010      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006024:	4b5a      	ldr	r3, [pc, #360]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800602c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006030:	d106      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8006032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006034:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006038:	d102      	bne.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800603a:	4b58      	ldr	r3, [pc, #352]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
 800603e:	e002      	b.n	8006046 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006044:	e003      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8006046:	e002      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8006048:	2300      	movs	r3, #0
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800604c:	bf00      	nop
          }
        }
        break;
 800604e:	f000 beb4 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8006052:	4b4f      	ldr	r3, [pc, #316]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006054:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006058:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006064:	d056      	beq.n	8006114 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800606c:	f200 808b 	bhi.w	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006076:	d03e      	beq.n	80060f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800607e:	f200 8082 	bhi.w	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006088:	d027      	beq.n	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800608a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006090:	d879      	bhi.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006098:	d017      	beq.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060a0:	d871      	bhi.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ae:	d004      	beq.n	80060ba <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80060b0:	e069      	b.n	8006186 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80060b2:	f7fb ff59 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 80060b6:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80060b8:	e068      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ba:	f107 0314 	add.w	r3, r7, #20
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe f85c 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060c8:	e060      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe f9be 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060d8:	e058      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80060da:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80060dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d103      	bne.n	80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80060e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060ec:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80060ee:	e04d      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060f4:	e04a      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80060f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006104:	d103      	bne.n	800610e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8006106:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800610c:	e03e      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800610e:	2300      	movs	r3, #0
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006112:	e03b      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006114:	4b1e      	ldr	r3, [pc, #120]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006116:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800611a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800611e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b02      	cmp	r3, #2
 800612a:	d10c      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d109      	bne.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006132:	4b17      	ldr	r3, [pc, #92]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	08db      	lsrs	r3, r3, #3
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
 8006144:	e01e      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800614e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006152:	d106      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615a:	d102      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800615c:	4b0e      	ldr	r3, [pc, #56]	; (8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
 8006160:	e010      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006162:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800616a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800616e:	d106      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006176:	d102      	bne.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006178:	4b08      	ldr	r3, [pc, #32]	; (800619c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
 800617c:	e002      	b.n	8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006182:	e003      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8006184:	e002      	b.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8006186:	2300      	movs	r3, #0
 8006188:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800618a:	bf00      	nop
          }
        }
        break;
 800618c:	f000 be15 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006190:	44020c00 	.word	0x44020c00
 8006194:	03d09000 	.word	0x03d09000
 8006198:	003d0900 	.word	0x003d0900
 800619c:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80061a0:	4b9e      	ldr	r3, [pc, #632]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80061a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80061a6:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80061aa:	633b      	str	r3, [r7, #48]	; 0x30
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80061b2:	d056      	beq.n	8006262 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80061b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80061ba:	f200 808b 	bhi.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061c4:	d03e      	beq.n	8006244 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061cc:	f200 8082 	bhi.w	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061d6:	d027      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80061de:	d879      	bhi.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061e6:	d017      	beq.n	8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ee:	d871      	bhi.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061fc:	d004      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80061fe:	e069      	b.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006200:	f7fb feb2 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8006204:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006206:	e068      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006208:	f107 0314 	add.w	r3, r7, #20
 800620c:	4618      	mov	r0, r3
 800620e:	f7fd ffb5 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006216:	e060      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006218:	f107 0308 	add.w	r3, r7, #8
 800621c:	4618      	mov	r0, r3
 800621e:	f7fe f917 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006226:	e058      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006228:	4b7c      	ldr	r3, [pc, #496]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800622a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d103      	bne.n	800623e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8006236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800623a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800623c:	e04d      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800623e:	2300      	movs	r3, #0
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006242:	e04a      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006244:	4b75      	ldr	r3, [pc, #468]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800624a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006252:	d103      	bne.n	800625c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8006254:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006258:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800625a:	e03e      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006260:	e03b      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006262:	4b6e      	ldr	r3, [pc, #440]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006268:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800626c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800626e:	4b6b      	ldr	r3, [pc, #428]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b02      	cmp	r3, #2
 8006278:	d10c      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800627a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006280:	4b66      	ldr	r3, [pc, #408]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	4a65      	ldr	r2, [pc, #404]	; (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	637b      	str	r3, [r7, #52]	; 0x34
 8006292:	e01e      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006294:	4b61      	ldr	r3, [pc, #388]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d106      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a8:	d102      	bne.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80062aa:	4b5e      	ldr	r3, [pc, #376]	; (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
 80062ae:	e010      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062b0:	4b5a      	ldr	r3, [pc, #360]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062bc:	d106      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80062be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c4:	d102      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80062c6:	4b58      	ldr	r3, [pc, #352]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
 80062ca:	e002      	b.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80062cc:	2300      	movs	r3, #0
 80062ce:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80062d0:	e003      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80062d2:	e002      	b.n	80062da <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062d8:	bf00      	nop
          }
        }
        break;
 80062da:	f000 bd6e 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80062de:	4b4f      	ldr	r3, [pc, #316]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80062e4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80062e8:	633b      	str	r3, [r7, #48]	; 0x30
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062f0:	d056      	beq.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062f8:	f200 808b 	bhi.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80062fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006302:	d03e      	beq.n	8006382 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8006304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800630a:	f200 8082 	bhi.w	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800630e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006310:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006314:	d027      	beq.n	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8006316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631c:	d879      	bhi.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006324:	d017      	beq.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8006326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632c:	d871      	bhi.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8006334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006336:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800633a:	d004      	beq.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800633c:	e069      	b.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800633e:	f7fb fe13 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8006342:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006344:	e068      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006346:	f107 0314 	add.w	r3, r7, #20
 800634a:	4618      	mov	r0, r3
 800634c:	f7fd ff16 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006354:	e060      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4618      	mov	r0, r3
 800635c:	f7fe f878 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006364:	e058      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006366:	4b2d      	ldr	r3, [pc, #180]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b02      	cmp	r3, #2
 8006372:	d103      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8006374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800637a:	e04d      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800637c:	2300      	movs	r3, #0
 800637e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006380:	e04a      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006382:	4b26      	ldr	r3, [pc, #152]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006384:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800638c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006390:	d103      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8006392:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006398:	e03e      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800639e:	e03b      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ac:	4b1b      	ldr	r3, [pc, #108]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0302 	and.w	r3, r3, #2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d10c      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80063be:	4b17      	ldr	r3, [pc, #92]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	08db      	lsrs	r3, r3, #3
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80063ca:	fa22 f303 	lsr.w	r3, r2, r3
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
 80063d0:	e01e      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063d2:	4b12      	ldr	r3, [pc, #72]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063de:	d106      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e6:	d102      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80063e8:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
 80063ec:	e010      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fa:	d106      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80063fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006402:	d102      	bne.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006404:	4b08      	ldr	r3, [pc, #32]	; (8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
 8006408:	e002      	b.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800640a:	2300      	movs	r3, #0
 800640c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800640e:	e003      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006416:	bf00      	nop
          }
        }
        break;
 8006418:	f000 bccf 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800641c:	44020c00 	.word	0x44020c00
 8006420:	03d09000 	.word	0x03d09000
 8006424:	003d0900 	.word	0x003d0900
 8006428:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800642c:	4b9e      	ldr	r3, [pc, #632]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800642e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006432:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006436:	633b      	str	r3, [r7, #48]	; 0x30
 8006438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800643e:	d056      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8006440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006442:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006446:	f200 808b 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d03e      	beq.n	80064d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006458:	f200 8082 	bhi.w	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006462:	d027      	beq.n	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800646a:	d879      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006472:	d017      	beq.n	80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800647a:	d871      	bhi.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006488:	d004      	beq.n	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800648a:	e069      	b.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800648c:	f7fb fd6c 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 8006490:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006492:	e068      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4618      	mov	r0, r3
 800649a:	f7fd fe6f 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064a2:	e060      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064a4:	f107 0308 	add.w	r3, r7, #8
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fd ffd1 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064b2:	e058      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80064b4:	4b7c      	ldr	r3, [pc, #496]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d103      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80064c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80064c8:	e04d      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064ce:	e04a      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80064d0:	4b75      	ldr	r3, [pc, #468]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064de:	d103      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80064e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064e4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80064e6:	e03e      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80064ec:	e03b      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80064ee:	4b6e      	ldr	r3, [pc, #440]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064f4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80064f8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80064fa:	4b6b      	ldr	r3, [pc, #428]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b02      	cmp	r3, #2
 8006504:	d10c      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8006506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d109      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800650c:	4b66      	ldr	r3, [pc, #408]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	08db      	lsrs	r3, r3, #3
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	4a65      	ldr	r2, [pc, #404]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	637b      	str	r3, [r7, #52]	; 0x34
 800651e:	e01e      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006520:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652c:	d106      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800652e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006534:	d102      	bne.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006536:	4b5e      	ldr	r3, [pc, #376]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
 800653a:	e010      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800653c:	4b5a      	ldr	r3, [pc, #360]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006548:	d106      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006550:	d102      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006552:	4b58      	ldr	r3, [pc, #352]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
 8006556:	e002      	b.n	800655e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800655c:	e003      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800655e:	e002      	b.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006564:	bf00      	nop
          }
        }
        break;
 8006566:	f000 bc28 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800656a:	4b4f      	ldr	r3, [pc, #316]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800656c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006574:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8006576:	4b4c      	ldr	r3, [pc, #304]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006582:	d106      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800658a:	4b4a      	ldr	r3, [pc, #296]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800658c:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800658e:	f000 bc14 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8006592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006598:	d108      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800659a:	f107 0320 	add.w	r3, r7, #32
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fd fc82 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065a8:	f000 bc07 	b.w	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b2:	d107      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fd fddf 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c2:	e3fa      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c8:	e3f7      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80065ca:	4b37      	ldr	r3, [pc, #220]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80065cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d861      	bhi.n	80066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f9 	.word	0x080065f9
 80065e8:	08006609 	.word	0x08006609
 80065ec:	08006619 	.word	0x08006619
 80065f0:	08006629 	.word	0x08006629
 80065f4:	0800662f 	.word	0x0800662f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065f8:	f107 0320 	add.w	r3, r7, #32
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fd fc53 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006606:	e04e      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006608:	f107 0314 	add.w	r3, r7, #20
 800660c:	4618      	mov	r0, r3
 800660e:	f7fd fdb5 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006616:	e046      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006618:	f107 0308 	add.w	r3, r7, #8
 800661c:	4618      	mov	r0, r3
 800661e:	f7fd ff17 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006626:	e03e      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006628:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800662a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800662c:	e03b      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800662e:	4b1e      	ldr	r3, [pc, #120]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006634:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d10c      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800664c:	4b16      	ldr	r3, [pc, #88]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	08db      	lsrs	r3, r3, #3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	4a15      	ldr	r2, [pc, #84]	; (80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
 800665c:	637b      	str	r3, [r7, #52]	; 0x34
 800665e:	e01e      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666c:	d106      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d102      	bne.n	800667c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006676:	4b0e      	ldr	r3, [pc, #56]	; (80066b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	e010      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006688:	d106      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006690:	d102      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006692:	4b08      	ldr	r3, [pc, #32]	; (80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006694:	637b      	str	r3, [r7, #52]	; 0x34
 8006696:	e002      	b.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066a4:	bf00      	nop
          }
        }
        break;
 80066a6:	e388      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80066a8:	44020c00 	.word	0x44020c00
 80066ac:	03d09000 	.word	0x03d09000
 80066b0:	003d0900 	.word	0x003d0900
 80066b4:	017d7840 	.word	0x017d7840
 80066b8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80066bc:	4ba9      	ldr	r3, [pc, #676]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80066be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066c6:	633b      	str	r3, [r7, #48]	; 0x30
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f200 809a 	bhi.w	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	0800675d 	.word	0x0800675d
 80066dc:	08006805 	.word	0x08006805
 80066e0:	08006805 	.word	0x08006805
 80066e4:	08006805 	.word	0x08006805
 80066e8:	08006805 	.word	0x08006805
 80066ec:	08006805 	.word	0x08006805
 80066f0:	08006805 	.word	0x08006805
 80066f4:	08006805 	.word	0x08006805
 80066f8:	0800676d 	.word	0x0800676d
 80066fc:	08006805 	.word	0x08006805
 8006700:	08006805 	.word	0x08006805
 8006704:	08006805 	.word	0x08006805
 8006708:	08006805 	.word	0x08006805
 800670c:	08006805 	.word	0x08006805
 8006710:	08006805 	.word	0x08006805
 8006714:	08006805 	.word	0x08006805
 8006718:	0800677d 	.word	0x0800677d
 800671c:	08006805 	.word	0x08006805
 8006720:	08006805 	.word	0x08006805
 8006724:	08006805 	.word	0x08006805
 8006728:	08006805 	.word	0x08006805
 800672c:	08006805 	.word	0x08006805
 8006730:	08006805 	.word	0x08006805
 8006734:	08006805 	.word	0x08006805
 8006738:	0800678d 	.word	0x0800678d
 800673c:	08006805 	.word	0x08006805
 8006740:	08006805 	.word	0x08006805
 8006744:	08006805 	.word	0x08006805
 8006748:	08006805 	.word	0x08006805
 800674c:	08006805 	.word	0x08006805
 8006750:	08006805 	.word	0x08006805
 8006754:	08006805 	.word	0x08006805
 8006758:	08006793 	.word	0x08006793
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800675c:	f107 0320 	add.w	r3, r7, #32
 8006760:	4618      	mov	r0, r3
 8006762:	f7fd fba1 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800676a:	e04e      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800676c:	f107 0314 	add.w	r3, r7, #20
 8006770:	4618      	mov	r0, r3
 8006772:	f7fd fd03 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800677a:	e046      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800677c:	f107 0308 	add.w	r3, r7, #8
 8006780:	4618      	mov	r0, r3
 8006782:	f7fd fe65 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800678a:	e03e      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800678c:	4b76      	ldr	r3, [pc, #472]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800678e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006790:	e03b      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006792:	4b74      	ldr	r3, [pc, #464]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006798:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800679c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800679e:	4b71      	ldr	r3, [pc, #452]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d10c      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d109      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067b0:	4b6c      	ldr	r3, [pc, #432]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	08db      	lsrs	r3, r3, #3
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	4a6c      	ldr	r2, [pc, #432]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
 80067c0:	637b      	str	r3, [r7, #52]	; 0x34
 80067c2:	e01e      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067c4:	4b67      	ldr	r3, [pc, #412]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d0:	d106      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d102      	bne.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80067da:	4b65      	ldr	r3, [pc, #404]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
 80067de:	e010      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067e0:	4b60      	ldr	r3, [pc, #384]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ec:	d106      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f4:	d102      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80067f6:	4b5f      	ldr	r3, [pc, #380]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
 80067fa:	e002      	b.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80067fc:	2300      	movs	r3, #0
 80067fe:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006800:	e003      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 8006802:	e002      	b.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006808:	bf00      	nop
          }
        }
        break;
 800680a:	e2d6      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800680c:	4b55      	ldr	r3, [pc, #340]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800680e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006812:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800681e:	d031      	beq.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006826:	d866      	bhi.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	2bc0      	cmp	r3, #192	; 0xc0
 800682c:	d027      	beq.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	2bc0      	cmp	r3, #192	; 0xc0
 8006832:	d860      	bhi.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d019      	beq.n	800686e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	2b80      	cmp	r3, #128	; 0x80
 800683e:	d85a      	bhi.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d008      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800684c:	e053      	b.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684e:	f107 0320 	add.w	r3, r7, #32
 8006852:	4618      	mov	r0, r3
 8006854:	f7fd fb28 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800685c:	e04e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800685e:	f107 0314 	add.w	r3, r7, #20
 8006862:	4618      	mov	r0, r3
 8006864:	f7fd fc8a 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800686c:	e046      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800686e:	f107 0308 	add.w	r3, r7, #8
 8006872:	4618      	mov	r0, r3
 8006874:	f7fd fdec 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800687c:	e03e      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800687e:	4b3a      	ldr	r3, [pc, #232]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006882:	e03b      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006884:	4b37      	ldr	r3, [pc, #220]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800688a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006890:	4b34      	ldr	r3, [pc, #208]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d10c      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068a2:	4b30      	ldr	r3, [pc, #192]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	08db      	lsrs	r3, r3, #3
 80068a8:	f003 0303 	and.w	r3, r3, #3
 80068ac:	4a2f      	ldr	r2, [pc, #188]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80068ae:	fa22 f303 	lsr.w	r3, r2, r3
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34
 80068b4:	e01e      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068b6:	4b2b      	ldr	r3, [pc, #172]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d106      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ca:	d102      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068cc:	4b28      	ldr	r3, [pc, #160]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80068ce:	637b      	str	r3, [r7, #52]	; 0x34
 80068d0:	e010      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068d2:	4b24      	ldr	r3, [pc, #144]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068de:	d106      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068e6:	d102      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80068e8:	4b22      	ldr	r3, [pc, #136]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
 80068ec:	e002      	b.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80068ee:	2300      	movs	r3, #0
 80068f0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80068f2:	e003      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80068f4:	e002      	b.n	80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80068fa:	bf00      	nop
          }
        }
        break;
 80068fc:	e25d      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006904:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006908:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006910:	f7fb fb14 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8006914:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006916:	e250      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8006918:	4b12      	ldr	r3, [pc, #72]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006924:	d10b      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800692e:	f107 0314 	add.w	r3, r7, #20
 8006932:	4618      	mov	r0, r3
 8006934:	f7fd fc22 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	e04f      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694a:	d115      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006952:	d111      	bne.n	8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006954:	f107 0308 	add.w	r3, r7, #8
 8006958:	4618      	mov	r0, r3
 800695a:	f7fd fd79 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
 8006962:	e03c      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8006964:	44020c00 	.word	0x44020c00
 8006968:	00bb8000 	.word	0x00bb8000
 800696c:	03d09000 	.word	0x03d09000
 8006970:	003d0900 	.word	0x003d0900
 8006974:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006978:	4b94      	ldr	r3, [pc, #592]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b02      	cmp	r3, #2
 8006982:	d10d      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800698a:	d109      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800698c:	4b8f      	ldr	r3, [pc, #572]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	08db      	lsrs	r3, r3, #3
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	4a8e      	ldr	r2, [pc, #568]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
 800699e:	e01e      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80069a0:	4b8a      	ldr	r3, [pc, #552]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069ac:	d106      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069b4:	d102      	bne.n	80069bc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80069b6:	4b87      	ldr	r3, [pc, #540]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ba:	e010      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80069bc:	4b83      	ldr	r3, [pc, #524]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069c8:	d106      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80069d0:	d102      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80069d2:	4b81      	ldr	r3, [pc, #516]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
 80069d6:	e002      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069dc:	e1ed      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80069de:	e1ec      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80069e0:	4b7a      	ldr	r3, [pc, #488]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069ea:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d103      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80069f2:	f7fb fab9 	bl	8001f68 <HAL_RCC_GetPCLK3Freq>
 80069f6:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80069f8:	e1df      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80069fa:	4b74      	ldr	r3, [pc, #464]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a06:	d10b      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8006a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fd fbb1 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1e:	e045      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8006a20:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d10b      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a34:	d107      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a36:	f107 0308 	add.w	r3, r7, #8
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd fd08 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
 8006a44:	e032      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8006a46:	4b61      	ldr	r3, [pc, #388]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d10d      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a58:	d109      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a5a:	4b5c      	ldr	r3, [pc, #368]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	08db      	lsrs	r3, r3, #3
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	4a5a      	ldr	r2, [pc, #360]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6c:	e01e      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8006a6e:	4b57      	ldr	r3, [pc, #348]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7a:	d106      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a82:	d102      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8006a84:	4b53      	ldr	r3, [pc, #332]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	e010      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8006a8a:	4b50      	ldr	r3, [pc, #320]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a96:	d106      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006a9e:	d102      	bne.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8006aa0:	4b4d      	ldr	r3, [pc, #308]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa4:	e002      	b.n	8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aaa:	e186      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006aac:	e185      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006aae:	4b47      	ldr	r3, [pc, #284]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab4:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006ab8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8006aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fb fa3c 	bl	8001f3c <HAL_RCC_GetPCLK2Freq>
 8006ac4:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006ac6:	e178      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8006ac8:	4b40      	ldr	r3, [pc, #256]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ad4:	d10b      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d107      	bne.n	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ade:	f107 0314 	add.w	r3, r7, #20
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fd fb4a 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	e045      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8006aee:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afa:	d10b      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b02:	d107      	bne.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b04:	f107 0308 	add.w	r3, r7, #8
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fd fca1 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
 8006b12:	e032      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8006b14:	4b2d      	ldr	r3, [pc, #180]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d10d      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006b26:	d109      	bne.n	8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b28:	4b28      	ldr	r3, [pc, #160]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	08db      	lsrs	r3, r3, #3
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	4a27      	ldr	r2, [pc, #156]	; (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006b34:	fa22 f303 	lsr.w	r3, r2, r3
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3a:	e01e      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8006b3c:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d106      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b50:	d102      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8006b52:	4b20      	ldr	r3, [pc, #128]	; (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
 8006b56:	e010      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8006b58:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b64:	d106      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006b6c:	d102      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8006b6e:	4b1a      	ldr	r3, [pc, #104]	; (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	e002      	b.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b78:	e11f      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b7a:	e11e      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006b7c:	4b13      	ldr	r3, [pc, #76]	; (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	633b      	str	r3, [r7, #48]	; 0x30
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d85f      	bhi.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8006b8e:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8006b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bad 	.word	0x08006bad
 8006b9c:	08006bbd 	.word	0x08006bbd
 8006ba0:	08006bdd 	.word	0x08006bdd

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006ba4:	f7fb f998 	bl	8001ed8 <HAL_RCC_GetHCLKFreq>
 8006ba8:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006baa:	e053      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bac:	f107 0320 	add.w	r3, r7, #32
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fd f979 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bba:	e04b      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bbc:	f107 0314 	add.w	r3, r7, #20
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fd fadb 	bl	800417c <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006bca:	e043      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006bcc:	44020c00 	.word	0x44020c00
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	003d0900 	.word	0x003d0900
 8006bd8:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006bdc:	4b79      	ldr	r3, [pc, #484]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006be6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006be8:	4b76      	ldr	r3, [pc, #472]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bfa:	4b72      	ldr	r3, [pc, #456]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	08db      	lsrs	r3, r3, #3
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	4a70      	ldr	r2, [pc, #448]	; (8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c0c:	e01e      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c0e:	4b6d      	ldr	r3, [pc, #436]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1a:	d106      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c22:	d102      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006c24:	4b69      	ldr	r3, [pc, #420]	; (8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
 8006c28:	e010      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c2a:	4b66      	ldr	r3, [pc, #408]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c36:	d106      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3e:	d102      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006c40:	4b63      	ldr	r3, [pc, #396]	; (8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8006c42:	637b      	str	r3, [r7, #52]	; 0x34
 8006c44:	e002      	b.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006c4a:	e003      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006c4c:	e002      	b.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c52:	bf00      	nop
          }
        }
        break;
 8006c54:	e0b1      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006c56:	4b5b      	ldr	r3, [pc, #364]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c60:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006c62:	4b58      	ldr	r3, [pc, #352]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d106      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7c:	e01f      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8006c7e:	4b51      	ldr	r3, [pc, #324]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	2b40      	cmp	r3, #64	; 0x40
 8006c92:	d103      	bne.n	8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8006c94:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	e010      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8006c9c:	4b49      	ldr	r3, [pc, #292]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	2b80      	cmp	r3, #128	; 0x80
 8006cae:	d103      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8006cb0:	f248 0312 	movw	r3, #32786	; 0x8012
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	e002      	b.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006cbc:	e07d      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006cbe:	e07c      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006cc0:	4b40      	ldr	r3, [pc, #256]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006cc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006cc6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cca:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006ccc:	4b3d      	ldr	r3, [pc, #244]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd8:	d105      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8006ce0:	4b3c      	ldr	r3, [pc, #240]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	e031      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006ce6:	4b37      	ldr	r3, [pc, #220]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cf2:	d10a      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	2b10      	cmp	r3, #16
 8006cf8:	d107      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cfa:	f107 0320 	add.w	r3, r7, #32
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fd f8d2 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
 8006d08:	e01f      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006d0a:	4b2e      	ldr	r3, [pc, #184]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d103      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8006d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d22:	637b      	str	r3, [r7, #52]	; 0x34
 8006d24:	e011      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d34:	d106      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2b30      	cmp	r3, #48	; 0x30
 8006d3a:	d103      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8006d3c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
 8006d42:	e002      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006d48:	e037      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d4a:	e036      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006d4c:	4b1d      	ldr	r3, [pc, #116]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d56:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5a:	2b10      	cmp	r3, #16
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d5e:	f107 0320 	add.w	r3, r7, #32
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fd f8a0 	bl	8003ea8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d6c:	e025      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d7a:	d10a      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2b20      	cmp	r3, #32
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d82:	f107 0308 	add.w	r3, r7, #8
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd fb62 	bl	8004450 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d90:	e00f      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006d92:	4b0c      	ldr	r3, [pc, #48]	; (8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9e:	d105      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b30      	cmp	r3, #48	; 0x30
 8006da4:	d102      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8006da6:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8006db0:	e003      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006db2:	e002      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006db8:	bf00      	nop
    }
  }

  return (frequency);
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	373c      	adds	r7, #60	; 0x3c
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd90      	pop	{r4, r7, pc}
 8006dc4:	44020c00 	.word	0x44020c00
 8006dc8:	03d09000 	.word	0x03d09000
 8006dcc:	003d0900 	.word	0x003d0900
 8006dd0:	017d7840 	.word	0x017d7840
 8006dd4:	02dc6c00 	.word	0x02dc6c00

08006dd8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006de0:	4b48      	ldr	r3, [pc, #288]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a47      	ldr	r2, [pc, #284]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006dea:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006dec:	f7f9 feda 	bl	8000ba4 <HAL_GetTick>
 8006df0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006df2:	e008      	b.n	8006e06 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006df4:	f7f9 fed6 	bl	8000ba4 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d901      	bls.n	8006e06 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e07a      	b.n	8006efc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e06:	4b3f      	ldr	r3, [pc, #252]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1f0      	bne.n	8006df4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006e12:	4b3c      	ldr	r3, [pc, #240]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6811      	ldr	r1, [r2, #0]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6852      	ldr	r2, [r2, #4]
 8006e26:	0212      	lsls	r2, r2, #8
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	4936      	ldr	r1, [pc, #216]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	025b      	lsls	r3, r3, #9
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	061b      	lsls	r3, r3, #24
 8006e5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e60:	4928      	ldr	r1, [pc, #160]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006e66:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	f023 020c 	bic.w	r2, r3, #12
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	4924      	ldr	r1, [pc, #144]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006e78:	4b22      	ldr	r3, [pc, #136]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	f023 0220 	bic.w	r2, r3, #32
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	491f      	ldr	r1, [pc, #124]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006e8a:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	491c      	ldr	r1, [pc, #112]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9c:	4a19      	ldr	r2, [pc, #100]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006e9e:	f023 0310 	bic.w	r3, r3, #16
 8006ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006ea4:	4b17      	ldr	r3, [pc, #92]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6a12      	ldr	r2, [r2, #32]
 8006eb4:	00d2      	lsls	r2, r2, #3
 8006eb6:	4913      	ldr	r1, [pc, #76]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	4a10      	ldr	r2, [pc, #64]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006ec2:	f043 0310 	orr.w	r3, r3, #16
 8006ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006ec8:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006ece:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ed2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006ed4:	f7f9 fe66 	bl	8000ba4 <HAL_GetTick>
 8006ed8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eda:	e008      	b.n	8006eee <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006edc:	f7f9 fe62 	bl	8000ba4 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e006      	b.n	8006efc <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006eee:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <RCCEx_PLL2_Config+0x12c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0

}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	44020c00 	.word	0x44020c00

08006f08 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006f10:	4b48      	ldr	r3, [pc, #288]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a47      	ldr	r2, [pc, #284]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f1a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f1c:	f7f9 fe42 	bl	8000ba4 <HAL_GetTick>
 8006f20:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f22:	e008      	b.n	8006f36 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f24:	f7f9 fe3e 	bl	8000ba4 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e07a      	b.n	800702c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f36:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f0      	bne.n	8006f24 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006f42:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6811      	ldr	r1, [r2, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6852      	ldr	r2, [r2, #4]
 8006f56:	0212      	lsls	r2, r2, #8
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	4936      	ldr	r1, [pc, #216]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	630b      	str	r3, [r1, #48]	; 0x30
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	025b      	lsls	r3, r3, #9
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	041b      	lsls	r3, r3, #16
 8006f7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f90:	4928      	ldr	r1, [pc, #160]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006f96:	4b27      	ldr	r3, [pc, #156]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9a:	f023 020c 	bic.w	r2, r3, #12
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	4924      	ldr	r1, [pc, #144]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8006fa8:	4b22      	ldr	r3, [pc, #136]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	f023 0220 	bic.w	r2, r3, #32
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	491f      	ldr	r1, [pc, #124]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006fba:	4b1e      	ldr	r3, [pc, #120]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	491c      	ldr	r1, [pc, #112]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fcc:	4a19      	ldr	r2, [pc, #100]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fdc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	6a12      	ldr	r2, [r2, #32]
 8006fe4:	00d2      	lsls	r2, r2, #3
 8006fe6:	4913      	ldr	r1, [pc, #76]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8006fec:	4b11      	ldr	r3, [pc, #68]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	4a10      	ldr	r2, [pc, #64]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006ff2:	f043 0310 	orr.w	r3, r3, #16
 8006ff6:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006ff8:	4b0e      	ldr	r3, [pc, #56]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8006ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007002:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007004:	f7f9 fdce 	bl	8000ba4 <HAL_GetTick>
 8007008:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800700a:	e008      	b.n	800701e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800700c:	f7f9 fdca 	bl	8000ba4 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e006      	b.n	800702c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800701e:	4b05      	ldr	r3, [pc, #20]	; (8007034 <RCCEx_PLL3_Config+0x12c>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007026:	2b00      	cmp	r3, #0
 8007028:	d0f0      	beq.n	800700c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	44020c00 	.word	0x44020c00

08007038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e042      	b.n	80070d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7f9 fbd3 	bl	8000808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2224      	movs	r2, #36	; 0x24
 8007066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 0201 	bic.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fab4 	bl	80075f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 f8c3 	bl	8007214 <UART_SetConfig>
 800708e:	4603      	mov	r3, r0
 8007090:	2b01      	cmp	r3, #1
 8007092:	d101      	bne.n	8007098 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e01b      	b.n	80070d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fb33 	bl	8007734 <UART_CheckIdleState>
 80070ce:	4603      	mov	r3, r0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b08a      	sub	sp, #40	; 0x28
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	4613      	mov	r3, r2
 80070e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	f040 808b 	bne.w	800720a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_UART_Transmit+0x28>
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d101      	bne.n	8007104 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e083      	b.n	800720c <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800710e:	2b80      	cmp	r3, #128	; 0x80
 8007110:	d107      	bne.n	8007122 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007120:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2221      	movs	r2, #33	; 0x21
 800712e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007132:	f7f9 fd37 	bl	8000ba4 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007150:	d108      	bne.n	8007164 <HAL_UART_Transmit+0x8c>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800715a:	2300      	movs	r3, #0
 800715c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	e003      	b.n	800716c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800716c:	e030      	b.n	80071d0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	2180      	movs	r1, #128	; 0x80
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 fb85 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e03d      	b.n	800720c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	3302      	adds	r3, #2
 80071aa:	61bb      	str	r3, [r7, #24]
 80071ac:	e007      	b.n	80071be <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	781a      	ldrb	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1c8      	bne.n	800716e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	2200      	movs	r2, #0
 80071e4:	2140      	movs	r1, #64	; 0x40
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f000 fb4e 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2220      	movs	r2, #32
 80071f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e006      	b.n	800720c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2220      	movs	r2, #32
 8007202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007206:	2300      	movs	r3, #0
 8007208:	e000      	b.n	800720c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800720a:	2302      	movs	r3, #2
  }
}
 800720c:	4618      	mov	r0, r3
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007218:	b094      	sub	sp, #80	; 0x50
 800721a:	af00      	add	r7, sp, #0
 800721c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	4b78      	ldr	r3, [pc, #480]	; (800740c <UART_SetConfig+0x1f8>)
 800722a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	431a      	orrs	r2, r3
 8007236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	431a      	orrs	r2, r3
 800723c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723e:	69db      	ldr	r3, [r3, #28]
 8007240:	4313      	orrs	r3, r2
 8007242:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4971      	ldr	r1, [pc, #452]	; (8007410 <UART_SetConfig+0x1fc>)
 800724c:	4019      	ands	r1, r3
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007254:	430b      	orrs	r3, r1
 8007256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	68d9      	ldr	r1, [r3, #12]
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	ea40 0301 	orr.w	r3, r0, r1
 800726e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b64      	ldr	r3, [pc, #400]	; (800740c <UART_SetConfig+0x1f8>)
 800727c:	429a      	cmp	r2, r3
 800727e:	d009      	beq.n	8007294 <UART_SetConfig+0x80>
 8007280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	4b63      	ldr	r3, [pc, #396]	; (8007414 <UART_SetConfig+0x200>)
 8007286:	429a      	cmp	r2, r3
 8007288:	d004      	beq.n	8007294 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728c:	6a1a      	ldr	r2, [r3, #32]
 800728e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007290:	4313      	orrs	r3, r2
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800729e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a8:	430b      	orrs	r3, r1
 80072aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b2:	f023 000f 	bic.w	r0, r3, #15
 80072b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80072ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	ea40 0301 	orr.w	r3, r0, r1
 80072c2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b53      	ldr	r3, [pc, #332]	; (8007418 <UART_SetConfig+0x204>)
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d102      	bne.n	80072d4 <UART_SetConfig+0xc0>
 80072ce:	2301      	movs	r3, #1
 80072d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d2:	e066      	b.n	80073a2 <UART_SetConfig+0x18e>
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4b50      	ldr	r3, [pc, #320]	; (800741c <UART_SetConfig+0x208>)
 80072da:	429a      	cmp	r2, r3
 80072dc:	d102      	bne.n	80072e4 <UART_SetConfig+0xd0>
 80072de:	2302      	movs	r3, #2
 80072e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e2:	e05e      	b.n	80073a2 <UART_SetConfig+0x18e>
 80072e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	4b4d      	ldr	r3, [pc, #308]	; (8007420 <UART_SetConfig+0x20c>)
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d102      	bne.n	80072f4 <UART_SetConfig+0xe0>
 80072ee:	2304      	movs	r3, #4
 80072f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f2:	e056      	b.n	80073a2 <UART_SetConfig+0x18e>
 80072f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4b4a      	ldr	r3, [pc, #296]	; (8007424 <UART_SetConfig+0x210>)
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d102      	bne.n	8007304 <UART_SetConfig+0xf0>
 80072fe:	2308      	movs	r3, #8
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
 8007302:	e04e      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4b47      	ldr	r3, [pc, #284]	; (8007428 <UART_SetConfig+0x214>)
 800730a:	429a      	cmp	r2, r3
 800730c:	d102      	bne.n	8007314 <UART_SetConfig+0x100>
 800730e:	2310      	movs	r3, #16
 8007310:	64bb      	str	r3, [r7, #72]	; 0x48
 8007312:	e046      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	4b44      	ldr	r3, [pc, #272]	; (800742c <UART_SetConfig+0x218>)
 800731a:	429a      	cmp	r2, r3
 800731c:	d102      	bne.n	8007324 <UART_SetConfig+0x110>
 800731e:	2320      	movs	r3, #32
 8007320:	64bb      	str	r3, [r7, #72]	; 0x48
 8007322:	e03e      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	4b41      	ldr	r3, [pc, #260]	; (8007430 <UART_SetConfig+0x21c>)
 800732a:	429a      	cmp	r2, r3
 800732c:	d102      	bne.n	8007334 <UART_SetConfig+0x120>
 800732e:	2340      	movs	r3, #64	; 0x40
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
 8007332:	e036      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4b3e      	ldr	r3, [pc, #248]	; (8007434 <UART_SetConfig+0x220>)
 800733a:	429a      	cmp	r2, r3
 800733c:	d102      	bne.n	8007344 <UART_SetConfig+0x130>
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	64bb      	str	r3, [r7, #72]	; 0x48
 8007342:	e02e      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b3b      	ldr	r3, [pc, #236]	; (8007438 <UART_SetConfig+0x224>)
 800734a:	429a      	cmp	r2, r3
 800734c:	d103      	bne.n	8007356 <UART_SetConfig+0x142>
 800734e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007352:	64bb      	str	r3, [r7, #72]	; 0x48
 8007354:	e025      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b38      	ldr	r3, [pc, #224]	; (800743c <UART_SetConfig+0x228>)
 800735c:	429a      	cmp	r2, r3
 800735e:	d103      	bne.n	8007368 <UART_SetConfig+0x154>
 8007360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007364:	64bb      	str	r3, [r7, #72]	; 0x48
 8007366:	e01c      	b.n	80073a2 <UART_SetConfig+0x18e>
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	4b34      	ldr	r3, [pc, #208]	; (8007440 <UART_SetConfig+0x22c>)
 800736e:	429a      	cmp	r2, r3
 8007370:	d103      	bne.n	800737a <UART_SetConfig+0x166>
 8007372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007376:	64bb      	str	r3, [r7, #72]	; 0x48
 8007378:	e013      	b.n	80073a2 <UART_SetConfig+0x18e>
 800737a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	4b31      	ldr	r3, [pc, #196]	; (8007444 <UART_SetConfig+0x230>)
 8007380:	429a      	cmp	r2, r3
 8007382:	d103      	bne.n	800738c <UART_SetConfig+0x178>
 8007384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007388:	64bb      	str	r3, [r7, #72]	; 0x48
 800738a:	e00a      	b.n	80073a2 <UART_SetConfig+0x18e>
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <UART_SetConfig+0x1f8>)
 8007392:	429a      	cmp	r2, r3
 8007394:	d103      	bne.n	800739e <UART_SetConfig+0x18a>
 8007396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800739a:	64bb      	str	r3, [r7, #72]	; 0x48
 800739c:	e001      	b.n	80073a2 <UART_SetConfig+0x18e>
 800739e:	2300      	movs	r3, #0
 80073a0:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b19      	ldr	r3, [pc, #100]	; (800740c <UART_SetConfig+0x1f8>)
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d005      	beq.n	80073b8 <UART_SetConfig+0x1a4>
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	4b18      	ldr	r3, [pc, #96]	; (8007414 <UART_SetConfig+0x200>)
 80073b2:	429a      	cmp	r2, r3
 80073b4:	f040 8094 	bne.w	80074e0 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80073b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ba:	2200      	movs	r2, #0
 80073bc:	623b      	str	r3, [r7, #32]
 80073be:	627a      	str	r2, [r7, #36]	; 0x24
 80073c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80073c4:	f7fd f9ae 	bl	8004724 <HAL_RCCEx_GetPeriphCLKFreq>
 80073c8:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80073ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 80f7 	beq.w	80075c0 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <UART_SetConfig+0x234>)
 80073d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073dc:	461a      	mov	r2, r3
 80073de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	4613      	mov	r3, r2
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	4413      	add	r3, r2
 80073f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d305      	bcc.n	8007402 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80073fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073fe:	429a      	cmp	r2, r3
 8007400:	d924      	bls.n	800744c <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007408:	e069      	b.n	80074de <UART_SetConfig+0x2ca>
 800740a:	bf00      	nop
 800740c:	44002400 	.word	0x44002400
 8007410:	cfff69f3 	.word	0xcfff69f3
 8007414:	54002400 	.word	0x54002400
 8007418:	40013800 	.word	0x40013800
 800741c:	40004400 	.word	0x40004400
 8007420:	40004800 	.word	0x40004800
 8007424:	40004c00 	.word	0x40004c00
 8007428:	40005000 	.word	0x40005000
 800742c:	40006400 	.word	0x40006400
 8007430:	40007800 	.word	0x40007800
 8007434:	40007c00 	.word	0x40007c00
 8007438:	40008000 	.word	0x40008000
 800743c:	40006800 	.word	0x40006800
 8007440:	40006c00 	.word	0x40006c00
 8007444:	40008400 	.word	0x40008400
 8007448:	08007cc0 	.word	0x08007cc0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800744c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744e:	2200      	movs	r2, #0
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	61fa      	str	r2, [r7, #28]
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	4a64      	ldr	r2, [pc, #400]	; (80075ec <UART_SetConfig+0x3d8>)
 800745a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800745e:	b29b      	uxth	r3, r3
 8007460:	2200      	movs	r2, #0
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	617a      	str	r2, [r7, #20]
 8007466:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800746a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800746e:	f7f8 ff15 	bl	800029c <__aeabi_uldivmod>
 8007472:	4602      	mov	r2, r0
 8007474:	460b      	mov	r3, r1
 8007476:	4610      	mov	r0, r2
 8007478:	4619      	mov	r1, r3
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	f04f 0300 	mov.w	r3, #0
 8007482:	020b      	lsls	r3, r1, #8
 8007484:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007488:	0202      	lsls	r2, r0, #8
 800748a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800748c:	6849      	ldr	r1, [r1, #4]
 800748e:	0849      	lsrs	r1, r1, #1
 8007490:	2000      	movs	r0, #0
 8007492:	460c      	mov	r4, r1
 8007494:	4605      	mov	r5, r0
 8007496:	eb12 0804 	adds.w	r8, r2, r4
 800749a:	eb43 0905 	adc.w	r9, r3, r5
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	60bb      	str	r3, [r7, #8]
 80074a6:	60fa      	str	r2, [r7, #12]
 80074a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074ac:	4640      	mov	r0, r8
 80074ae:	4649      	mov	r1, r9
 80074b0:	f7f8 fef4 	bl	800029c <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4613      	mov	r3, r2
 80074ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074c2:	d308      	bcc.n	80074d6 <UART_SetConfig+0x2c2>
 80074c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ca:	d204      	bcs.n	80074d6 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80074cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80074d2:	60da      	str	r2, [r3, #12]
 80074d4:	e003      	b.n	80074de <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80074dc:	e070      	b.n	80075c0 <UART_SetConfig+0x3ac>
 80074de:	e06f      	b.n	80075c0 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e8:	d13c      	bne.n	8007564 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80074ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074ec:	2200      	movs	r2, #0
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	607a      	str	r2, [r7, #4]
 80074f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f6:	f7fd f915 	bl	8004724 <HAL_RCCEx_GetPeriphCLKFreq>
 80074fa:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d05e      	beq.n	80075c0 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	4a39      	ldr	r2, [pc, #228]	; (80075ec <UART_SetConfig+0x3d8>)
 8007508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800750c:	461a      	mov	r2, r3
 800750e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007510:	fbb3 f3f2 	udiv	r3, r3, r2
 8007514:	005a      	lsls	r2, r3, #1
 8007516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	441a      	add	r2, r3
 800751e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	fbb2 f3f3 	udiv	r3, r2, r3
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800752a:	2b0f      	cmp	r3, #15
 800752c:	d916      	bls.n	800755c <UART_SetConfig+0x348>
 800752e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007534:	d212      	bcs.n	800755c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007538:	b29b      	uxth	r3, r3
 800753a:	f023 030f 	bic.w	r3, r3, #15
 800753e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	b29b      	uxth	r3, r3
 8007546:	f003 0307 	and.w	r3, r3, #7
 800754a:	b29a      	uxth	r2, r3
 800754c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800754e:	4313      	orrs	r3, r2
 8007550:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007558:	60da      	str	r2, [r3, #12]
 800755a:	e031      	b.n	80075c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007562:	e02d      	b.n	80075c0 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007566:	2200      	movs	r2, #0
 8007568:	469a      	mov	sl, r3
 800756a:	4693      	mov	fp, r2
 800756c:	4650      	mov	r0, sl
 800756e:	4659      	mov	r1, fp
 8007570:	f7fd f8d8 	bl	8004724 <HAL_RCCEx_GetPeriphCLKFreq>
 8007574:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007578:	2b00      	cmp	r3, #0
 800757a:	d021      	beq.n	80075c0 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800757c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <UART_SetConfig+0x3d8>)
 8007582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007586:	461a      	mov	r2, r3
 8007588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758a:	fbb3 f2f2 	udiv	r2, r3, r2
 800758e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	085b      	lsrs	r3, r3, #1
 8007594:	441a      	add	r2, r3
 8007596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	fbb2 f3f3 	udiv	r3, r2, r3
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a2:	2b0f      	cmp	r3, #15
 80075a4:	d909      	bls.n	80075ba <UART_SetConfig+0x3a6>
 80075a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ac:	d205      	bcs.n	80075ba <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60da      	str	r2, [r3, #12]
 80075b8:	e002      	b.n	80075c0 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	2201      	movs	r2, #1
 80075cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d2:	2200      	movs	r2, #0
 80075d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075d8:	2200      	movs	r2, #0
 80075da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3750      	adds	r7, #80	; 0x50
 80075e4:	46bd      	mov	sp, r7
 80075e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ea:	bf00      	nop
 80075ec:	08007cc0 	.word	0x08007cc0

080075f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007662:	f003 0304 	and.w	r3, r3, #4
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	430a      	orrs	r2, r1
 800767e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	430a      	orrs	r2, r1
 80076a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	430a      	orrs	r2, r1
 80076c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01a      	beq.n	8007706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ee:	d10a      	bne.n	8007706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	430a      	orrs	r2, r1
 8007726:	605a      	str	r2, [r3, #4]
  }
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b098      	sub	sp, #96	; 0x60
 8007738:	af02      	add	r7, sp, #8
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007744:	f7f9 fa2e 	bl	8000ba4 <HAL_GetTick>
 8007748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0308 	and.w	r3, r3, #8
 8007754:	2b08      	cmp	r3, #8
 8007756:	d12f      	bne.n	80077b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007760:	2200      	movs	r2, #0
 8007762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f88e 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d022      	beq.n	80077b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	e853 3f00 	ldrex	r3, [r3]
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007786:	653b      	str	r3, [r7, #80]	; 0x50
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	461a      	mov	r2, r3
 800778e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
 8007792:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007798:	e841 2300 	strex	r3, r2, [r1]
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d1e6      	bne.n	8007772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2220      	movs	r2, #32
 80077a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e063      	b.n	8007880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0304 	and.w	r3, r3, #4
 80077c2:	2b04      	cmp	r3, #4
 80077c4:	d149      	bne.n	800785a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ce:	2200      	movs	r2, #0
 80077d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f857 	bl	8007888 <UART_WaitOnFlagUntilTimeout>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d03c      	beq.n	800785a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e8:	e853 3f00 	ldrex	r3, [r3]
 80077ec:	623b      	str	r3, [r7, #32]
   return(result);
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
 8007800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007806:	e841 2300 	strex	r3, r2, [r1]
 800780a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1e6      	bne.n	80077e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	60fb      	str	r3, [r7, #12]
   return(result);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f023 0301 	bic.w	r3, r3, #1
 8007828:	64bb      	str	r3, [r7, #72]	; 0x48
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3308      	adds	r3, #8
 8007830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007832:	61fa      	str	r2, [r7, #28]
 8007834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	69b9      	ldr	r1, [r7, #24]
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	617b      	str	r3, [r7, #20]
   return(result);
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e5      	bne.n	8007812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e012      	b.n	8007880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3758      	adds	r7, #88	; 0x58
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	603b      	str	r3, [r7, #0]
 8007894:	4613      	mov	r3, r2
 8007896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007898:	e049      	b.n	800792e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a0:	d045      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078a2:	f7f9 f97f 	bl	8000ba4 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d302      	bcc.n	80078b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e048      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0304 	and.w	r3, r3, #4
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d031      	beq.n	800792e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d110      	bne.n	80078fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	2208      	movs	r2, #8
 80078de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f838 	bl	8007956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2208      	movs	r2, #8
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e029      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007908:	d111      	bne.n	800792e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f000 f81e 	bl	8007956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e00f      	b.n	800794e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	4013      	ands	r3, r2
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	429a      	cmp	r2, r3
 800793c:	bf0c      	ite	eq
 800793e:	2301      	moveq	r3, #1
 8007940:	2300      	movne	r3, #0
 8007942:	b2db      	uxtb	r3, r3
 8007944:	461a      	mov	r2, r3
 8007946:	79fb      	ldrb	r3, [r7, #7]
 8007948:	429a      	cmp	r2, r3
 800794a:	d0a6      	beq.n	800789a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007956:	b480      	push	{r7}
 8007958:	b095      	sub	sp, #84	; 0x54
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797c:	643b      	str	r3, [r7, #64]	; 0x40
 800797e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e6      	bne.n	800795e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3308      	adds	r3, #8
 8007996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a6:	f023 0301 	bic.w	r3, r3, #1
 80079aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079bc:	e841 2300 	strex	r3, r2, [r1]
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1e3      	bne.n	8007990 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d118      	bne.n	8007a02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f023 0310 	bic.w	r3, r3, #16
 80079e4:	647b      	str	r3, [r7, #68]	; 0x44
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6979      	ldr	r1, [r7, #20]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	613b      	str	r3, [r7, #16]
   return(result);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e6      	bne.n	80079d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2220      	movs	r2, #32
 8007a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a16:	bf00      	nop
 8007a18:	3754      	adds	r7, #84	; 0x54
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b085      	sub	sp, #20
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d101      	bne.n	8007a38 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a34:	2302      	movs	r3, #2
 8007a36:	e027      	b.n	8007a88 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2224      	movs	r2, #36	; 0x24
 8007a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e02d      	b.n	8007b08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2224      	movs	r2, #36	; 0x24
 8007ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 f84f 	bl	8007b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2220      	movs	r2, #32
 8007afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e02d      	b.n	8007b84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2224      	movs	r2, #36	; 0x24
 8007b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 f811 	bl	8007b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d108      	bne.n	8007bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bac:	e031      	b.n	8007c12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bae:	2308      	movs	r3, #8
 8007bb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bb2:	2308      	movs	r3, #8
 8007bb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	0e5b      	lsrs	r3, r3, #25
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	0f5b      	lsrs	r3, r3, #29
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	7b3a      	ldrb	r2, [r7, #12]
 8007bda:	4911      	ldr	r1, [pc, #68]	; (8007c20 <UARTEx_SetNbDataToProcess+0x94>)
 8007bdc:	5c8a      	ldrb	r2, [r1, r2]
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007be2:	7b3a      	ldrb	r2, [r7, #12]
 8007be4:	490f      	ldr	r1, [pc, #60]	; (8007c24 <UARTEx_SetNbDataToProcess+0x98>)
 8007be6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	7b7a      	ldrb	r2, [r7, #13]
 8007bf8:	4909      	ldr	r1, [pc, #36]	; (8007c20 <UARTEx_SetNbDataToProcess+0x94>)
 8007bfa:	5c8a      	ldrb	r2, [r1, r2]
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c00:	7b7a      	ldrb	r2, [r7, #13]
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <UARTEx_SetNbDataToProcess+0x98>)
 8007c04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	08007cd8 	.word	0x08007cd8
 8007c24:	08007ce0 	.word	0x08007ce0

08007c28 <memset>:
 8007c28:	4402      	add	r2, r0
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d100      	bne.n	8007c32 <memset+0xa>
 8007c30:	4770      	bx	lr
 8007c32:	f803 1b01 	strb.w	r1, [r3], #1
 8007c36:	e7f9      	b.n	8007c2c <memset+0x4>

08007c38 <__libc_init_array>:
 8007c38:	b570      	push	{r4, r5, r6, lr}
 8007c3a:	4d0d      	ldr	r5, [pc, #52]	; (8007c70 <__libc_init_array+0x38>)
 8007c3c:	2600      	movs	r6, #0
 8007c3e:	4c0d      	ldr	r4, [pc, #52]	; (8007c74 <__libc_init_array+0x3c>)
 8007c40:	1b64      	subs	r4, r4, r5
 8007c42:	10a4      	asrs	r4, r4, #2
 8007c44:	42a6      	cmp	r6, r4
 8007c46:	d109      	bne.n	8007c5c <__libc_init_array+0x24>
 8007c48:	4d0b      	ldr	r5, [pc, #44]	; (8007c78 <__libc_init_array+0x40>)
 8007c4a:	2600      	movs	r6, #0
 8007c4c:	4c0b      	ldr	r4, [pc, #44]	; (8007c7c <__libc_init_array+0x44>)
 8007c4e:	f000 f817 	bl	8007c80 <_init>
 8007c52:	1b64      	subs	r4, r4, r5
 8007c54:	10a4      	asrs	r4, r4, #2
 8007c56:	42a6      	cmp	r6, r4
 8007c58:	d105      	bne.n	8007c66 <__libc_init_array+0x2e>
 8007c5a:	bd70      	pop	{r4, r5, r6, pc}
 8007c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c60:	3601      	adds	r6, #1
 8007c62:	4798      	blx	r3
 8007c64:	e7ee      	b.n	8007c44 <__libc_init_array+0xc>
 8007c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c6a:	3601      	adds	r6, #1
 8007c6c:	4798      	blx	r3
 8007c6e:	e7f2      	b.n	8007c56 <__libc_init_array+0x1e>
 8007c70:	08007cf0 	.word	0x08007cf0
 8007c74:	08007cf0 	.word	0x08007cf0
 8007c78:	08007cf0 	.word	0x08007cf0
 8007c7c:	08007cf4 	.word	0x08007cf4

08007c80 <_init>:
 8007c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c82:	bf00      	nop
 8007c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c86:	bc08      	pop	{r3}
 8007c88:	469e      	mov	lr, r3
 8007c8a:	4770      	bx	lr

08007c8c <_fini>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr
