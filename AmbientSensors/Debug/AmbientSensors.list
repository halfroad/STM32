
AmbientSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a74  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d48  08009d48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d50  08009d50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d50  08009d50  00019d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009d58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08009d64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08009d64  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010802  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bdf  00000000  00000000  00030887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  00032468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092d  00000000  00000000  00033050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030fd7  00000000  00000000  0003397d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f937  00000000  00000000  00064954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013de3e  00000000  00000000  0007428b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000336c  00000000  00000000  001b20cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001b5438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000000c 	.word	0x2000000c
 800026c:	00000000 	.word	0x00000000
 8000270:	08009cac 	.word	0x08009cac

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000010 	.word	0x20000010
 800028c:	08009cac 	.word	0x08009cac

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2uiz>:
 800086c:	004a      	lsls	r2, r1, #1
 800086e:	d211      	bcs.n	8000894 <__aeabi_d2uiz+0x28>
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000874:	d211      	bcs.n	800089a <__aeabi_d2uiz+0x2e>
 8000876:	d50d      	bpl.n	8000894 <__aeabi_d2uiz+0x28>
 8000878:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d40e      	bmi.n	80008a0 <__aeabi_d2uiz+0x34>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	fa23 f002 	lsr.w	r0, r3, r2
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800089e:	d102      	bne.n	80008a6 <__aeabi_d2uiz+0x3a>
 80008a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr

080008ac <__aeabi_uldivmod>:
 80008ac:	b953      	cbnz	r3, 80008c4 <__aeabi_uldivmod+0x18>
 80008ae:	b94a      	cbnz	r2, 80008c4 <__aeabi_uldivmod+0x18>
 80008b0:	2900      	cmp	r1, #0
 80008b2:	bf08      	it	eq
 80008b4:	2800      	cmpeq	r0, #0
 80008b6:	bf1c      	itt	ne
 80008b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008c0:	f000 b982 	b.w	8000bc8 <__aeabi_idiv0>
 80008c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008cc:	f000 f806 	bl	80008dc <__udivmoddi4>
 80008d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <__udivmoddi4>:
 80008dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008e0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80008e2:	460d      	mov	r5, r1
 80008e4:	4604      	mov	r4, r0
 80008e6:	460f      	mov	r7, r1
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d146      	bne.n	800097a <__udivmoddi4+0x9e>
 80008ec:	428a      	cmp	r2, r1
 80008ee:	4694      	mov	ip, r2
 80008f0:	d95e      	bls.n	80009b0 <__udivmoddi4+0xd4>
 80008f2:	fab2 f382 	clz	r3, r2
 80008f6:	b143      	cbz	r3, 800090a <__udivmoddi4+0x2e>
 80008f8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008fc:	f1c3 0220 	rsb	r2, r3, #32
 8000900:	409f      	lsls	r7, r3
 8000902:	409c      	lsls	r4, r3
 8000904:	fa20 f202 	lsr.w	r2, r0, r2
 8000908:	4317      	orrs	r7, r2
 800090a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800090e:	fa1f f58c 	uxth.w	r5, ip
 8000912:	0c22      	lsrs	r2, r4, #16
 8000914:	fbb7 f1fe 	udiv	r1, r7, lr
 8000918:	fb0e 7711 	mls	r7, lr, r1, r7
 800091c:	fb01 f005 	mul.w	r0, r1, r5
 8000920:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000924:	4290      	cmp	r0, r2
 8000926:	d908      	bls.n	800093a <__udivmoddi4+0x5e>
 8000928:	eb1c 0202 	adds.w	r2, ip, r2
 800092c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x5c>
 8000932:	4290      	cmp	r0, r2
 8000934:	f200 8134 	bhi.w	8000ba0 <__udivmoddi4+0x2c4>
 8000938:	4639      	mov	r1, r7
 800093a:	1a12      	subs	r2, r2, r0
 800093c:	b2a4      	uxth	r4, r4
 800093e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000942:	fb0e 2210 	mls	r2, lr, r0, r2
 8000946:	fb00 f505 	mul.w	r5, r0, r5
 800094a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800094e:	42a5      	cmp	r5, r4
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x88>
 8000952:	eb1c 0404 	adds.w	r4, ip, r4
 8000956:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800095a:	d202      	bcs.n	8000962 <__udivmoddi4+0x86>
 800095c:	42a5      	cmp	r5, r4
 800095e:	f200 8119 	bhi.w	8000b94 <__udivmoddi4+0x2b8>
 8000962:	4610      	mov	r0, r2
 8000964:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000968:	1b64      	subs	r4, r4, r5
 800096a:	2100      	movs	r1, #0
 800096c:	b11e      	cbz	r6, 8000976 <__udivmoddi4+0x9a>
 800096e:	40dc      	lsrs	r4, r3
 8000970:	2300      	movs	r3, #0
 8000972:	e9c6 4300 	strd	r4, r3, [r6]
 8000976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800097a:	428b      	cmp	r3, r1
 800097c:	d908      	bls.n	8000990 <__udivmoddi4+0xb4>
 800097e:	2e00      	cmp	r6, #0
 8000980:	f000 80fc 	beq.w	8000b7c <__udivmoddi4+0x2a0>
 8000984:	2100      	movs	r1, #0
 8000986:	e9c6 0500 	strd	r0, r5, [r6]
 800098a:	4608      	mov	r0, r1
 800098c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000990:	fab3 f183 	clz	r1, r3
 8000994:	2900      	cmp	r1, #0
 8000996:	d14c      	bne.n	8000a32 <__udivmoddi4+0x156>
 8000998:	42ab      	cmp	r3, r5
 800099a:	f0c0 80f2 	bcc.w	8000b82 <__udivmoddi4+0x2a6>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f240 80ef 	bls.w	8000b82 <__udivmoddi4+0x2a6>
 80009a4:	4608      	mov	r0, r1
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d0e5      	beq.n	8000976 <__udivmoddi4+0x9a>
 80009aa:	e9c6 4700 	strd	r4, r7, [r6]
 80009ae:	e7e2      	b.n	8000976 <__udivmoddi4+0x9a>
 80009b0:	b902      	cbnz	r2, 80009b4 <__udivmoddi4+0xd8>
 80009b2:	deff      	udf	#255	; 0xff
 80009b4:	fab2 f382 	clz	r3, r2
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	f040 809f 	bne.w	8000afc <__udivmoddi4+0x220>
 80009be:	1a8a      	subs	r2, r1, r2
 80009c0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009c4:	fa1f f78c 	uxth.w	r7, ip
 80009c8:	2101      	movs	r1, #1
 80009ca:	fbb2 f5fe 	udiv	r5, r2, lr
 80009ce:	fb0e 2015 	mls	r0, lr, r5, r2
 80009d2:	0c22      	lsrs	r2, r4, #16
 80009d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009d8:	fb07 f005 	mul.w	r0, r7, r5
 80009dc:	4290      	cmp	r0, r2
 80009de:	d90f      	bls.n	8000a00 <__udivmoddi4+0x124>
 80009e0:	eb1c 0202 	adds.w	r2, ip, r2
 80009e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80009e8:	bf2c      	ite	cs
 80009ea:	f04f 0901 	movcs.w	r9, #1
 80009ee:	f04f 0900 	movcc.w	r9, #0
 80009f2:	4290      	cmp	r0, r2
 80009f4:	d903      	bls.n	80009fe <__udivmoddi4+0x122>
 80009f6:	f1b9 0f00 	cmp.w	r9, #0
 80009fa:	f000 80ce 	beq.w	8000b9a <__udivmoddi4+0x2be>
 80009fe:	4645      	mov	r5, r8
 8000a00:	1a12      	subs	r2, r2, r0
 8000a02:	b2a4      	uxth	r4, r4
 8000a04:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a08:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0c:	fb00 f707 	mul.w	r7, r0, r7
 8000a10:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a14:	42a7      	cmp	r7, r4
 8000a16:	d908      	bls.n	8000a2a <__udivmoddi4+0x14e>
 8000a18:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000a20:	d202      	bcs.n	8000a28 <__udivmoddi4+0x14c>
 8000a22:	42a7      	cmp	r7, r4
 8000a24:	f200 80b3 	bhi.w	8000b8e <__udivmoddi4+0x2b2>
 8000a28:	4610      	mov	r0, r2
 8000a2a:	1be4      	subs	r4, r4, r7
 8000a2c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a30:	e79c      	b.n	800096c <__udivmoddi4+0x90>
 8000a32:	f1c1 0420 	rsb	r4, r1, #32
 8000a36:	408b      	lsls	r3, r1
 8000a38:	fa05 fc01 	lsl.w	ip, r5, r1
 8000a3c:	fa22 f704 	lsr.w	r7, r2, r4
 8000a40:	40e5      	lsrs	r5, r4
 8000a42:	408a      	lsls	r2, r1
 8000a44:	431f      	orrs	r7, r3
 8000a46:	fa20 f304 	lsr.w	r3, r0, r4
 8000a4a:	4088      	lsls	r0, r1
 8000a4c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	fa1f fc87 	uxth.w	ip, r7
 8000a58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a5c:	fbb5 fef8 	udiv	lr, r5, r8
 8000a60:	fb08 551e 	mls	r5, r8, lr, r5
 8000a64:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000a68:	fb0e f90c 	mul.w	r9, lr, ip
 8000a6c:	45a9      	cmp	r9, r5
 8000a6e:	d90e      	bls.n	8000a8e <__udivmoddi4+0x1b2>
 8000a70:	197d      	adds	r5, r7, r5
 8000a72:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000a76:	bf2c      	ite	cs
 8000a78:	f04f 0b01 	movcs.w	fp, #1
 8000a7c:	f04f 0b00 	movcc.w	fp, #0
 8000a80:	45a9      	cmp	r9, r5
 8000a82:	d903      	bls.n	8000a8c <__udivmoddi4+0x1b0>
 8000a84:	f1bb 0f00 	cmp.w	fp, #0
 8000a88:	f000 808d 	beq.w	8000ba6 <__udivmoddi4+0x2ca>
 8000a8c:	46d6      	mov	lr, sl
 8000a8e:	eba5 0509 	sub.w	r5, r5, r9
 8000a92:	fa1f f983 	uxth.w	r9, r3
 8000a96:	fbb5 f3f8 	udiv	r3, r5, r8
 8000a9a:	fb08 5513 	mls	r5, r8, r3, r5
 8000a9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aa2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000aa6:	45ac      	cmp	ip, r5
 8000aa8:	d906      	bls.n	8000ab8 <__udivmoddi4+0x1dc>
 8000aaa:	197d      	adds	r5, r7, r5
 8000aac:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000ab0:	d201      	bcs.n	8000ab6 <__udivmoddi4+0x1da>
 8000ab2:	45ac      	cmp	ip, r5
 8000ab4:	d87e      	bhi.n	8000bb4 <__udivmoddi4+0x2d8>
 8000ab6:	4643      	mov	r3, r8
 8000ab8:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000abc:	eba5 050c 	sub.w	r5, r5, ip
 8000ac0:	fba3 9802 	umull	r9, r8, r3, r2
 8000ac4:	4545      	cmp	r5, r8
 8000ac6:	46ce      	mov	lr, r9
 8000ac8:	46c4      	mov	ip, r8
 8000aca:	d302      	bcc.n	8000ad2 <__udivmoddi4+0x1f6>
 8000acc:	d106      	bne.n	8000adc <__udivmoddi4+0x200>
 8000ace:	4548      	cmp	r0, r9
 8000ad0:	d204      	bcs.n	8000adc <__udivmoddi4+0x200>
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ad8:	eb68 0c07 	sbc.w	ip, r8, r7
 8000adc:	2e00      	cmp	r6, #0
 8000ade:	d06f      	beq.n	8000bc0 <__udivmoddi4+0x2e4>
 8000ae0:	ebb0 020e 	subs.w	r2, r0, lr
 8000ae4:	eb65 050c 	sbc.w	r5, r5, ip
 8000ae8:	40ca      	lsrs	r2, r1
 8000aea:	fa05 f404 	lsl.w	r4, r5, r4
 8000aee:	40cd      	lsrs	r5, r1
 8000af0:	4618      	mov	r0, r3
 8000af2:	4314      	orrs	r4, r2
 8000af4:	2100      	movs	r1, #0
 8000af6:	e9c6 4500 	strd	r4, r5, [r6]
 8000afa:	e73c      	b.n	8000976 <__udivmoddi4+0x9a>
 8000afc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b00:	f1c3 0220 	rsb	r2, r3, #32
 8000b04:	4099      	lsls	r1, r3
 8000b06:	409c      	lsls	r4, r3
 8000b08:	40d5      	lsrs	r5, r2
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000b12:	fa1f f78c 	uxth.w	r7, ip
 8000b16:	fbb5 f0fe 	udiv	r0, r5, lr
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b26:	fb00 f507 	mul.w	r5, r0, r7
 8000b2a:	428d      	cmp	r5, r1
 8000b2c:	d90e      	bls.n	8000b4c <__udivmoddi4+0x270>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000b36:	bf2c      	ite	cs
 8000b38:	f04f 0901 	movcs.w	r9, #1
 8000b3c:	f04f 0900 	movcc.w	r9, #0
 8000b40:	428d      	cmp	r5, r1
 8000b42:	d902      	bls.n	8000b4a <__udivmoddi4+0x26e>
 8000b44:	f1b9 0f00 	cmp.w	r9, #0
 8000b48:	d031      	beq.n	8000bae <__udivmoddi4+0x2d2>
 8000b4a:	4640      	mov	r0, r8
 8000b4c:	1b49      	subs	r1, r1, r5
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	fbb1 f5fe 	udiv	r5, r1, lr
 8000b54:	fb0e 1115 	mls	r1, lr, r5, r1
 8000b58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b5c:	fb05 f107 	mul.w	r1, r5, r7
 8000b60:	4291      	cmp	r1, r2
 8000b62:	d907      	bls.n	8000b74 <__udivmoddi4+0x298>
 8000b64:	eb1c 0202 	adds.w	r2, ip, r2
 8000b68:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000b6c:	d201      	bcs.n	8000b72 <__udivmoddi4+0x296>
 8000b6e:	4291      	cmp	r1, r2
 8000b70:	d823      	bhi.n	8000bba <__udivmoddi4+0x2de>
 8000b72:	4645      	mov	r5, r8
 8000b74:	1a52      	subs	r2, r2, r1
 8000b76:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b7a:	e726      	b.n	80009ca <__udivmoddi4+0xee>
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	4630      	mov	r0, r6
 8000b80:	e6f9      	b.n	8000976 <__udivmoddi4+0x9a>
 8000b82:	1a84      	subs	r4, r0, r2
 8000b84:	eb65 0203 	sbc.w	r2, r5, r3
 8000b88:	2001      	movs	r0, #1
 8000b8a:	4617      	mov	r7, r2
 8000b8c:	e70b      	b.n	80009a6 <__udivmoddi4+0xca>
 8000b8e:	4464      	add	r4, ip
 8000b90:	3802      	subs	r0, #2
 8000b92:	e74a      	b.n	8000a2a <__udivmoddi4+0x14e>
 8000b94:	4464      	add	r4, ip
 8000b96:	3802      	subs	r0, #2
 8000b98:	e6e4      	b.n	8000964 <__udivmoddi4+0x88>
 8000b9a:	3d02      	subs	r5, #2
 8000b9c:	4462      	add	r2, ip
 8000b9e:	e72f      	b.n	8000a00 <__udivmoddi4+0x124>
 8000ba0:	3902      	subs	r1, #2
 8000ba2:	4462      	add	r2, ip
 8000ba4:	e6c9      	b.n	800093a <__udivmoddi4+0x5e>
 8000ba6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000baa:	443d      	add	r5, r7
 8000bac:	e76f      	b.n	8000a8e <__udivmoddi4+0x1b2>
 8000bae:	3802      	subs	r0, #2
 8000bb0:	4461      	add	r1, ip
 8000bb2:	e7cb      	b.n	8000b4c <__udivmoddi4+0x270>
 8000bb4:	3b02      	subs	r3, #2
 8000bb6:	443d      	add	r5, r7
 8000bb8:	e77e      	b.n	8000ab8 <__udivmoddi4+0x1dc>
 8000bba:	3d02      	subs	r5, #2
 8000bbc:	4462      	add	r2, ip
 8000bbe:	e7d9      	b.n	8000b74 <__udivmoddi4+0x298>
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	4631      	mov	r1, r6
 8000bc4:	e6d7      	b.n	8000976 <__udivmoddi4+0x9a>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bd2:	f000 fc25 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd6:	f000 f833 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bda:	f000 f94f 	bl	8000e7c <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 8000bde:	f000 f8f9 	bl	8000dd4 <MX_MEMORYMAP_Init>
  MX_ADC1_Init();
 8000be2:	f000 f893 	bl	8000d0c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000be6:	f000 f8fd 	bl	8000de4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  char *greeting = {"Welcome to Temperature Sensor Interface."};
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <main+0x68>)
 8000bec:	607b      	str	r3, [r7, #4]
  uint16_t adc;

  HAL_UART_Transmit(&huart3, (uint8_t *)greeting, strlen(greeting), 100);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fb4e 	bl	8000290 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <main+0x6c>)
 8000bfe:	f008 fa81 	bl	8009104 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc1);
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <main+0x70>)
 8000c04:	f001 f8a0 	bl	8001d48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000c08:	2164      	movs	r1, #100	; 0x64
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <main+0x70>)
 8000c0c:	f001 f98a 	bl	8001f24 <HAL_ADC_PollForConversion>
	  adc = HAL_ADC_GetValue(&hadc1);
 8000c10:	480a      	ldr	r0, [pc, #40]	; (8000c3c <main+0x70>)
 8000c12:	f001 fa5f 	bl	80020d4 <HAL_ADC_GetValue>
 8000c16:	4603      	mov	r3, r0
 8000c18:	807b      	strh	r3, [r7, #2]

	  HAL_ADC_Stop(&hadc1);
 8000c1a:	4808      	ldr	r0, [pc, #32]	; (8000c3c <main+0x70>)
 8000c1c:	f001 f94e 	bl	8001ebc <HAL_ADC_Stop>

	  get_temperature(adc);
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f980 	bl	8000f28 <get_temperature>

	  HAL_Delay(500);
 8000c28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c2c:	f000 fc74 	bl	8001518 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000c30:	e7e7      	b.n	8000c02 <main+0x36>
 8000c32:	bf00      	nop
 8000c34:	08009cc4 	.word	0x08009cc4
 8000c38:	20000090 	.word	0x20000090
 8000c3c:	20000028 	.word	0x20000028

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b09c      	sub	sp, #112	; 0x70
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	2250      	movs	r2, #80	; 0x50
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f009 f800 	bl	8009c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c6c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000c70:	6113      	str	r3, [r2, #16]
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c7e:	bf00      	nop
 8000c80:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <SystemClock_Config+0xc8>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	2b08      	cmp	r3, #8
 8000c8a:	d1f9      	bne.n	8000c80 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2302      	movs	r3, #2
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c9e:	2304      	movs	r3, #4
 8000ca0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000ca2:	23fa      	movs	r3, #250	; 0xfa
 8000ca4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000caa:	2302      	movs	r3, #2
 8000cac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fa02 	bl	80030cc <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000cce:	f000 f9b5 	bl	800103c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	231f      	movs	r3, #31
 8000cd4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	2105      	movs	r1, #5
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fe23 	bl	800393c <HAL_RCC_ClockConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000cfc:	f000 f99e 	bl	800103c <Error_Handler>
  }
}
 8000d00:	bf00      	nop
 8000d02:	3770      	adds	r7, #112	; 0x70
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	44020800 	.word	0x44020800

08000d0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	463b      	mov	r3, r7
 8000d14:	2220      	movs	r2, #32
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f008 ff9b 	bl	8009c54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1e:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d20:	4a2b      	ldr	r2, [pc, #172]	; (8000dd0 <MX_ADC1_Init+0xc4>)
 8000d22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000d24:	4b29      	ldr	r3, [pc, #164]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d26:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2c:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d44:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5e:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d86:	4811      	ldr	r0, [pc, #68]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000d88:	f000 fe8a 	bl	8001aa0 <HAL_ADC_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000d92:	f000 f953 	bl	800103c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9a:	2306      	movs	r3, #6
 8000d9c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da2:	237f      	movs	r3, #127	; 0x7f
 8000da4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000da6:	2304      	movs	r3, #4
 8000da8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_ADC1_Init+0xc0>)
 8000db4:	f001 f99c 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000dbe:	f000 f93d 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000028 	.word	0x20000028
 8000dd0:	42028000 	.word	0x42028000

08000dd4 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000de8:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_USART3_UART_Init+0x94>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b19      	ldr	r3, [pc, #100]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b16      	ldr	r3, [pc, #88]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e2c:	4811      	ldr	r0, [pc, #68]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e2e:	f008 f919 	bl	8009064 <HAL_UART_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e38:	f000 f900 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	480d      	ldr	r0, [pc, #52]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e40:	f008 fe3e 	bl	8009ac0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e4a:	f000 f8f7 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e52:	f008 fe73 	bl	8009b3c <HAL_UARTEx_SetRxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e5c:	f000 f8ee 	bl	800103c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e60:	4804      	ldr	r0, [pc, #16]	; (8000e74 <MX_USART3_UART_Init+0x90>)
 8000e62:	f008 fdf4 	bl	8009a4e <HAL_UARTEx_DisableFifoMode>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e6c:	f000 f8e6 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000090 	.word	0x20000090
 8000e78:	40004800 	.word	0x40004800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	4b22      	ldr	r3, [pc, #136]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e98:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000ea4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eb6:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ec0:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000ed6:	f043 0308 	orr.w	r3, r3, #8
 8000eda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ede:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_GPIO_Init+0xa0>)
 8000ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ee4:	f003 0308 	and.w	r3, r3, #8
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2104      	movs	r1, #4
 8000ef0:	480b      	ldr	r0, [pc, #44]	; (8000f20 <MX_GPIO_Init+0xa4>)
 8000ef2:	f002 f8d3 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0xa4>)
 8000f0e:	f001 ff73 	bl	8002df8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	44020c00 	.word	0x44020c00
 8000f20:	42020000 	.word	0x42020000
 8000f24:	00000000 	.word	0x00000000

08000f28 <get_temperature>:

/* USER CODE BEGIN 4 */

void get_temperature(uint16_t temperature1)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
	uint32_t temperature2 = temperature1 * 8.05;
 8000f32:	88fb      	ldrh	r3, [r7, #6]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fc2f 	bl	8000798 <__aeabi_i2d>
 8000f3a:	a30f      	add	r3, pc, #60	; (adr r3, 8000f78 <get_temperature+0x50>)
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f7ff f9ae 	bl	80002a0 <__aeabi_dmul>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4610      	mov	r0, r2
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f7ff fc8e 	bl	800086c <__aeabi_d2uiz>
 8000f50:	4603      	mov	r3, r0
 8000f52:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit(&huart3, "Temperature: ", 13, 10);
 8000f54:	230a      	movs	r3, #10
 8000f56:	220d      	movs	r2, #13
 8000f58:	4905      	ldr	r1, [pc, #20]	; (8000f70 <get_temperature+0x48>)
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <get_temperature+0x4c>)
 8000f5c:	f008 f8d2 	bl	8009104 <HAL_UART_Transmit>

	print(temperature2);
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f80d 	bl	8000f80 <print>
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	08009cf0 	.word	0x08009cf0
 8000f74:	20000090 	.word	0x20000090
 8000f78:	9999999a 	.word	0x9999999a
 8000f7c:	40201999 	.word	0x40201999

08000f80 <print>:

void print(uint32_t number)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	uint8_t char_numbers[] = {"000000\n"};
 8000f88:	4a29      	ldr	r2, [pc, #164]	; (8001030 <print+0xb0>)
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f92:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t i = 5;
 8000f96:	2305      	movs	r3, #5
 8000f98:	75fb      	strb	r3, [r7, #23]

	while (number > 0)
 8000f9a:	e026      	b.n	8000fea <print+0x6a>
	{
		char_numbers[i] = number % 10 + 48;
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4b25      	ldr	r3, [pc, #148]	; (8001034 <print+0xb4>)
 8000fa0:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	1aca      	subs	r2, r1, r3
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	3230      	adds	r2, #48	; 0x30
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	3318      	adds	r3, #24
 8000fba:	443b      	add	r3, r7
 8000fbc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		number = number / 10;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <print+0xb4>)
 8000fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	607b      	str	r3, [r7, #4]

		i --;
 8000fcc:	7dfb      	ldrb	r3, [r7, #23]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]

		if (i == 3)
 8000fd2:	7dfb      	ldrb	r3, [r7, #23]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d108      	bne.n	8000fea <print+0x6a>
		{
			char_numbers[i] = '.';
 8000fd8:	7dfb      	ldrb	r3, [r7, #23]
 8000fda:	3318      	adds	r3, #24
 8000fdc:	443b      	add	r3, r7
 8000fde:	222e      	movs	r2, #46	; 0x2e
 8000fe0:	f803 2c0c 	strb.w	r2, [r3, #-12]
			i --;
 8000fe4:	7dfb      	ldrb	r3, [r7, #23]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	75fb      	strb	r3, [r7, #23]
	while (number > 0)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1d5      	bne.n	8000f9c <print+0x1c>
		}
	}

	char_numbers[i] = number % 10 + 48;
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <print+0xb4>)
 8000ff4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	1aca      	subs	r2, r1, r3
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	3230      	adds	r2, #48	; 0x30
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	3318      	adds	r3, #24
 800100e:	443b      	add	r3, r7
 8001010:	f803 2c0c 	strb.w	r2, [r3, #-12]

	HAL_UART_Transmit(&huart3, &char_numbers[0], 8, 10);
 8001014:	f107 010c 	add.w	r1, r7, #12
 8001018:	230a      	movs	r3, #10
 800101a:	2208      	movs	r2, #8
 800101c:	4806      	ldr	r0, [pc, #24]	; (8001038 <print+0xb8>)
 800101e:	f008 f871 	bl	8009104 <HAL_UART_Transmit>

	HAL_Delay(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f000 fa78 	bl	8001518 <HAL_Delay>
}
 8001028:	bf00      	nop
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	08009d00 	.word	0x08009d00
 8001034:	cccccccd 	.word	0xcccccccd
 8001038:	20000090 	.word	0x20000090

0800103c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001040:	b672      	cpsid	i
}
 8001042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001044:	e7fe      	b.n	8001044 <Error_Handler+0x8>

08001046 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0cc      	sub	sp, #304	; 0x130
 8001058:	af00      	add	r7, sp, #0
 800105a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800105e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001062:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001078:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800107c:	4618      	mov	r0, r3
 800107e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001082:	461a      	mov	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f008 fde5 	bl	8009c54 <memset>
  if(hadc->Instance==ADC1)
 800108a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800108e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a30      	ldr	r2, [pc, #192]	; (8001158 <HAL_ADC_MspInit+0x104>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d157      	bne.n	800114c <HAL_ADC_MspInit+0xf8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 800109c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010a0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80010a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 80010b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010b4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010b8:	2200      	movs	r2, #0
 80010ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 ff7c 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_ADC_MspInit+0x7e>
    {
      Error_Handler();
 80010ce:	f7ff ffb5 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_ADC_MspInit+0x108>)
 80010d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d8:	4a20      	ldr	r2, [pc, #128]	; (800115c <HAL_ADC_MspInit+0x108>)
 80010da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010e2:	4b1e      	ldr	r3, [pc, #120]	; (800115c <HAL_ADC_MspInit+0x108>)
 80010e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80010ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010f0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80010fa:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80010fe:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0x108>)
 8001102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_ADC_MspInit+0x108>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001110:	4b12      	ldr	r3, [pc, #72]	; (800115c <HAL_ADC_MspInit+0x108>)
 8001112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800111e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001128:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800112c:	681b      	ldr	r3, [r3, #0]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001134:	2303      	movs	r3, #3
 8001136:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001140:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001144:	4619      	mov	r1, r3
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <HAL_ADC_MspInit+0x10c>)
 8001148:	f001 fe56 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	42028000 	.word	0x42028000
 800115c:	44020c00 	.word	0x44020c00
 8001160:	42020000 	.word	0x42020000

08001164 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b0cc      	sub	sp, #304	; 0x130
 8001168:	af00      	add	r7, sp, #0
 800116a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800116e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001172:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001188:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800118c:	4618      	mov	r0, r3
 800118e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8001192:	461a      	mov	r2, r3
 8001194:	2100      	movs	r1, #0
 8001196:	f008 fd5d 	bl	8009c54 <memset>
  if(huart->Instance==USART3)
 800119a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800119e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_UART_MspInit+0x110>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d15d      	bne.n	8001268 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011b0:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80011b4:	f04f 0204 	mov.w	r2, #4
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011c4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011c8:	2200      	movs	r2, #0
 80011ca:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fef5 	bl	8003fc0 <HAL_RCCEx_PeriphCLKConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80011dc:	f7ff ff2e 	bl	800103c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <HAL_UART_MspInit+0x114>)
 80011e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011e6:	4a24      	ldr	r2, [pc, #144]	; (8001278 <HAL_UART_MspInit+0x114>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_UART_MspInit+0x114>)
 80011f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011f6:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80011fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011fe:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001208:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800120c:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <HAL_UART_MspInit+0x114>)
 8001210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001214:	4a18      	ldr	r2, [pc, #96]	; (8001278 <HAL_UART_MspInit+0x114>)
 8001216:	f043 0308 	orr.w	r3, r3, #8
 800121a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <HAL_UART_MspInit+0x114>)
 8001220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001224:	f003 0208 	and.w	r2, r3, #8
 8001228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800122c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001236:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800123a:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800123c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001240:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001256:	2307      	movs	r3, #7
 8001258:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800125c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <HAL_UART_MspInit+0x118>)
 8001264:	f001 fdc8 	bl	8002df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001268:	bf00      	nop
 800126a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40004800 	.word	0x40004800
 8001278:	44020c00 	.word	0x44020c00
 800127c:	42020c00 	.word	0x42020c00

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001284:	e7fe      	b.n	8001284 <NMI_Handler+0x4>

08001286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128a:	e7fe      	b.n	800128a <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	e7fe      	b.n	8001290 <MemManage_Handler+0x4>

08001292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001296:	e7fe      	b.n	8001296 <BusFault_Handler+0x4>

08001298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800129c:	e7fe      	b.n	800129c <UsageFault_Handler+0x4>

0800129e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012cc:	f000 f904 	bl	80014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012da:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <SystemInit+0xdc>)
 80012dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e0:	4a33      	ldr	r2, [pc, #204]	; (80013b0 <SystemInit+0xdc>)
 80012e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <SystemInit+0xe0>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <SystemInit+0xe0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <SystemInit+0xe0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80012fc:	4b2d      	ldr	r3, [pc, #180]	; (80013b4 <SystemInit+0xe0>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	492c      	ldr	r1, [pc, #176]	; (80013b4 <SystemInit+0xe0>)
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <SystemInit+0xe4>)
 8001304:	4013      	ands	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <SystemInit+0xe0>)
 800130a:	2200      	movs	r2, #0
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800130e:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <SystemInit+0xe0>)
 8001310:	2200      	movs	r2, #0
 8001312:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <SystemInit+0xe0>)
 8001316:	2200      	movs	r2, #0
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800131a:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <SystemInit+0xe0>)
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <SystemInit+0xe8>)
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001320:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <SystemInit+0xe0>)
 8001322:	2200      	movs	r2, #0
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001326:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <SystemInit+0xe0>)
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <SystemInit+0xe8>)
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800132c:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <SystemInit+0xe0>)
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <SystemInit+0xe0>)
 8001334:	4a21      	ldr	r2, [pc, #132]	; (80013bc <SystemInit+0xe8>)
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001338:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <SystemInit+0xe0>)
 800133a:	2200      	movs	r2, #0
 800133c:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <SystemInit+0xe0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <SystemInit+0xe0>)
 8001344:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001348:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <SystemInit+0xe0>)
 800134c:	2200      	movs	r2, #0
 800134e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001350:	4b17      	ldr	r3, [pc, #92]	; (80013b0 <SystemInit+0xdc>)
 8001352:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001356:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <SystemInit+0xec>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001360:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001368:	d003      	beq.n	8001372 <SystemInit+0x9e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001370:	d117      	bne.n	80013a2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <SystemInit+0xec>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <SystemInit+0xec>)
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <SystemInit+0xf0>)
 8001382:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <SystemInit+0xec>)
 8001386:	4a10      	ldr	r2, [pc, #64]	; (80013c8 <SystemInit+0xf4>)
 8001388:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <SystemInit+0xec>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <SystemInit+0xec>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <SystemInit+0xec>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <SystemInit+0xec>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	61d3      	str	r3, [r2, #28]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	44020c00 	.word	0x44020c00
 80013b8:	eae2eae3 	.word	0xeae2eae3
 80013bc:	01010280 	.word	0x01010280
 80013c0:	40022000 	.word	0x40022000
 80013c4:	08192a3b 	.word	0x08192a3b
 80013c8:	4c5d6e7f 	.word	0x4c5d6e7f

080013cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff ff80 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013fa:	f008 fc33 	bl	8009c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fe:	f7ff fbe5 	bl	8000bcc <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   r0, =_estack
 8001404:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001410:	08009d58 	.word	0x08009d58
  ldr r2, =_sbss
 8001414:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001418:	20000128 	.word	0x20000128

0800141c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_IRQHandler>
	...

08001420 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f001 fcb5 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800142a:	f002 fc3f 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 800142e:	4602      	mov	r2, r0
 8001430:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <HAL_Init+0x40>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	490a      	ldr	r1, [pc, #40]	; (8001464 <HAL_Init+0x44>)
 800143a:	5ccb      	ldrb	r3, [r1, r3]
 800143c:	fa22 f303 	lsr.w	r3, r2, r3
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <HAL_Init+0x48>)
 8001442:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001444:	200f      	movs	r0, #15
 8001446:	f000 f811 	bl	800146c <HAL_InitTick>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e002      	b.n	800145a <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001454:	f7ff fdf7 	bl	8001046 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	44020c00 	.word	0x44020c00
 8001464:	08009d08 	.word	0x08009d08
 8001468:	20000000 	.word	0x20000000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_InitTick+0x60>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e021      	b.n	80014c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <HAL_InitTick+0x64>)
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <HAL_InitTick+0x60>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	4619      	mov	r1, r3
 800148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001492:	fbb2 f3f3 	udiv	r3, r2, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fca1 	bl	8002dde <HAL_SYSTICK_Config>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e00e      	b.n	80014c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b0f      	cmp	r3, #15
 80014aa:	d80a      	bhi.n	80014c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	2200      	movs	r2, #0
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b4:	f001 fc79 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <HAL_InitTick+0x68>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000008 	.word	0x20000008
 80014d0:	20000000 	.word	0x20000000
 80014d4:	20000004 	.word	0x20000004

080014d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <HAL_IncTick+0x20>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_IncTick+0x24>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a04      	ldr	r2, [pc, #16]	; (80014fc <HAL_IncTick+0x24>)
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000124 	.word	0x20000124

08001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return uwTick;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <HAL_GetTick+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000124 	.word	0x20000124

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001530:	d005      	beq.n	800153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001532:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_Delay+0x44>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4413      	add	r3, r2
 800153c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800153e:	bf00      	nop
 8001540:	f7ff ffde 	bl	8001500 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	429a      	cmp	r2, r3
 800154e:	d8f7      	bhi.n	8001540 <HAL_Delay+0x28>
  {
  }
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000008 	.word	0x20000008

08001560 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	609a      	str	r2, [r3, #8]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP0);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015d6:	f043 0201 	orr.w	r2, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80015f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <LL_ADC_EnableChannel0_GPIO+0x24>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	42028000 	.word	0x42028000

08001614 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3360      	adds	r3, #96	; 0x60
 8001626:	461a      	mov	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LL_ADC_SetOffset+0x44>)
 8001636:	4013      	ands	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	430a      	orrs	r2, r1
 8001642:	4313      	orrs	r3, r2
 8001644:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800164c:	bf00      	nop
 800164e:	371c      	adds	r7, #28
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	03fff000 	.word	0x03fff000

0800165c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3360      	adds	r3, #96	; 0x60
 800166a:	461a      	mov	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001688:	b480      	push	{r7}
 800168a:	b087      	sub	sp, #28
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3360      	adds	r3, #96	; 0x60
 8001698:	461a      	mov	r2, r3
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	431a      	orrs	r2, r3
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016b2:	bf00      	nop
 80016b4:	371c      	adds	r7, #28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016be:	b480      	push	{r7}
 80016c0:	b087      	sub	sp, #28
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3360      	adds	r3, #96	; 0x60
 80016ce:	461a      	mov	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016e8:	bf00      	nop
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3360      	adds	r3, #96	; 0x60
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	431a      	orrs	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800171e:	bf00      	nop
 8001720:	371c      	adds	r7, #28
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
 8001732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	615a      	str	r2, [r3, #20]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001776:	b480      	push	{r7}
 8001778:	b087      	sub	sp, #28
 800177a:	af00      	add	r7, sp, #0
 800177c:	60f8      	str	r0, [r7, #12]
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3330      	adds	r3, #48	; 0x30
 8001786:	461a      	mov	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	0a1b      	lsrs	r3, r3, #8
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	211f      	movs	r1, #31
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	401a      	ands	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	0e9b      	lsrs	r3, r3, #26
 80017ae:	f003 011f 	and.w	r1, r3, #31
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	431a      	orrs	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c2:	bf00      	nop
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3314      	adds	r3, #20
 80017de:	461a      	mov	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	0e5b      	lsrs	r3, r3, #25
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	0d1b      	lsrs	r3, r3, #20
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	2107      	movs	r1, #7
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	0d1b      	lsrs	r3, r3, #20
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	431a      	orrs	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001818:	bf00      	nop
 800181a:	371c      	adds	r7, #28
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800183c:	43db      	mvns	r3, r3
 800183e:	401a      	ands	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0318 	and.w	r3, r3, #24
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001848:	40d9      	lsrs	r1, r3
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	400b      	ands	r3, r1
 800184e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	000fffff 	.word	0x000fffff

0800186c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 031f 	and.w	r3, r3, #31
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6093      	str	r3, [r2, #8]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018dc:	d101      	bne.n	80018e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001904:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800192c:	d101      	bne.n	8001932 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001950:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001978:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800197c:	f043 0202 	orr.w	r2, r3, #2
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <LL_ADC_IsEnabled+0x18>
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <LL_ADC_IsEnabled+0x1a>
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d101      	bne.n	80019ce <LL_ADC_IsDisableOngoing+0x18>
 80019ca:	2301      	movs	r3, #1
 80019cc:	e000      	b.n	80019d0 <LL_ADC_IsDisableOngoing+0x1a>
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	f043 0210 	orr.w	r2, r3, #16
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d101      	bne.n	8001a44 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a62:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e136      	b.n	8001d28 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d109      	bne.n	8001adc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fac3 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fef1 	bl	80018c8 <LL_ADC_IsDeepPowerDownEnabled>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fed7 	bl	80018a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff0c 	bl	8001918 <LL_ADC_IsInternalRegulatorEnabled>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d115      	bne.n	8001b32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fef0 	bl	80018f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b10:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <HAL_ADC_Init+0x290>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	4a87      	ldr	r2, [pc, #540]	; (8001d34 <HAL_ADC_Init+0x294>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff feee 	bl	8001918 <LL_ADC_IsInternalRegulatorEnabled>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f043 0210 	orr.w	r2, r3, #16
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b52:	f043 0201 	orr.w	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff62 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001b68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f040 80cf 	bne.w	8001d16 <HAL_ADC_Init+0x276>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 80cb 	bne.w	8001d16 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b88:	f043 0202 	orr.w	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fefb 	bl	8001990 <LL_ADC_IsEnabled>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d110      	bne.n	8001bc2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ba0:	4865      	ldr	r0, [pc, #404]	; (8001d38 <HAL_ADC_Init+0x298>)
 8001ba2:	f7ff fef5 	bl	8001990 <LL_ADC_IsEnabled>
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4864      	ldr	r0, [pc, #400]	; (8001d3c <HAL_ADC_Init+0x29c>)
 8001baa:	f7ff fef1 	bl	8001990 <LL_ADC_IsEnabled>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4323      	orrs	r3, r4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4860      	ldr	r0, [pc, #384]	; (8001d40 <HAL_ADC_Init+0x2a0>)
 8001bbe:	f7ff fccf 	bl	8001560 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	7e5b      	ldrb	r3, [r3, #25]
 8001bc6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bcc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001bd2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001bd8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d106      	bne.n	8001bfe <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	045b      	lsls	r3, r3, #17
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d009      	beq.n	8001c1a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	4b48      	ldr	r3, [pc, #288]	; (8001d44 <HAL_ADC_Init+0x2a4>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6812      	ldr	r2, [r2, #0]
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	430b      	orrs	r3, r1
 8001c2c:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff16 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 8001c4e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d13d      	bne.n	8001cd2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d13a      	bne.n	8001cd2 <HAL_ADC_Init+0x232>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	7e1b      	ldrb	r3, [r3, #24]
 8001c60:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c68:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c78:	f023 0302 	bic.w	r3, r3, #2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	69b9      	ldr	r1, [r7, #24]
 8001c82:	430b      	orrs	r3, r1
 8001c84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d118      	bne.n	8001cc2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca6:	4311      	orrs	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	611a      	str	r2, [r3, #16]
 8001cc0:	e007      	b.n	8001cd2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0201 	bic.w	r2, r2, #1
 8001cd0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f023 010f 	bic.w	r1, r3, #15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	1e5a      	subs	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	e007      	b.n	8001d04 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 020f 	bic.w	r2, r2, #15
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f023 0303 	bic.w	r3, r3, #3
 8001d0c:	f043 0201 	orr.w	r2, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	659a      	str	r2, [r3, #88]	; 0x58
 8001d14:	e007      	b.n	8001d26 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	f043 0210 	orr.w	r2, r3, #16
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3724      	adds	r7, #36	; 0x24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd90      	pop	{r4, r7, pc}
 8001d30:	20000000 	.word	0x20000000
 8001d34:	053e2d63 	.word	0x053e2d63
 8001d38:	42028000 	.word	0x42028000
 8001d3c:	42028100 	.word	0x42028100
 8001d40:	42028300 	.word	0x42028300
 8001d44:	fff04007 	.word	0xfff04007

08001d48 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d50:	4857      	ldr	r0, [pc, #348]	; (8001eb0 <HAL_ADC_Start+0x168>)
 8001d52:	f7ff fd8b 	bl	800186c <LL_ADC_GetMultimode>
 8001d56:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fe65 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f040 809c 	bne.w	8001ea2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_Start+0x30>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e097      	b.n	8001ea8 <HAL_ADC_Start+0x160>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fe73 	bl	8002a6c <ADC_Enable>
 8001d86:	4603      	mov	r3, r0
 8001d88:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d8a:	7dfb      	ldrb	r3, [r7, #23]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f040 8083 	bne.w	8001e98 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a42      	ldr	r2, [pc, #264]	; (8001eb4 <HAL_ADC_Start+0x16c>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d002      	beq.n	8001db6 <HAL_ADC_Start+0x6e>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_Start+0x70>
 8001db6:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_ADC_Start+0x170>)
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d002      	beq.n	8001dc6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	f023 0206 	bic.w	r2, r3, #6
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dec:	e002      	b.n	8001df4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	221c      	movs	r2, #28
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a2a      	ldr	r2, [pc, #168]	; (8001eb4 <HAL_ADC_Start+0x16c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d002      	beq.n	8001e14 <HAL_ADC_Start+0xcc>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e000      	b.n	8001e16 <HAL_ADC_Start+0xce>
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <HAL_ADC_Start+0x170>)
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d008      	beq.n	8001e30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d002      	beq.n	8001e30 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d114      	bne.n	8001e5a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fdc2 	bl	80019dc <LL_ADC_REG_StartConversion>
 8001e58:	e025      	b.n	8001ea6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a12      	ldr	r2, [pc, #72]	; (8001eb4 <HAL_ADC_Start+0x16c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d002      	beq.n	8001e76 <HAL_ADC_Start+0x12e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	e000      	b.n	8001e78 <HAL_ADC_Start+0x130>
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_ADC_Start+0x170>)
 8001e78:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00f      	beq.n	8001ea6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e8e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	; 0x58
 8001e96:	e006      	b.n	8001ea6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001ea0:	e001      	b.n	8001ea6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	42028300 	.word	0x42028300
 8001eb4:	42028100 	.word	0x42028100
 8001eb8:	42028000 	.word	0x42028000

08001ebc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Stop+0x16>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e023      	b.n	8001f1a <HAL_ADC_Stop+0x5e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001eda:	2103      	movs	r1, #3
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fd09 	bl	80028f4 <ADC_ConversionStop>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001ee6:	7bfb      	ldrb	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 fe3f 	bl	8002b70 <ADC_Disable>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f04:	f023 0301 	bic.w	r3, r3, #1
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2e:	4866      	ldr	r0, [pc, #408]	; (80020c8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f30:	f7ff fc9c 	bl	800186c <LL_ADC_GetMultimode>
 8001f34:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e02a      	b.n	8001f9a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b05      	cmp	r3, #5
 8001f4e:	d002      	beq.n	8001f56 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b09      	cmp	r3, #9
 8001f54:	d111      	bne.n	8001f7a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	f043 0220 	orr.w	r2, r3, #32
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0a4      	b.n	80020be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f74:	2304      	movs	r3, #4
 8001f76:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001f78:	e00f      	b.n	8001f9a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001f7a:	4853      	ldr	r0, [pc, #332]	; (80020c8 <HAL_ADC_PollForConversion+0x1a4>)
 8001f7c:	f7ff fc84 	bl	8001888 <LL_ADC_GetMultiDMATransfer>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e093      	b.n	80020be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001f96:	2304      	movs	r3, #4
 8001f98:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f9a:	f7ff fab1 	bl	8001500 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fa0:	e021      	b.n	8001fe6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001faa:	f7ff faa9 	bl	8001500 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <HAL_ADC_PollForConversion+0x9c>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d112      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e06b      	b.n	80020be <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0d6      	beq.n	8001fa2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fba3 	bl	8001750 <LL_ADC_REG_IsTriggerSourceSWStart>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01c      	beq.n	800204a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e5b      	ldrb	r3, [r3, #25]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d118      	bne.n	800204a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b08      	cmp	r3, #8
 8002024:	d111      	bne.n	800204a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d105      	bne.n	800204a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_ADC_PollForConversion+0x1a8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d002      	beq.n	800205a <HAL_ADC_PollForConversion+0x136>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	e000      	b.n	800205c <HAL_ADC_PollForConversion+0x138>
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_ADC_PollForConversion+0x1ac>)
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	4293      	cmp	r3, r2
 8002062:	d008      	beq.n	8002076 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2b05      	cmp	r3, #5
 800206e:	d002      	beq.n	8002076 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b09      	cmp	r3, #9
 8002074:	d104      	bne.n	8002080 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	e00c      	b.n	800209a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a11      	ldr	r2, [pc, #68]	; (80020cc <HAL_ADC_PollForConversion+0x1a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d002      	beq.n	8002090 <HAL_ADC_PollForConversion+0x16c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e000      	b.n	8002092 <HAL_ADC_PollForConversion+0x16e>
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_ADC_PollForConversion+0x1ac>)
 8002092:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	2b08      	cmp	r3, #8
 800209e:	d104      	bne.n	80020aa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2208      	movs	r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e008      	b.n	80020bc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	220c      	movs	r2, #12
 80020ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3720      	adds	r7, #32
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	42028300 	.word	0x42028300
 80020cc:	42028100 	.word	0x42028100
 80020d0:	42028000 	.word	0x42028000

080020d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b0b6      	sub	sp, #216	; 0xd8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x22>
 800210e:	2302      	movs	r3, #2
 8002110:	e3d8      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x7d4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fc84 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 83bd 	bne.w	80028a6 <HAL_ADC_ConfigChannel+0x7b6>
  {
    if (pConfig->Channel == ADC_CHANNEL_0)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d104      	bne.n	800213e <HAL_ADC_ConfigChannel+0x4e>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fa57 	bl	80015ec <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6859      	ldr	r1, [r3, #4]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	f7ff fb13 	bl	8001776 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fc69 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 800215a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fc89 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 8002168:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800216c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 81d9 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x438>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002176:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 81d4 	bne.w	8002528 <HAL_ADC_ConfigChannel+0x438>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002188:	d10f      	bne.n	80021aa <HAL_ADC_ConfigChannel+0xba>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	f7ff fb1a 	bl	80017ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fac1 	bl	800172a <LL_ADC_SetSamplingTimeCommonConfig>
 80021a8:	e00e      	b.n	80021c8 <HAL_ADC_ConfigChannel+0xd8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6819      	ldr	r1, [r3, #0]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f7ff fb09 	bl	80017ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fab1 	bl	800172a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	695a      	ldr	r2, [r3, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	08db      	lsrs	r3, r3, #3
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d022      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x140>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80021fa:	f7ff fa0b 	bl	8001614 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6919      	ldr	r1, [r3, #16]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	461a      	mov	r2, r3
 800220c:	f7ff fa57 	bl	80016be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x136>
 8002220:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002224:	e000      	b.n	8002228 <HAL_ADC_ConfigChannel+0x138>
 8002226:	2300      	movs	r3, #0
 8002228:	461a      	mov	r2, r3
 800222a:	f7ff fa63 	bl	80016f4 <LL_ADC_SetOffsetSaturation>
 800222e:	e17b      	b.n	8002528 <HAL_ADC_ConfigChannel+0x438>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fa10 	bl	800165c <LL_ADC_GetOffsetChannel>
 800223c:	4603      	mov	r3, r0
 800223e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10a      	bne.n	800225c <HAL_ADC_ConfigChannel+0x16c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fa05 	bl	800165c <LL_ADC_GetOffsetChannel>
 8002252:	4603      	mov	r3, r0
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	f003 021f 	and.w	r2, r3, #31
 800225a:	e01e      	b.n	800229a <HAL_ADC_ConfigChannel+0x1aa>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f9fa 	bl	800165c <LL_ADC_GetOffsetChannel>
 8002268:	4603      	mov	r3, r0
 800226a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002272:	fa93 f3a3 	rbit	r3, r3
 8002276:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 800227a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800227e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8002282:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x19e>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e004      	b.n	8002298 <HAL_ADC_ConfigChannel+0x1a8>
  return __builtin_clz(value);
 800228e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002292:	fab3 f383 	clz	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d105      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x1c2>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0e9b      	lsrs	r3, r3, #26
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	e018      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80022c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80022ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x1ea>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
  return __builtin_clz(value);
 80022da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x206>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f9c9 	bl	8001688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff f9ad 	bl	800165c <LL_ADC_GetOffsetChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x232>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f9a2 	bl	800165c <LL_ADC_GetOffsetChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	e01e      	b.n	8002360 <HAL_ADC_ConfigChannel+0x270>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2101      	movs	r1, #1
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff f997 	bl	800165c <LL_ADC_GetOffsetChannel>
 800232e:	4603      	mov	r3, r0
 8002330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002338:	fa93 f3a3 	rbit	r3, r3
 800233c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002340:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002344:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002348:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x264>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e004      	b.n	800235e <HAL_ADC_ConfigChannel+0x26e>
  return __builtin_clz(value);
 8002354:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002358:	fab3 f383 	clz	r3, r3
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002368:	2b00      	cmp	r3, #0
 800236a:	d105      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x288>
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	0e9b      	lsrs	r3, r3, #26
 8002372:	f003 031f 	and.w	r3, r3, #31
 8002376:	e018      	b.n	80023aa <HAL_ADC_ConfigChannel+0x2ba>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002380:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800238c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x2b0>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e004      	b.n	80023aa <HAL_ADC_ConfigChannel+0x2ba>
  return __builtin_clz(value);
 80023a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023a4:	fab3 f383 	clz	r3, r3
 80023a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d106      	bne.n	80023bc <HAL_ADC_ConfigChannel+0x2cc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff f966 	bl	8001688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f94a 	bl	800165c <LL_ADC_GetOffsetChannel>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d10a      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x2f8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2102      	movs	r1, #2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff f93f 	bl	800165c <LL_ADC_GetOffsetChannel>
 80023de:	4603      	mov	r3, r0
 80023e0:	0e9b      	lsrs	r3, r3, #26
 80023e2:	f003 021f 	and.w	r2, r3, #31
 80023e6:	e01e      	b.n	8002426 <HAL_ADC_ConfigChannel+0x336>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2102      	movs	r1, #2
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f934 	bl	800165c <LL_ADC_GetOffsetChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002406:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800240a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800240e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_ConfigChannel+0x32a>
    return 32U;
 8002416:	2320      	movs	r3, #32
 8002418:	e004      	b.n	8002424 <HAL_ADC_ConfigChannel+0x334>
  return __builtin_clz(value);
 800241a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800242e:	2b00      	cmp	r3, #0
 8002430:	d105      	bne.n	800243e <HAL_ADC_ConfigChannel+0x34e>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e9b      	lsrs	r3, r3, #26
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	e016      	b.n	800246c <HAL_ADC_ConfigChannel+0x37c>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002450:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002456:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x372>
    return 32U;
 800245e:	2320      	movs	r3, #32
 8002460:	e004      	b.n	800246c <HAL_ADC_ConfigChannel+0x37c>
  return __builtin_clz(value);
 8002462:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002466:	fab3 f383 	clz	r3, r3
 800246a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800246c:	429a      	cmp	r2, r3
 800246e:	d106      	bne.n	800247e <HAL_ADC_ConfigChannel+0x38e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2200      	movs	r2, #0
 8002476:	2102      	movs	r1, #2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f905 	bl	8001688 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2103      	movs	r1, #3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff f8e9 	bl	800165c <LL_ADC_GetOffsetChannel>
 800248a:	4603      	mov	r3, r0
 800248c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10a      	bne.n	80024aa <HAL_ADC_ConfigChannel+0x3ba>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2103      	movs	r1, #3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff f8de 	bl	800165c <LL_ADC_GetOffsetChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	0e9b      	lsrs	r3, r3, #26
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	e017      	b.n	80024da <HAL_ADC_ConfigChannel+0x3ea>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2103      	movs	r1, #3
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff f8d3 	bl	800165c <LL_ADC_GetOffsetChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80024c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x3e0>
    return 32U;
 80024cc:	2320      	movs	r3, #32
 80024ce:	e003      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x3e8>
  return __builtin_clz(value);
 80024d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d2:	fab3 f383 	clz	r3, r3
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <HAL_ADC_ConfigChannel+0x402>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	0e9b      	lsrs	r3, r3, #26
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	e011      	b.n	8002516 <HAL_ADC_ConfigChannel+0x426>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002502:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_ADC_ConfigChannel+0x41e>
    return 32U;
 800250a:	2320      	movs	r3, #32
 800250c:	e003      	b.n	8002516 <HAL_ADC_ConfigChannel+0x426>
  return __builtin_clz(value);
 800250e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002510:	fab3 f383 	clz	r3, r3
 8002514:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002516:	429a      	cmp	r2, r3
 8002518:	d106      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x438>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2200      	movs	r2, #0
 8002520:	2103      	movs	r1, #3
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff f8b0 	bl	8001688 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fa2f 	bl	8001990 <LL_ADC_IsEnabled>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 813f 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x6c8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	461a      	mov	r2, r3
 8002548:	f7ff f96c 	bl	8001824 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a8e      	ldr	r2, [pc, #568]	; (800278c <HAL_ADC_ConfigChannel+0x69c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	f040 8130 	bne.w	80027b8 <HAL_ADC_ConfigChannel+0x6c8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x490>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	0e9b      	lsrs	r3, r3, #26
 800256e:	3301      	adds	r3, #1
 8002570:	f003 031f 	and.w	r3, r3, #31
 8002574:	2b09      	cmp	r3, #9
 8002576:	bf94      	ite	ls
 8002578:	2301      	movls	r3, #1
 800257a:	2300      	movhi	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	e019      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x4c4>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800258e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002590:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002592:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800259c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	f003 031f 	and.w	r3, r3, #31
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	bf94      	ite	ls
 80025ae:	2301      	movls	r3, #1
 80025b0:	2300      	movhi	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d079      	beq.n	80026ac <HAL_ADC_ConfigChannel+0x5bc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x4e4>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	069b      	lsls	r3, r3, #26
 80025ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025d2:	e015      	b.n	8002600 <HAL_ADC_ConfigChannel+0x510>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80025e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x500>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x508>
  return __builtin_clz(value);
 80025f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	069b      	lsls	r3, r3, #26
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x530>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 031f 	and.w	r3, r3, #31
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	e017      	b.n	8002650 <HAL_ADC_ConfigChannel+0x560>
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002628:	fa93 f3a3 	rbit	r3, r3
 800262c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800262e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_ADC_ConfigChannel+0x54c>
    return 32U;
 8002638:	2320      	movs	r3, #32
 800263a:	e003      	b.n	8002644 <HAL_ADC_ConfigChannel+0x554>
  return __builtin_clz(value);
 800263c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800263e:	fab3 f383 	clz	r3, r3
 8002642:	b2db      	uxtb	r3, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	2101      	movs	r1, #1
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	ea42 0103 	orr.w	r1, r2, r3
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10a      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x586>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	051b      	lsls	r3, r3, #20
 8002674:	e018      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x5b8>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x5a2>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x5aa>
  return __builtin_clz(value);
 8002692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f003 021f 	and.w	r2, r3, #31
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026a8:	430b      	orrs	r3, r1
 80026aa:	e080      	b.n	80027ae <HAL_ADC_ConfigChannel+0x6be>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d107      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x5d8>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0e9b      	lsrs	r3, r3, #26
 80026be:	3301      	adds	r3, #1
 80026c0:	069b      	lsls	r3, r3, #26
 80026c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026c6:	e015      	b.n	80026f4 <HAL_ADC_ConfigChannel+0x604>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x5f4>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x5fc>
  return __builtin_clz(value);
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	3301      	adds	r3, #1
 80026ee:	069b      	lsls	r3, r3, #26
 80026f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d109      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x624>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	2101      	movs	r1, #1
 800270e:	fa01 f303 	lsl.w	r3, r1, r3
 8002712:	e017      	b.n	8002744 <HAL_ADC_ConfigChannel+0x654>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	61fb      	str	r3, [r7, #28]
  return result;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_ADC_ConfigChannel+0x640>
    return 32U;
 800272c:	2320      	movs	r3, #32
 800272e:	e003      	b.n	8002738 <HAL_ADC_ConfigChannel+0x648>
  return __builtin_clz(value);
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10d      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x680>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	3b1e      	subs	r3, #30
 8002768:	051b      	lsls	r3, r3, #20
 800276a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800276e:	e01d      	b.n	80027ac <HAL_ADC_ConfigChannel+0x6bc>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	613b      	str	r3, [r7, #16]
  return result;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e005      	b.n	8002798 <HAL_ADC_ConfigChannel+0x6a8>
 800278c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	fab3 f383 	clz	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f003 021f 	and.w	r2, r3, #31
 800279e:	4613      	mov	r3, r2
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4413      	add	r3, r2
 80027a4:	3b1e      	subs	r3, #30
 80027a6:	051b      	lsls	r3, r3, #20
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027ac:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027b2:	4619      	mov	r1, r3
 80027b4:	f7ff f80b 	bl	80017ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b43      	ldr	r3, [pc, #268]	; (80028cc <HAL_ADC_ConfigChannel+0x7dc>)
 80027be:	4013      	ands	r3, r2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d079      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027c4:	4842      	ldr	r0, [pc, #264]	; (80028d0 <HAL_ADC_ConfigChannel+0x7e0>)
 80027c6:	f7fe fef1 	bl	80015ac <LL_ADC_GetCommonPathInternalCh>
 80027ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a40      	ldr	r2, [pc, #256]	; (80028d4 <HAL_ADC_ConfigChannel+0x7e4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d124      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11e      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a3b      	ldr	r2, [pc, #236]	; (80028d8 <HAL_ADC_ConfigChannel+0x7e8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d164      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027f6:	4619      	mov	r1, r3
 80027f8:	4835      	ldr	r0, [pc, #212]	; (80028d0 <HAL_ADC_ConfigChannel+0x7e0>)
 80027fa:	f7fe fec4 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_ADC_ConfigChannel+0x7ec>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <HAL_ADC_ConfigChannel+0x7f0>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	099b      	lsrs	r3, r3, #6
 800280c:	3301      	adds	r3, #1
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002812:	e002      	b.n	800281a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	3b01      	subs	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002820:	e04a      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_ADC_ConfigChannel+0x7f4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d113      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800282c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10d      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <HAL_ADC_ConfigChannel+0x7f8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d13a      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002842:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	4619      	mov	r1, r3
 800284c:	4820      	ldr	r0, [pc, #128]	; (80028d0 <HAL_ADC_ConfigChannel+0x7e0>)
 800284e:	f7fe fe9a 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002852:	e031      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a24      	ldr	r2, [pc, #144]	; (80028ec <HAL_ADC_ConfigChannel+0x7fc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d113      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x796>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800285e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10d      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x796>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1a      	ldr	r2, [pc, #104]	; (80028d8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d121      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002878:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800287c:	4619      	mov	r1, r3
 800287e:	4814      	ldr	r0, [pc, #80]	; (80028d0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002880:	f7fe fe81 	bl	8001586 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002884:	e018      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a19      	ldr	r2, [pc, #100]	; (80028f0 <HAL_ADC_ConfigChannel+0x800>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d113      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a10      	ldr	r2, [pc, #64]	; (80028d8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fe92 	bl	80015c8 <LL_ADC_EnableChannelVDDcore>
 80028a4:	e008      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x7c8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80028c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	37d8      	adds	r7, #216	; 0xd8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	80080000 	.word	0x80080000
 80028d0:	42028300 	.word	0x42028300
 80028d4:	c3210000 	.word	0xc3210000
 80028d8:	42028000 	.word	0x42028000
 80028dc:	20000000 	.word	0x20000000
 80028e0:	053e2d63 	.word	0x053e2d63
 80028e4:	43290000 	.word	0x43290000
 80028e8:	42028100 	.word	0x42028100
 80028ec:	c7520000 	.word	0xc7520000
 80028f0:	475a0000 	.word	0x475a0000

080028f4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f88e 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 8002910:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7ff f8af 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 800291c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d103      	bne.n	800292c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8098 	beq.w	8002a5c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d02a      	beq.n	8002990 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7e5b      	ldrb	r3, [r3, #25]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d126      	bne.n	8002990 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7e1b      	ldrb	r3, [r3, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d122      	bne.n	8002990 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800294a:	2301      	movs	r3, #1
 800294c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800294e:	e014      	b.n	800297a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4a45      	ldr	r2, [pc, #276]	; (8002a68 <ADC_ConversionStop+0x174>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d90d      	bls.n	8002974 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	f043 0210 	orr.w	r2, r3, #16
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e074      	b.n	8002a5e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d1e3      	bne.n	8002950 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d014      	beq.n	80029c0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f846 	bl	8001a2c <LL_ADC_REG_IsConversionOngoing>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00c      	beq.n	80029c0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff f803 	bl	80019b6 <LL_ADC_IsDisableOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d104      	bne.n	80029c0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f822 	bl	8001a04 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d014      	beq.n	80029f0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f855 	bl	8001a7a <LL_ADC_INJ_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe ffeb 	bl	80019b6 <LL_ADC_IsDisableOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d104      	bne.n	80029f0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f831 	bl	8001a52 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d005      	beq.n	8002a02 <ADC_ConversionStop+0x10e>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d105      	bne.n	8002a08 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80029fc:	230c      	movs	r3, #12
 80029fe:	617b      	str	r3, [r7, #20]
        break;
 8002a00:	e005      	b.n	8002a0e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a02:	2308      	movs	r3, #8
 8002a04:	617b      	str	r3, [r7, #20]
        break;
 8002a06:	e002      	b.n	8002a0e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	617b      	str	r3, [r7, #20]
        break;
 8002a0c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fd77 	bl	8001500 <HAL_GetTick>
 8002a12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a14:	e01b      	b.n	8002a4e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a16:	f7fe fd73 	bl	8001500 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d914      	bls.n	8002a4e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00d      	beq.n	8002a4e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a36:	f043 0210 	orr.w	r2, r3, #16
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	f043 0201 	orr.w	r2, r3, #1
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e007      	b.n	8002a5e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1dc      	bne.n	8002a16 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3720      	adds	r7, #32
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	a33fffff 	.word	0xa33fffff

08002a6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fe ff87 	bl	8001990 <LL_ADC_IsEnabled>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d166      	bne.n	8002b56 <ADC_Enable+0xea>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <ADC_Enable+0xf4>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00d      	beq.n	8002ab2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9a:	f043 0210 	orr.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f043 0201 	orr.w	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e052      	b.n	8002b58 <ADC_Enable+0xec>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe ff42 	bl	8001940 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002abc:	4829      	ldr	r0, [pc, #164]	; (8002b64 <ADC_Enable+0xf8>)
 8002abe:	f7fe fd75 	bl	80015ac <LL_ADC_GetCommonPathInternalCh>
 8002ac2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d010      	beq.n	8002aee <ADC_Enable+0x82>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <ADC_Enable+0xfc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	099b      	lsrs	r3, r3, #6
 8002ad2:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <ADC_Enable+0x100>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	099b      	lsrs	r3, r3, #6
 8002ada:	3301      	adds	r3, #1
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ae0:	e002      	b.n	8002ae8 <ADC_Enable+0x7c>
      {
        wait_loop_index--;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <ADC_Enable+0x76>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fd07 	bl	8001500 <HAL_GetTick>
 8002af2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002af4:	e028      	b.n	8002b48 <ADC_Enable+0xdc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe ff48 	bl	8001990 <LL_ADC_IsEnabled>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d104      	bne.n	8002b10 <ADC_Enable+0xa4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe ff18 	bl	8001940 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b10:	f7fe fcf6 	bl	8001500 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d914      	bls.n	8002b48 <ADC_Enable+0xdc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d00d      	beq.n	8002b48 <ADC_Enable+0xdc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f043 0210 	orr.w	r2, r3, #16
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e007      	b.n	8002b58 <ADC_Enable+0xec>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d1cf      	bne.n	8002af6 <ADC_Enable+0x8a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	8000003f 	.word	0x8000003f
 8002b64:	42028300 	.word	0x42028300
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	053e2d63 	.word	0x053e2d63

08002b70 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fe ff1a 	bl	80019b6 <LL_ADC_IsDisableOngoing>
 8002b82:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ff01 	bl	8001990 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d047      	beq.n	8002c24 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d144      	bne.n	8002c24 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030d 	and.w	r3, r3, #13
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10c      	bne.n	8002bc2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fedb 	bl	8001968 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bba:	f7fe fca1 	bl	8001500 <HAL_GetTick>
 8002bbe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bc0:	e029      	b.n	8002c16 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	f043 0210 	orr.w	r2, r3, #16
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f043 0201 	orr.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e023      	b.n	8002c26 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bde:	f7fe fc8f 	bl	8001500 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d914      	bls.n	8002c16 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	f043 0210 	orr.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1dc      	bne.n	8002bde <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <__NVIC_SetPriorityGrouping+0x44>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c62:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <__NVIC_SetPriorityGrouping+0x44>)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	60d3      	str	r3, [r2, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c7c:	4b04      	ldr	r3, [pc, #16]	; (8002c90 <__NVIC_GetPriorityGrouping+0x18>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	f003 0307 	and.w	r3, r3, #7
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	; 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	; 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	; (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d74:	f7ff ff8e 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff47 	bl	8002c30 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff5e 	bl	8002c78 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff90 	bl	8002ce8 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5f 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff ffb2 	bl	8002d50 <SysTick_Config>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
	...

08002df8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002e06:	e136      	b.n	8003076 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	fa01 f303 	lsl.w	r3, r1, r3
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8128 	beq.w	8003070 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d003      	beq.n	8002e30 <HAL_GPIO_Init+0x38>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b12      	cmp	r3, #18
 8002e2e:	d125      	bne.n	8002e7c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	6979      	ldr	r1, [r7, #20]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4013      	ands	r3, r2
 8002e92:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d00b      	beq.n	8002ed0 <HAL_GPIO_Init+0xd8>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d007      	beq.n	8002ed0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec4:	2b11      	cmp	r3, #17
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b12      	cmp	r3, #18
 8002ece:	d130      	bne.n	8002f32 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	697a      	ldr	r2, [r7, #20]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f06:	2201      	movs	r2, #1
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43db      	mvns	r3, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4013      	ands	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 0201 	and.w	r2, r3, #1
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b03      	cmp	r3, #3
 8002f38:	d017      	beq.n	8002f6a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07c      	beq.n	8003070 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f76:	4a47      	ldr	r2, [pc, #284]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	4013      	ands	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0a9a      	lsrs	r2, r3, #10
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	; (8003098 <HAL_GPIO_Init+0x2a0>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	00d2      	lsls	r2, r2, #3
 8002faa:	4093      	lsls	r3, r2
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002fb2:	4938      	ldr	r1, [pc, #224]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3318      	adds	r3, #24
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002fc0:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800300e:	4a21      	ldr	r2, [pc, #132]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003014:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800301a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	4013      	ands	r3, r2
 8003024:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_GPIO_Init+0x29c>)
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003042:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_GPIO_Init+0x29c>)
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003048:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4013      	ands	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <HAL_GPIO_Init+0x29c>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	3301      	adds	r3, #1
 8003074:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f aec1 	bne.w	8002e08 <HAL_GPIO_Init+0x10>
  }
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	44022000 	.word	0x44022000
 8003098:	002f7f7f 	.word	0x002f7f7f

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	f000 bc28 	b.w	8003930 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e0:	4b94      	ldr	r3, [pc, #592]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f003 0318 	and.w	r3, r3, #24
 80030e8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80030ea:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	2b08      	cmp	r3, #8
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x46>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b18      	cmp	r3, #24
 800310a:	d114      	bne.n	8003136 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d111      	bne.n	8003136 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f000 bc08 	b.w	8003930 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003120:	4b84      	ldr	r3, [pc, #528]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a1b      	ldr	r3, [r3, #32]
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	4981      	ldr	r1, [pc, #516]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003130:	4313      	orrs	r3, r2
 8003132:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003134:	e040      	b.n	80031b8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800313e:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7c      	ldr	r2, [pc, #496]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe f9d9 	bl	8001500 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003152:	f7fe f9d5 	bl	8001500 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e3e5      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003164:	4b73      	ldr	r3, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003170:	4b70      	ldr	r3, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	496d      	ldr	r1, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003180:	4313      	orrs	r3, r2
 8003182:	618b      	str	r3, [r1, #24]
 8003184:	e018      	b.n	80031b8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003186:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f9b5 	bl	8001500 <HAL_GetTick>
 8003196:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800319a:	f7fe f9b1 	bl	8001500 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e3c1      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80031ac:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f0      	bne.n	800319a <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80a0 	beq.w	8003306 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x10c>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d106      	bne.n	80031e6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f040 8092 	bne.w	8003306 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e3a4      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x132>
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e058      	b.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d112      	bne.n	800322c <HAL_RCC_OscConfig+0x160>
 8003206:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800320c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b48      	ldr	r3, [pc, #288]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a47      	ldr	r2, [pc, #284]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003218:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	4b45      	ldr	r3, [pc, #276]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a44      	ldr	r2, [pc, #272]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003228:	6013      	str	r3, [r2, #0]
 800322a:	e041      	b.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003234:	d112      	bne.n	800325c <HAL_RCC_OscConfig+0x190>
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a3e      	ldr	r2, [pc, #248]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800323c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003248:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800324c:	6013      	str	r3, [r2, #0]
 800324e:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a38      	ldr	r2, [pc, #224]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e029      	b.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003264:	d112      	bne.n	800328c <HAL_RCC_OscConfig+0x1c0>
 8003266:	4b33      	ldr	r3, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a32      	ldr	r2, [pc, #200]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800326c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	4b30      	ldr	r3, [pc, #192]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a2c      	ldr	r2, [pc, #176]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e011      	b.n	80032b0 <HAL_RCC_OscConfig+0x1e4>
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a28      	ldr	r2, [pc, #160]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a25      	ldr	r2, [pc, #148]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80032aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b8:	f7fe f922 	bl	8001500 <HAL_GetTick>
 80032bc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032c0:	f7fe f91e 	bl	8001500 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e32e      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x1f4>
 80032de:	e012      	b.n	8003306 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fe f90e 	bl	8001500 <HAL_GetTick>
 80032e4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80032e8:	f7fe f90a 	bl	8001500 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e31a      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fa:	4b0e      	ldr	r3, [pc, #56]	; (8003334 <HAL_RCC_OscConfig+0x268>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 809a 	beq.w	8003448 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x25a>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	2b18      	cmp	r3, #24
 800331e:	d149      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d146      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e2fe      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
 8003332:	bf00      	nop
 8003334:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11c      	bne.n	8003378 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800333e:	4b9a      	ldr	r3, [pc, #616]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0218 	and.w	r2, r3, #24
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	429a      	cmp	r2, r3
 800334c:	d014      	beq.n	8003378 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800334e:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0218 	bic.w	r2, r3, #24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	4993      	ldr	r1, [pc, #588]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003360:	f000 fdd0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003364:	4b91      	ldr	r3, [pc, #580]	; (80035ac <HAL_RCC_OscConfig+0x4e0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe f87f 	bl	800146c <HAL_InitTick>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e2db      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe f8c2 	bl	8001500 <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003380:	f7fe f8be 	bl	8001500 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e2ce      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800339e:	4b82      	ldr	r3, [pc, #520]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	497e      	ldr	r1, [pc, #504]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80033b2:	e049      	b.n	8003448 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d02c      	beq.n	8003416 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80033bc:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 0218 	bic.w	r2, r3, #24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4977      	ldr	r1, [pc, #476]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe f891 	bl	8001500 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80033e2:	f7fe f88d 	bl	8001500 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e29d      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033f4:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003400:	4b69      	ldr	r3, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	041b      	lsls	r3, r3, #16
 800340e:	4966      	ldr	r1, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003410:	4313      	orrs	r3, r2
 8003412:	610b      	str	r3, [r1, #16]
 8003414:	e018      	b.n	8003448 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fe f86d 	bl	8001500 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800342a:	f7fe f869 	bl	8001500 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e279      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343c:	4b5a      	ldr	r3, [pc, #360]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d03c      	beq.n	80034ce <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d01c      	beq.n	8003496 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345c:	4b52      	ldr	r3, [pc, #328]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800345e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003462:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003468:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe f848 	bl	8001500 <HAL_GetTick>
 8003470:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003474:	f7fe f844 	bl	8001500 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e254      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003486:	4b48      	ldr	r3, [pc, #288]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0ef      	beq.n	8003474 <HAL_RCC_OscConfig+0x3a8>
 8003494:	e01b      	b.n	80034ce <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800349c:	4a42      	ldr	r2, [pc, #264]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800349e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fe f82b 	bl	8001500 <HAL_GetTick>
 80034aa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80034ae:	f7fe f827 	bl	8001500 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e237      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 80034c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1ef      	bne.n	80034ae <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 80d2 	beq.w	8003680 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034dc:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_OscConfig+0x4e4>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d118      	bne.n	800351a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80034e8:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_OscConfig+0x4e4>)
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <HAL_RCC_OscConfig+0x4e4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f4:	f7fe f804 	bl	8001500 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fc:	f7fe f800 	bl	8001500 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e210      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800350e:	4b28      	ldr	r3, [pc, #160]	; (80035b0 <HAL_RCC_OscConfig+0x4e4>)
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d108      	bne.n	8003534 <HAL_RCC_OscConfig+0x468>
 8003522:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003528:	4a1f      	ldr	r2, [pc, #124]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003532:	e074      	b.n	800361e <HAL_RCC_OscConfig+0x552>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d118      	bne.n	800356e <HAL_RCC_OscConfig+0x4a2>
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800353e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003542:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003544:	f023 0301 	bic.w	r3, r3, #1
 8003548:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800354e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003558:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800355c:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800355e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003562:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003564:	f023 0304 	bic.w	r3, r3, #4
 8003568:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800356c:	e057      	b.n	800361e <HAL_RCC_OscConfig+0x552>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b05      	cmp	r3, #5
 8003574:	d11e      	bne.n	80035b4 <HAL_RCC_OscConfig+0x4e8>
 8003576:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003586:	4b08      	ldr	r3, [pc, #32]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800358c:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800358e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003592:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCC_OscConfig+0x4dc>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035a6:	e03a      	b.n	800361e <HAL_RCC_OscConfig+0x552>
 80035a8:	44020c00 	.word	0x44020c00
 80035ac:	20000004 	.word	0x20000004
 80035b0:	44020800 	.word	0x44020800
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b85      	cmp	r3, #133	; 0x85
 80035ba:	d118      	bne.n	80035ee <HAL_RCC_OscConfig+0x522>
 80035bc:	4ba2      	ldr	r3, [pc, #648]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c2:	4aa1      	ldr	r2, [pc, #644]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035c4:	f043 0304 	orr.w	r3, r3, #4
 80035c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d2:	4a9d      	ldr	r2, [pc, #628]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035dc:	4b9a      	ldr	r3, [pc, #616]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035e2:	4a99      	ldr	r2, [pc, #612]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035ec:	e017      	b.n	800361e <HAL_RCC_OscConfig+0x552>
 80035ee:	4b96      	ldr	r3, [pc, #600]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f4:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035fe:	4b92      	ldr	r3, [pc, #584]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003604:	4a90      	ldr	r2, [pc, #576]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003606:	f023 0304 	bic.w	r3, r3, #4
 800360a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800360e:	4b8e      	ldr	r3, [pc, #568]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003610:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003614:	4a8c      	ldr	r2, [pc, #560]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800361a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d016      	beq.n	8003654 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003626:	f7fd ff6b 	bl	8001500 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd ff67 	bl	8001500 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e175      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003644:	4b80      	ldr	r3, [pc, #512]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003646:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ed      	beq.n	800362e <HAL_RCC_OscConfig+0x562>
 8003652:	e015      	b.n	8003680 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fd ff54 	bl	8001500 <HAL_GetTick>
 8003658:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fd ff50 	bl	8001500 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e15e      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003672:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ed      	bne.n	800365c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d036      	beq.n	80036fa <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d019      	beq.n	80036c8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003694:	4b6c      	ldr	r3, [pc, #432]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6b      	ldr	r2, [pc, #428]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 800369a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd ff2e 	bl	8001500 <HAL_GetTick>
 80036a4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80036a8:	f7fd ff2a 	bl	8001500 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e13a      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80036ba:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x5dc>
 80036c6:	e018      	b.n	80036fa <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80036c8:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a5e      	ldr	r2, [pc, #376]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80036ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fd ff14 	bl	8001500 <HAL_GetTick>
 80036d8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80036dc:	f7fd ff10 	bl	8001500 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e120      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80036ee:	4b56      	ldr	r3, [pc, #344]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f0      	bne.n	80036dc <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8115 	beq.w	800392e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b18      	cmp	r3, #24
 8003708:	f000 80af 	beq.w	800386a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003710:	2b02      	cmp	r3, #2
 8003712:	f040 8086 	bne.w	8003822 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003716:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 800371c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7fd feed 	bl	8001500 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800372a:	f7fd fee9 	bl	8001500 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0f9      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003748:	4b3f      	ldr	r3, [pc, #252]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003750:	f023 0303 	bic.w	r3, r3, #3
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800375c:	0212      	lsls	r2, r2, #8
 800375e:	430a      	orrs	r2, r1
 8003760:	4939      	ldr	r1, [pc, #228]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003762:	4313      	orrs	r3, r2
 8003764:	628b      	str	r3, [r1, #40]	; 0x28
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	3b01      	subs	r3, #1
 800376c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003774:	3b01      	subs	r3, #1
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	b29b      	uxth	r3, r3
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003780:	3b01      	subs	r3, #1
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378e:	3b01      	subs	r3, #1
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003796:	492c      	ldr	r1, [pc, #176]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800379c:	4b2a      	ldr	r3, [pc, #168]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037a2:	f023 0310 	bic.w	r3, r3, #16
 80037a6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ac:	4a26      	ldr	r2, [pc, #152]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	4a24      	ldr	r2, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037b8:	f043 0310 	orr.w	r3, r3, #16
 80037bc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	f023 020c 	bic.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ca:	491f      	ldr	r1, [pc, #124]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f023 0220 	bic.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037dc:	491a      	ldr	r1, [pc, #104]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	4a18      	ldr	r2, [pc, #96]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ec:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 80037f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fe81 	bl	8001500 <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003802:	f7fd fe7d 	bl	8001500 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e08d      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x736>
 8003820:	e085      	b.n	800392e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003822:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a08      	ldr	r2, [pc, #32]	; (8003848 <HAL_RCC_OscConfig+0x77c>)
 8003828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fd fe67 	bl	8001500 <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003836:	f7fd fe63 	bl	8001500 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d903      	bls.n	800384c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e073      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
 8003848:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800384c:	4b3a      	ldr	r3, [pc, #232]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ee      	bne.n	8003836 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003858:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 800385a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385c:	4a36      	ldr	r2, [pc, #216]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 800385e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	6293      	str	r3, [r2, #40]	; 0x28
 8003868:	e061      	b.n	800392e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800386a:	4b33      	ldr	r3, [pc, #204]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003870:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387a:	2b01      	cmp	r3, #1
 800387c:	d031      	beq.n	80038e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0203 	and.w	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d12a      	bne.n	80038e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d122      	bne.n	80038e2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d11a      	bne.n	80038e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	0a5b      	lsrs	r3, r3, #9
 80038b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d111      	bne.n	80038e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d108      	bne.n	80038e2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	0e1b      	lsrs	r3, r3, #24
 80038d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e024      	b.n	8003930 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038e6:	4b14      	ldr	r3, [pc, #80]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	08db      	lsrs	r3, r3, #3
 80038ec:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d01a      	beq.n	800392e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80038f8:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003904:	f7fd fdfc 	bl	8001500 <HAL_GetTick>
 8003908:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800390a:	bf00      	nop
 800390c:	f7fd fdf8 	bl	8001500 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	4293      	cmp	r3, r2
 8003916:	d0f9      	beq.n	800390c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	4a06      	ldr	r2, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003922:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	4a04      	ldr	r2, [pc, #16]	; (8003938 <HAL_RCC_OscConfig+0x86c>)
 8003928:	f043 0310 	orr.w	r3, r3, #16
 800392c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3720      	adds	r7, #32
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	44020c00 	.word	0x44020c00

0800393c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e19e      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b83      	ldr	r3, [pc, #524]	; (8003b60 <HAL_RCC_ClockConfig+0x224>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b80      	ldr	r3, [pc, #512]	; (8003b60 <HAL_RCC_ClockConfig+0x224>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 020f 	bic.w	r2, r3, #15
 8003966:	497e      	ldr	r1, [pc, #504]	; (8003b60 <HAL_RCC_ClockConfig+0x224>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b7c      	ldr	r3, [pc, #496]	; (8003b60 <HAL_RCC_ClockConfig+0x224>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e186      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	4b74      	ldr	r3, [pc, #464]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	0a1b      	lsrs	r3, r3, #8
 8003996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800399a:	429a      	cmp	r2, r3
 800399c:	d909      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800399e:	4b71      	ldr	r3, [pc, #452]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	496d      	ldr	r1, [pc, #436]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d909      	bls.n	80039e4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80039d0:	4b64      	ldr	r3, [pc, #400]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	4961      	ldr	r1, [pc, #388]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d010      	beq.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	4b5b      	ldr	r3, [pc, #364]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d908      	bls.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003a00:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	4955      	ldr	r1, [pc, #340]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	4b50      	ldr	r3, [pc, #320]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d908      	bls.n	8003a40 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003a2e:	4b4d      	ldr	r3, [pc, #308]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f023 020f 	bic.w	r2, r3, #15
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	494a      	ldr	r1, [pc, #296]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8093 	beq.w	8003b74 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003a56:	4b43      	ldr	r3, [pc, #268]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d121      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e113      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e107      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003a86:	4b37      	ldr	r3, [pc, #220]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0fb      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a96:	4b33      	ldr	r3, [pc, #204]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e0f3      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	492c      	ldr	r1, [pc, #176]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fd fd22 	bl	8001500 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d112      	bne.n	8003aec <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fd fd1a 	bl	8001500 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0d7      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f003 0318 	and.w	r3, r3, #24
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	d1ee      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x18c>
 8003aea:	e043      	b.n	8003b74 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d112      	bne.n	8003b1a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003af6:	f7fd fd03 	bl	8001500 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0c0      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b0c:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0318 	and.w	r3, r3, #24
 8003b14:	2b10      	cmp	r3, #16
 8003b16:	d1ee      	bne.n	8003af6 <HAL_RCC_ClockConfig+0x1ba>
 8003b18:	e02c      	b.n	8003b74 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d122      	bne.n	8003b68 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fd fcec 	bl	8001500 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0a9      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_RCC_ClockConfig+0x228>)
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	f003 0318 	and.w	r3, r3, #24
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d1ee      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x1e8>
 8003b46:	e015      	b.n	8003b74 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fd fcda 	bl	8001500 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d906      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e097      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
 8003b5e:	bf00      	nop
 8003b60:	40022000 	.word	0x40022000
 8003b64:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f003 0318 	and.w	r3, r3, #24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e9      	bne.n	8003b48 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d208      	bcs.n	8003ba2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003b90:	4b41      	ldr	r3, [pc, #260]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 020f 	bic.w	r2, r3, #15
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	493e      	ldr	r1, [pc, #248]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <HAL_RCC_ClockConfig+0x360>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d210      	bcs.n	8003bd2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb0:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <HAL_RCC_ClockConfig+0x360>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f023 020f 	bic.w	r2, r3, #15
 8003bb8:	4938      	ldr	r1, [pc, #224]	; (8003c9c <HAL_RCC_ClockConfig+0x360>)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc0:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCC_ClockConfig+0x360>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e05d      	b.n	8003c8e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d010      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	4b2d      	ldr	r3, [pc, #180]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d208      	bcs.n	8003c00 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003bee:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4927      	ldr	r1, [pc, #156]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d012      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d209      	bcs.n	8003c32 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	491a      	ldr	r1, [pc, #104]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d012      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d209      	bcs.n	8003c64 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	490e      	ldr	r1, [pc, #56]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003c64:	f000 f822 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_ClockConfig+0x35c>)
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCC_ClockConfig+0x364>)
 8003c74:	5ccb      	ldrb	r3, [r1, r3]
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ca4 <HAL_RCC_ClockConfig+0x368>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_RCC_ClockConfig+0x36c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fbf2 	bl	800146c <HAL_InitTick>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	44020c00 	.word	0x44020c00
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	08009d08 	.word	0x08009d08
 8003ca4:	20000000 	.word	0x20000000
 8003ca8:	20000004 	.word	0x20000004

08003cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b089      	sub	sp, #36	; 0x24
 8003cb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8003cb2:	4b8c      	ldr	r3, [pc, #560]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	f003 0318 	and.w	r3, r3, #24
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d102      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003cbe:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e107      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc4:	4b87      	ldr	r3, [pc, #540]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f003 0318 	and.w	r3, r3, #24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d112      	bne.n	8003cf6 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003cd0:	4b84      	ldr	r3, [pc, #528]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003cdc:	4b81      	ldr	r3, [pc, #516]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f003 0303 	and.w	r3, r3, #3
 8003ce6:	4a81      	ldr	r2, [pc, #516]	; (8003eec <HAL_RCC_GetSysClockFreq+0x240>)
 8003ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	e0f1      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003cf0:	4b7e      	ldr	r3, [pc, #504]	; (8003eec <HAL_RCC_GetSysClockFreq+0x240>)
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e0ee      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf6:	4b7b      	ldr	r3, [pc, #492]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f003 0318 	and.w	r3, r3, #24
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d102      	bne.n	8003d08 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d02:	4b7b      	ldr	r3, [pc, #492]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x244>)
 8003d04:	61fb      	str	r3, [r7, #28]
 8003d06:	e0e5      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d08:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f003 0318 	and.w	r3, r3, #24
 8003d10:	2b18      	cmp	r3, #24
 8003d12:	f040 80dd 	bne.w	8003ed0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003d16:	4b73      	ldr	r3, [pc, #460]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003d20:	4b70      	ldr	r3, [pc, #448]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8003d2c:	4b6d      	ldr	r3, [pc, #436]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d38:	4b6a      	ldr	r3, [pc, #424]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8003d3c:	08db      	lsrs	r3, r3, #3
 8003d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d50:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80b7 	beq.w	8003eca <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d003      	beq.n	8003d6a <HAL_RCC_GetSysClockFreq+0xbe>
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d056      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x16a>
 8003d68:	e077      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003d6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02d      	beq.n	8003dd2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003d76:	4b5b      	ldr	r3, [pc, #364]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	4a5a      	ldr	r2, [pc, #360]	; (8003eec <HAL_RCC_GetSysClockFreq+0x240>)
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	ee07 3a90 	vmov	s15, r3
 8003d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da0:	4b50      	ldr	r3, [pc, #320]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	ee07 3a90 	vmov	s15, r3
 8003dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003db0:	ed97 6a02 	vldr	s12, [r7, #8]
 8003db4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8003db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dcc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003dd0:	e065      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	ee07 3a90 	vmov	s15, r3
 8003dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ddc:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003ef8 <HAL_RCC_GetSysClockFreq+0x24c>
 8003de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de4:	4b3f      	ldr	r3, [pc, #252]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dec:	ee07 3a90 	vmov	s15, r3
 8003df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df4:	ed97 6a02 	vldr	s12, [r7, #8]
 8003df8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8003dfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e00:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e08:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e10:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003e14:	e043      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e20:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003efc <HAL_RCC_GetSysClockFreq+0x250>
 8003e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e28:	4b2e      	ldr	r3, [pc, #184]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e30:	ee07 3a90 	vmov	s15, r3
 8003e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e38:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e3c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e54:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003e58:	e021      	b.n	8003e9e <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	ee07 3a90 	vmov	s15, r3
 8003e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e64:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003f00 <HAL_RCC_GetSysClockFreq+0x254>
 8003e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6c:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e74:	ee07 3a90 	vmov	s15, r3
 8003e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e80:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003ef4 <HAL_RCC_GetSysClockFreq+0x248>
 8003e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e98:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003e9c:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003e9e:	4b11      	ldr	r3, [pc, #68]	; (8003ee4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea2:	0a5b      	lsrs	r3, r3, #9
 8003ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eb6:	edd7 6a06 	vldr	s13, [r7, #24]
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec2:	ee17 3a90 	vmov	r3, s15
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	e004      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e001      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_RCC_GetSysClockFreq+0x240>)
 8003ed2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003ed4:	69fb      	ldr	r3, [r7, #28]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	44020c00 	.word	0x44020c00
 8003ee8:	003d0900 	.word	0x003d0900
 8003eec:	03d09000 	.word	0x03d09000
 8003ef0:	007a1200 	.word	0x007a1200
 8003ef4:	46000000 	.word	0x46000000
 8003ef8:	4c742400 	.word	0x4c742400
 8003efc:	4af42400 	.word	0x4af42400
 8003f00:	4a742400 	.word	0x4a742400

08003f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f08:	f7ff fed0 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b08      	ldr	r3, [pc, #32]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003f10:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f12:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f16:	4907      	ldr	r1, [pc, #28]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x30>)
 8003f18:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003f1a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f24:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003f26:	4b04      	ldr	r3, [pc, #16]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x34>)
 8003f28:	681b      	ldr	r3, [r3, #0]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	44020c00 	.word	0x44020c00
 8003f34:	08009d08 	.word	0x08009d08
 8003f38:	20000000 	.word	0x20000000

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003f40:	f7ff ffe0 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4904      	ldr	r1, [pc, #16]	; (8003f64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	44020c00 	.word	0x44020c00
 8003f64:	08009d18 	.word	0x08009d18

08003f68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003f6c:	f7ff ffca 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f70:	4602      	mov	r2, r0
 8003f72:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f003 0307 	and.w	r3, r3, #7
 8003f7c:	4904      	ldr	r1, [pc, #16]	; (8003f90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f7e:	5ccb      	ldrb	r3, [r1, r3]
 8003f80:	f003 031f 	and.w	r3, r3, #31
 8003f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	44020c00 	.word	0x44020c00
 8003f90:	08009d18 	.word	0x08009d18

08003f94 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003f98:	f7ff ffb4 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	0b1b      	lsrs	r3, r3, #12
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	4904      	ldr	r1, [pc, #16]	; (8003fbc <HAL_RCC_GetPCLK3Freq+0x28>)
 8003faa:	5ccb      	ldrb	r3, [r1, r3]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	44020c00 	.word	0x44020c00
 8003fbc:	08009d18 	.word	0x08009d18

08003fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003fc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc4:	b0d8      	sub	sp, #352	; 0x160
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003fe4:	2500      	movs	r5, #0
 8003fe6:	ea54 0305 	orrs.w	r3, r4, r5
 8003fea:	d00b      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003fec:	4bcd      	ldr	r3, [pc, #820]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ff2:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003ff6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	4ac9      	ldr	r2, [pc, #804]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ffe:	430b      	orrs	r3, r1
 8004000:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004004:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f002 0801 	and.w	r8, r2, #1
 8004010:	f04f 0900 	mov.w	r9, #0
 8004014:	ea58 0309 	orrs.w	r3, r8, r9
 8004018:	d042      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 800401a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800401e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004020:	2b05      	cmp	r3, #5
 8004022:	d823      	bhi.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004075 	.word	0x08004075
 8004030:	08004045 	.word	0x08004045
 8004034:	08004059 	.word	0x08004059
 8004038:	08004075 	.word	0x08004075
 800403c:	08004075 	.word	0x08004075
 8004040:	08004075 	.word	0x08004075
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004044:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004048:	3308      	adds	r3, #8
 800404a:	4618      	mov	r0, r3
 800404c:	f004 feda 	bl	8008e04 <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004056:	e00e      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800405c:	3330      	adds	r3, #48	; 0x30
 800405e:	4618      	mov	r0, r3
 8004060:	f004 ff68 	bl	8008f34 <RCCEx_PLL3_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800406a:	e004      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004072:	e000      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004076:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10c      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800407e:	4ba9      	ldr	r3, [pc, #676]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004084:	f023 0107 	bic.w	r1, r3, #7
 8004088:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	4aa5      	ldr	r2, [pc, #660]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004090:	430b      	orrs	r3, r1
 8004092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004096:	e003      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004098:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800409c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a8:	f002 0a02 	and.w	sl, r2, #2
 80040ac:	f04f 0b00 	mov.w	fp, #0
 80040b0:	ea5a 030b 	orrs.w	r3, sl, fp
 80040b4:	f000 8088 	beq.w	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 80040b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	2b28      	cmp	r3, #40	; 0x28
 80040c0:	d868      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	0800419d 	.word	0x0800419d
 80040cc:	08004195 	.word	0x08004195
 80040d0:	08004195 	.word	0x08004195
 80040d4:	08004195 	.word	0x08004195
 80040d8:	08004195 	.word	0x08004195
 80040dc:	08004195 	.word	0x08004195
 80040e0:	08004195 	.word	0x08004195
 80040e4:	08004195 	.word	0x08004195
 80040e8:	0800416d 	.word	0x0800416d
 80040ec:	08004195 	.word	0x08004195
 80040f0:	08004195 	.word	0x08004195
 80040f4:	08004195 	.word	0x08004195
 80040f8:	08004195 	.word	0x08004195
 80040fc:	08004195 	.word	0x08004195
 8004100:	08004195 	.word	0x08004195
 8004104:	08004195 	.word	0x08004195
 8004108:	08004181 	.word	0x08004181
 800410c:	08004195 	.word	0x08004195
 8004110:	08004195 	.word	0x08004195
 8004114:	08004195 	.word	0x08004195
 8004118:	08004195 	.word	0x08004195
 800411c:	08004195 	.word	0x08004195
 8004120:	08004195 	.word	0x08004195
 8004124:	08004195 	.word	0x08004195
 8004128:	0800419d 	.word	0x0800419d
 800412c:	08004195 	.word	0x08004195
 8004130:	08004195 	.word	0x08004195
 8004134:	08004195 	.word	0x08004195
 8004138:	08004195 	.word	0x08004195
 800413c:	08004195 	.word	0x08004195
 8004140:	08004195 	.word	0x08004195
 8004144:	08004195 	.word	0x08004195
 8004148:	0800419d 	.word	0x0800419d
 800414c:	08004195 	.word	0x08004195
 8004150:	08004195 	.word	0x08004195
 8004154:	08004195 	.word	0x08004195
 8004158:	08004195 	.word	0x08004195
 800415c:	08004195 	.word	0x08004195
 8004160:	08004195 	.word	0x08004195
 8004164:	08004195 	.word	0x08004195
 8004168:	0800419d 	.word	0x0800419d
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800416c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004170:	3308      	adds	r3, #8
 8004172:	4618      	mov	r0, r3
 8004174:	f004 fe46 	bl	8008e04 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800417e:	e00e      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004180:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004184:	3330      	adds	r3, #48	; 0x30
 8004186:	4618      	mov	r0, r3
 8004188:	f004 fed4 	bl	8008f34 <RCCEx_PLL3_Config>
 800418c:	4603      	mov	r3, r0
 800418e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004192:	e004      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800419a:	e000      	b.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 800419c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800419e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041ac:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80041b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041b6:	4a5b      	ldr	r2, [pc, #364]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80041b8:	430b      	orrs	r3, r1
 80041ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80041be:	e003      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80041c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 0304 	and.w	r3, r2, #4
 80041d4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80041d8:	2300      	movs	r3, #0
 80041da:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80041de:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 80041e2:	460b      	mov	r3, r1
 80041e4:	4313      	orrs	r3, r2
 80041e6:	d04e      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 80041e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ee:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041f2:	d02c      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 80041f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80041f8:	d825      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x286>
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041fe:	d028      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004204:	d81f      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004206:	2bc0      	cmp	r3, #192	; 0xc0
 8004208:	d025      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800420a:	2bc0      	cmp	r3, #192	; 0xc0
 800420c:	d81b      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d00f      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d817      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004216:	2b00      	cmp	r3, #0
 8004218:	d01f      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 800421a:	2b40      	cmp	r3, #64	; 0x40
 800421c:	d113      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800421e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004222:	3308      	adds	r3, #8
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fded 	bl	8008e04 <RCCEx_PLL2_Config>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004230:	e014      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004232:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004236:	3330      	adds	r3, #48	; 0x30
 8004238:	4618      	mov	r0, r3
 800423a:	f004 fe7b 	bl	8008f34 <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800424e:	bf00      	nop
 8004250:	e004      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10c      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004264:	4b2f      	ldr	r3, [pc, #188]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004266:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800426a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800426e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004274:	4a2b      	ldr	r2, [pc, #172]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004276:	430b      	orrs	r3, r1
 8004278:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800427c:	e003      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004282:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004286:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f002 0308 	and.w	r3, r2, #8
 8004292:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004296:	2300      	movs	r3, #0
 8004298:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800429c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80042a0:	460b      	mov	r3, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d056      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80042a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042b0:	d031      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80042b2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80042b6:	d82a      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d02d      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c2:	d824      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042c8:	d029      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80042ca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042ce:	d81e      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d4:	d011      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d818      	bhi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d113      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ea:	3308      	adds	r3, #8
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fd89 	bl	8008e04 <RCCEx_PLL2_Config>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 80042f8:	e017      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042fe:	3330      	adds	r3, #48	; 0x30
 8004300:	4618      	mov	r0, r3
 8004302:	f004 fe17 	bl	8008f34 <RCCEx_PLL3_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 800430c:	e00d      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004314:	e009      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004316:	bf00      	nop
 8004318:	e007      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800431a:	bf00      	nop
 800431c:	e005      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800431e:	bf00      	nop
 8004320:	e003      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004322:	bf00      	nop
 8004324:	44020c00 	.word	0x44020c00
        break;
 8004328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004332:	4bbb      	ldr	r3, [pc, #748]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004338:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800433c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004342:	4ab7      	ldr	r2, [pc, #732]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004344:	430b      	orrs	r3, r1
 8004346:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004350:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004354:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f002 0310 	and.w	r3, r2, #16
 8004360:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8004364:	2300      	movs	r3, #0
 8004366:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800436a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 800436e:	460b      	mov	r3, r1
 8004370:	4313      	orrs	r3, r2
 8004372:	d053      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004374:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800437e:	d031      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004380:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004384:	d82a      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800438a:	d02d      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800438c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004390:	d824      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004392:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004396:	d029      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004398:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800439c:	d81e      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d011      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80043a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a8:	d818      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80043ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b2:	d113      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80043b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b8:	3308      	adds	r3, #8
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 fd22 	bl	8008e04 <RCCEx_PLL2_Config>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80043c6:	e014      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80043c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043cc:	3330      	adds	r3, #48	; 0x30
 80043ce:	4618      	mov	r0, r3
 80043d0:	f004 fdb0 	bl	8008f34 <RCCEx_PLL3_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80043da:	e00a      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80043e2:	e006      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043e4:	bf00      	nop
 80043e6:	e004      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043e8:	bf00      	nop
 80043ea:	e002      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043ec:	bf00      	nop
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 80043f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80043fa:	4b89      	ldr	r3, [pc, #548]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80043fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004400:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004404:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	4a85      	ldr	r2, [pc, #532]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800440c:	430b      	orrs	r3, r1
 800440e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004412:	e003      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004418:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800441c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	f002 0320 	and.w	r3, r2, #32
 8004428:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800442c:	2300      	movs	r3, #0
 800442e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004432:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d053      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 800443c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8004446:	d031      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004448:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800444c:	d82a      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800444e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004452:	d02d      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004458:	d824      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800445a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800445e:	d029      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004460:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8004464:	d81e      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d011      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d818      	bhi.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d020      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447a:	d113      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800447c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004480:	3308      	adds	r3, #8
 8004482:	4618      	mov	r0, r3
 8004484:	f004 fcbe 	bl	8008e04 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800448e:	e014      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004490:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004494:	3330      	adds	r3, #48	; 0x30
 8004496:	4618      	mov	r0, r3
 8004498:	f004 fd4c 	bl	8008f34 <RCCEx_PLL3_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80044aa:	e006      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80044b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10c      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80044c2:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80044c8:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 80044cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	4a53      	ldr	r2, [pc, #332]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80044d4:	430b      	orrs	r3, r1
 80044d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80044da:	e003      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044dc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80044e0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ec:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80044f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044fa:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d053      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004504:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800450e:	d031      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004510:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004514:	d82a      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004516:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451a:	d02d      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800451c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004520:	d824      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004522:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004526:	d029      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004528:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800452c:	d81e      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800452e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004538:	d818      	bhi.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800453e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004542:	d113      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004544:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004548:	3308      	adds	r3, #8
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fc5a 	bl	8008e04 <RCCEx_PLL2_Config>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004556:	e014      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004558:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800455c:	3330      	adds	r3, #48	; 0x30
 800455e:	4618      	mov	r0, r3
 8004560:	f004 fce8 	bl	8008f34 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800456a:	e00a      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004572:	e006      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004574:	bf00      	nop
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004578:	bf00      	nop
 800457a:	e002      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800457c:	bf00      	nop
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800458a:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800458c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004590:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 8004594:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800459a:	4a21      	ldr	r2, [pc, #132]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800459c:	430b      	orrs	r3, r1
 800459e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80045a2:	e003      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045a8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80045b8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80045c2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d055      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80045cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80045d6:	d033      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80045d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80045dc:	d82c      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e2:	d02f      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80045e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045e8:	d826      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045ee:	d02b      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80045f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80045f4:	d820      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80045f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045fa:	d013      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80045fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004600:	d81a      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d022      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460a:	d115      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800460c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004610:	3308      	adds	r3, #8
 8004612:	4618      	mov	r0, r3
 8004614:	f004 fbf6 	bl	8008e04 <RCCEx_PLL2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800461e:	e016      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004620:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004624:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004628:	3330      	adds	r3, #48	; 0x30
 800462a:	4618      	mov	r0, r3
 800462c:	f004 fc82 	bl	8008f34 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800463e:	e006      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004640:	bf00      	nop
 8004642:	e004      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004644:	bf00      	nop
 8004646:	e002      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004648:	bf00      	nop
 800464a:	e000      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800464c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800464e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10c      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004656:	4bbb      	ldr	r3, [pc, #748]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800465c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004660:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004666:	4ab7      	ldr	r2, [pc, #732]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004668:	430b      	orrs	r3, r1
 800466a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800466e:	e003      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004670:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004674:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004678:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004684:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800468e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d053      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8004698:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800469c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800469e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046a2:	d031      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80046a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80046a8:	d82a      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ae:	d02d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80046b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046b4:	d824      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046ba:	d029      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80046bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046c0:	d81e      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c6:	d011      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80046c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046cc:	d818      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d020      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80046d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046d6:	d113      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046dc:	3308      	adds	r3, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f004 fb90 	bl	8008e04 <RCCEx_PLL2_Config>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80046ea:	e014      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046f0:	3330      	adds	r3, #48	; 0x30
 80046f2:	4618      	mov	r0, r3
 80046f4:	f004 fc1e 	bl	8008f34 <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80046fe:	e00a      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004706:	e006      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004708:	bf00      	nop
 800470a:	e004      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800470c:	bf00      	nop
 800470e:	e002      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004710:	bf00      	nop
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004716:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800471e:	4b89      	ldr	r3, [pc, #548]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004724:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004728:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800472c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472e:	4a85      	ldr	r2, [pc, #532]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004730:	430b      	orrs	r3, r1
 8004732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004736:	e003      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800473c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004740:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800474c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004756:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800475a:	460b      	mov	r3, r1
 800475c:	4313      	orrs	r3, r2
 800475e:	d055      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004760:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004768:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800476c:	d031      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800476e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004772:	d82a      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d02d      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800477e:	d824      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004780:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004784:	d029      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004786:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800478a:	d81e      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800478c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004790:	d011      	beq.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8004792:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004796:	d818      	bhi.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004798:	2b00      	cmp	r3, #0
 800479a:	d020      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x81e>
 800479c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047a0:	d113      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80047a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047a6:	3308      	adds	r3, #8
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 fb2b 	bl	8008e04 <RCCEx_PLL2_Config>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80047b4:	e014      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80047b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047ba:	3330      	adds	r3, #48	; 0x30
 80047bc:	4618      	mov	r0, r3
 80047be:	f004 fbb9 	bl	8008f34 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80047c8:	e00a      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047d2:	bf00      	nop
 80047d4:	e004      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047d6:	bf00      	nop
 80047d8:	e002      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047da:	bf00      	nop
 80047dc:	e000      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80047de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80047ee:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 80047f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047fa:	4a52      	ldr	r2, [pc, #328]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004802:	e003      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004804:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004808:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800480c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004818:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800481c:	2300      	movs	r3, #0
 800481e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004822:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004826:	460b      	mov	r3, r1
 8004828:	4313      	orrs	r3, r2
 800482a:	d044      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800482c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004834:	2b05      	cmp	r3, #5
 8004836:	d823      	bhi.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	08004889 	.word	0x08004889
 8004844:	08004859 	.word	0x08004859
 8004848:	0800486d 	.word	0x0800486d
 800484c:	08004889 	.word	0x08004889
 8004850:	08004889 	.word	0x08004889
 8004854:	08004889 	.word	0x08004889
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004858:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800485c:	3308      	adds	r3, #8
 800485e:	4618      	mov	r0, r3
 8004860:	f004 fad0 	bl	8008e04 <RCCEx_PLL2_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800486a:	e00e      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800486c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004870:	3330      	adds	r3, #48	; 0x30
 8004872:	4618      	mov	r0, r3
 8004874:	f004 fb5e 	bl	8008f34 <RCCEx_PLL3_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800487e:	e004      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004898:	f023 0107 	bic.w	r1, r3, #7
 800489c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	4a27      	ldr	r2, [pc, #156]	; (8004944 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80048a6:	430b      	orrs	r3, r1
 80048a8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80048b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80048b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80048c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80048c6:	2300      	movs	r3, #0
 80048c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80048cc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80048d0:	460b      	mov	r3, r1
 80048d2:	4313      	orrs	r3, r2
 80048d4:	d04f      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80048d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	2b50      	cmp	r3, #80	; 0x50
 80048e0:	d029      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80048e2:	2b50      	cmp	r3, #80	; 0x50
 80048e4:	d823      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048e6:	2b40      	cmp	r3, #64	; 0x40
 80048e8:	d027      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d81f      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048ee:	2b30      	cmp	r3, #48	; 0x30
 80048f0:	d025      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80048f2:	2b30      	cmp	r3, #48	; 0x30
 80048f4:	d81b      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d00f      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d817      	bhi.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d022      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004902:	2b10      	cmp	r3, #16
 8004904:	d113      	bne.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004906:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490a:	3308      	adds	r3, #8
 800490c:	4618      	mov	r0, r3
 800490e:	f004 fa79 	bl	8008e04 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004918:	e017      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800491a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800491e:	3330      	adds	r3, #48	; 0x30
 8004920:	4618      	mov	r0, r3
 8004922:	f004 fb07 	bl	8008f34 <RCCEx_PLL3_Config>
 8004926:	4603      	mov	r3, r0
 8004928:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800492c:	e00d      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004934:	e009      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004936:	bf00      	nop
 8004938:	e007      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800493a:	bf00      	nop
 800493c:	e005      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800493e:	bf00      	nop
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004942:	bf00      	nop
 8004944:	44020c00 	.word	0x44020c00
        break;
 8004948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800494a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004952:	4baf      	ldr	r3, [pc, #700]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004954:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004958:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800495c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004964:	4aaa      	ldr	r2, [pc, #680]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004966:	430b      	orrs	r3, r1
 8004968:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800496c:	e003      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004972:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004976:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004982:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004986:	2300      	movs	r3, #0
 8004988:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800498c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004990:	460b      	mov	r3, r1
 8004992:	4313      	orrs	r3, r2
 8004994:	d055      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8004996:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800499a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049a2:	d031      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80049a4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80049a8:	d82a      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ae:	d02d      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b4:	d824      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ba:	d029      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80049bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c0:	d81e      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049c6:	d011      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80049c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049cc:	d818      	bhi.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80049d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049d6:	d113      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049dc:	3308      	adds	r3, #8
 80049de:	4618      	mov	r0, r3
 80049e0:	f004 fa10 	bl	8008e04 <RCCEx_PLL2_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049ea:	e014      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049f0:	3330      	adds	r3, #48	; 0x30
 80049f2:	4618      	mov	r0, r3
 80049f4:	f004 fa9e 	bl	8008f34 <RCCEx_PLL3_Config>
 80049f8:	4603      	mov	r3, r0
 80049fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80049fe:	e00a      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004a06:	e006      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a16:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10d      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004a1e:	4b7c      	ldr	r3, [pc, #496]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004a24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004a28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a30:	4a77      	ldr	r2, [pc, #476]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004a32:	430b      	orrs	r3, r1
 8004a34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004a38:	e003      	b.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a3e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004a4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a52:	2300      	movs	r3, #0
 8004a54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	d03d      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004a62:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6e:	d01b      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a74:	d814      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7a:	d017      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d80e      	bhi.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d014      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d109      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a90:	3330      	adds	r3, #48	; 0x30
 8004a92:	4618      	mov	r0, r3
 8004a94:	f004 fa4e 	bl	8008f34 <RCCEx_PLL3_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004aa6:	e004      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004aa8:	bf00      	nop
 8004aaa:	e002      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8004ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004aba:	4b55      	ldr	r3, [pc, #340]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004abc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004ac0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004acc:	4a50      	ldr	r2, [pc, #320]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004ad4:	e003      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ada:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004aea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004aee:	2300      	movs	r3, #0
 8004af0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004af4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4313      	orrs	r3, r2
 8004afc:	d03d      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8004afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b06:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b0a:	d01b      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8004b0c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b10:	d814      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b12:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b16:	d017      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004b18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b1c:	d80e      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d014      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b26:	d109      	bne.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b2c:	3330      	adds	r3, #48	; 0x30
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f004 fa00 	bl	8008f34 <RCCEx_PLL3_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8004b3a:	e008      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b42:	e004      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b44:	bf00      	nop
 8004b46:	e002      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004b56:	4b2e      	ldr	r3, [pc, #184]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004b5c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004b60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b68:	4a29      	ldr	r2, [pc, #164]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004b70:	e003      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b76:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b90:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d040      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8004b9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ba2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ba6:	d01b      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8004ba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bac:	d814      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004bae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb2:	d017      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004bb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bb8:	d80e      	bhi.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d014      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bc8:	3330      	adds	r3, #48	; 0x30
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f004 f9b2 	bl	8008f34 <RCCEx_PLL3_Config>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8004bd6:	e008      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004be0:	bf00      	nop
 8004be2:	e002      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004be4:	bf00      	nop
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d110      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004bf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004bf8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004bfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c04:	4a02      	ldr	r2, [pc, #8]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004c0c:	e006      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8004c0e:	bf00      	nop
 8004c10:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c14:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c18:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c24:	2100      	movs	r1, #0
 8004c26:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004c32:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	d03d      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8004c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c44:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c48:	d01b      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004c4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c4e:	d814      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c54:	d017      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004c56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c5a:	d80e      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d014      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004c60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c64:	d109      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c6a:	3330      	adds	r3, #48	; 0x30
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f004 f961 	bl	8008f34 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004c78:	e008      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10d      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004c94:	4bbe      	ldr	r3, [pc, #760]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004c96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004c9a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ca6:	4aba      	ldr	r2, [pc, #744]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004cae:	e003      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004cb4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8004cb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	d035      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8004cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce4:	d015      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8004ce6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cea:	d80e      	bhi.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d012      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cf4:	d109      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cfa:	3330      	adds	r3, #48	; 0x30
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f004 f919 	bl	8008f34 <RCCEx_PLL3_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004d08:	e006      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d10:	e002      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004d12:	bf00      	nop
 8004d14:	e000      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d18:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10d      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004d20:	4b9b      	ldr	r3, [pc, #620]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004d26:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8004d2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004d32:	4a97      	ldr	r2, [pc, #604]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d34:	430b      	orrs	r3, r1
 8004d36:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004d3a:	e003      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d40:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d5e:	460b      	mov	r3, r1
 8004d60:	4313      	orrs	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004d64:	4b8a      	ldr	r3, [pc, #552]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	4a89      	ldr	r2, [pc, #548]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d6a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d6e:	61d3      	str	r3, [r2, #28]
 8004d70:	4b87      	ldr	r3, [pc, #540]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d72:	69d9      	ldr	r1, [r3, #28]
 8004d74:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004d7c:	4a84      	ldr	r2, [pc, #528]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d82:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d92:	2300      	movs	r3, #0
 8004d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d98:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	d055      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8004da2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004daa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004dae:	d031      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8004db0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004db4:	d82a      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dba:	d02d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc0:	d824      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dc6:	d029      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dcc:	d81e      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd2:	d011      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8004dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd8:	d818      	bhi.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d020      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de2:	d113      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004de4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de8:	3308      	adds	r3, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f004 f80a 	bl	8008e04 <RCCEx_PLL2_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004df6:	e014      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004df8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dfc:	3330      	adds	r3, #48	; 0x30
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 f898 	bl	8008f34 <RCCEx_PLL3_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004e0a:	e00a      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004e12:	e006      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e14:	bf00      	nop
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e18:	bf00      	nop
 8004e1a:	e002      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e1c:	bf00      	nop
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004e2a:	4b59      	ldr	r3, [pc, #356]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004e30:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e3c:	4a54      	ldr	r2, [pc, #336]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004e3e:	430b      	orrs	r3, r1
 8004e40:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e4a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e64:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d055      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e76:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e7a:	d031      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8004e7c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004e80:	d82a      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e86:	d02d      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004e88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e8c:	d824      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e92:	d029      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8004e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e98:	d81e      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9e:	d011      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8004ea0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea4:	d818      	bhi.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d020      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eae:	d113      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f003 ffa4 	bl	8008e04 <RCCEx_PLL2_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004ec2:	e014      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ec8:	3330      	adds	r3, #48	; 0x30
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f004 f832 	bl	8008f34 <RCCEx_PLL3_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8004ed6:	e00a      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ede:	e006      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ee0:	bf00      	nop
 8004ee2:	e004      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ee4:	bf00      	nop
 8004ee6:	e002      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8004eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ef6:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004ef8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004efc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f04:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f08:	4a21      	ldr	r2, [pc, #132]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f16:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	2100      	movs	r1, #0
 8004f24:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d057      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004f42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f46:	d033      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f4c:	d82c      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f52:	d02f      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004f54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f58:	d826      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f5e:	d02b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004f60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f64:	d820      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6a:	d013      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f70:	d81a      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d022      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7a:	d115      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f80:	3308      	adds	r3, #8
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 ff3e 	bl	8008e04 <RCCEx_PLL2_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004f8e:	e016      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004f90:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f98:	3330      	adds	r3, #48	; 0x30
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 ffca 	bl	8008f34 <RCCEx_PLL3_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fae:	e006      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fb0:	bf00      	nop
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fb4:	bf00      	nop
 8004fb6:	e002      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004fc6:	4bbb      	ldr	r3, [pc, #748]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004fcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004fd8:	4ab6      	ldr	r2, [pc, #728]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fe6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005000:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005004:	460b      	mov	r3, r1
 8005006:	4313      	orrs	r3, r2
 8005008:	d055      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 800500a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005012:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8005016:	d031      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005018:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800501c:	d82a      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005022:	d02d      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005028:	d824      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800502a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800502e:	d029      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005034:	d81e      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005036:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800503a:	d011      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 800503c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005040:	d818      	bhi.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d020      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504a:	d113      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800504c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005050:	3308      	adds	r3, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f003 fed6 	bl	8008e04 <RCCEx_PLL2_Config>
 8005058:	4603      	mov	r3, r0
 800505a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800505e:	e014      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005064:	3330      	adds	r3, #48	; 0x30
 8005066:	4618      	mov	r0, r3
 8005068:	f003 ff64 	bl	8008f34 <RCCEx_PLL3_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005072:	e00a      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800507a:	e006      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800507c:	bf00      	nop
 800507e:	e004      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005080:	bf00      	nop
 8005082:	e002      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005084:	bf00      	nop
 8005086:	e000      	b.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800508a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10d      	bne.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005092:	4b88      	ldr	r3, [pc, #544]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005094:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005098:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 800509c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80050a4:	4a83      	ldr	r2, [pc, #524]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80050ac:	e003      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050b2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80050b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	2100      	movs	r1, #0
 80050c0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80050c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d055      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80050d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80050de:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050e2:	d031      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80050e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80050e8:	d82a      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ee:	d02d      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80050f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050f4:	d824      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80050f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050fa:	d029      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80050fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005100:	d81e      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005106:	d011      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800510c:	d818      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800510e:	2b00      	cmp	r3, #0
 8005110:	d020      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005116:	d113      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005118:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800511c:	3308      	adds	r3, #8
 800511e:	4618      	mov	r0, r3
 8005120:	f003 fe70 	bl	8008e04 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800512a:	e014      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800512c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005130:	3330      	adds	r3, #48	; 0x30
 8005132:	4618      	mov	r0, r3
 8005134:	f003 fefe 	bl	8008f34 <RCCEx_PLL3_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800513e:	e00a      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005146:	e006      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005148:	bf00      	nop
 800514a:	e004      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800514c:	bf00      	nop
 800514e:	e002      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005150:	bf00      	nop
 8005152:	e000      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005156:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005160:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005164:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005168:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800516c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005170:	4a50      	ldr	r2, [pc, #320]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005172:	430b      	orrs	r3, r1
 8005174:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005178:	e003      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800517a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800517e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005182:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518a:	2100      	movs	r1, #0
 800518c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8005190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005198:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d055      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80051a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051ae:	d031      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80051b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b4:	d82a      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d02d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80051bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c0:	d824      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051c6:	d029      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80051c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051cc:	d81e      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d2:	d011      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d818      	bhi.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d020      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 80051de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051e2:	d113      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051e8:	3308      	adds	r3, #8
 80051ea:	4618      	mov	r0, r3
 80051ec:	f003 fe0a 	bl	8008e04 <RCCEx_PLL2_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 80051f6:	e014      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051fc:	3330      	adds	r3, #48	; 0x30
 80051fe:	4618      	mov	r0, r3
 8005200:	f003 fe98 	bl	8008f34 <RCCEx_PLL3_Config>
 8005204:	4603      	mov	r3, r0
 8005206:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800520a:	e00a      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005212:	e006      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005214:	bf00      	nop
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005218:	bf00      	nop
 800521a:	e002      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800521c:	bf00      	nop
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005222:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10d      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800522c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005230:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005234:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005238:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800523e:	430b      	orrs	r3, r1
 8005240:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800524a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800524e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005256:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800525a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800525e:	2300      	movs	r3, #0
 8005260:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005264:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005268:	460b      	mov	r3, r1
 800526a:	4313      	orrs	r3, r2
 800526c:	d055      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800526e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005272:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800527a:	d035      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 800527c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005280:	d82e      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005286:	d031      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005288:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800528c:	d828      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800528e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005292:	d01b      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005298:	d822      	bhi.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800529e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a2:	d009      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80052a4:	e01c      	b.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a6:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	4a02      	ldr	r2, [pc, #8]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80052ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052b0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052b2:	e01c      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80052b4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052bc:	3308      	adds	r3, #8
 80052be:	4618      	mov	r0, r3
 80052c0:	f003 fda0 	bl	8008e04 <RCCEx_PLL2_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052ca:	e010      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052d0:	3330      	adds	r3, #48	; 0x30
 80052d2:	4618      	mov	r0, r3
 80052d4:	f003 fe2e 	bl	8008f34 <RCCEx_PLL3_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 80052de:	e006      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052e6:	e002      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052e8:	bf00      	nop
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80052f6:	4bc3      	ldr	r3, [pc, #780]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80052f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005300:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005308:	4abe      	ldr	r2, [pc, #760]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800530a:	430b      	orrs	r3, r1
 800530c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005316:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 800531a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005326:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005330:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d051      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800533a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800533e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005346:	d033      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534c:	d82c      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800534e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005352:	d02d      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005354:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005358:	d826      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800535a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535e:	d019      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005364:	d820      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800536a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800536e:	d007      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005370:	e01a      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005372:	4ba4      	ldr	r3, [pc, #656]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	4aa3      	ldr	r2, [pc, #652]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800537e:	e018      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005380:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005384:	3308      	adds	r3, #8
 8005386:	4618      	mov	r0, r3
 8005388:	f003 fd3c 	bl	8008e04 <RCCEx_PLL2_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005392:	e00e      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005394:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005398:	3330      	adds	r3, #48	; 0x30
 800539a:	4618      	mov	r0, r3
 800539c:	f003 fdca 	bl	8008f34 <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80053a6:	e004      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80053ae:	e000      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80053b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d10d      	bne.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80053ba:	4b92      	ldr	r3, [pc, #584]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053c0:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 80053c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80053cc:	4a8d      	ldr	r2, [pc, #564]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053d4:	e003      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80053de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80053ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80053ec:	2300      	movs	r3, #0
 80053ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d032      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80053fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005402:	2b05      	cmp	r3, #5
 8005404:	d80f      	bhi.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005406:	2b03      	cmp	r3, #3
 8005408:	d211      	bcs.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800540a:	2b01      	cmp	r3, #1
 800540c:	d911      	bls.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800540e:	2b02      	cmp	r3, #2
 8005410:	d109      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005412:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005416:	3308      	adds	r3, #8
 8005418:	4618      	mov	r0, r3
 800541a:	f003 fcf3 	bl	8008e04 <RCCEx_PLL2_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005424:	e006      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800542c:	e002      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800542e:	bf00      	nop
 8005430:	e000      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005432:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005434:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800543c:	4b71      	ldr	r3, [pc, #452]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800543e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005442:	f023 0107 	bic.w	r1, r3, #7
 8005446:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800544a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800544e:	4a6d      	ldr	r2, [pc, #436]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005450:	430b      	orrs	r3, r1
 8005452:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005456:	e003      	b.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005458:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800545c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	2100      	movs	r1, #0
 800546a:	6739      	str	r1, [r7, #112]	; 0x70
 800546c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005470:	677b      	str	r3, [r7, #116]	; 0x74
 8005472:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005476:	460b      	mov	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	d024      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800547c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005480:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d005      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005488:	2b08      	cmp	r3, #8
 800548a:	d005      	beq.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005492:	e002      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005494:	bf00      	nop
 8005496:	e000      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80054a2:	4b58      	ldr	r3, [pc, #352]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054a8:	f023 0108 	bic.w	r1, r3, #8
 80054ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054b4:	4a53      	ldr	r2, [pc, #332]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054bc:	e003      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ce:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80054d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d4:	2300      	movs	r3, #0
 80054d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80054dc:	460b      	mov	r3, r1
 80054de:	4313      	orrs	r3, r2
 80054e0:	f000 80b9 	beq.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80054e4:	4b48      	ldr	r3, [pc, #288]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	4a47      	ldr	r2, [pc, #284]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80054f0:	f7fc f806 	bl	8001500 <HAL_GetTick>
 80054f4:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80054f8:	e00b      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fa:	f7fc f801 	bl	8001500 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	2b02      	cmp	r3, #2
 8005508:	d903      	bls.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005510:	e005      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005512:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0ed      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800551e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005522:	2b00      	cmp	r3, #0
 8005524:	f040 8093 	bne.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800552a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005532:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005536:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d023      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800553e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005542:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005546:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800554a:	4293      	cmp	r3, r2
 800554c:	d01b      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800554e:	4b2d      	ldr	r3, [pc, #180]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005550:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005554:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005558:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800555c:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800555e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005562:	4a28      	ldr	r2, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005568:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800556c:	4b25      	ldr	r3, [pc, #148]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800556e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005572:	4a24      	ldr	r2, [pc, #144]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005578:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800557c:	4a21      	ldr	r2, [pc, #132]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800557e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005582:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005586:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d019      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fb ffb5 	bl	8001500 <HAL_GetTick>
 8005596:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800559a:	e00d      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800559c:	f7fb ffb0 	bl	8001500 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80055a6:	1ad2      	subs	r2, r2, r3
 80055a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d903      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80055b6:	e006      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b8:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ea      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80055c6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d13a      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80055ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055d2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80055d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055de:	d115      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80055e0:	4b08      	ldr	r3, [pc, #32]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80055e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80055f0:	091b      	lsrs	r3, r3, #4
 80055f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80055f6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80055fa:	4a02      	ldr	r2, [pc, #8]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80055fc:	430b      	orrs	r3, r1
 80055fe:	61d3      	str	r3, [r2, #28]
 8005600:	e00a      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005602:	bf00      	nop
 8005604:	44020c00 	.word	0x44020c00
 8005608:	44020800 	.word	0x44020800
 800560c:	4b9f      	ldr	r3, [pc, #636]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4a9e      	ldr	r2, [pc, #632]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005612:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005616:	61d3      	str	r3, [r2, #28]
 8005618:	4b9c      	ldr	r3, [pc, #624]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800561a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561e:	4a9b      	ldr	r2, [pc, #620]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005624:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005628:	4b98      	ldr	r3, [pc, #608]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800562a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800562e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005632:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563a:	4a94      	ldr	r2, [pc, #592]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800563c:	430b      	orrs	r3, r1
 800563e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005642:	e008      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005644:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005648:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800564c:	e003      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800564e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005652:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005656:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
 8005664:	2300      	movs	r3, #0
 8005666:	667b      	str	r3, [r7, #100]	; 0x64
 8005668:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800566c:	460b      	mov	r3, r1
 800566e:	4313      	orrs	r3, r2
 8005670:	d035      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005672:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800567a:	2b30      	cmp	r3, #48	; 0x30
 800567c:	d014      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800567e:	2b30      	cmp	r3, #48	; 0x30
 8005680:	d80e      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005682:	2b20      	cmp	r3, #32
 8005684:	d012      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005686:	2b20      	cmp	r3, #32
 8005688:	d80a      	bhi.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800568e:	2b10      	cmp	r3, #16
 8005690:	d106      	bne.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005692:	4b7e      	ldr	r3, [pc, #504]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005696:	4a7d      	ldr	r2, [pc, #500]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800569c:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800569e:	e008      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056a6:	e004      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056a8:	bf00      	nop
 80056aa:	e002      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056ac:	bf00      	nop
 80056ae:	e000      	b.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80056b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80056ba:	4b74      	ldr	r3, [pc, #464]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80056c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80056cc:	4a6f      	ldr	r2, [pc, #444]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80056ce:	430b      	orrs	r3, r1
 80056d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056d4:	e003      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80056ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80056ec:	2300      	movs	r3, #0
 80056ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d033      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80056fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005706:	2b40      	cmp	r3, #64	; 0x40
 8005708:	d007      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800570a:	e010      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800570c:	4b5f      	ldr	r3, [pc, #380]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800570e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005710:	4a5e      	ldr	r2, [pc, #376]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005716:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005718:	e00d      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800571a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800571e:	3308      	adds	r3, #8
 8005720:	4618      	mov	r0, r3
 8005722:	f003 fb6f 	bl	8008e04 <RCCEx_PLL2_Config>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800572c:	e003      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005736:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800573e:	4b53      	ldr	r3, [pc, #332]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005740:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005744:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005748:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800574c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005750:	4a4e      	ldr	r2, [pc, #312]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005752:	430b      	orrs	r3, r1
 8005754:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005758:	e003      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800575e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005762:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
 8005770:	2300      	movs	r3, #0
 8005772:	657b      	str	r3, [r7, #84]	; 0x54
 8005774:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005778:	460b      	mov	r3, r1
 800577a:	4313      	orrs	r3, r2
 800577c:	d033      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800577e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005782:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800578a:	2b80      	cmp	r3, #128	; 0x80
 800578c:	d007      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800578e:	e010      	b.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005790:	4b3e      	ldr	r3, [pc, #248]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005794:	4a3d      	ldr	r2, [pc, #244]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800579c:	e00d      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800579e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057a2:	3308      	adds	r3, #8
 80057a4:	4618      	mov	r0, r3
 80057a6:	f003 fb2d 	bl	8008e04 <RCCEx_PLL2_Config>
 80057aa:	4603      	mov	r3, r0
 80057ac:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80057b0:	e003      	b.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ba:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80057c2:	4b32      	ldr	r3, [pc, #200]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80057cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057d0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80057d4:	4a2d      	ldr	r2, [pc, #180]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80057d6:	430b      	orrs	r3, r1
 80057d8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80057dc:	e003      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057e2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80057e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80057f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f4:	2300      	movs	r3, #0
 80057f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d04a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005802:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800580a:	2b04      	cmp	r3, #4
 800580c:	d827      	bhi.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800580e:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005829 	.word	0x08005829
 8005818:	08005837 	.word	0x08005837
 800581c:	0800584b 	.word	0x0800584b
 8005820:	08005867 	.word	0x08005867
 8005824:	08005867 	.word	0x08005867
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4b18      	ldr	r3, [pc, #96]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	4a17      	ldr	r2, [pc, #92]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005834:	e018      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005836:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800583a:	3308      	adds	r3, #8
 800583c:	4618      	mov	r0, r3
 800583e:	f003 fae1 	bl	8008e04 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005848:	e00e      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800584a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800584e:	3330      	adds	r3, #48	; 0x30
 8005850:	4618      	mov	r0, r3
 8005852:	f003 fb6f 	bl	8008f34 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800585c:	e004      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005868:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10f      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005876:	f023 0107 	bic.w	r1, r3, #7
 800587a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800587e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005882:	4a02      	ldr	r2, [pc, #8]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005884:	430b      	orrs	r3, r1
 8005886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800588a:	e005      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800588c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005894:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005898:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80058a4:	643b      	str	r3, [r7, #64]	; 0x40
 80058a6:	2300      	movs	r3, #0
 80058a8:	647b      	str	r3, [r7, #68]	; 0x44
 80058aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f000 8081 	beq.w	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80058b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d85f      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	08005983 	.word	0x08005983
 80058d0:	08005983 	.word	0x08005983
 80058d4:	08005983 	.word	0x08005983
 80058d8:	08005983 	.word	0x08005983
 80058dc:	08005983 	.word	0x08005983
 80058e0:	08005983 	.word	0x08005983
 80058e4:	08005983 	.word	0x08005983
 80058e8:	0800595b 	.word	0x0800595b
 80058ec:	08005983 	.word	0x08005983
 80058f0:	08005983 	.word	0x08005983
 80058f4:	08005983 	.word	0x08005983
 80058f8:	08005983 	.word	0x08005983
 80058fc:	08005983 	.word	0x08005983
 8005900:	08005983 	.word	0x08005983
 8005904:	08005983 	.word	0x08005983
 8005908:	0800596f 	.word	0x0800596f
 800590c:	08005983 	.word	0x08005983
 8005910:	08005983 	.word	0x08005983
 8005914:	08005983 	.word	0x08005983
 8005918:	08005983 	.word	0x08005983
 800591c:	08005983 	.word	0x08005983
 8005920:	08005983 	.word	0x08005983
 8005924:	08005983 	.word	0x08005983
 8005928:	0800598b 	.word	0x0800598b
 800592c:	08005983 	.word	0x08005983
 8005930:	08005983 	.word	0x08005983
 8005934:	08005983 	.word	0x08005983
 8005938:	08005983 	.word	0x08005983
 800593c:	08005983 	.word	0x08005983
 8005940:	08005983 	.word	0x08005983
 8005944:	08005983 	.word	0x08005983
 8005948:	0800598b 	.word	0x0800598b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800594c:	4bab      	ldr	r3, [pc, #684]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	4aaa      	ldr	r2, [pc, #680]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005956:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005958:	e018      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800595e:	3308      	adds	r3, #8
 8005960:	4618      	mov	r0, r3
 8005962:	f003 fa4f 	bl	8008e04 <RCCEx_PLL2_Config>
 8005966:	4603      	mov	r3, r0
 8005968:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800596c:	e00e      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800596e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005972:	3330      	adds	r3, #48	; 0x30
 8005974:	4618      	mov	r0, r3
 8005976:	f003 fadd 	bl	8008f34 <RCCEx_PLL3_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10d      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005994:	4b99      	ldr	r3, [pc, #612]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800599a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800599e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059a6:	4a95      	ldr	r2, [pc, #596]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80059a8:	430b      	orrs	r3, r1
 80059aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059ae:	e003      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80059b4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80059b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80059c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c6:	2300      	movs	r3, #0
 80059c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80059ce:	460b      	mov	r3, r1
 80059d0:	4313      	orrs	r3, r2
 80059d2:	d04e      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80059d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e0:	d02e      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80059e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059e6:	d827      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059e8:	2bc0      	cmp	r3, #192	; 0xc0
 80059ea:	d02b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80059ec:	2bc0      	cmp	r3, #192	; 0xc0
 80059ee:	d823      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d017      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80059f4:	2b80      	cmp	r3, #128	; 0x80
 80059f6:	d81f      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d007      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005a00:	e01a      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a02:	4b7e      	ldr	r3, [pc, #504]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a06:	4a7d      	ldr	r2, [pc, #500]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a0c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a0e:	e01a      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a14:	3308      	adds	r3, #8
 8005a16:	4618      	mov	r0, r3
 8005a18:	f003 f9f4 	bl	8008e04 <RCCEx_PLL2_Config>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a22:	e010      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a28:	3330      	adds	r3, #48	; 0x30
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f003 fa82 	bl	8008f34 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005a36:	e006      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005a3e:	e002      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005a4e:	4b6b      	ldr	r3, [pc, #428]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a54:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a60:	4a66      	ldr	r2, [pc, #408]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005a62:	430b      	orrs	r3, r1
 8005a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a68:	e003      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005a6e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8005a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8005a80:	2300      	movs	r3, #0
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
 8005a84:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	d055      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8005a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005a92:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005a96:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005a9a:	d031      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8005a9c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005aa0:	d82a      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005aa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aa6:	d02d      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8005aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005aac:	d824      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005aae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ab2:	d029      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8005ab4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005ab8:	d81e      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005abe:	d011      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8005ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac4:	d818      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d020      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8005aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ace:	d113      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f003 f994 	bl	8008e04 <RCCEx_PLL2_Config>
 8005adc:	4603      	mov	r3, r0
 8005ade:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005ae2:	e014      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005ae8:	3330      	adds	r3, #48	; 0x30
 8005aea:	4618      	mov	r0, r3
 8005aec:	f003 fa22 	bl	8008f34 <RCCEx_PLL3_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005af6:	e00a      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005afe:	e006      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b00:	bf00      	nop
 8005b02:	e004      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b04:	bf00      	nop
 8005b06:	e002      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b08:	bf00      	nop
 8005b0a:	e000      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10d      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005b16:	4b39      	ldr	r3, [pc, #228]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b1c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005b28:	4a34      	ldr	r2, [pc, #208]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005b2a:	430b      	orrs	r3, r1
 8005b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b30:	e003      	b.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005b36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b48:	2300      	movs	r3, #0
 8005b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005b50:	460b      	mov	r3, r1
 8005b52:	4313      	orrs	r3, r2
 8005b54:	d058      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005b56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b62:	d031      	beq.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005b64:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005b68:	d82a      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b6e:	d02d      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b74:	d824      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b7a:	d029      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8005b7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b80:	d81e      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	d011      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8c:	d818      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d020      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d113      	bne.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f003 f930 	bl	8008e04 <RCCEx_PLL2_Config>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005baa:	e014      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f003 f9be 	bl	8008f34 <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8005bbe:	e00a      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005bc6:	e006      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bc8:	bf00      	nop
 8005bca:	e004      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bcc:	bf00      	nop
 8005bce:	e002      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8005bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d110      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005be4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005be8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005bec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bf0:	4902      	ldr	r1, [pc, #8]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8005bfa:	bf00      	nop
 8005bfc:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005c04:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	2100      	movs	r1, #0
 8005c12:	6239      	str	r1, [r7, #32]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
 8005c1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4313      	orrs	r3, r2
 8005c22:	d055      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c2c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005c30:	d031      	beq.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005c32:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005c36:	d82a      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c3c:	d02d      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8005c3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c42:	d824      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c44:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005c48:	d029      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8005c4a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005c4e:	d81e      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c54:	d011      	beq.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c5a:	d818      	bhi.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005c60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c64:	d113      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c66:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c6a:	3308      	adds	r3, #8
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f003 f8c9 	bl	8008e04 <RCCEx_PLL2_Config>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c78:	e014      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005c7e:	3330      	adds	r3, #48	; 0x30
 8005c80:	4618      	mov	r0, r3
 8005c82:	f003 f957 	bl	8008f34 <RCCEx_PLL3_Config>
 8005c86:	4603      	mov	r3, r0
 8005c88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c8c:	e00a      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c96:	bf00      	nop
 8005c98:	e004      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c9a:	bf00      	nop
 8005c9c:	e002      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005c9e:	bf00      	nop
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8005ca2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10d      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005cac:	4b88      	ldr	r3, [pc, #544]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cb2:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8005cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005cbe:	4984      	ldr	r1, [pc, #528]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005cc6:	e003      	b.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005ccc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd8:	2100      	movs	r1, #0
 8005cda:	61b9      	str	r1, [r7, #24]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	61fb      	str	r3, [r7, #28]
 8005ce2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	d03d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8005cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d81c      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d3b 	.word	0x08005d3b
 8005d04:	08005d11 	.word	0x08005d11
 8005d08:	08005d1f 	.word	0x08005d1f
 8005d0c:	08005d3b 	.word	0x08005d3b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d10:	4b6f      	ldr	r3, [pc, #444]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	4a6e      	ldr	r2, [pc, #440]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005d1c:	e00e      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d22:	3308      	adds	r3, #8
 8005d24:	4618      	mov	r0, r3
 8005d26:	f003 f86d 	bl	8008e04 <RCCEx_PLL2_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005d30:	e004      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005d38:	e000      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8005d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d3c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10d      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005d44:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d46:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005d56:	495e      	ldr	r1, [pc, #376]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005d5e:	e003      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d60:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005d64:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d70:	2100      	movs	r1, #0
 8005d72:	6139      	str	r1, [r7, #16]
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4313      	orrs	r3, r2
 8005d82:	d03a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005d88:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d90:	d00e      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8005d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d96:	d815      	bhi.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d017      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da0:	d110      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005da2:	4b4b      	ldr	r3, [pc, #300]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da6:	4a4a      	ldr	r2, [pc, #296]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dac:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005dae:	e00e      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005db0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005db4:	3308      	adds	r3, #8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f003 f824 	bl	8008e04 <RCCEx_PLL2_Config>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005dc2:	e004      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005dca:	e000      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8005dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8005dd6:	4b3e      	ldr	r3, [pc, #248]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005de4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005de8:	4939      	ldr	r1, [pc, #228]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005df0:	e003      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005df6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005dfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e02:	2100      	movs	r1, #0
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e10:	460b      	mov	r3, r1
 8005e12:	4313      	orrs	r3, r2
 8005e14:	d038      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e1a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005e1e:	2b30      	cmp	r3, #48	; 0x30
 8005e20:	d01b      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005e22:	2b30      	cmp	r3, #48	; 0x30
 8005e24:	d815      	bhi.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005e26:	2b10      	cmp	r3, #16
 8005e28:	d002      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8005e2a:	2b20      	cmp	r3, #32
 8005e2c:	d007      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8005e2e:	e010      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e30:	4b27      	ldr	r3, [pc, #156]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	4a26      	ldr	r2, [pc, #152]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e3a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8005e3c:	e00e      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e42:	3330      	adds	r3, #48	; 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f003 f875 	bl	8008f34 <RCCEx_PLL3_Config>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005e50:	e004      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8005e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e6e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005e76:	4916      	ldr	r1, [pc, #88]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e7e:	e003      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e80:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005e84:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e90:	2100      	movs	r1, #0
 8005e92:	6039      	str	r1, [r7, #0]
 8005e94:	f003 0308 	and.w	r3, r3, #8
 8005e98:	607b      	str	r3, [r7, #4]
 8005e9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	d00c      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8005ea4:	4b0a      	ldr	r3, [pc, #40]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005ea6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005eae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005eb2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8005eb6:	4906      	ldr	r1, [pc, #24]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8005ebe:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ece:	bf00      	nop
 8005ed0:	44020c00 	.word	0x44020c00

08005ed4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b08b      	sub	sp, #44	; 0x2c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005edc:	4bad      	ldr	r3, [pc, #692]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ee6:	4bab      	ldr	r3, [pc, #684]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005ef0:	4ba8      	ldr	r3, [pc, #672]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	0a1b      	lsrs	r3, r3, #8
 8005ef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005efa:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005efc:	4ba5      	ldr	r3, [pc, #660]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f06:	4ba3      	ldr	r3, [pc, #652]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	fb02 f303 	mul.w	r3, r2, r3
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f1e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8126 	beq.w	8006176 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d053      	beq.n	8005fd8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d86f      	bhi.n	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d003      	beq.n	8005f44 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d02b      	beq.n	8005f9a <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005f42:	e068      	b.n	8006016 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f44:	4b93      	ldr	r3, [pc, #588]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	08db      	lsrs	r3, r3, #3
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	4a92      	ldr	r2, [pc, #584]	; (8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
 8005f54:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	ee07 3a90 	vmov	s15, r3
 8005f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f78:	ed97 6a04 	vldr	s12, [r7, #16]
 8005f7c:	eddf 5a87 	vldr	s11, [pc, #540]	; 800619c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005f98:	e068      	b.n	800606c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	ee07 3a90 	vmov	s15, r3
 8005fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80061a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005fa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	ee07 3a90 	vmov	s15, r3
 8005fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fb6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005fba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800619c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005fd6:	e049      	b.n	800606c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe2:	eddf 6a70 	vldr	s13, [pc, #448]	; 80061a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	ee07 3a90 	vmov	s15, r3
 8005ff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff4:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ff8:	eddf 5a68 	vldr	s11, [pc, #416]	; 800619c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006010:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8006014:	e02a      	b.n	800606c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006016:	4b5f      	ldr	r3, [pc, #380]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f003 0303 	and.w	r3, r3, #3
 8006020:	4a5d      	ldr	r2, [pc, #372]	; (8006198 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006022:	fa22 f303 	lsr.w	r3, r2, r3
 8006026:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	ee07 3a90 	vmov	s15, r3
 8006038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800603c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a04 	vldr	s12, [r7, #16]
 800604e:	eddf 5a53 	vldr	s11, [pc, #332]	; 800619c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800606a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800606c:	4b49      	ldr	r3, [pc, #292]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006078:	d121      	bne.n	80060be <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800607a:	4b46      	ldr	r3, [pc, #280]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006086:	4b43      	ldr	r3, [pc, #268]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608a:	0a5b      	lsrs	r3, r3, #9
 800608c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006098:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800609c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80060a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ac:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e006      	b.n	80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80060c4:	4b33      	ldr	r3, [pc, #204]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060d0:	d121      	bne.n	8006116 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d017      	beq.n	800610e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80060de:	4b2d      	ldr	r3, [pc, #180]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e2:	0c1b      	lsrs	r3, r3, #16
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80060f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80060f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80060fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006104:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	605a      	str	r2, [r3, #4]
 800610c:	e006      	b.n	800611c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	e002      	b.n	800611c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800611c:	4b1d      	ldr	r3, [pc, #116]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006124:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006128:	d121      	bne.n	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800612a:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d017      	beq.n	8006166 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006136:	4b17      	ldr	r3, [pc, #92]	; (8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800613a:	0e1b      	lsrs	r3, r3, #24
 800613c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006140:	ee07 3a90 	vmov	s15, r3
 8006144:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800614c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006150:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006158:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006164:	e010      	b.n	8006188 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	e00c      	b.n	8006188 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	609a      	str	r2, [r3, #8]
}
 8006174:	e008      	b.n	8006188 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	609a      	str	r2, [r3, #8]
}
 8006188:	bf00      	nop
 800618a:	372c      	adds	r7, #44	; 0x2c
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	44020c00 	.word	0x44020c00
 8006198:	03d09000 	.word	0x03d09000
 800619c:	46000000 	.word	0x46000000
 80061a0:	4a742400 	.word	0x4a742400
 80061a4:	4af42400 	.word	0x4af42400

080061a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b08b      	sub	sp, #44	; 0x2c
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80061b0:	4bad      	ldr	r3, [pc, #692]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80061ba:	4bab      	ldr	r3, [pc, #684]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80061c4:	4ba8      	ldr	r3, [pc, #672]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	0a1b      	lsrs	r3, r3, #8
 80061ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061ce:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80061d0:	4ba5      	ldr	r3, [pc, #660]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	f003 0310 	and.w	r3, r3, #16
 80061d8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80061da:	4ba3      	ldr	r3, [pc, #652]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	08db      	lsrs	r3, r3, #3
 80061e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f000 8126 	beq.w	800644a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	2b03      	cmp	r3, #3
 8006202:	d053      	beq.n	80062ac <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b03      	cmp	r3, #3
 8006208:	d86f      	bhi.n	80062ea <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d003      	beq.n	8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	2b02      	cmp	r3, #2
 8006214:	d02b      	beq.n	800626e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8006216:	e068      	b.n	80062ea <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006218:	4b93      	ldr	r3, [pc, #588]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	08db      	lsrs	r3, r3, #3
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	4a92      	ldr	r2, [pc, #584]	; (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
 8006228:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006250:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006254:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006258:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006260:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006268:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800626c:	e068      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	ee07 3a90 	vmov	s15, r3
 8006274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006278:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006474 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800627c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628a:	ed97 6a04 	vldr	s12, [r7, #16]
 800628e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80062aa:	e049      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006478 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80062cc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80062d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80062e8:	e02a      	b.n	8006340 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80062ea:	4b5f      	ldr	r3, [pc, #380]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	08db      	lsrs	r3, r3, #3
 80062f0:	f003 0303 	and.w	r3, r3, #3
 80062f4:	4a5d      	ldr	r2, [pc, #372]	; (800646c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80062f6:	fa22 f303 	lsr.w	r3, r2, r3
 80062fa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006322:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006470 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800633e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006340:	4b49      	ldr	r3, [pc, #292]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006348:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800634c:	d121      	bne.n	8006392 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800634e:	4b46      	ldr	r3, [pc, #280]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d017      	beq.n	800638a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800635a:	4b43      	ldr	r3, [pc, #268]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	0a5b      	lsrs	r3, r3, #9
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 800636c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006370:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006374:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800637c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006380:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006398:	4b33      	ldr	r3, [pc, #204]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a4:	d121      	bne.n	80063ea <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d017      	beq.n	80063e2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80063b2:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80063c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80063cc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]
 80063e0:	e006      	b.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	605a      	str	r2, [r3, #4]
 80063e8:	e002      	b.n	80063f0 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063f0:	4b1d      	ldr	r3, [pc, #116]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063fc:	d121      	bne.n	8006442 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80063fe:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d017      	beq.n	800643a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800640a:	4b17      	ldr	r3, [pc, #92]	; (8006468 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	0e1b      	lsrs	r3, r3, #24
 8006410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800641c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006420:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006424:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006430:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006438:	e010      	b.n	800645c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	609a      	str	r2, [r3, #8]
}
 8006440:	e00c      	b.n	800645c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	e008      	b.n	800645c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	372c      	adds	r7, #44	; 0x2c
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	44020c00 	.word	0x44020c00
 800646c:	03d09000 	.word	0x03d09000
 8006470:	46000000 	.word	0x46000000
 8006474:	4a742400 	.word	0x4a742400
 8006478:	4af42400 	.word	0x4af42400

0800647c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 800647c:	b480      	push	{r7}
 800647e:	b08b      	sub	sp, #44	; 0x2c
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006484:	4bad      	ldr	r3, [pc, #692]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800648c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800648e:	4bab      	ldr	r3, [pc, #684]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006498:	4ba8      	ldr	r3, [pc, #672]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649c:	0a1b      	lsrs	r3, r3, #8
 800649e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064a2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80064a4:	4ba5      	ldr	r3, [pc, #660]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80064ae:	4ba3      	ldr	r3, [pc, #652]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80064b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b2:	08db      	lsrs	r3, r3, #3
 80064b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	fb02 f303 	mul.w	r3, r2, r3
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064c6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8126 	beq.w	800671e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	2b03      	cmp	r3, #3
 80064d6:	d053      	beq.n	8006580 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d86f      	bhi.n	80065be <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d003      	beq.n	80064ec <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d02b      	beq.n	8006542 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 80064ea:	e068      	b.n	80065be <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80064ec:	4b93      	ldr	r3, [pc, #588]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	08db      	lsrs	r3, r3, #3
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	4a92      	ldr	r2, [pc, #584]	; (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
 80064fc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	ee07 3a90 	vmov	s15, r3
 8006504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	ee07 3a90 	vmov	s15, r3
 800651c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006520:	ed97 6a04 	vldr	s12, [r7, #16]
 8006524:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006528:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800652c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006530:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006534:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800653c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006540:	e068      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	ee07 3a90 	vmov	s15, r3
 8006548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800654c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006748 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006550:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006562:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800656a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800657a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800657e:	e049      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800658a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800674c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800658e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	ee07 3a90 	vmov	s15, r3
 8006598:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659c:	ed97 6a04 	vldr	s12, [r7, #16]
 80065a0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80065a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80065bc:	e02a      	b.n	8006614 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80065be:	4b5f      	ldr	r3, [pc, #380]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	08db      	lsrs	r3, r3, #3
 80065c4:	f003 0303 	and.w	r3, r3, #3
 80065c8:	4a5d      	ldr	r2, [pc, #372]	; (8006740 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e8:	6a3b      	ldr	r3, [r7, #32]
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f2:	ed97 6a04 	vldr	s12, [r7, #16]
 80065f6:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006744 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80065fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800660a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006612:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006614:	4b49      	ldr	r3, [pc, #292]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800661c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006620:	d121      	bne.n	8006666 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006622:	4b46      	ldr	r3, [pc, #280]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d017      	beq.n	800665e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800662e:	4b43      	ldr	r3, [pc, #268]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	0a5b      	lsrs	r3, r3, #9
 8006634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006644:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006648:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800664c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006654:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e006      	b.n	800666c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	e002      	b.n	800666c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800666c:	4b33      	ldr	r3, [pc, #204]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006678:	d121      	bne.n	80066be <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800667a:	4b30      	ldr	r3, [pc, #192]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d017      	beq.n	80066b6 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668a:	0c1b      	lsrs	r3, r3, #16
 800668c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006690:	ee07 3a90 	vmov	s15, r3
 8006694:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80066a0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ac:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	e006      	b.n	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]
 80066bc:	e002      	b.n	80066c4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d0:	d121      	bne.n	8006716 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80066d2:	4b1a      	ldr	r3, [pc, #104]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d017      	beq.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066de:	4b17      	ldr	r3, [pc, #92]	; (800673c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e2:	0e1b      	lsrs	r3, r3, #24
 80066e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e8:	ee07 3a90 	vmov	s15, r3
 80066ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80066f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066f4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80066f8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80066fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006704:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800670c:	e010      	b.n	8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	e00c      	b.n	8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	e008      	b.n	8006730 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	609a      	str	r2, [r3, #8]
}
 8006730:	bf00      	nop
 8006732:	372c      	adds	r7, #44	; 0x2c
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	44020c00 	.word	0x44020c00
 8006740:	03d09000 	.word	0x03d09000
 8006744:	46000000 	.word	0x46000000
 8006748:	4a742400 	.word	0x4a742400
 800674c:	4af42400 	.word	0x4af42400

08006750 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b08f      	sub	sp, #60	; 0x3c
 8006754:	af00      	add	r7, sp, #0
 8006756:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800675a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800675e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006762:	4321      	orrs	r1, r4
 8006764:	d150      	bne.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006766:	4b26      	ldr	r3, [pc, #152]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800676c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006770:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006774:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b02      	cmp	r3, #2
 800677e:	d108      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006786:	d104      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800678c:	637b      	str	r3, [r7, #52]	; 0x34
 800678e:	f002 bb2a 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006792:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800679c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067a0:	d108      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a8:	d104      	bne.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80067aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80067ae:	637b      	str	r3, [r7, #52]	; 0x34
 80067b0:	f002 bb19 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067c0:	d119      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c8:	d115      	bne.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80067ca:	4b0d      	ldr	r3, [pc, #52]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d6:	d30a      	bcc.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80067d8:	4b09      	ldr	r3, [pc, #36]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067e2:	4a08      	ldr	r2, [pc, #32]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80067ea:	f002 bafc 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80067f2:	f002 baf8 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	637b      	str	r3, [r7, #52]	; 0x34
 80067fa:	f002 baf4 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80067fe:	bf00      	nop
 8006800:	44020c00 	.word	0x44020c00
 8006804:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800680c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006810:	ea50 0104 	orrs.w	r1, r0, r4
 8006814:	f001 8275 	beq.w	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006818:	e9d7 0100 	ldrd	r0, r1, [r7]
 800681c:	2801      	cmp	r0, #1
 800681e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006822:	f082 82dd 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006826:	e9d7 0100 	ldrd	r0, r1, [r7]
 800682a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800682e:	ea50 0104 	orrs.w	r1, r0, r4
 8006832:	f001 816c 	beq.w	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006836:	e9d7 0100 	ldrd	r0, r1, [r7]
 800683a:	2801      	cmp	r0, #1
 800683c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006840:	f082 82ce 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006844:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006848:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800684c:	ea50 0104 	orrs.w	r1, r0, r4
 8006850:	f001 8602 	beq.w	8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006854:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006858:	2801      	cmp	r0, #1
 800685a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800685e:	f082 82bf 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006862:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006866:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800686a:	ea50 0104 	orrs.w	r1, r0, r4
 800686e:	f001 854c 	beq.w	800830a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006872:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006876:	2801      	cmp	r0, #1
 8006878:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800687c:	f082 82b0 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006880:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006884:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006888:	ea50 0104 	orrs.w	r1, r0, r4
 800688c:	f001 849e 	beq.w	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8006890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006894:	2801      	cmp	r0, #1
 8006896:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 800689a:	f082 82a1 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800689e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068a2:	f1a1 0420 	sub.w	r4, r1, #32
 80068a6:	ea50 0104 	orrs.w	r1, r0, r4
 80068aa:	f001 83e8 	beq.w	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80068ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b2:	2801      	cmp	r0, #1
 80068b4:	f171 0120 	sbcs.w	r1, r1, #32
 80068b8:	f082 8292 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068c0:	f1a1 0410 	sub.w	r4, r1, #16
 80068c4:	ea50 0104 	orrs.w	r1, r0, r4
 80068c8:	f002 8256 	beq.w	8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80068cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068d0:	2801      	cmp	r0, #1
 80068d2:	f171 0110 	sbcs.w	r1, r1, #16
 80068d6:	f082 8283 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068de:	f1a1 0408 	sub.w	r4, r1, #8
 80068e2:	ea50 0104 	orrs.w	r1, r0, r4
 80068e6:	f002 81cc 	beq.w	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80068ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068ee:	2801      	cmp	r0, #1
 80068f0:	f171 0108 	sbcs.w	r1, r1, #8
 80068f4:	f082 8274 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80068f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068fc:	1f0c      	subs	r4, r1, #4
 80068fe:	ea50 0104 	orrs.w	r1, r0, r4
 8006902:	f001 8648 	beq.w	8008596 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006906:	e9d7 0100 	ldrd	r0, r1, [r7]
 800690a:	2801      	cmp	r0, #1
 800690c:	f171 0104 	sbcs.w	r1, r1, #4
 8006910:	f082 8266 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006914:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006918:	1e8c      	subs	r4, r1, #2
 800691a:	ea50 0104 	orrs.w	r1, r0, r4
 800691e:	f002 8143 	beq.w	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006922:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006926:	2801      	cmp	r0, #1
 8006928:	f171 0102 	sbcs.w	r1, r1, #2
 800692c:	f082 8258 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006930:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006934:	1e4c      	subs	r4, r1, #1
 8006936:	ea50 0104 	orrs.w	r1, r0, r4
 800693a:	f002 80ce 	beq.w	8008ada <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800693e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006942:	2801      	cmp	r0, #1
 8006944:	f171 0101 	sbcs.w	r1, r1, #1
 8006948:	f082 824a 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800694c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006950:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006954:	4321      	orrs	r1, r4
 8006956:	f002 8059 	beq.w	8008a0c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800695a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800695e:	4cd9      	ldr	r4, [pc, #868]	; (8006cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006960:	42a0      	cmp	r0, r4
 8006962:	f171 0100 	sbcs.w	r1, r1, #0
 8006966:	f082 823b 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800696a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800696e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006972:	4321      	orrs	r1, r4
 8006974:	f001 87d9 	beq.w	800892a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006978:	e9d7 0100 	ldrd	r0, r1, [r7]
 800697c:	4cd2      	ldr	r4, [pc, #840]	; (8006cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800697e:	42a0      	cmp	r0, r4
 8006980:	f171 0100 	sbcs.w	r1, r1, #0
 8006984:	f082 822c 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006988:	e9d7 0100 	ldrd	r0, r1, [r7]
 800698c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8006990:	4321      	orrs	r1, r4
 8006992:	f001 8751 	beq.w	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8006996:	e9d7 0100 	ldrd	r0, r1, [r7]
 800699a:	4ccc      	ldr	r4, [pc, #816]	; (8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800699c:	42a0      	cmp	r0, r4
 800699e:	f171 0100 	sbcs.w	r1, r1, #0
 80069a2:	f082 821d 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069aa:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80069ae:	4321      	orrs	r1, r4
 80069b0:	f001 869a 	beq.w	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80069b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069b8:	4cc5      	ldr	r4, [pc, #788]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80069ba:	42a0      	cmp	r0, r4
 80069bc:	f171 0100 	sbcs.w	r1, r1, #0
 80069c0:	f082 820e 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069c8:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80069cc:	4321      	orrs	r1, r4
 80069ce:	f001 8612 	beq.w	80085f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80069d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069d6:	4cbf      	ldr	r4, [pc, #764]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80069d8:	42a0      	cmp	r0, r4
 80069da:	f171 0100 	sbcs.w	r1, r1, #0
 80069de:	f082 81ff 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80069e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069e6:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80069ea:	4321      	orrs	r1, r4
 80069ec:	f002 817e 	beq.w	8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80069f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069f4:	4cb8      	ldr	r4, [pc, #736]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80069f6:	42a0      	cmp	r0, r4
 80069f8:	f171 0100 	sbcs.w	r1, r1, #0
 80069fc:	f082 81f0 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a04:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006a08:	4321      	orrs	r1, r4
 8006a0a:	f000 829e 	beq.w	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8006a0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a12:	4cb2      	ldr	r4, [pc, #712]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a14:	42a0      	cmp	r0, r4
 8006a16:	f171 0100 	sbcs.w	r1, r1, #0
 8006a1a:	f082 81e1 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a22:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006a26:	4321      	orrs	r1, r4
 8006a28:	f000 826d 	beq.w	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8006a2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a30:	4cab      	ldr	r4, [pc, #684]	; (8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a32:	42a0      	cmp	r0, r4
 8006a34:	f171 0100 	sbcs.w	r1, r1, #0
 8006a38:	f082 81d2 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a40:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006a44:	4321      	orrs	r1, r4
 8006a46:	f001 800d 	beq.w	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8006a4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a4e:	4ca5      	ldr	r4, [pc, #660]	; (8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	f171 0100 	sbcs.w	r1, r1, #0
 8006a56:	f082 81c3 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a5e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006a62:	4321      	orrs	r1, r4
 8006a64:	f000 81d0 	beq.w	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a6c:	4c9e      	ldr	r4, [pc, #632]	; (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a6e:	42a0      	cmp	r0, r4
 8006a70:	f171 0100 	sbcs.w	r1, r1, #0
 8006a74:	f082 81b4 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a7c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006a80:	4321      	orrs	r1, r4
 8006a82:	f000 8142 	beq.w	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006a86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a8a:	4c98      	ldr	r4, [pc, #608]	; (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	f171 0100 	sbcs.w	r1, r1, #0
 8006a92:	f082 81a5 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9a:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8006a9e:	4321      	orrs	r1, r4
 8006aa0:	f001 824e 	beq.w	8007f40 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8006aa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006aa8:	4c91      	ldr	r4, [pc, #580]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006aaa:	42a0      	cmp	r0, r4
 8006aac:	f171 0100 	sbcs.w	r1, r1, #0
 8006ab0:	f082 8196 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ab8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8006abc:	4321      	orrs	r1, r4
 8006abe:	f001 8197 	beq.w	8007df0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8006ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ac6:	4c8b      	ldr	r4, [pc, #556]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006ac8:	42a0      	cmp	r0, r4
 8006aca:	f171 0100 	sbcs.w	r1, r1, #0
 8006ace:	f082 8187 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006ad2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ad6:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8006ada:	4321      	orrs	r1, r4
 8006adc:	f001 8154 	beq.w	8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8006ae0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ae4:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8006ae8:	f171 0100 	sbcs.w	r1, r1, #0
 8006aec:	f082 8178 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006af4:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006af8:	4321      	orrs	r1, r4
 8006afa:	f001 80b7 	beq.w	8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8006afe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b02:	f248 0401 	movw	r4, #32769	; 0x8001
 8006b06:	42a0      	cmp	r0, r4
 8006b08:	f171 0100 	sbcs.w	r1, r1, #0
 8006b0c:	f082 8168 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b14:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006b18:	4321      	orrs	r1, r4
 8006b1a:	f001 8064 	beq.w	8007be6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8006b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b22:	f244 0401 	movw	r4, #16385	; 0x4001
 8006b26:	42a0      	cmp	r0, r4
 8006b28:	f171 0100 	sbcs.w	r1, r1, #0
 8006b2c:	f082 8158 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b34:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006b38:	4321      	orrs	r1, r4
 8006b3a:	f001 8011 	beq.w	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8006b3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b42:	f242 0401 	movw	r4, #8193	; 0x2001
 8006b46:	42a0      	cmp	r0, r4
 8006b48:	f171 0100 	sbcs.w	r1, r1, #0
 8006b4c:	f082 8148 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b54:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006b58:	4321      	orrs	r1, r4
 8006b5a:	f000 871e 	beq.w	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8006b5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b62:	f241 0401 	movw	r4, #4097	; 0x1001
 8006b66:	42a0      	cmp	r0, r4
 8006b68:	f171 0100 	sbcs.w	r1, r1, #0
 8006b6c:	f082 8138 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b74:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006b78:	4321      	orrs	r1, r4
 8006b7a:	f000 86a8 	beq.w	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8006b7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b82:	f640 0401 	movw	r4, #2049	; 0x801
 8006b86:	42a0      	cmp	r0, r4
 8006b88:	f171 0100 	sbcs.w	r1, r1, #0
 8006b8c:	f082 8128 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b94:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8006b98:	4321      	orrs	r1, r4
 8006b9a:	f000 8632 	beq.w	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8006b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba2:	f240 4401 	movw	r4, #1025	; 0x401
 8006ba6:	42a0      	cmp	r0, r4
 8006ba8:	f171 0100 	sbcs.w	r1, r1, #0
 8006bac:	f082 8118 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bb4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8006bb8:	4321      	orrs	r1, r4
 8006bba:	f000 85b0 	beq.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8006bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bc2:	f240 2401 	movw	r4, #513	; 0x201
 8006bc6:	42a0      	cmp	r0, r4
 8006bc8:	f171 0100 	sbcs.w	r1, r1, #0
 8006bcc:	f082 8108 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bd0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd4:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8006bd8:	4321      	orrs	r1, r4
 8006bda:	f000 8535 	beq.w	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8006bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006be2:	f240 1401 	movw	r4, #257	; 0x101
 8006be6:	42a0      	cmp	r0, r4
 8006be8:	f171 0100 	sbcs.w	r1, r1, #0
 8006bec:	f082 80f8 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bf4:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006bf8:	4321      	orrs	r1, r4
 8006bfa:	f000 84ba 	beq.w	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8006bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c02:	2881      	cmp	r0, #129	; 0x81
 8006c04:	f171 0100 	sbcs.w	r1, r1, #0
 8006c08:	f082 80ea 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c10:	2821      	cmp	r0, #33	; 0x21
 8006c12:	f171 0100 	sbcs.w	r1, r1, #0
 8006c16:	d26f      	bcs.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c1c:	4301      	orrs	r1, r0
 8006c1e:	f002 80df 	beq.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c26:	1e42      	subs	r2, r0, #1
 8006c28:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8006c2c:	2a20      	cmp	r2, #32
 8006c2e:	f173 0100 	sbcs.w	r1, r3, #0
 8006c32:	f082 80d5 	bcs.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c36:	2a1f      	cmp	r2, #31
 8006c38:	f202 80d2 	bhi.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006c3c:	a101      	add	r1, pc, #4	; (adr r1, 8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8006c3e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006c42:	bf00      	nop
 8006c44:	08006fa5 	.word	0x08006fa5
 8006c48:	08007071 	.word	0x08007071
 8006c4c:	08008de1 	.word	0x08008de1
 8006c50:	08007131 	.word	0x08007131
 8006c54:	08008de1 	.word	0x08008de1
 8006c58:	08008de1 	.word	0x08008de1
 8006c5c:	08008de1 	.word	0x08008de1
 8006c60:	08007201 	.word	0x08007201
 8006c64:	08008de1 	.word	0x08008de1
 8006c68:	08008de1 	.word	0x08008de1
 8006c6c:	08008de1 	.word	0x08008de1
 8006c70:	08008de1 	.word	0x08008de1
 8006c74:	08008de1 	.word	0x08008de1
 8006c78:	08008de1 	.word	0x08008de1
 8006c7c:	08008de1 	.word	0x08008de1
 8006c80:	080072e3 	.word	0x080072e3
 8006c84:	08008de1 	.word	0x08008de1
 8006c88:	08008de1 	.word	0x08008de1
 8006c8c:	08008de1 	.word	0x08008de1
 8006c90:	08008de1 	.word	0x08008de1
 8006c94:	08008de1 	.word	0x08008de1
 8006c98:	08008de1 	.word	0x08008de1
 8006c9c:	08008de1 	.word	0x08008de1
 8006ca0:	08008de1 	.word	0x08008de1
 8006ca4:	08008de1 	.word	0x08008de1
 8006ca8:	08008de1 	.word	0x08008de1
 8006cac:	08008de1 	.word	0x08008de1
 8006cb0:	08008de1 	.word	0x08008de1
 8006cb4:	08008de1 	.word	0x08008de1
 8006cb8:	08008de1 	.word	0x08008de1
 8006cbc:	08008de1 	.word	0x08008de1
 8006cc0:	080073b9 	.word	0x080073b9
 8006cc4:	80000001 	.word	0x80000001
 8006cc8:	40000001 	.word	0x40000001
 8006ccc:	20000001 	.word	0x20000001
 8006cd0:	10000001 	.word	0x10000001
 8006cd4:	08000001 	.word	0x08000001
 8006cd8:	04000001 	.word	0x04000001
 8006cdc:	00800001 	.word	0x00800001
 8006ce0:	00400001 	.word	0x00400001
 8006ce4:	00200001 	.word	0x00200001
 8006ce8:	00100001 	.word	0x00100001
 8006cec:	00080001 	.word	0x00080001
 8006cf0:	00040001 	.word	0x00040001
 8006cf4:	00020001 	.word	0x00020001
 8006cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cfc:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006d00:	430b      	orrs	r3, r1
 8006d02:	f000 83c4 	beq.w	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006d06:	f002 b86b 	b.w	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006d0a:	4ba1      	ldr	r3, [pc, #644]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006d14:	633b      	str	r3, [r7, #48]	; 0x30
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d1c:	d036      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d24:	d86b      	bhi.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d2c:	d02b      	beq.n	8006d86 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d34:	d863      	bhi.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3c:	d01b      	beq.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d44:	d85b      	bhi.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8006d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d008      	beq.n	8006d66 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006d54:	e053      	b.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d56:	f107 0320 	add.w	r3, r7, #32
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff f8ba 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d64:	e04e      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d66:	f107 0314 	add.w	r3, r7, #20
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fa1c 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d74:	e046      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d76:	f107 0308 	add.w	r3, r7, #8
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7ff fb7e 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d84:	e03e      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006d86:	4b83      	ldr	r3, [pc, #524]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006d8a:	e03b      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d8c:	4b80      	ldr	r3, [pc, #512]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d92:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d98:	4b7d      	ldr	r3, [pc, #500]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d10c      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006daa:	4b79      	ldr	r3, [pc, #484]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	08db      	lsrs	r3, r3, #3
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	4a78      	ldr	r2, [pc, #480]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006db6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbc:	e01e      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006dbe:	4b74      	ldr	r3, [pc, #464]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dca:	d106      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd2:	d102      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006dd4:	4b71      	ldr	r3, [pc, #452]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd8:	e010      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dda:	4b6d      	ldr	r3, [pc, #436]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006de6:	d106      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dee:	d102      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006df0:	4b6b      	ldr	r3, [pc, #428]	; (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	e002      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006dfa:	e003      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8006dfc:	e002      	b.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e02:	bf00      	nop
          }
        }
        break;
 8006e04:	f001 bfef 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006e08:	4b61      	ldr	r3, [pc, #388]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e0e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006e12:	633b      	str	r3, [r7, #48]	; 0x30
 8006e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e1a:	d036      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e22:	d86b      	bhi.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e26:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e2a:	d02b      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e32:	d863      	bhi.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3a:	d01b      	beq.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e42:	d85b      	bhi.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e50:	d008      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006e52:	e053      	b.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e54:	f107 0320 	add.w	r3, r7, #32
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff f83b 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e62:	e04e      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e64:	f107 0314 	add.w	r3, r7, #20
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7ff f99d 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e72:	e046      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e74:	f107 0308 	add.w	r3, r7, #8
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7ff faff 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e82:	e03e      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006e84:	4b43      	ldr	r3, [pc, #268]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006e86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006e88:	e03b      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006e8a:	4b41      	ldr	r3, [pc, #260]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e90:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006e96:	4b3e      	ldr	r3, [pc, #248]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0302 	and.w	r3, r3, #2
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d10c      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ea8:	4b39      	ldr	r3, [pc, #228]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	08db      	lsrs	r3, r3, #3
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	4a39      	ldr	r2, [pc, #228]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8006eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	e01e      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006ebc:	4b34      	ldr	r3, [pc, #208]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec8:	d106      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006ed2:	4b32      	ldr	r3, [pc, #200]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed6:	e010      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ed8:	4b2d      	ldr	r3, [pc, #180]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ee4:	d106      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8006ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eec:	d102      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006eee:	4b2c      	ldr	r3, [pc, #176]	; (8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef2:	e002      	b.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006ef8:	e003      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006efa:	e002      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006f00:	bf00      	nop
          }
        }
        break;
 8006f02:	f001 bf70 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006f06:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d108      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f18:	f107 0320 	add.w	r3, r7, #32
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fe ffd9 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f26:	f001 bf5e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d108      	bne.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff f937 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f3e:	f001 bf52 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f46:	f001 bf4e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006f4a:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d108      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f5c:	f107 0320 	add.w	r3, r7, #32
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe ffb7 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f6a:	f001 bf3c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2b80      	cmp	r3, #128	; 0x80
 8006f72:	d108      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff f915 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f82:	f001 bf30 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f8a:	f001 bf2c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f8e:	bf00      	nop
 8006f90:	44020c00 	.word	0x44020c00
 8006f94:	00bb8000 	.word	0x00bb8000
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	003d0900 	.word	0x003d0900
 8006fa0:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006fa4:	4b9d      	ldr	r3, [pc, #628]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006fb6:	f7fc ffd7 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
 8006fba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fbc:	f001 bf13 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006fc0:	4b96      	ldr	r3, [pc, #600]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fcc:	d10a      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d107      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd4:	f107 0314 	add.w	r3, r7, #20
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7ff f8e5 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8006fe2:	e043      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006fe4:	4b8d      	ldr	r3, [pc, #564]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff0:	d10a      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d107      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ff8:	f107 0308 	add.w	r3, r7, #8
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fa3d 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
 8007006:	e031      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007008:	4b84      	ldr	r3, [pc, #528]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b02      	cmp	r3, #2
 8007012:	d10c      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	2b03      	cmp	r3, #3
 8007018:	d109      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800701a:	4b80      	ldr	r3, [pc, #512]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	4a7e      	ldr	r2, [pc, #504]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
 800702c:	e01e      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800702e:	4b7b      	ldr	r3, [pc, #492]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007036:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703a:	d105      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800703c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703e:	2b04      	cmp	r3, #4
 8007040:	d102      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007042:	4b78      	ldr	r3, [pc, #480]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
 8007046:	e011      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007048:	4b74      	ldr	r3, [pc, #464]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800704a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b02      	cmp	r3, #2
 8007054:	d106      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	2b05      	cmp	r3, #5
 800705a:	d103      	bne.n	8007064 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 800705c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007060:	637b      	str	r3, [r7, #52]	; 0x34
 8007062:	e003      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007064:	2300      	movs	r3, #0
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007068:	f001 bebd 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800706c:	f001 bebb 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007070:	4b6a      	ldr	r3, [pc, #424]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800707a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707e:	2b00      	cmp	r3, #0
 8007080:	d104      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007082:	f7fc ff5b 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007086:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007088:	f001 bead 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800708c:	4b63      	ldr	r3, [pc, #396]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007098:	d10a      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	2b08      	cmp	r3, #8
 800709e:	d107      	bne.n	80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff f87f 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
 80070ae:	e03d      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d108      	bne.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070b6:	f107 0308 	add.w	r3, r7, #8
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff f9de 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070c4:	f001 be8f 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80070c8:	4b54      	ldr	r3, [pc, #336]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d10c      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80070d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d6:	2b18      	cmp	r3, #24
 80070d8:	d109      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070da:	4b50      	ldr	r3, [pc, #320]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	08db      	lsrs	r3, r3, #3
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	4a4e      	ldr	r2, [pc, #312]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80070e6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	e01e      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80070ee:	4b4b      	ldr	r3, [pc, #300]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070fa:	d105      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	2b20      	cmp	r3, #32
 8007100:	d102      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007102:	4b48      	ldr	r3, [pc, #288]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
 8007106:	e011      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007108:	4b44      	ldr	r3, [pc, #272]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800710a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b02      	cmp	r3, #2
 8007114:	d106      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007118:	2b28      	cmp	r3, #40	; 0x28
 800711a:	d103      	bne.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 800711c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007120:	637b      	str	r3, [r7, #52]	; 0x34
 8007122:	e003      	b.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007128:	f001 be5d 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800712c:	f001 be5b 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007130:	4b3a      	ldr	r3, [pc, #232]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007132:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007136:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800713a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007142:	f7fc fefb 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007146:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007148:	f001 be4d 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800714c:	4b33      	ldr	r3, [pc, #204]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007158:	d10a      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d107      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	4618      	mov	r0, r3
 8007166:	f7ff f81f 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	e045      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007170:	4b2a      	ldr	r3, [pc, #168]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007178:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800717c:	d10a      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2b80      	cmp	r3, #128	; 0x80
 8007182:	d107      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007184:	f107 0308 	add.w	r3, r7, #8
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff f977 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	637b      	str	r3, [r7, #52]	; 0x34
 8007192:	e033      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007194:	4b21      	ldr	r3, [pc, #132]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b02      	cmp	r3, #2
 800719e:	d10c      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2bc0      	cmp	r3, #192	; 0xc0
 80071a4:	d109      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	08db      	lsrs	r3, r3, #3
 80071ac:	f003 0303 	and.w	r3, r3, #3
 80071b0:	4a1b      	ldr	r2, [pc, #108]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80071b2:	fa22 f303 	lsr.w	r3, r2, r3
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
 80071b8:	e020      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071c6:	d106      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ce:	d102      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 80071d0:	4b14      	ldr	r3, [pc, #80]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80071d2:	637b      	str	r3, [r7, #52]	; 0x34
 80071d4:	e012      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80071d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d107      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 80071e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80071ea:	d103      	bne.n	80071f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 80071ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071f8:	f001 bdf5 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80071fc:	f001 bdf3 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007206:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800720a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007212:	f7fc fe93 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007216:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007218:	f001 bde5 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800721c:	44020c00 	.word	0x44020c00
 8007220:	03d09000 	.word	0x03d09000
 8007224:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007228:	4ba0      	ldr	r3, [pc, #640]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007230:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007234:	d10b      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800723c:	d107      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723e:	f107 0314 	add.w	r3, r7, #20
 8007242:	4618      	mov	r0, r3
 8007244:	f7fe ffb0 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
 800724c:	e047      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 800724e:	4b97      	ldr	r3, [pc, #604]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007256:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800725a:	d10b      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 800725c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007262:	d107      	bne.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007264:	f107 0308 	add.w	r3, r7, #8
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff f907 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	637b      	str	r3, [r7, #52]	; 0x34
 8007272:	e034      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007274:	4b8d      	ldr	r3, [pc, #564]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b02      	cmp	r3, #2
 800727e:	d10d      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007286:	d109      	bne.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007288:	4b88      	ldr	r3, [pc, #544]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	4a87      	ldr	r2, [pc, #540]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007294:	fa22 f303 	lsr.w	r3, r2, r3
 8007298:	637b      	str	r3, [r7, #52]	; 0x34
 800729a:	e020      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 800729c:	4b83      	ldr	r3, [pc, #524]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d106      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b0:	d102      	bne.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80072b2:	4b80      	ldr	r3, [pc, #512]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80072b4:	637b      	str	r3, [r7, #52]	; 0x34
 80072b6:	e012      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80072b8:	4b7c      	ldr	r3, [pc, #496]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d107      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80072cc:	d103      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 80072ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d2:	637b      	str	r3, [r7, #52]	; 0x34
 80072d4:	e003      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072da:	f001 bd84 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80072de:	f001 bd82 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80072e2:	4b72      	ldr	r3, [pc, #456]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80072e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072e8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80072ec:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d104      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80072f4:	f7fc fe22 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 80072f8:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 80072fa:	f001 bd74 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 80072fe:	4b6b      	ldr	r3, [pc, #428]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800730a:	d10b      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 800730c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007312:	d107      	bne.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4618      	mov	r0, r3
 800731a:	f7fe ff45 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
 8007322:	e047      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007324:	4b61      	ldr	r3, [pc, #388]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800732c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007330:	d10b      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007338:	d107      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800733a:	f107 0308 	add.w	r3, r7, #8
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff f89c 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	637b      	str	r3, [r7, #52]	; 0x34
 8007348:	e034      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800734a:	4b58      	ldr	r3, [pc, #352]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	2b02      	cmp	r3, #2
 8007354:	d10d      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800735c:	d109      	bne.n	8007372 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800735e:	4b53      	ldr	r3, [pc, #332]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	08db      	lsrs	r3, r3, #3
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	4a51      	ldr	r2, [pc, #324]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800736a:	fa22 f303 	lsr.w	r3, r2, r3
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
 8007370:	e020      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007372:	4b4e      	ldr	r3, [pc, #312]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800737a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800737e:	d106      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007386:	d102      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007388:	4b4a      	ldr	r3, [pc, #296]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800738a:	637b      	str	r3, [r7, #52]	; 0x34
 800738c:	e012      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800738e:	4b47      	ldr	r3, [pc, #284]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d107      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80073a2:	d103      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80073a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073a8:	637b      	str	r3, [r7, #52]	; 0x34
 80073aa:	e003      	b.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b0:	f001 bd19 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073b4:	f001 bd17 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80073b8:	4b3c      	ldr	r3, [pc, #240]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073be:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073ca:	f7fc fdb7 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 80073ce:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 80073d0:	f001 bd09 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80073d4:	4b35      	ldr	r3, [pc, #212]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073e0:	d10b      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e8:	d107      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ea:	f107 0314 	add.w	r3, r7, #20
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe feda 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	637b      	str	r3, [r7, #52]	; 0x34
 80073f8:	e047      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80073fa:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007406:	d10b      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800740e:	d107      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff f831 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
 800741e:	e034      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007420:	4b22      	ldr	r3, [pc, #136]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d10d      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007432:	d109      	bne.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007434:	4b1d      	ldr	r3, [pc, #116]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	08db      	lsrs	r3, r3, #3
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	4a1c      	ldr	r2, [pc, #112]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	e020      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007448:	4b18      	ldr	r3, [pc, #96]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007454:	d106      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800745c:	d102      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 800745e:	4b15      	ldr	r3, [pc, #84]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007460:	637b      	str	r3, [r7, #52]	; 0x34
 8007462:	e012      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800746a:	f003 0302 	and.w	r3, r3, #2
 800746e:	2b02      	cmp	r3, #2
 8007470:	d107      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007478:	d103      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800747a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e003      	b.n	800748a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007486:	f001 bcae 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800748a:	f001 bcac 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800748e:	4b07      	ldr	r3, [pc, #28]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007490:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007494:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8007498:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10b      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80074a0:	f7fc fd4c 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 80074a4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80074a6:	f001 bc9e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074aa:	bf00      	nop
 80074ac:	44020c00 	.word	0x44020c00
 80074b0:	03d09000 	.word	0x03d09000
 80074b4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80074b8:	4ba0      	ldr	r3, [pc, #640]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074c4:	d10b      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074cc:	d107      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fe68 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	e047      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 80074de:	4b97      	ldr	r3, [pc, #604]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ea:	d10b      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80074f2:	d107      	bne.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f4:	f107 0308 	add.w	r3, r7, #8
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe ffbf 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
 8007502:	e034      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007504:	4b8d      	ldr	r3, [pc, #564]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b02      	cmp	r3, #2
 800750e:	d10d      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007512:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007516:	d109      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007518:	4b88      	ldr	r3, [pc, #544]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	08db      	lsrs	r3, r3, #3
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	4a87      	ldr	r2, [pc, #540]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
 8007528:	637b      	str	r3, [r7, #52]	; 0x34
 800752a:	e020      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800752c:	4b83      	ldr	r3, [pc, #524]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007534:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007538:	d106      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007540:	d102      	bne.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007542:	4b80      	ldr	r3, [pc, #512]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007544:	637b      	str	r3, [r7, #52]	; 0x34
 8007546:	e012      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007548:	4b7c      	ldr	r3, [pc, #496]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800754a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	2b02      	cmp	r3, #2
 8007554:	d107      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800755c:	d103      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800755e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
 8007564:	e003      	b.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756a:	f001 bc3c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800756e:	f001 bc3a 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007572:	4b72      	ldr	r3, [pc, #456]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007578:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800757c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007580:	2b00      	cmp	r3, #0
 8007582:	d104      	bne.n	800758e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007584:	f7fc fcda 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007588:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800758a:	f001 bc2c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800758e:	4b6b      	ldr	r3, [pc, #428]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800759a:	d10b      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80075a2:	d107      	bne.n	80075b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a4:	f107 0314 	add.w	r3, r7, #20
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fdfd 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	637b      	str	r3, [r7, #52]	; 0x34
 80075b2:	e047      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80075b4:	4b61      	ldr	r3, [pc, #388]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c0:	d10b      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075c8:	d107      	bne.n	80075da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075ca:	f107 0308 	add.w	r3, r7, #8
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe ff54 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
 80075d8:	e034      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80075da:	4b58      	ldr	r3, [pc, #352]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d10d      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80075ec:	d109      	bne.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075ee:	4b53      	ldr	r3, [pc, #332]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	08db      	lsrs	r3, r3, #3
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	4a51      	ldr	r2, [pc, #324]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80075fa:	fa22 f303 	lsr.w	r3, r2, r3
 80075fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007600:	e020      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007602:	4b4e      	ldr	r3, [pc, #312]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800760a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760e:	d106      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007612:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007616:	d102      	bne.n	800761e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007618:	4b4a      	ldr	r3, [pc, #296]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800761a:	637b      	str	r3, [r7, #52]	; 0x34
 800761c:	e012      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800761e:	4b47      	ldr	r3, [pc, #284]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b02      	cmp	r3, #2
 800762a:	d107      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007632:	d103      	bne.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007638:	637b      	str	r3, [r7, #52]	; 0x34
 800763a:	e003      	b.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007640:	f001 bbd1 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007644:	f001 bbcf 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007648:	4b3c      	ldr	r3, [pc, #240]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800764a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800764e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007652:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	2b00      	cmp	r3, #0
 8007658:	d104      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800765a:	f7fc fc6f 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 800765e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007660:	f001 bbc1 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007664:	4b35      	ldr	r3, [pc, #212]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007670:	d10b      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007678:	d107      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800767a:	f107 0314 	add.w	r3, r7, #20
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fd92 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	637b      	str	r3, [r7, #52]	; 0x34
 8007688:	e047      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800768a:	4b2c      	ldr	r3, [pc, #176]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007692:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007696:	d10b      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800769e:	d107      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076a0:	f107 0308 	add.w	r3, r7, #8
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fee9 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
 80076ae:	e034      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80076b0:	4b22      	ldr	r3, [pc, #136]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0302 	and.w	r3, r3, #2
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d10d      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80076c2:	d109      	bne.n	80076d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076c4:	4b1d      	ldr	r3, [pc, #116]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	08db      	lsrs	r3, r3, #3
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	4a1c      	ldr	r2, [pc, #112]	; (8007740 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
 80076d6:	e020      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80076d8:	4b18      	ldr	r3, [pc, #96]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076e4:	d106      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80076e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80076ec:	d102      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80076ee:	4b15      	ldr	r3, [pc, #84]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
 80076f2:	e012      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80076f4:	4b11      	ldr	r3, [pc, #68]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076fa:	f003 0302 	and.w	r3, r3, #2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d107      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007708:	d103      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	e003      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007716:	f001 bb66 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800771a:	f001 bb64 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007724:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007728:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10b      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007730:	f7fc fc04 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007734:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007736:	f001 bb56 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800773a:	bf00      	nop
 800773c:	44020c00 	.word	0x44020c00
 8007740:	03d09000 	.word	0x03d09000
 8007744:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007748:	4ba1      	ldr	r3, [pc, #644]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007754:	d10b      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775c:	d107      	bne.n	800776e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800775e:	f107 0314 	add.w	r3, r7, #20
 8007762:	4618      	mov	r0, r3
 8007764:	f7fe fd20 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
 800776c:	e047      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800776e:	4b98      	ldr	r3, [pc, #608]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800777a:	d10b      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007782:	d107      	bne.n	8007794 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007784:	f107 0308 	add.w	r3, r7, #8
 8007788:	4618      	mov	r0, r3
 800778a:	f7fe fe77 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
 8007792:	e034      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007794:	4b8e      	ldr	r3, [pc, #568]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0302 	and.w	r3, r3, #2
 800779c:	2b02      	cmp	r3, #2
 800779e:	d10d      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80077a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80077a6:	d109      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077a8:	4b89      	ldr	r3, [pc, #548]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	08db      	lsrs	r3, r3, #3
 80077ae:	f003 0303 	and.w	r3, r3, #3
 80077b2:	4a88      	ldr	r2, [pc, #544]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
 80077b8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ba:	e020      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80077bc:	4b84      	ldr	r3, [pc, #528]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077c8:	d106      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077d0:	d102      	bne.n	80077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80077d2:	4b81      	ldr	r3, [pc, #516]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80077d4:	637b      	str	r3, [r7, #52]	; 0x34
 80077d6:	e012      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80077d8:	4b7d      	ldr	r3, [pc, #500]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80077da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077de:	f003 0302 	and.w	r3, r3, #2
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d107      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80077ec:	d103      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80077ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
 80077f4:	e003      	b.n	80077fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077fa:	f001 baf4 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80077fe:	f001 baf2 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007802:	4b73      	ldr	r3, [pc, #460]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007804:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fc fb92 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007818:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800781a:	f001 bae4 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800781e:	4b6c      	ldr	r3, [pc, #432]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800782a:	d10a      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	2b01      	cmp	r3, #1
 8007830:	d107      	bne.n	8007842 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007832:	f107 0314 	add.w	r3, r7, #20
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fcb6 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	637b      	str	r3, [r7, #52]	; 0x34
 8007840:	e043      	b.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007842:	4b63      	ldr	r3, [pc, #396]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800784e:	d10a      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b02      	cmp	r3, #2
 8007854:	d107      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007856:	f107 0308 	add.w	r3, r7, #8
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fe0e 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
 8007864:	e031      	b.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007866:	4b5a      	ldr	r3, [pc, #360]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d10c      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2b03      	cmp	r3, #3
 8007876:	d109      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007878:	4b55      	ldr	r3, [pc, #340]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	08db      	lsrs	r3, r3, #3
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	4a54      	ldr	r2, [pc, #336]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007884:	fa22 f303 	lsr.w	r3, r2, r3
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
 800788a:	e01e      	b.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800788c:	4b50      	ldr	r3, [pc, #320]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007898:	d105      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800789a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800789c:	2b04      	cmp	r3, #4
 800789e:	d102      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80078a0:	4b4d      	ldr	r3, [pc, #308]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
 80078a4:	e011      	b.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80078a6:	4b4a      	ldr	r3, [pc, #296]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d106      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2b05      	cmp	r3, #5
 80078b8:	d103      	bne.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80078ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078be:	637b      	str	r3, [r7, #52]	; 0x34
 80078c0:	e003      	b.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80078c2:	2300      	movs	r3, #0
 80078c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c6:	f001 ba8e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80078ca:	f001 ba8c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80078ce:	4b40      	ldr	r3, [pc, #256]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80078d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078e0:	f7fc fb2c 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 80078e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80078e6:	f001 ba7e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80078ea:	4b39      	ldr	r3, [pc, #228]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078f6:	d10a      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	2b10      	cmp	r3, #16
 80078fc:	d107      	bne.n	800790e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078fe:	f107 0314 	add.w	r3, r7, #20
 8007902:	4618      	mov	r0, r3
 8007904:	f7fe fc50 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	637b      	str	r3, [r7, #52]	; 0x34
 800790c:	e043      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800790e:	4b30      	ldr	r3, [pc, #192]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800791a:	d10a      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	2b20      	cmp	r3, #32
 8007920:	d107      	bne.n	8007932 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007922:	f107 0308 	add.w	r3, r7, #8
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fda8 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	637b      	str	r3, [r7, #52]	; 0x34
 8007930:	e031      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007932:	4b27      	ldr	r3, [pc, #156]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b02      	cmp	r3, #2
 800793c:	d10c      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	2b30      	cmp	r3, #48	; 0x30
 8007942:	d109      	bne.n	8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007944:	4b22      	ldr	r3, [pc, #136]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	08db      	lsrs	r3, r3, #3
 800794a:	f003 0303 	and.w	r3, r3, #3
 800794e:	4a21      	ldr	r2, [pc, #132]	; (80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	637b      	str	r3, [r7, #52]	; 0x34
 8007956:	e01e      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007958:	4b1d      	ldr	r3, [pc, #116]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007964:	d105      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d102      	bne.n	8007972 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800796c:	4b1a      	ldr	r3, [pc, #104]	; (80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800796e:	637b      	str	r3, [r7, #52]	; 0x34
 8007970:	e011      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007972:	4b17      	ldr	r3, [pc, #92]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007974:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b02      	cmp	r3, #2
 800797e:	d106      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	2b50      	cmp	r3, #80	; 0x50
 8007984:	d103      	bne.n	800798e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800798a:	637b      	str	r3, [r7, #52]	; 0x34
 800798c:	e003      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007992:	f001 ba28 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007996:	f001 ba26 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800799a:	4b0d      	ldr	r3, [pc, #52]	; (80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800799c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80079a4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80079a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d104      	bne.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80079ac:	f7fc faf2 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 80079b0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80079b2:	f001 ba18 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079bc:	d10e      	bne.n	80079dc <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079be:	f107 0314 	add.w	r3, r7, #20
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fe fbf0 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079cc:	f001 ba0b 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80079d0:	44020c00 	.word	0x44020c00
 80079d4:	03d09000 	.word	0x03d09000
 80079d8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e2:	d108      	bne.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7fe fd47 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079f2:	f001 b9f8 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80079f6:	4ba4      	ldr	r3, [pc, #656]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d10d      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a08:	d109      	bne.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a0a:	4b9f      	ldr	r3, [pc, #636]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	08db      	lsrs	r3, r3, #3
 8007a10:	f003 0303 	and.w	r3, r3, #3
 8007a14:	4a9d      	ldr	r2, [pc, #628]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007a16:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a1c:	e020      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8007a1e:	4b9a      	ldr	r3, [pc, #616]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8007a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a32:	d102      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007a34:	4b96      	ldr	r3, [pc, #600]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
 8007a38:	e012      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007a3a:	4b93      	ldr	r3, [pc, #588]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d107      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007a4e:	d103      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a54:	637b      	str	r3, [r7, #52]	; 0x34
 8007a56:	e003      	b.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a5c:	f001 b9c3 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a60:	f001 b9c1 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a64:	4b88      	ldr	r3, [pc, #544]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d104      	bne.n	8007a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007a76:	f7fc fa45 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8007a7a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8007a7c:	f001 b9b3 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d104      	bne.n	8007a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a86:	f7fc f911 	bl	8003cac <HAL_RCC_GetSysClockFreq>
 8007a8a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a8c:	f001 b9ab 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d108      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a96:	f107 0314 	add.w	r3, r7, #20
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe fb84 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aa4:	f001 b99f 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007aa8:	4b77      	ldr	r3, [pc, #476]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ab4:	d105      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d102      	bne.n	8007ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8007abc:	4b75      	ldr	r3, [pc, #468]	; (8007c94 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8007abe:	637b      	str	r3, [r7, #52]	; 0x34
 8007ac0:	e023      	b.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007ac2:	4b71      	ldr	r3, [pc, #452]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d10c      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8007ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d109      	bne.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ad4:	4b6c      	ldr	r3, [pc, #432]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	08db      	lsrs	r3, r3, #3
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	4a6b      	ldr	r2, [pc, #428]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae6:	e010      	b.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007ae8:	4b67      	ldr	r3, [pc, #412]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007af4:	d105      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d102      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8007afc:	4b64      	ldr	r3, [pc, #400]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007afe:	637b      	str	r3, [r7, #52]	; 0x34
 8007b00:	e003      	b.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b06:	f001 b96e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b0a:	f001 b96c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8007b0e:	4b5e      	ldr	r3, [pc, #376]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8007b1a:	4b5b      	ldr	r3, [pc, #364]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d106      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8007b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
 8007b34:	e012      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007b36:	4b54      	ldr	r3, [pc, #336]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b44:	d106      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b08      	cmp	r3, #8
 8007b4a:	d103      	bne.n	8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8007b4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
 8007b52:	e003      	b.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007b58:	f001 b945 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b5c:	f001 b943 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007b60:	4b49      	ldr	r3, [pc, #292]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b62:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b6a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d104      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007b72:	f7fc f9e3 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007b76:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007b78:	f001 b935 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b82:	d108      	bne.n	8007b96 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b84:	f107 0308 	add.w	r3, r7, #8
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe fc77 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	f001 b928 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007b96:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d10d      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	08db      	lsrs	r3, r3, #3
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	4a35      	ldr	r2, [pc, #212]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
 8007bbc:	e011      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8007bbe:	4b32      	ldr	r3, [pc, #200]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bca:	d106      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8007bd4:	4b2e      	ldr	r3, [pc, #184]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd8:	e003      	b.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bde:	f001 b902 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007be2:	f001 b900 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007be6:	4b28      	ldr	r3, [pc, #160]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007be8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007bf0:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d104      	bne.n	8007c02 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bf8:	f7fc f9a0 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007bfc:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bfe:	f001 b8f2 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c08:	d108      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c0a:	f107 0308 	add.w	r3, r7, #8
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fc34 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c18:	f001 b8e5 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007c1c:	4b1a      	ldr	r3, [pc, #104]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d10d      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c2e:	d109      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c30:	4b15      	ldr	r3, [pc, #84]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	08db      	lsrs	r3, r3, #3
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	4a14      	ldr	r2, [pc, #80]	; (8007c8c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
 8007c42:	e011      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c50:	d106      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007c58:	d102      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8007c5a:	4b0d      	ldr	r3, [pc, #52]	; (8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c64:	f001 b8bf 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c68:	f001 b8bd 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007c6e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c72:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c76:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10c      	bne.n	8007c98 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007c7e:	f7fc f989 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 8007c82:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c84:	f001 b8af 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c88:	44020c00 	.word	0x44020c00
 8007c8c:	03d09000 	.word	0x03d09000
 8007c90:	003d0900 	.word	0x003d0900
 8007c94:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9e:	d108      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ca0:	f107 0308 	add.w	r3, r7, #8
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7fe fbe9 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007caa:	693b      	ldr	r3, [r7, #16]
 8007cac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cae:	f001 b89a 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8007cb2:	4b9f      	ldr	r3, [pc, #636]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d10d      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8007cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cc4:	d109      	bne.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cc6:	4b9a      	ldr	r3, [pc, #616]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	08db      	lsrs	r3, r3, #3
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	4a98      	ldr	r2, [pc, #608]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd8:	e011      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8007cda:	4b95      	ldr	r3, [pc, #596]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce6:	d106      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007cee:	d102      	bne.n	8007cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007cf0:	4b91      	ldr	r3, [pc, #580]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007cf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf4:	e003      	b.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cfa:	f001 b874 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007cfe:	f001 b872 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007d02:	4b8b      	ldr	r3, [pc, #556]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007d0c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007d14:	f7fc f93e 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 8007d18:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d1a:	f001 b864 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d24:	d108      	bne.n	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d26:	f107 0308 	add.w	r3, r7, #8
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7fe fba6 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d34:	f001 b857 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007d38:	4b7d      	ldr	r3, [pc, #500]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d10d      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d4a:	d109      	bne.n	8007d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d4c:	4b78      	ldr	r3, [pc, #480]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	08db      	lsrs	r3, r3, #3
 8007d52:	f003 0303 	and.w	r3, r3, #3
 8007d56:	4a77      	ldr	r2, [pc, #476]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007d58:	fa22 f303 	lsr.w	r3, r2, r3
 8007d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5e:	e011      	b.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007d60:	4b73      	ldr	r3, [pc, #460]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d106      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d74:	d102      	bne.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007d76:	4b70      	ldr	r3, [pc, #448]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007d78:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7a:	e003      	b.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007d80:	f001 b831 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d84:	f001 b82f 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007d88:	4b69      	ldr	r3, [pc, #420]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007d8a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007d8e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007d92:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d104      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d9a:	f7fc f8cf 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007d9e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007da0:	f001 b821 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007daa:	d108      	bne.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007dac:	f107 0308 	add.w	r3, r7, #8
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7fe fb63 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dba:	f001 b814 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007dbe:	4b5c      	ldr	r3, [pc, #368]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d10e      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dd0:	d10a      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dd2:	4b57      	ldr	r3, [pc, #348]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	08db      	lsrs	r3, r3, #3
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	4a55      	ldr	r2, [pc, #340]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007dde:	fa22 f303 	lsr.w	r3, r2, r3
 8007de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007de4:	f000 bfff 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dec:	f000 bffb 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007df0:	4b4f      	ldr	r3, [pc, #316]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007df2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8007dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007e02:	d056      	beq.n	8007eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007e0a:	f200 808b 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e14:	d03e      	beq.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1c:	f200 8082 	bhi.w	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e26:	d027      	beq.n	8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2e:	d879      	bhi.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e36:	d017      	beq.n	8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e3e:	d871      	bhi.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e4c:	d004      	beq.n	8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8007e4e:	e069      	b.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007e50:	f7fc f8a0 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 8007e54:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e56:	e068      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e58:	f107 0314 	add.w	r3, r7, #20
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe f9a3 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e66:	e060      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e68:	f107 0308 	add.w	r3, r7, #8
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fe fb05 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e76:	e058      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e78:	4b2d      	ldr	r3, [pc, #180]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d103      	bne.n	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007e86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007e8c:	e04d      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e92:	e04a      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007e94:	4b26      	ldr	r3, [pc, #152]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ea2:	d103      	bne.n	8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8007ea4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ea8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007eaa:	e03e      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eb0:	e03b      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007eb2:	4b1f      	ldr	r3, [pc, #124]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eb8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ebe:	4b1c      	ldr	r3, [pc, #112]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d10c      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ed0:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	08db      	lsrs	r3, r3, #3
 8007ed6:	f003 0303 	and.w	r3, r3, #3
 8007eda:	4a16      	ldr	r2, [pc, #88]	; (8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee2:	e01e      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007ee4:	4b12      	ldr	r3, [pc, #72]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	d106      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef8:	d102      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007efa:	4b0f      	ldr	r3, [pc, #60]	; (8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007efc:	637b      	str	r3, [r7, #52]	; 0x34
 8007efe:	e010      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0c:	d106      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f14:	d102      	bne.n	8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007f18:	637b      	str	r3, [r7, #52]	; 0x34
 8007f1a:	e002      	b.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007f20:	e003      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007f22:	e002      	b.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f28:	bf00      	nop
          }
        }
        break;
 8007f2a:	f000 bf5c 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f2e:	bf00      	nop
 8007f30:	44020c00 	.word	0x44020c00
 8007f34:	03d09000 	.word	0x03d09000
 8007f38:	003d0900 	.word	0x003d0900
 8007f3c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007f40:	4b9e      	ldr	r3, [pc, #632]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007f42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007f52:	d056      	beq.n	8008002 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007f5a:	f200 808b 	bhi.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f64:	d03e      	beq.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f6c:	f200 8082 	bhi.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f76:	d027      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007f7e:	d879      	bhi.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f86:	d017      	beq.n	8007fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8e:	d871      	bhi.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9c:	d004      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007f9e:	e069      	b.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007fa0:	f7fb ffcc 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8007fa4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007fa6:	e068      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa8:	f107 0314 	add.w	r3, r7, #20
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe f8fb 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fb6:	e060      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb8:	f107 0308 	add.w	r3, r7, #8
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7fe fa5d 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fc6:	e058      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007fc8:	4b7c      	ldr	r3, [pc, #496]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d103      	bne.n	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fda:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007fdc:	e04d      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fe2:	e04a      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007fe4:	4b75      	ldr	r3, [pc, #468]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ff2:	d103      	bne.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007ff4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ffa:	e03e      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008000:	e03b      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008002:	4b6e      	ldr	r3, [pc, #440]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008008:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800800e:	4b6b      	ldr	r3, [pc, #428]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b02      	cmp	r3, #2
 8008018:	d10c      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d109      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008020:	4b66      	ldr	r3, [pc, #408]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	08db      	lsrs	r3, r3, #3
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	4a65      	ldr	r2, [pc, #404]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
 8008030:	637b      	str	r3, [r7, #52]	; 0x34
 8008032:	e01e      	b.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008034:	4b61      	ldr	r3, [pc, #388]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008040:	d106      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008048:	d102      	bne.n	8008050 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800804a:	4b5e      	ldr	r3, [pc, #376]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
 800804e:	e010      	b.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008050:	4b5a      	ldr	r3, [pc, #360]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008058:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800805c:	d106      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800805e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008064:	d102      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008066:	4b58      	ldr	r3, [pc, #352]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
 800806a:	e002      	b.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800806c:	2300      	movs	r3, #0
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008070:	e003      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008072:	e002      	b.n	800807a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008078:	bf00      	nop
          }
        }
        break;
 800807a:	f000 beb4 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800807e:	4b4f      	ldr	r3, [pc, #316]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008080:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008084:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008088:	633b      	str	r3, [r7, #48]	; 0x30
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008090:	d056      	beq.n	8008140 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008098:	f200 808b 	bhi.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080a2:	d03e      	beq.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 80080a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080aa:	f200 8082 	bhi.w	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080b4:	d027      	beq.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 80080b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080bc:	d879      	bhi.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080c4:	d017      	beq.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080cc:	d871      	bhi.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d004      	beq.n	80080de <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080da:	d004      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80080dc:	e069      	b.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80080de:	f7fb ff59 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 80080e2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80080e4:	e068      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080e6:	f107 0314 	add.w	r3, r7, #20
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe f85c 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080f4:	e060      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080f6:	f107 0308 	add.w	r3, r7, #8
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f9be 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008104:	e058      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008106:	4b2d      	ldr	r3, [pc, #180]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	2b02      	cmp	r3, #2
 8008112:	d103      	bne.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800811a:	e04d      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800811c:	2300      	movs	r3, #0
 800811e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008120:	e04a      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008122:	4b26      	ldr	r3, [pc, #152]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800812c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008130:	d103      	bne.n	800813a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008132:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008138:	e03e      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800813e:	e03b      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008140:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008146:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b02      	cmp	r3, #2
 8008156:	d10c      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815a:	2b00      	cmp	r3, #0
 800815c:	d109      	bne.n	8008172 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	08db      	lsrs	r3, r3, #3
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	4a15      	ldr	r2, [pc, #84]	; (80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800816a:	fa22 f303 	lsr.w	r3, r2, r3
 800816e:	637b      	str	r3, [r7, #52]	; 0x34
 8008170:	e01e      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800817a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817e:	d106      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008186:	d102      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008188:	4b0e      	ldr	r3, [pc, #56]	; (80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
 800818c:	e010      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800819c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80081a4:	4b08      	ldr	r3, [pc, #32]	; (80081c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80081a6:	637b      	str	r3, [r7, #52]	; 0x34
 80081a8:	e002      	b.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80081ae:	e003      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 80081b0:	e002      	b.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081b6:	bf00      	nop
          }
        }
        break;
 80081b8:	f000 be15 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081bc:	44020c00 	.word	0x44020c00
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	003d0900 	.word	0x003d0900
 80081c8:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80081cc:	4b9e      	ldr	r3, [pc, #632]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80081ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80081d2:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 80081d6:	633b      	str	r3, [r7, #48]	; 0x30
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80081de:	d056      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80081e6:	f200 808b 	bhi.w	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f0:	d03e      	beq.n	8008270 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f8:	f200 8082 	bhi.w	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80081fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008202:	d027      	beq.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800820a:	d879      	bhi.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008212:	d017      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800821a:	d871      	bhi.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800821c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821e:	2b00      	cmp	r3, #0
 8008220:	d004      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008228:	d004      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800822a:	e069      	b.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800822c:	f7fb feb2 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 8008230:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008232:	e068      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008234:	f107 0314 	add.w	r3, r7, #20
 8008238:	4618      	mov	r0, r3
 800823a:	f7fd ffb5 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008242:	e060      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008244:	f107 0308 	add.w	r3, r7, #8
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe f917 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008252:	e058      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008254:	4b7c      	ldr	r3, [pc, #496]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008256:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800825a:	f003 0302 	and.w	r3, r3, #2
 800825e:	2b02      	cmp	r3, #2
 8008260:	d103      	bne.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008266:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008268:	e04d      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800826e:	e04a      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008270:	4b75      	ldr	r3, [pc, #468]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008276:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800827a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800827e:	d103      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008280:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008286:	e03e      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800828c:	e03b      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800828e:	4b6e      	ldr	r3, [pc, #440]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008294:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008298:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800829a:	4b6b      	ldr	r3, [pc, #428]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d10c      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 80082a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d109      	bne.n	80082c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ac:	4b66      	ldr	r3, [pc, #408]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	08db      	lsrs	r3, r3, #3
 80082b2:	f003 0303 	and.w	r3, r3, #3
 80082b6:	4a65      	ldr	r2, [pc, #404]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80082b8:	fa22 f303 	lsr.w	r3, r2, r3
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
 80082be:	e01e      	b.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082c0:	4b61      	ldr	r3, [pc, #388]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082cc:	d106      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082d4:	d102      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80082d6:	4b5e      	ldr	r3, [pc, #376]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
 80082da:	e010      	b.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082dc:	4b5a      	ldr	r3, [pc, #360]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e8:	d106      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082f0:	d102      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80082f2:	4b58      	ldr	r3, [pc, #352]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80082f4:	637b      	str	r3, [r7, #52]	; 0x34
 80082f6:	e002      	b.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 80082fe:	e002      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008300:	2300      	movs	r3, #0
 8008302:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008304:	bf00      	nop
          }
        }
        break;
 8008306:	f000 bd6e 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800830a:	4b4f      	ldr	r3, [pc, #316]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800830c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008310:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008314:	633b      	str	r3, [r7, #48]	; 0x30
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800831c:	d056      	beq.n	80083cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008324:	f200 808b 	bhi.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800832e:	d03e      	beq.n	80083ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008336:	f200 8082 	bhi.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008340:	d027      	beq.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008348:	d879      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008350:	d017      	beq.n	8008382 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008358:	d871      	bhi.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d004      	beq.n	800836a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008366:	d004      	beq.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008368:	e069      	b.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800836a:	f7fb fe13 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 800836e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008370:	e068      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008372:	f107 0314 	add.w	r3, r7, #20
 8008376:	4618      	mov	r0, r3
 8008378:	f7fd ff16 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008380:	e060      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4618      	mov	r0, r3
 8008388:	f7fe f878 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008390:	e058      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008392:	4b2d      	ldr	r3, [pc, #180]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008394:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b02      	cmp	r3, #2
 800839e:	d103      	bne.n	80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80083a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80083a6:	e04d      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083ac:	e04a      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80083ae:	4b26      	ldr	r3, [pc, #152]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083bc:	d103      	bne.n	80083c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 80083be:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80083c4:	e03e      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 80083c6:	2300      	movs	r3, #0
 80083c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083ca:	e03b      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083cc:	4b1e      	ldr	r3, [pc, #120]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083d2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083d8:	4b1b      	ldr	r3, [pc, #108]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d10c      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 80083e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083ea:	4b17      	ldr	r3, [pc, #92]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	08db      	lsrs	r3, r3, #3
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	4a15      	ldr	r2, [pc, #84]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 80083f6:	fa22 f303 	lsr.w	r3, r2, r3
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
 80083fc:	e01e      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083fe:	4b12      	ldr	r3, [pc, #72]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800840a:	d106      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008412:	d102      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
 8008418:	e010      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800841a:	4b0b      	ldr	r3, [pc, #44]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008426:	d106      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800842e:	d102      	bne.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008430:	4b08      	ldr	r3, [pc, #32]	; (8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008432:	637b      	str	r3, [r7, #52]	; 0x34
 8008434:	e002      	b.n	800843c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800843a:	e003      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800843c:	e002      	b.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008442:	bf00      	nop
          }
        }
        break;
 8008444:	f000 bccf 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008448:	44020c00 	.word	0x44020c00
 800844c:	03d09000 	.word	0x03d09000
 8008450:	003d0900 	.word	0x003d0900
 8008454:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008458:	4b9e      	ldr	r3, [pc, #632]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800845a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800845e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008462:	633b      	str	r3, [r7, #48]	; 0x30
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800846a:	d056      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008472:	f200 808b 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d03e      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008484:	f200 8082 	bhi.w	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800848e:	d027      	beq.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008496:	d879      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800849e:	d017      	beq.n	80084d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084a6:	d871      	bhi.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d004      	beq.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084b4:	d004      	beq.n	80084c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 80084b6:	e069      	b.n	800858c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80084b8:	f7fb fd6c 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 80084bc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80084be:	e068      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084c0:	f107 0314 	add.w	r3, r7, #20
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fd fe6f 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084ce:	e060      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084d0:	f107 0308 	add.w	r3, r7, #8
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fd ffd1 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084de:	e058      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80084e0:	4b7c      	ldr	r3, [pc, #496]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d103      	bne.n	80084f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 80084ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80084f4:	e04d      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80084fa:	e04a      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80084fc:	4b75      	ldr	r3, [pc, #468]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80084fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008506:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800850a:	d103      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800850c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008512:	e03e      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008518:	e03b      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800851a:	4b6e      	ldr	r3, [pc, #440]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800851c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008520:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008524:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008526:	4b6b      	ldr	r3, [pc, #428]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d10c      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d109      	bne.n	800854c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008538:	4b66      	ldr	r3, [pc, #408]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	08db      	lsrs	r3, r3, #3
 800853e:	f003 0303 	and.w	r3, r3, #3
 8008542:	4a65      	ldr	r2, [pc, #404]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008544:	fa22 f303 	lsr.w	r3, r2, r3
 8008548:	637b      	str	r3, [r7, #52]	; 0x34
 800854a:	e01e      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800854c:	4b61      	ldr	r3, [pc, #388]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008558:	d106      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008560:	d102      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008562:	4b5e      	ldr	r3, [pc, #376]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e010      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008568:	4b5a      	ldr	r3, [pc, #360]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008574:	d106      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800857c:	d102      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800857e:	4b58      	ldr	r3, [pc, #352]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008580:	637b      	str	r3, [r7, #52]	; 0x34
 8008582:	e002      	b.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008584:	2300      	movs	r3, #0
 8008586:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008588:	e003      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800858a:	e002      	b.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008590:	bf00      	nop
          }
        }
        break;
 8008592:	f000 bc28 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008596:	4b4f      	ldr	r3, [pc, #316]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800859c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80085a2:	4b4c      	ldr	r3, [pc, #304]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085ae:	d106      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d103      	bne.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80085b6:	4b4a      	ldr	r3, [pc, #296]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80085ba:	f000 bc14 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c4:	d108      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80085c6:	f107 0320 	add.w	r3, r7, #32
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fd fc82 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085d4:	f000 bc07 	b.w	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085de:	d107      	bne.n	80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085e0:	f107 0314 	add.w	r3, r7, #20
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fd fddf 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085ee:	e3fa      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085f4:	e3f7      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80085f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085fc:	f003 0307 	and.w	r3, r3, #7
 8008600:	633b      	str	r3, [r7, #48]	; 0x30
 8008602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008604:	2b04      	cmp	r3, #4
 8008606:	d861      	bhi.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008608:	a201      	add	r2, pc, #4	; (adr r2, 8008610 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800860a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860e:	bf00      	nop
 8008610:	08008625 	.word	0x08008625
 8008614:	08008635 	.word	0x08008635
 8008618:	08008645 	.word	0x08008645
 800861c:	08008655 	.word	0x08008655
 8008620:	0800865b 	.word	0x0800865b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008624:	f107 0320 	add.w	r3, r7, #32
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd fc53 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008632:	e04e      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4618      	mov	r0, r3
 800863a:	f7fd fdb5 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008642:	e046      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008644:	f107 0308 	add.w	r3, r7, #8
 8008648:	4618      	mov	r0, r3
 800864a:	f7fd ff17 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008652:	e03e      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008654:	4b23      	ldr	r3, [pc, #140]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008658:	e03b      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800865a:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800865c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008660:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008666:	4b1b      	ldr	r3, [pc, #108]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 0302 	and.w	r3, r3, #2
 800866e:	2b02      	cmp	r3, #2
 8008670:	d10c      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d109      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008678:	4b16      	ldr	r3, [pc, #88]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	08db      	lsrs	r3, r3, #3
 800867e:	f003 0303 	and.w	r3, r3, #3
 8008682:	4a15      	ldr	r2, [pc, #84]	; (80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
 800868a:	e01e      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800868c:	4b11      	ldr	r3, [pc, #68]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008698:	d106      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086a0:	d102      	bne.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086a2:	4b0e      	ldr	r3, [pc, #56]	; (80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	e010      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086a8:	4b0a      	ldr	r3, [pc, #40]	; (80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086b4:	d106      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80086b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086bc:	d102      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086be:	4b08      	ldr	r3, [pc, #32]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
 80086c2:	e002      	b.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80086c4:	2300      	movs	r3, #0
 80086c6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80086c8:	e003      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80086ca:	e002      	b.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086d0:	bf00      	nop
          }
        }
        break;
 80086d2:	e388      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086d4:	44020c00 	.word	0x44020c00
 80086d8:	03d09000 	.word	0x03d09000
 80086dc:	003d0900 	.word	0x003d0900
 80086e0:	007a1200 	.word	0x007a1200
 80086e4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80086e8:	4ba9      	ldr	r3, [pc, #676]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80086ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086f2:	633b      	str	r3, [r7, #48]	; 0x30
 80086f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f6:	2b20      	cmp	r3, #32
 80086f8:	f200 809a 	bhi.w	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008789 	.word	0x08008789
 8008708:	08008831 	.word	0x08008831
 800870c:	08008831 	.word	0x08008831
 8008710:	08008831 	.word	0x08008831
 8008714:	08008831 	.word	0x08008831
 8008718:	08008831 	.word	0x08008831
 800871c:	08008831 	.word	0x08008831
 8008720:	08008831 	.word	0x08008831
 8008724:	08008799 	.word	0x08008799
 8008728:	08008831 	.word	0x08008831
 800872c:	08008831 	.word	0x08008831
 8008730:	08008831 	.word	0x08008831
 8008734:	08008831 	.word	0x08008831
 8008738:	08008831 	.word	0x08008831
 800873c:	08008831 	.word	0x08008831
 8008740:	08008831 	.word	0x08008831
 8008744:	080087a9 	.word	0x080087a9
 8008748:	08008831 	.word	0x08008831
 800874c:	08008831 	.word	0x08008831
 8008750:	08008831 	.word	0x08008831
 8008754:	08008831 	.word	0x08008831
 8008758:	08008831 	.word	0x08008831
 800875c:	08008831 	.word	0x08008831
 8008760:	08008831 	.word	0x08008831
 8008764:	080087b9 	.word	0x080087b9
 8008768:	08008831 	.word	0x08008831
 800876c:	08008831 	.word	0x08008831
 8008770:	08008831 	.word	0x08008831
 8008774:	08008831 	.word	0x08008831
 8008778:	08008831 	.word	0x08008831
 800877c:	08008831 	.word	0x08008831
 8008780:	08008831 	.word	0x08008831
 8008784:	080087bf 	.word	0x080087bf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008788:	f107 0320 	add.w	r3, r7, #32
 800878c:	4618      	mov	r0, r3
 800878e:	f7fd fba1 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008796:	e04e      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008798:	f107 0314 	add.w	r3, r7, #20
 800879c:	4618      	mov	r0, r3
 800879e:	f7fd fd03 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087a6:	e046      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087a8:	f107 0308 	add.w	r3, r7, #8
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fd fe65 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087b6:	e03e      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80087b8:	4b76      	ldr	r3, [pc, #472]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80087ba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80087bc:	e03b      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087be:	4b74      	ldr	r3, [pc, #464]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087c4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80087c8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087ca:	4b71      	ldr	r3, [pc, #452]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0302 	and.w	r3, r3, #2
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d10c      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80087d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d109      	bne.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087dc:	4b6c      	ldr	r3, [pc, #432]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	08db      	lsrs	r3, r3, #3
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	4a6c      	ldr	r2, [pc, #432]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80087e8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
 80087ee:	e01e      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087f0:	4b67      	ldr	r3, [pc, #412]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fc:	d106      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 80087fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008804:	d102      	bne.n	800880c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008806:	4b65      	ldr	r3, [pc, #404]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008808:	637b      	str	r3, [r7, #52]	; 0x34
 800880a:	e010      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800880c:	4b60      	ldr	r3, [pc, #384]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008818:	d106      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800881a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008820:	d102      	bne.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008822:	4b5f      	ldr	r3, [pc, #380]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008824:	637b      	str	r3, [r7, #52]	; 0x34
 8008826:	e002      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008828:	2300      	movs	r3, #0
 800882a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800882c:	e003      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800882e:	e002      	b.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008830:	2300      	movs	r3, #0
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008834:	bf00      	nop
          }
        }
        break;
 8008836:	e2d6      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008838:	4b55      	ldr	r3, [pc, #340]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800883a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800883e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008842:	633b      	str	r3, [r7, #48]	; 0x30
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800884a:	d031      	beq.n	80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008852:	d866      	bhi.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	2bc0      	cmp	r3, #192	; 0xc0
 8008858:	d027      	beq.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2bc0      	cmp	r3, #192	; 0xc0
 800885e:	d860      	bhi.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	2b80      	cmp	r3, #128	; 0x80
 8008864:	d019      	beq.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d85a      	bhi.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	2b00      	cmp	r3, #0
 8008870:	d003      	beq.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d008      	beq.n	800888a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008878:	e053      	b.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800887a:	f107 0320 	add.w	r3, r7, #32
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd fb28 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008886:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008888:	e04e      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888a:	f107 0314 	add.w	r3, r7, #20
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd fc8a 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008898:	e046      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889a:	f107 0308 	add.w	r3, r7, #8
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fd fdec 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088a8:	e03e      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80088aa:	4b3a      	ldr	r3, [pc, #232]	; (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80088ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088ae:	e03b      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088b0:	4b37      	ldr	r3, [pc, #220]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088bc:	4b34      	ldr	r3, [pc, #208]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d10c      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d109      	bne.n	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088ce:	4b30      	ldr	r3, [pc, #192]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	08db      	lsrs	r3, r3, #3
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	4a2f      	ldr	r2, [pc, #188]	; (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80088da:	fa22 f303 	lsr.w	r3, r2, r3
 80088de:	637b      	str	r3, [r7, #52]	; 0x34
 80088e0:	e01e      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80088e2:	4b2b      	ldr	r3, [pc, #172]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088ee:	d106      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088f6:	d102      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80088f8:	4b28      	ldr	r3, [pc, #160]	; (800899c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80088fa:	637b      	str	r3, [r7, #52]	; 0x34
 80088fc:	e010      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088fe:	4b24      	ldr	r3, [pc, #144]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800890a:	d106      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800890c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008912:	d102      	bne.n	800891a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008914:	4b22      	ldr	r3, [pc, #136]	; (80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008916:	637b      	str	r3, [r7, #52]	; 0x34
 8008918:	e002      	b.n	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800891e:	e003      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008920:	e002      	b.n	8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008926:	bf00      	nop
          }
        }
        break;
 8008928:	e25d      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800892a:	4b19      	ldr	r3, [pc, #100]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800892c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008930:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008934:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800893c:	f7fb fb14 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
 8008940:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008942:	e250      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008944:	4b12      	ldr	r3, [pc, #72]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008950:	d10b      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008958:	d107      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800895a:	f107 0314 	add.w	r3, r7, #20
 800895e:	4618      	mov	r0, r3
 8008960:	f7fd fc22 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	637b      	str	r3, [r7, #52]	; 0x34
 8008968:	e04f      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800896a:	4b09      	ldr	r3, [pc, #36]	; (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008976:	d115      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897e:	d111      	bne.n	80089a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008980:	f107 0308 	add.w	r3, r7, #8
 8008984:	4618      	mov	r0, r3
 8008986:	f7fd fd79 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
 800898e:	e03c      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8008990:	44020c00 	.word	0x44020c00
 8008994:	00bb8000 	.word	0x00bb8000
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80089a4:	4b94      	ldr	r3, [pc, #592]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f003 0302 	and.w	r3, r3, #2
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d10d      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80089b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80089b6:	d109      	bne.n	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089b8:	4b8f      	ldr	r3, [pc, #572]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	08db      	lsrs	r3, r3, #3
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	4a8e      	ldr	r2, [pc, #568]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
 80089c8:	637b      	str	r3, [r7, #52]	; 0x34
 80089ca:	e01e      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80089cc:	4b8a      	ldr	r3, [pc, #552]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089d8:	d106      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e0:	d102      	bne.n	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80089e2:	4b87      	ldr	r3, [pc, #540]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80089e4:	637b      	str	r3, [r7, #52]	; 0x34
 80089e6:	e010      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80089e8:	4b83      	ldr	r3, [pc, #524]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089f4:	d106      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 80089f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80089fc:	d102      	bne.n	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 80089fe:	4b81      	ldr	r3, [pc, #516]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008a00:	637b      	str	r3, [r7, #52]	; 0x34
 8008a02:	e002      	b.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008a04:	2300      	movs	r3, #0
 8008a06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008a08:	e1ed      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a0a:	e1ec      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008a0c:	4b7a      	ldr	r3, [pc, #488]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a12:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008a16:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008a1e:	f7fb fab9 	bl	8003f94 <HAL_RCC_GetPCLK3Freq>
 8008a22:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008a24:	e1df      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008a26:	4b74      	ldr	r3, [pc, #464]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a32:	d10b      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3a:	d107      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a3c:	f107 0314 	add.w	r3, r7, #20
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fd fbb1 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4a:	e045      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008a4c:	4b6a      	ldr	r3, [pc, #424]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a58:	d10b      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a60:	d107      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fd fd08 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a70:	e032      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008a72:	4b61      	ldr	r3, [pc, #388]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d10d      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a84:	d109      	bne.n	8008a9a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a86:	4b5c      	ldr	r3, [pc, #368]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	08db      	lsrs	r3, r3, #3
 8008a8c:	f003 0303 	and.w	r3, r3, #3
 8008a90:	4a5a      	ldr	r2, [pc, #360]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008a92:	fa22 f303 	lsr.w	r3, r2, r3
 8008a96:	637b      	str	r3, [r7, #52]	; 0x34
 8008a98:	e01e      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008a9a:	4b57      	ldr	r3, [pc, #348]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa6:	d106      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aae:	d102      	bne.n	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8008ab0:	4b53      	ldr	r3, [pc, #332]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8008ab4:	e010      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008ab6:	4b50      	ldr	r3, [pc, #320]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008aca:	d102      	bne.n	8008ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8008acc:	4b4d      	ldr	r3, [pc, #308]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008ace:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad0:	e002      	b.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ad6:	e186      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ad8:	e185      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008ada:	4b47      	ldr	r3, [pc, #284]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ae0:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8008ae4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008aec:	f7fb fa3c 	bl	8003f68 <HAL_RCC_GetPCLK2Freq>
 8008af0:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008af2:	e178      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008af4:	4b40      	ldr	r3, [pc, #256]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b00:	d10b      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b08:	d107      	bne.n	8008b1a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b0a:	f107 0314 	add.w	r3, r7, #20
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fb4a 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
 8008b18:	e045      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8008b1a:	4b37      	ldr	r3, [pc, #220]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b26:	d10b      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b2e:	d107      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b30:	f107 0308 	add.w	r3, r7, #8
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fd fca1 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3e:	e032      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008b40:	4b2d      	ldr	r3, [pc, #180]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d10d      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b4e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008b52:	d109      	bne.n	8008b68 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b54:	4b28      	ldr	r3, [pc, #160]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	08db      	lsrs	r3, r3, #3
 8008b5a:	f003 0303 	and.w	r3, r3, #3
 8008b5e:	4a27      	ldr	r2, [pc, #156]	; (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008b60:	fa22 f303 	lsr.w	r3, r2, r3
 8008b64:	637b      	str	r3, [r7, #52]	; 0x34
 8008b66:	e01e      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008b68:	4b23      	ldr	r3, [pc, #140]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b74:	d106      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b7c:	d102      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8008b7e:	4b20      	ldr	r3, [pc, #128]	; (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008b80:	637b      	str	r3, [r7, #52]	; 0x34
 8008b82:	e010      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008b84:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8008b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b94:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008b98:	d102      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8008b9a:	4b1a      	ldr	r3, [pc, #104]	; (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b9e:	e002      	b.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ba4:	e11f      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ba6:	e11e      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008ba8:	4b13      	ldr	r3, [pc, #76]	; (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008baa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d85f      	bhi.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8008bba:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8008bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc0:	08008bd1 	.word	0x08008bd1
 8008bc4:	08008bd9 	.word	0x08008bd9
 8008bc8:	08008be9 	.word	0x08008be9
 8008bcc:	08008c09 	.word	0x08008c09

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8008bd0:	f7fb f998 	bl	8003f04 <HAL_RCC_GetHCLKFreq>
 8008bd4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8008bd6:	e053      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008bd8:	f107 0320 	add.w	r3, r7, #32
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fd f979 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008be6:	e04b      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008be8:	f107 0314 	add.w	r3, r7, #20
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fd fadb 	bl	80061a8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008bf6:	e043      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008bf8:	44020c00 	.word	0x44020c00
 8008bfc:	03d09000 	.word	0x03d09000
 8008c00:	003d0900 	.word	0x003d0900
 8008c04:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c08:	4b79      	ldr	r3, [pc, #484]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c0e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008c12:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c14:	4b76      	ldr	r3, [pc, #472]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d10c      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c26:	4b72      	ldr	r3, [pc, #456]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f003 0303 	and.w	r3, r3, #3
 8008c30:	4a70      	ldr	r2, [pc, #448]	; (8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
 8008c38:	e01e      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c3a:	4b6d      	ldr	r3, [pc, #436]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c46:	d106      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4e:	d102      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008c50:	4b69      	ldr	r3, [pc, #420]	; (8008df8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008c52:	637b      	str	r3, [r7, #52]	; 0x34
 8008c54:	e010      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c56:	4b66      	ldr	r3, [pc, #408]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008c6c:	4b63      	ldr	r3, [pc, #396]	; (8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8008c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c70:	e002      	b.n	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008c76:	e003      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008c78:	e002      	b.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008c7e:	bf00      	nop
          }
        }
        break;
 8008c80:	e0b1      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008c82:	4b5b      	ldr	r3, [pc, #364]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c88:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008c8c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008c8e:	4b58      	ldr	r3, [pc, #352]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d106      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8008ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ca8:	e01f      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008caa:	4b51      	ldr	r3, [pc, #324]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cb8:	d106      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b40      	cmp	r3, #64	; 0x40
 8008cbe:	d103      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8008cc0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008cc4:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc6:	e010      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008cc8:	4b49      	ldr	r3, [pc, #292]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cd4:	d106      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8008cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd8:	2b80      	cmp	r3, #128	; 0x80
 8008cda:	d103      	bne.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8008cdc:	f248 0312 	movw	r3, #32786	; 0x8012
 8008ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce2:	e002      	b.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008ce8:	e07d      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cea:	e07c      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008cec:	4b40      	ldr	r3, [pc, #256]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008cf2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008cf6:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008cf8:	4b3d      	ldr	r3, [pc, #244]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d04:	d105      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d102      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8008d0c:	4b3c      	ldr	r3, [pc, #240]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d10:	e031      	b.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008d12:	4b37      	ldr	r3, [pc, #220]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d1e:	d10a      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	2b10      	cmp	r3, #16
 8008d24:	d107      	bne.n	8008d36 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d26:	f107 0320 	add.w	r3, r7, #32
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fd f8d2 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	637b      	str	r3, [r7, #52]	; 0x34
 8008d34:	e01f      	b.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008d36:	4b2e      	ldr	r3, [pc, #184]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d3c:	f003 0302 	and.w	r3, r3, #2
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d106      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d46:	2b20      	cmp	r3, #32
 8008d48:	d103      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8008d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d50:	e011      	b.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008d52:	4b27      	ldr	r3, [pc, #156]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d60:	d106      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d64:	2b30      	cmp	r3, #48	; 0x30
 8008d66:	d103      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008d68:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6e:	e002      	b.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008d74:	e037      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d76:	e036      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008d78:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d7a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008d7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008d82:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d107      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d8a:	f107 0320 	add.w	r3, r7, #32
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fd f8a0 	bl	8005ed4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008d98:	e025      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008da6:	d10a      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	2b20      	cmp	r3, #32
 8008dac:	d107      	bne.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fd fb62 	bl	800647c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	637b      	str	r3, [r7, #52]	; 0x34
 8008dbc:	e00f      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dca:	d105      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2b30      	cmp	r3, #48	; 0x30
 8008dd0:	d102      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8008dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd6:	e002      	b.n	8008dde <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8008ddc:	e003      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008dde:	e002      	b.n	8008de6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008de4:	bf00      	nop
    }
  }

  return (frequency);
 8008de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	373c      	adds	r7, #60	; 0x3c
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd90      	pop	{r4, r7, pc}
 8008df0:	44020c00 	.word	0x44020c00
 8008df4:	03d09000 	.word	0x03d09000
 8008df8:	003d0900 	.word	0x003d0900
 8008dfc:	007a1200 	.word	0x007a1200
 8008e00:	02dc6c00 	.word	0x02dc6c00

08008e04 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8008e0c:	4b48      	ldr	r3, [pc, #288]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a47      	ldr	r2, [pc, #284]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e16:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e18:	f7f8 fb72 	bl	8001500 <HAL_GetTick>
 8008e1c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e1e:	e008      	b.n	8008e32 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008e20:	f7f8 fb6e 	bl	8001500 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d901      	bls.n	8008e32 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e07a      	b.n	8008f28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008e32:	4b3f      	ldr	r3, [pc, #252]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1f0      	bne.n	8008e20 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008e3e:	4b3c      	ldr	r3, [pc, #240]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e42:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e46:	f023 0303 	bic.w	r3, r3, #3
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6811      	ldr	r1, [r2, #0]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	6852      	ldr	r2, [r2, #4]
 8008e52:	0212      	lsls	r2, r2, #8
 8008e54:	430a      	orrs	r2, r1
 8008e56:	4936      	ldr	r1, [pc, #216]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	025b      	lsls	r3, r3, #9
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	431a      	orrs	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	041b      	lsls	r3, r3, #16
 8008e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	3b01      	subs	r3, #1
 8008e86:	061b      	lsls	r3, r3, #24
 8008e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e8c:	4928      	ldr	r1, [pc, #160]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008e92:	4b27      	ldr	r3, [pc, #156]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	f023 020c 	bic.w	r2, r3, #12
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	4924      	ldr	r1, [pc, #144]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8008ea4:	4b22      	ldr	r3, [pc, #136]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	f023 0220 	bic.w	r2, r3, #32
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	491f      	ldr	r1, [pc, #124]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008eb6:	4b1e      	ldr	r3, [pc, #120]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebe:	491c      	ldr	r1, [pc, #112]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8008ec4:	4b1a      	ldr	r3, [pc, #104]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a19      	ldr	r2, [pc, #100]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008eca:	f023 0310 	bic.w	r3, r3, #16
 8008ece:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8008ed0:	4b17      	ldr	r3, [pc, #92]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ed8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	6a12      	ldr	r2, [r2, #32]
 8008ee0:	00d2      	lsls	r2, r2, #3
 8008ee2:	4913      	ldr	r1, [pc, #76]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8008ee8:	4b11      	ldr	r3, [pc, #68]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4a10      	ldr	r2, [pc, #64]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008eee:	f043 0310 	orr.w	r3, r3, #16
 8008ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008ef4:	4b0e      	ldr	r3, [pc, #56]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a0d      	ldr	r2, [pc, #52]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008efa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008efe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f00:	f7f8 fafe 	bl	8001500 <HAL_GetTick>
 8008f04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f06:	e008      	b.n	8008f1a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008f08:	f7f8 fafa 	bl	8001500 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e006      	b.n	8008f28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008f1a:	4b05      	ldr	r3, [pc, #20]	; (8008f30 <RCCEx_PLL2_Config+0x12c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0f0      	beq.n	8008f08 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008f26:	2300      	movs	r3, #0

}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	44020c00 	.word	0x44020c00

08008f34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008f3c:	4b48      	ldr	r3, [pc, #288]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a47      	ldr	r2, [pc, #284]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f48:	f7f8 fada 	bl	8001500 <HAL_GetTick>
 8008f4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f4e:	e008      	b.n	8008f62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008f50:	f7f8 fad6 	bl	8001500 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d901      	bls.n	8008f62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e07a      	b.n	8009058 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008f62:	4b3f      	ldr	r3, [pc, #252]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f0      	bne.n	8008f50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008f6e:	4b3c      	ldr	r3, [pc, #240]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008f76:	f023 0303 	bic.w	r3, r3, #3
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6811      	ldr	r1, [r2, #0]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	6852      	ldr	r2, [r2, #4]
 8008f82:	0212      	lsls	r2, r2, #8
 8008f84:	430a      	orrs	r2, r1
 8008f86:	4936      	ldr	r1, [pc, #216]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	630b      	str	r3, [r1, #48]	; 0x30
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	025b      	lsls	r3, r3, #9
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	431a      	orrs	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691b      	ldr	r3, [r3, #16]
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	041b      	lsls	r3, r3, #16
 8008faa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	061b      	lsls	r3, r3, #24
 8008fb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008fbc:	4928      	ldr	r1, [pc, #160]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008fc2:	4b27      	ldr	r3, [pc, #156]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc6:	f023 020c 	bic.w	r2, r3, #12
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	4924      	ldr	r1, [pc, #144]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008fd4:	4b22      	ldr	r3, [pc, #136]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	f023 0220 	bic.w	r2, r3, #32
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	491f      	ldr	r1, [pc, #124]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008fe6:	4b1e      	ldr	r3, [pc, #120]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	491c      	ldr	r1, [pc, #112]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008ff4:	4b1a      	ldr	r3, [pc, #104]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff8:	4a19      	ldr	r2, [pc, #100]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8008ffa:	f023 0310 	bic.w	r3, r3, #16
 8008ffe:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009000:	4b17      	ldr	r3, [pc, #92]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8009002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009004:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009008:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6a12      	ldr	r2, [r2, #32]
 8009010:	00d2      	lsls	r2, r2, #3
 8009012:	4913      	ldr	r1, [pc, #76]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8009014:	4313      	orrs	r3, r2
 8009016:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009018:	4b11      	ldr	r3, [pc, #68]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 800901a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901c:	4a10      	ldr	r2, [pc, #64]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 800901e:	f043 0310 	orr.w	r3, r3, #16
 8009022:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009024:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a0d      	ldr	r2, [pc, #52]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 800902a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800902e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009030:	f7f8 fa66 	bl	8001500 <HAL_GetTick>
 8009034:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009036:	e008      	b.n	800904a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009038:	f7f8 fa62 	bl	8001500 <HAL_GetTick>
 800903c:	4602      	mov	r2, r0
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	1ad3      	subs	r3, r2, r3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d901      	bls.n	800904a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e006      	b.n	8009058 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <RCCEx_PLL3_Config+0x12c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d0f0      	beq.n	8009038 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	44020c00 	.word	0x44020c00

08009064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e042      	b.n	80090fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	2b00      	cmp	r3, #0
 800907e:	d106      	bne.n	800908e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7f8 f86b 	bl	8001164 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2224      	movs	r2, #36	; 0x24
 8009092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f022 0201 	bic.w	r2, r2, #1
 80090a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fab4 	bl	800961c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f8c3 	bl	8009240 <UART_SetConfig>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e01b      	b.n	80090fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80090d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80090e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0201 	orr.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fb33 	bl	8009760 <UART_CheckIdleState>
 80090fa:	4603      	mov	r3, r0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b08a      	sub	sp, #40	; 0x28
 8009108:	af02      	add	r7, sp, #8
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	603b      	str	r3, [r7, #0]
 8009110:	4613      	mov	r3, r2
 8009112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800911a:	2b20      	cmp	r3, #32
 800911c:	f040 808b 	bne.w	8009236 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d002      	beq.n	800912c <HAL_UART_Transmit+0x28>
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e083      	b.n	8009238 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d107      	bne.n	800914e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800914c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2221      	movs	r2, #33	; 0x21
 800915a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800915e:	f7f8 f9cf 	bl	8001500 <HAL_GetTick>
 8009162:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	88fa      	ldrh	r2, [r7, #6]
 8009170:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800917c:	d108      	bne.n	8009190 <HAL_UART_Transmit+0x8c>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d104      	bne.n	8009190 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	61bb      	str	r3, [r7, #24]
 800918e:	e003      	b.n	8009198 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009194:	2300      	movs	r3, #0
 8009196:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009198:	e030      	b.n	80091fc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2200      	movs	r2, #0
 80091a2:	2180      	movs	r1, #128	; 0x80
 80091a4:	68f8      	ldr	r0, [r7, #12]
 80091a6:	f000 fb85 	bl	80098b4 <UART_WaitOnFlagUntilTimeout>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e03d      	b.n	8009238 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	3302      	adds	r3, #2
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	e007      	b.n	80091ea <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091da:	69fb      	ldr	r3, [r7, #28]
 80091dc:	781a      	ldrb	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	3301      	adds	r3, #1
 80091e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1c8      	bne.n	800919a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	9300      	str	r3, [sp, #0]
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	2200      	movs	r2, #0
 8009210:	2140      	movs	r1, #64	; 0x40
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fb4e 	bl	80098b4 <UART_WaitOnFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2220      	movs	r2, #32
 8009222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009226:	2303      	movs	r3, #3
 8009228:	e006      	b.n	8009238 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2220      	movs	r2, #32
 800922e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009232:	2300      	movs	r3, #0
 8009234:	e000      	b.n	8009238 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009236:	2302      	movs	r3, #2
  }
}
 8009238:	4618      	mov	r0, r3
 800923a:	3720      	adds	r7, #32
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009244:	b094      	sub	sp, #80	; 0x50
 8009246:	af00      	add	r7, sp, #0
 8009248:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	4b78      	ldr	r3, [pc, #480]	; (8009438 <UART_SetConfig+0x1f8>)
 8009256:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	431a      	orrs	r2, r3
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	431a      	orrs	r2, r3
 8009268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926a:	69db      	ldr	r3, [r3, #28]
 800926c:	4313      	orrs	r3, r2
 800926e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4971      	ldr	r1, [pc, #452]	; (800943c <UART_SetConfig+0x1fc>)
 8009278:	4019      	ands	r1, r3
 800927a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	430b      	orrs	r3, r1
 8009282:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800928e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009290:	68d9      	ldr	r1, [r3, #12]
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	ea40 0301 	orr.w	r3, r0, r1
 800929a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	4b64      	ldr	r3, [pc, #400]	; (8009438 <UART_SetConfig+0x1f8>)
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d009      	beq.n	80092c0 <UART_SetConfig+0x80>
 80092ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4b63      	ldr	r3, [pc, #396]	; (8009440 <UART_SetConfig+0x200>)
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d004      	beq.n	80092c0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b8:	6a1a      	ldr	r2, [r3, #32]
 80092ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092bc:	4313      	orrs	r3, r2
 80092be:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80092ca:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80092ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092de:	f023 000f 	bic.w	r0, r3, #15
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80092e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	ea40 0301 	orr.w	r3, r0, r1
 80092ee:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	4b53      	ldr	r3, [pc, #332]	; (8009444 <UART_SetConfig+0x204>)
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d102      	bne.n	8009300 <UART_SetConfig+0xc0>
 80092fa:	2301      	movs	r3, #1
 80092fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80092fe:	e066      	b.n	80093ce <UART_SetConfig+0x18e>
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	4b50      	ldr	r3, [pc, #320]	; (8009448 <UART_SetConfig+0x208>)
 8009306:	429a      	cmp	r2, r3
 8009308:	d102      	bne.n	8009310 <UART_SetConfig+0xd0>
 800930a:	2302      	movs	r3, #2
 800930c:	64bb      	str	r3, [r7, #72]	; 0x48
 800930e:	e05e      	b.n	80093ce <UART_SetConfig+0x18e>
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	4b4d      	ldr	r3, [pc, #308]	; (800944c <UART_SetConfig+0x20c>)
 8009316:	429a      	cmp	r2, r3
 8009318:	d102      	bne.n	8009320 <UART_SetConfig+0xe0>
 800931a:	2304      	movs	r3, #4
 800931c:	64bb      	str	r3, [r7, #72]	; 0x48
 800931e:	e056      	b.n	80093ce <UART_SetConfig+0x18e>
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	4b4a      	ldr	r3, [pc, #296]	; (8009450 <UART_SetConfig+0x210>)
 8009326:	429a      	cmp	r2, r3
 8009328:	d102      	bne.n	8009330 <UART_SetConfig+0xf0>
 800932a:	2308      	movs	r3, #8
 800932c:	64bb      	str	r3, [r7, #72]	; 0x48
 800932e:	e04e      	b.n	80093ce <UART_SetConfig+0x18e>
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	4b47      	ldr	r3, [pc, #284]	; (8009454 <UART_SetConfig+0x214>)
 8009336:	429a      	cmp	r2, r3
 8009338:	d102      	bne.n	8009340 <UART_SetConfig+0x100>
 800933a:	2310      	movs	r3, #16
 800933c:	64bb      	str	r3, [r7, #72]	; 0x48
 800933e:	e046      	b.n	80093ce <UART_SetConfig+0x18e>
 8009340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	4b44      	ldr	r3, [pc, #272]	; (8009458 <UART_SetConfig+0x218>)
 8009346:	429a      	cmp	r2, r3
 8009348:	d102      	bne.n	8009350 <UART_SetConfig+0x110>
 800934a:	2320      	movs	r3, #32
 800934c:	64bb      	str	r3, [r7, #72]	; 0x48
 800934e:	e03e      	b.n	80093ce <UART_SetConfig+0x18e>
 8009350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	4b41      	ldr	r3, [pc, #260]	; (800945c <UART_SetConfig+0x21c>)
 8009356:	429a      	cmp	r2, r3
 8009358:	d102      	bne.n	8009360 <UART_SetConfig+0x120>
 800935a:	2340      	movs	r3, #64	; 0x40
 800935c:	64bb      	str	r3, [r7, #72]	; 0x48
 800935e:	e036      	b.n	80093ce <UART_SetConfig+0x18e>
 8009360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009362:	681a      	ldr	r2, [r3, #0]
 8009364:	4b3e      	ldr	r3, [pc, #248]	; (8009460 <UART_SetConfig+0x220>)
 8009366:	429a      	cmp	r2, r3
 8009368:	d102      	bne.n	8009370 <UART_SetConfig+0x130>
 800936a:	2380      	movs	r3, #128	; 0x80
 800936c:	64bb      	str	r3, [r7, #72]	; 0x48
 800936e:	e02e      	b.n	80093ce <UART_SetConfig+0x18e>
 8009370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009372:	681a      	ldr	r2, [r3, #0]
 8009374:	4b3b      	ldr	r3, [pc, #236]	; (8009464 <UART_SetConfig+0x224>)
 8009376:	429a      	cmp	r2, r3
 8009378:	d103      	bne.n	8009382 <UART_SetConfig+0x142>
 800937a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800937e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009380:	e025      	b.n	80093ce <UART_SetConfig+0x18e>
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b38      	ldr	r3, [pc, #224]	; (8009468 <UART_SetConfig+0x228>)
 8009388:	429a      	cmp	r2, r3
 800938a:	d103      	bne.n	8009394 <UART_SetConfig+0x154>
 800938c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009390:	64bb      	str	r3, [r7, #72]	; 0x48
 8009392:	e01c      	b.n	80093ce <UART_SetConfig+0x18e>
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	4b34      	ldr	r3, [pc, #208]	; (800946c <UART_SetConfig+0x22c>)
 800939a:	429a      	cmp	r2, r3
 800939c:	d103      	bne.n	80093a6 <UART_SetConfig+0x166>
 800939e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80093a4:	e013      	b.n	80093ce <UART_SetConfig+0x18e>
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b31      	ldr	r3, [pc, #196]	; (8009470 <UART_SetConfig+0x230>)
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d103      	bne.n	80093b8 <UART_SetConfig+0x178>
 80093b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80093b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80093b6:	e00a      	b.n	80093ce <UART_SetConfig+0x18e>
 80093b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	4b1e      	ldr	r3, [pc, #120]	; (8009438 <UART_SetConfig+0x1f8>)
 80093be:	429a      	cmp	r2, r3
 80093c0:	d103      	bne.n	80093ca <UART_SetConfig+0x18a>
 80093c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80093c8:	e001      	b.n	80093ce <UART_SetConfig+0x18e>
 80093ca:	2300      	movs	r3, #0
 80093cc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b19      	ldr	r3, [pc, #100]	; (8009438 <UART_SetConfig+0x1f8>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d005      	beq.n	80093e4 <UART_SetConfig+0x1a4>
 80093d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	4b18      	ldr	r3, [pc, #96]	; (8009440 <UART_SetConfig+0x200>)
 80093de:	429a      	cmp	r2, r3
 80093e0:	f040 8094 	bne.w	800950c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093e6:	2200      	movs	r2, #0
 80093e8:	623b      	str	r3, [r7, #32]
 80093ea:	627a      	str	r2, [r7, #36]	; 0x24
 80093ec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80093f0:	f7fd f9ae 	bl	8006750 <HAL_RCCEx_GetPeriphCLKFreq>
 80093f4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80093f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	f000 80f7 	beq.w	80095ec <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80093fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <UART_SetConfig+0x234>)
 8009404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009408:	461a      	mov	r2, r3
 800940a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009410:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4613      	mov	r3, r2
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	4413      	add	r3, r2
 800941c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800941e:	429a      	cmp	r2, r3
 8009420:	d305      	bcc.n	800942e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942a:	429a      	cmp	r2, r3
 800942c:	d924      	bls.n	8009478 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009434:	e069      	b.n	800950a <UART_SetConfig+0x2ca>
 8009436:	bf00      	nop
 8009438:	44002400 	.word	0x44002400
 800943c:	cfff69f3 	.word	0xcfff69f3
 8009440:	54002400 	.word	0x54002400
 8009444:	40013800 	.word	0x40013800
 8009448:	40004400 	.word	0x40004400
 800944c:	40004800 	.word	0x40004800
 8009450:	40004c00 	.word	0x40004c00
 8009454:	40005000 	.word	0x40005000
 8009458:	40006400 	.word	0x40006400
 800945c:	40007800 	.word	0x40007800
 8009460:	40007c00 	.word	0x40007c00
 8009464:	40008000 	.word	0x40008000
 8009468:	40006800 	.word	0x40006800
 800946c:	40006c00 	.word	0x40006c00
 8009470:	40008400 	.word	0x40008400
 8009474:	08009d20 	.word	0x08009d20
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800947a:	2200      	movs	r2, #0
 800947c:	61bb      	str	r3, [r7, #24]
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009484:	4a64      	ldr	r2, [pc, #400]	; (8009618 <UART_SetConfig+0x3d8>)
 8009486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948a:	b29b      	uxth	r3, r3
 800948c:	2200      	movs	r2, #0
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	617a      	str	r2, [r7, #20]
 8009492:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009496:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800949a:	f7f7 fa07 	bl	80008ac <__aeabi_uldivmod>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	020b      	lsls	r3, r1, #8
 80094b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094b4:	0202      	lsls	r2, r0, #8
 80094b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b8:	6849      	ldr	r1, [r1, #4]
 80094ba:	0849      	lsrs	r1, r1, #1
 80094bc:	2000      	movs	r0, #0
 80094be:	460c      	mov	r4, r1
 80094c0:	4605      	mov	r5, r0
 80094c2:	eb12 0804 	adds.w	r8, r2, r4
 80094c6:	eb43 0905 	adc.w	r9, r3, r5
 80094ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	60bb      	str	r3, [r7, #8]
 80094d2:	60fa      	str	r2, [r7, #12]
 80094d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094d8:	4640      	mov	r0, r8
 80094da:	4649      	mov	r1, r9
 80094dc:	f7f7 f9e6 	bl	80008ac <__aeabi_uldivmod>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4613      	mov	r3, r2
 80094e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094ee:	d308      	bcc.n	8009502 <UART_SetConfig+0x2c2>
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f6:	d204      	bcs.n	8009502 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80094f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094fe:	60da      	str	r2, [r3, #12]
 8009500:	e003      	b.n	800950a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009508:	e070      	b.n	80095ec <UART_SetConfig+0x3ac>
 800950a:	e06f      	b.n	80095ec <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	69db      	ldr	r3, [r3, #28]
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009514:	d13c      	bne.n	8009590 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009518:	2200      	movs	r2, #0
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009522:	f7fd f915 	bl	8006750 <HAL_RCCEx_GetPeriphCLKFreq>
 8009526:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d05e      	beq.n	80095ec <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	4a39      	ldr	r2, [pc, #228]	; (8009618 <UART_SetConfig+0x3d8>)
 8009534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009538:	461a      	mov	r2, r3
 800953a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800953c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009540:	005a      	lsls	r2, r3, #1
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	085b      	lsrs	r3, r3, #1
 8009548:	441a      	add	r2, r3
 800954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009556:	2b0f      	cmp	r3, #15
 8009558:	d916      	bls.n	8009588 <UART_SetConfig+0x348>
 800955a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800955c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009560:	d212      	bcs.n	8009588 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009564:	b29b      	uxth	r3, r3
 8009566:	f023 030f 	bic.w	r3, r3, #15
 800956a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800956c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	b29b      	uxth	r3, r3
 8009572:	f003 0307 	and.w	r3, r3, #7
 8009576:	b29a      	uxth	r2, r3
 8009578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800957a:	4313      	orrs	r3, r2
 800957c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800957e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009584:	60da      	str	r2, [r3, #12]
 8009586:	e031      	b.n	80095ec <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800958e:	e02d      	b.n	80095ec <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009592:	2200      	movs	r2, #0
 8009594:	469a      	mov	sl, r3
 8009596:	4693      	mov	fp, r2
 8009598:	4650      	mov	r0, sl
 800959a:	4659      	mov	r1, fp
 800959c:	f7fd f8d8 	bl	8006750 <HAL_RCCEx_GetPeriphCLKFreq>
 80095a0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80095a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d021      	beq.n	80095ec <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	4a1a      	ldr	r2, [pc, #104]	; (8009618 <UART_SetConfig+0x3d8>)
 80095ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b2:	461a      	mov	r2, r3
 80095b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	085b      	lsrs	r3, r3, #1
 80095c0:	441a      	add	r2, r3
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095ce:	2b0f      	cmp	r3, #15
 80095d0:	d909      	bls.n	80095e6 <UART_SetConfig+0x3a6>
 80095d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095d8:	d205      	bcs.n	80095e6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095dc:	b29a      	uxth	r2, r3
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60da      	str	r2, [r3, #12]
 80095e4:	e002      	b.n	80095ec <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	2201      	movs	r2, #1
 80095f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80095f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095f6:	2201      	movs	r2, #1
 80095f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fe:	2200      	movs	r2, #0
 8009600:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009604:	2200      	movs	r2, #0
 8009606:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009608:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800960c:	4618      	mov	r0, r3
 800960e:	3750      	adds	r7, #80	; 0x50
 8009610:	46bd      	mov	sp, r7
 8009612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009616:	bf00      	nop
 8009618:	08009d20 	.word	0x08009d20

0800961c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009628:	f003 0308 	and.w	r3, r3, #8
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00a      	beq.n	8009646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00a      	beq.n	800968a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968e:	f003 0304 	and.w	r3, r3, #4
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	f003 0320 	and.w	r3, r3, #32
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01a      	beq.n	8009732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800971a:	d10a      	bne.n	8009732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	605a      	str	r2, [r3, #4]
  }
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b098      	sub	sp, #96	; 0x60
 8009764:	af02      	add	r7, sp, #8
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009770:	f7f7 fec6 	bl	8001500 <HAL_GetTick>
 8009774:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0308 	and.w	r3, r3, #8
 8009780:	2b08      	cmp	r3, #8
 8009782:	d12f      	bne.n	80097e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009784:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978c:	2200      	movs	r2, #0
 800978e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f88e 	bl	80098b4 <UART_WaitOnFlagUntilTimeout>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d022      	beq.n	80097e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097b2:	653b      	str	r3, [r7, #80]	; 0x50
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097bc:	647b      	str	r3, [r7, #68]	; 0x44
 80097be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e6      	bne.n	800979e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e063      	b.n	80098ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0304 	and.w	r3, r3, #4
 80097ee:	2b04      	cmp	r3, #4
 80097f0:	d149      	bne.n	8009886 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097fa:	2200      	movs	r2, #0
 80097fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f857 	bl	80098b4 <UART_WaitOnFlagUntilTimeout>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d03c      	beq.n	8009886 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009814:	e853 3f00 	ldrex	r3, [r3]
 8009818:	623b      	str	r3, [r7, #32]
   return(result);
 800981a:	6a3b      	ldr	r3, [r7, #32]
 800981c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982a:	633b      	str	r3, [r7, #48]	; 0x30
 800982c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800982e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009832:	e841 2300 	strex	r3, r2, [r1]
 8009836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1e6      	bne.n	800980c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	60fb      	str	r3, [r7, #12]
   return(result);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	64bb      	str	r3, [r7, #72]	; 0x48
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3308      	adds	r3, #8
 800985c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800985e:	61fa      	str	r2, [r7, #28]
 8009860:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	69b9      	ldr	r1, [r7, #24]
 8009864:	69fa      	ldr	r2, [r7, #28]
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	617b      	str	r3, [r7, #20]
   return(result);
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e5      	bne.n	800983e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2220      	movs	r2, #32
 8009876:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e012      	b.n	80098ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2220      	movs	r2, #32
 800988a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2220      	movs	r2, #32
 8009892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3758      	adds	r7, #88	; 0x58
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	4613      	mov	r3, r2
 80098c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098c4:	e049      	b.n	800995a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098cc:	d045      	beq.n	800995a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ce:	f7f7 fe17 	bl	8001500 <HAL_GetTick>
 80098d2:	4602      	mov	r2, r0
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d302      	bcc.n	80098e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e048      	b.n	800997a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d031      	beq.n	800995a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69db      	ldr	r3, [r3, #28]
 80098fc:	f003 0308 	and.w	r3, r3, #8
 8009900:	2b08      	cmp	r3, #8
 8009902:	d110      	bne.n	8009926 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2208      	movs	r2, #8
 800990a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 f838 	bl	8009982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2208      	movs	r2, #8
 8009916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e029      	b.n	800997a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009930:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009934:	d111      	bne.n	800995a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800993e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009940:	68f8      	ldr	r0, [r7, #12]
 8009942:	f000 f81e 	bl	8009982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2220      	movs	r2, #32
 800994a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009956:	2303      	movs	r3, #3
 8009958:	e00f      	b.n	800997a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	69da      	ldr	r2, [r3, #28]
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4013      	ands	r3, r2
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	429a      	cmp	r2, r3
 8009968:	bf0c      	ite	eq
 800996a:	2301      	moveq	r3, #1
 800996c:	2300      	movne	r3, #0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	79fb      	ldrb	r3, [r7, #7]
 8009974:	429a      	cmp	r2, r3
 8009976:	d0a6      	beq.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009982:	b480      	push	{r7}
 8009984:	b095      	sub	sp, #84	; 0x54
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009992:	e853 3f00 	ldrex	r3, [r3]
 8009996:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800999e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099a8:	643b      	str	r3, [r7, #64]	; 0x40
 80099aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e6      	bne.n	800998a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	3308      	adds	r3, #8
 80099c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099d2:	f023 0301 	bic.w	r3, r3, #1
 80099d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80099e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e3      	bne.n	80099bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d118      	bne.n	8009a2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	e853 3f00 	ldrex	r3, [r3]
 8009a08:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	f023 0310 	bic.w	r3, r3, #16
 8009a10:	647b      	str	r3, [r7, #68]	; 0x44
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1e:	6979      	ldr	r1, [r7, #20]
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	e841 2300 	strex	r3, r2, [r1]
 8009a26:	613b      	str	r3, [r7, #16]
   return(result);
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d1e6      	bne.n	80099fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009a42:	bf00      	nop
 8009a44:	3754      	adds	r7, #84	; 0x54
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a4e:	b480      	push	{r7}
 8009a50:	b085      	sub	sp, #20
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d101      	bne.n	8009a64 <HAL_UARTEx_DisableFifoMode+0x16>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e027      	b.n	8009ab4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2224      	movs	r2, #36	; 0x24
 8009a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f022 0201 	bic.w	r2, r2, #1
 8009a8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009a92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3714      	adds	r7, #20
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e02d      	b.n	8009b34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2224      	movs	r2, #36	; 0x24
 8009ae4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0201 	bic.w	r2, r2, #1
 8009afe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	430a      	orrs	r2, r1
 8009b12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f84f 	bl	8009bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	68fa      	ldr	r2, [r7, #12]
 8009b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2220      	movs	r2, #32
 8009b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e02d      	b.n	8009bb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2224      	movs	r2, #36	; 0x24
 8009b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f022 0201 	bic.w	r2, r2, #1
 8009b7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f000 f811 	bl	8009bb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2220      	movs	r2, #32
 8009ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b085      	sub	sp, #20
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d108      	bne.n	8009bda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009bd8:	e031      	b.n	8009c3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009bda:	2308      	movs	r3, #8
 8009bdc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009bde:	2308      	movs	r3, #8
 8009be0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	0e5b      	lsrs	r3, r3, #25
 8009bea:	b2db      	uxtb	r3, r3
 8009bec:	f003 0307 	and.w	r3, r3, #7
 8009bf0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	0f5b      	lsrs	r3, r3, #29
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	f003 0307 	and.w	r3, r3, #7
 8009c00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	7b3a      	ldrb	r2, [r7, #12]
 8009c06:	4911      	ldr	r1, [pc, #68]	; (8009c4c <UARTEx_SetNbDataToProcess+0x94>)
 8009c08:	5c8a      	ldrb	r2, [r1, r2]
 8009c0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c0e:	7b3a      	ldrb	r2, [r7, #12]
 8009c10:	490f      	ldr	r1, [pc, #60]	; (8009c50 <UARTEx_SetNbDataToProcess+0x98>)
 8009c12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c14:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c18:	b29a      	uxth	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c20:	7bfb      	ldrb	r3, [r7, #15]
 8009c22:	7b7a      	ldrb	r2, [r7, #13]
 8009c24:	4909      	ldr	r1, [pc, #36]	; (8009c4c <UARTEx_SetNbDataToProcess+0x94>)
 8009c26:	5c8a      	ldrb	r2, [r1, r2]
 8009c28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c2c:	7b7a      	ldrb	r2, [r7, #13]
 8009c2e:	4908      	ldr	r1, [pc, #32]	; (8009c50 <UARTEx_SetNbDataToProcess+0x98>)
 8009c30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c32:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c3e:	bf00      	nop
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	08009d38 	.word	0x08009d38
 8009c50:	08009d40 	.word	0x08009d40

08009c54 <memset>:
 8009c54:	4402      	add	r2, r0
 8009c56:	4603      	mov	r3, r0
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d100      	bne.n	8009c5e <memset+0xa>
 8009c5c:	4770      	bx	lr
 8009c5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c62:	e7f9      	b.n	8009c58 <memset+0x4>

08009c64 <__libc_init_array>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	4d0d      	ldr	r5, [pc, #52]	; (8009c9c <__libc_init_array+0x38>)
 8009c68:	2600      	movs	r6, #0
 8009c6a:	4c0d      	ldr	r4, [pc, #52]	; (8009ca0 <__libc_init_array+0x3c>)
 8009c6c:	1b64      	subs	r4, r4, r5
 8009c6e:	10a4      	asrs	r4, r4, #2
 8009c70:	42a6      	cmp	r6, r4
 8009c72:	d109      	bne.n	8009c88 <__libc_init_array+0x24>
 8009c74:	4d0b      	ldr	r5, [pc, #44]	; (8009ca4 <__libc_init_array+0x40>)
 8009c76:	2600      	movs	r6, #0
 8009c78:	4c0b      	ldr	r4, [pc, #44]	; (8009ca8 <__libc_init_array+0x44>)
 8009c7a:	f000 f817 	bl	8009cac <_init>
 8009c7e:	1b64      	subs	r4, r4, r5
 8009c80:	10a4      	asrs	r4, r4, #2
 8009c82:	42a6      	cmp	r6, r4
 8009c84:	d105      	bne.n	8009c92 <__libc_init_array+0x2e>
 8009c86:	bd70      	pop	{r4, r5, r6, pc}
 8009c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c8c:	3601      	adds	r6, #1
 8009c8e:	4798      	blx	r3
 8009c90:	e7ee      	b.n	8009c70 <__libc_init_array+0xc>
 8009c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c96:	3601      	adds	r6, #1
 8009c98:	4798      	blx	r3
 8009c9a:	e7f2      	b.n	8009c82 <__libc_init_array+0x1e>
 8009c9c:	08009d50 	.word	0x08009d50
 8009ca0:	08009d50 	.word	0x08009d50
 8009ca4:	08009d50 	.word	0x08009d50
 8009ca8:	08009d54 	.word	0x08009d54

08009cac <_init>:
 8009cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cae:	bf00      	nop
 8009cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb2:	bc08      	pop	{r3}
 8009cb4:	469e      	mov	lr, r3
 8009cb6:	4770      	bx	lr

08009cb8 <_fini>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr
