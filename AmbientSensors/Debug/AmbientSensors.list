
AmbientSensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd14  08000250  08000250  00010250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800df68  0800df68  0001df68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4a0  0800e4a0  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e4a0  0800e4a0  0001e4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4a8  0800e4a8  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4a8  0800e4a8  0001e4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e4ac  0800e4ac  0001e4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800e4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  0800e684  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800e684  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012b53  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025b2  00000000  00000000  00032da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc0  00000000  00000000  00035358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a92  00000000  00000000  00036118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000331db  00000000  00000000  00036baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001534a  00000000  00000000  00069d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00138a1c  00000000  00000000  0007f0cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004db0  00000000  00000000  001b7aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001bc89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001d4 	.word	0x200001d4
 800026c:	00000000 	.word	0x00000000
 8000270:	0800df4c 	.word	0x0800df4c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001d8 	.word	0x200001d8
 800028c:	0800df4c 	.word	0x0800df4c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9b8 	b.w	8001030 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	2200      	movs	r2, #0
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d146      	bne.n	8000de2 <__udivmoddi4+0x9e>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d95e      	bls.n	8000e18 <__udivmoddi4+0xd4>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	409c      	lsls	r4, r3
 8000d6c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d70:	4317      	orrs	r7, r2
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	0c22      	lsrs	r2, r4, #16
 8000d7c:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	fb01 f005 	mul.w	r0, r1, r5
 8000d88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x5e>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x5c>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f200 8134 	bhi.w	8001008 <__udivmoddi4+0x2c4>
 8000da0:	4639      	mov	r1, r7
 8000da2:	1a12      	subs	r2, r2, r0
 8000da4:	b2a4      	uxth	r4, r4
 8000da6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000daa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dae:	fb00 f505 	mul.w	r5, r0, r5
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	42a5      	cmp	r5, r4
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x88>
 8000dba:	eb1c 0404 	adds.w	r4, ip, r4
 8000dbe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x86>
 8000dc4:	42a5      	cmp	r5, r4
 8000dc6:	f200 8119 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000dca:	4610      	mov	r0, r2
 8000dcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd0:	1b64      	subs	r4, r4, r5
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	b11e      	cbz	r6, 8000dde <__udivmoddi4+0x9a>
 8000dd6:	40dc      	lsrs	r4, r3
 8000dd8:	2300      	movs	r3, #0
 8000dda:	e9c6 4300 	strd	r4, r3, [r6]
 8000dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0xb4>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	f000 80fc 	beq.w	8000fe4 <__udivmoddi4+0x2a0>
 8000dec:	2100      	movs	r1, #0
 8000dee:	e9c6 0500 	strd	r0, r5, [r6]
 8000df2:	4608      	mov	r0, r1
 8000df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df8:	fab3 f183 	clz	r1, r3
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d14c      	bne.n	8000e9a <__udivmoddi4+0x156>
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	f0c0 80f2 	bcc.w	8000fea <__udivmoddi4+0x2a6>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f240 80ef 	bls.w	8000fea <__udivmoddi4+0x2a6>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	d0e5      	beq.n	8000dde <__udivmoddi4+0x9a>
 8000e12:	e9c6 4700 	strd	r4, r7, [r6]
 8000e16:	e7e2      	b.n	8000dde <__udivmoddi4+0x9a>
 8000e18:	b902      	cbnz	r2, 8000e1c <__udivmoddi4+0xd8>
 8000e1a:	deff      	udf	#255	; 0xff
 8000e1c:	fab2 f382 	clz	r3, r2
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 809f 	bne.w	8000f64 <__udivmoddi4+0x220>
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e2c:	fa1f f78c 	uxth.w	r7, ip
 8000e30:	2101      	movs	r1, #1
 8000e32:	fbb2 f5fe 	udiv	r5, r2, lr
 8000e36:	fb0e 2015 	mls	r0, lr, r5, r2
 8000e3a:	0c22      	lsrs	r2, r4, #16
 8000e3c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e40:	fb07 f005 	mul.w	r0, r7, r5
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d90f      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	bf2c      	ite	cs
 8000e52:	f04f 0901 	movcs.w	r9, #1
 8000e56:	f04f 0900 	movcc.w	r9, #0
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d903      	bls.n	8000e66 <__udivmoddi4+0x122>
 8000e5e:	f1b9 0f00 	cmp.w	r9, #0
 8000e62:	f000 80ce 	beq.w	8001002 <__udivmoddi4+0x2be>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e70:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e74:	fb00 f707 	mul.w	r7, r0, r7
 8000e78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e7c:	42a7      	cmp	r7, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	42a7      	cmp	r7, r4
 8000e8c:	f200 80b3 	bhi.w	8000ff6 <__udivmoddi4+0x2b2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	1be4      	subs	r4, r4, r7
 8000e94:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e98:	e79c      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000e9a:	f1c1 0420 	rsb	r4, r1, #32
 8000e9e:	408b      	lsls	r3, r1
 8000ea0:	fa05 fc01 	lsl.w	ip, r5, r1
 8000ea4:	fa22 f704 	lsr.w	r7, r2, r4
 8000ea8:	40e5      	lsrs	r5, r4
 8000eaa:	408a      	lsls	r2, r1
 8000eac:	431f      	orrs	r7, r3
 8000eae:	fa20 f304 	lsr.w	r3, r0, r4
 8000eb2:	4088      	lsls	r0, r1
 8000eb4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec4:	fbb5 fef8 	udiv	lr, r5, r8
 8000ec8:	fb08 551e 	mls	r5, r8, lr, r5
 8000ecc:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ed0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ed4:	45a9      	cmp	r9, r5
 8000ed6:	d90e      	bls.n	8000ef6 <__udivmoddi4+0x1b2>
 8000ed8:	197d      	adds	r5, r7, r5
 8000eda:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000ede:	bf2c      	ite	cs
 8000ee0:	f04f 0b01 	movcs.w	fp, #1
 8000ee4:	f04f 0b00 	movcc.w	fp, #0
 8000ee8:	45a9      	cmp	r9, r5
 8000eea:	d903      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000eec:	f1bb 0f00 	cmp.w	fp, #0
 8000ef0:	f000 808d 	beq.w	800100e <__udivmoddi4+0x2ca>
 8000ef4:	46d6      	mov	lr, sl
 8000ef6:	eba5 0509 	sub.w	r5, r5, r9
 8000efa:	fa1f f983 	uxth.w	r9, r3
 8000efe:	fbb5 f3f8 	udiv	r3, r5, r8
 8000f02:	fb08 5513 	mls	r5, r8, r3, r5
 8000f06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000f0e:	45ac      	cmp	ip, r5
 8000f10:	d906      	bls.n	8000f20 <__udivmoddi4+0x1dc>
 8000f12:	197d      	adds	r5, r7, r5
 8000f14:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x1da>
 8000f1a:	45ac      	cmp	ip, r5
 8000f1c:	d87e      	bhi.n	800101c <__udivmoddi4+0x2d8>
 8000f1e:	4643      	mov	r3, r8
 8000f20:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f24:	eba5 050c 	sub.w	r5, r5, ip
 8000f28:	fba3 9802 	umull	r9, r8, r3, r2
 8000f2c:	4545      	cmp	r5, r8
 8000f2e:	46ce      	mov	lr, r9
 8000f30:	46c4      	mov	ip, r8
 8000f32:	d302      	bcc.n	8000f3a <__udivmoddi4+0x1f6>
 8000f34:	d106      	bne.n	8000f44 <__udivmoddi4+0x200>
 8000f36:	4548      	cmp	r0, r9
 8000f38:	d204      	bcs.n	8000f44 <__udivmoddi4+0x200>
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f40:	eb68 0c07 	sbc.w	ip, r8, r7
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d06f      	beq.n	8001028 <__udivmoddi4+0x2e4>
 8000f48:	ebb0 020e 	subs.w	r2, r0, lr
 8000f4c:	eb65 050c 	sbc.w	r5, r5, ip
 8000f50:	40ca      	lsrs	r2, r1
 8000f52:	fa05 f404 	lsl.w	r4, r5, r4
 8000f56:	40cd      	lsrs	r5, r1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	4314      	orrs	r4, r2
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e9c6 4500 	strd	r4, r5, [r6]
 8000f62:	e73c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000f64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f68:	f1c3 0220 	rsb	r2, r3, #32
 8000f6c:	4099      	lsls	r1, r3
 8000f6e:	409c      	lsls	r4, r3
 8000f70:	40d5      	lsrs	r5, r2
 8000f72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f76:	fa20 f202 	lsr.w	r2, r0, r2
 8000f7a:	fa1f f78c 	uxth.w	r7, ip
 8000f7e:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f82:	430a      	orrs	r2, r1
 8000f84:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f507 	mul.w	r5, r0, r7
 8000f92:	428d      	cmp	r5, r1
 8000f94:	d90e      	bls.n	8000fb4 <__udivmoddi4+0x270>
 8000f96:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f9e:	bf2c      	ite	cs
 8000fa0:	f04f 0901 	movcs.w	r9, #1
 8000fa4:	f04f 0900 	movcc.w	r9, #0
 8000fa8:	428d      	cmp	r5, r1
 8000faa:	d902      	bls.n	8000fb2 <__udivmoddi4+0x26e>
 8000fac:	f1b9 0f00 	cmp.w	r9, #0
 8000fb0:	d031      	beq.n	8001016 <__udivmoddi4+0x2d2>
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	1b49      	subs	r1, r1, r5
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	fbb1 f5fe 	udiv	r5, r1, lr
 8000fbc:	fb0e 1115 	mls	r1, lr, r5, r1
 8000fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc4:	fb05 f107 	mul.w	r1, r5, r7
 8000fc8:	4291      	cmp	r1, r2
 8000fca:	d907      	bls.n	8000fdc <__udivmoddi4+0x298>
 8000fcc:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fd6:	4291      	cmp	r1, r2
 8000fd8:	d823      	bhi.n	8001022 <__udivmoddi4+0x2de>
 8000fda:	4645      	mov	r5, r8
 8000fdc:	1a52      	subs	r2, r2, r1
 8000fde:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fe2:	e726      	b.n	8000e32 <__udivmoddi4+0xee>
 8000fe4:	4631      	mov	r1, r6
 8000fe6:	4630      	mov	r0, r6
 8000fe8:	e6f9      	b.n	8000dde <__udivmoddi4+0x9a>
 8000fea:	1a84      	subs	r4, r0, r2
 8000fec:	eb65 0203 	sbc.w	r2, r5, r3
 8000ff0:	2001      	movs	r0, #1
 8000ff2:	4617      	mov	r7, r2
 8000ff4:	e70b      	b.n	8000e0e <__udivmoddi4+0xca>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e74a      	b.n	8000e92 <__udivmoddi4+0x14e>
 8000ffc:	4464      	add	r4, ip
 8000ffe:	3802      	subs	r0, #2
 8001000:	e6e4      	b.n	8000dcc <__udivmoddi4+0x88>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	e72f      	b.n	8000e68 <__udivmoddi4+0x124>
 8001008:	3902      	subs	r1, #2
 800100a:	4462      	add	r2, ip
 800100c:	e6c9      	b.n	8000da2 <__udivmoddi4+0x5e>
 800100e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001012:	443d      	add	r5, r7
 8001014:	e76f      	b.n	8000ef6 <__udivmoddi4+0x1b2>
 8001016:	3802      	subs	r0, #2
 8001018:	4461      	add	r1, ip
 800101a:	e7cb      	b.n	8000fb4 <__udivmoddi4+0x270>
 800101c:	3b02      	subs	r3, #2
 800101e:	443d      	add	r5, r7
 8001020:	e77e      	b.n	8000f20 <__udivmoddi4+0x1dc>
 8001022:	3d02      	subs	r5, #2
 8001024:	4462      	add	r2, ip
 8001026:	e7d9      	b.n	8000fdc <__udivmoddi4+0x298>
 8001028:	4618      	mov	r0, r3
 800102a:	4631      	mov	r1, r6
 800102c:	e6d7      	b.n	8000dde <__udivmoddi4+0x9a>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 030c 	add.w	r3, r7, #12
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_GPIO_Init+0x80>)
 800104c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <MX_GPIO_Init+0x80>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_GPIO_Init+0x80>)
 800105c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <MX_GPIO_Init+0x80>)
 800106a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <MX_GPIO_Init+0x80>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_GPIO_Init+0x80>)
 800107a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	480b      	ldr	r0, [pc, #44]	; (80010b8 <MX_GPIO_Init+0x84>)
 800108c:	f000 ff74 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001090:	2301      	movs	r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4619      	mov	r1, r3
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MX_GPIO_Init+0x84>)
 80010a8:	f000 fe14 	bl	8001cd4 <HAL_GPIO_Init>

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	44020c00 	.word	0x44020c00
 80010b8:	42020400 	.word	0x42020400

080010bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_I2C1_Init+0x74>)
 80010f8:	f000 ff56 	bl	8001fa8 <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001102:	f000 f9e1 	bl	80014c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C1_Init+0x74>)
 800110a:	f001 fccf 	bl	8002aac <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 f9d8 	bl	80014c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C1_Init+0x74>)
 800111c:	f001 fd11 	bl	8002b42 <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 f9cf 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f0 	.word	0x200001f0
 8001134:	40005400 	.word	0x40005400
 8001138:	00707cbb 	.word	0x00707cbb

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b0cc      	sub	sp, #304	; 0x130
 8001140:	af00      	add	r7, sp, #0
 8001142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001146:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800114a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800115c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001160:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001164:	4618      	mov	r0, r3
 8001166:	f44f 7384 	mov.w	r3, #264	; 0x108
 800116a:	461a      	mov	r2, r3
 800116c:	2100      	movs	r1, #0
 800116e:	f00a f8ff 	bl	800b370 <memset>
  if(i2cHandle->Instance==I2C1)
 8001172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001176:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a33      	ldr	r2, [pc, #204]	; (800124c <HAL_I2C_MspInit+0x110>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d15e      	bne.n	8001242 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001188:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 800118c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800119c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80011a0:	2200      	movs	r2, #0
 80011a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fc90 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80011b6:	f000 f987 	bl	80014c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <HAL_I2C_MspInit+0x114>)
 80011bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011c0:	4a23      	ldr	r2, [pc, #140]	; (8001250 <HAL_I2C_MspInit+0x114>)
 80011c2:	f043 0302 	orr.w	r3, r3, #2
 80011c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <HAL_I2C_MspInit+0x114>)
 80011cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80011d0:	f003 0202 	and.w	r2, r3, #2
 80011d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011d8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80011e2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80011e6:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f0:	2312      	movs	r3, #18
 80011f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001202:	2304      	movs	r3, #4
 8001204:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800120c:	4619      	mov	r1, r3
 800120e:	4811      	ldr	r0, [pc, #68]	; (8001254 <HAL_I2C_MspInit+0x118>)
 8001210:	f000 fd60 	bl	8001cd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_I2C_MspInit+0x114>)
 8001216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800121a:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_I2C_MspInit+0x114>)
 800121c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001220:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001224:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_I2C_MspInit+0x114>)
 8001226:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800122a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800122e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001232:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800123c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001240:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001242:	bf00      	nop
 8001244:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40005400 	.word	0x40005400
 8001250:	44020c00 	.word	0x44020c00
 8001254:	42020400 	.word	0x42020400

08001258 <write_byte>:
#include "lm75a.h"



static int write_byte(uint8_t ip, uint8_t data)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b088      	sub	sp, #32
 800125c:	af04      	add	r7, sp, #16
 800125e:	4603      	mov	r3, r0
 8001260:	460a      	mov	r2, r1
 8001262:	71fb      	strb	r3, [r7, #7]
 8001264:	4613      	mov	r3, r2
 8001266:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, LM75A_SLAVE_ADDRESS, ip, I2C_MEMADD_SIZE_8BIT, &data, 1,  HAL_MAX_DELAY);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	b29a      	uxth	r2, r3
 800126c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	1dbb      	adds	r3, r7, #6
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	2190      	movs	r1, #144	; 0x90
 800127e:	480a      	ldr	r0, [pc, #40]	; (80012a8 <write_byte+0x50>)
 8001280:	f000 ff2e 	bl	80020e0 <HAL_I2C_Mem_Write>
 8001284:	4603      	mov	r3, r0
 8001286:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <write_byte+0x44>
	{
		printf("%s: failed to write register\n", __func__);
 800128e:	4907      	ldr	r1, [pc, #28]	; (80012ac <write_byte+0x54>)
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <write_byte+0x58>)
 8001292:	f00a f849 	bl	800b328 <iprintf>

		return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129a:	e000      	b.n	800129e <write_byte+0x46>
	}

	return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001f0 	.word	0x200001f0
 80012ac:	0800dffc 	.word	0x0800dffc
 80012b0:	0800df68 	.word	0x0800df68

080012b4 <read_word>:

static int read_word(uint8_t ip)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af04      	add	r7, sp, #16
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint8_t bytes[2];
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, LM75A_SLAVE_ADDRESS, ip, I2C_MEMADD_SIZE_8BIT, bytes, 2, HAL_MAX_DELAY);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	2302      	movs	r3, #2
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	2301      	movs	r3, #1
 80012d4:	2190      	movs	r1, #144	; 0x90
 80012d6:	480b      	ldr	r0, [pc, #44]	; (8001304 <read_word+0x50>)
 80012d8:	f001 f816 	bl	8002308 <HAL_I2C_Mem_Read>
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d006      	beq.n	80012f4 <read_word+0x40>
	{
		printf("%s: failed to read register.\n", __func__);
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <read_word+0x54>)
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <read_word+0x58>)
 80012ea:	f00a f81d 	bl	800b328 <iprintf>
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	e003      	b.n	80012fc <read_word+0x48>
	}

	return (bytes[0] << 8) | bytes[1];
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	7b7a      	ldrb	r2, [r7, #13]
 80012fa:	4313      	orrs	r3, r2
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3710      	adds	r7, #16
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200001f0 	.word	0x200001f0
 8001308:	0800e008 	.word	0x0800e008
 800130c:	0800df88 	.word	0x0800df88

08001310 <lm75a_init>:

void lm75a_init()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	write_byte(LM75A_CONFIGURE_REGISTER, 0x00);
 8001314:	2100      	movs	r1, #0
 8001316:	2001      	movs	r0, #1
 8001318:	f7ff ff9e 	bl	8001258 <write_byte>
}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}

08001320 <lm75a_acquire_temperature>:

float lm75a_acquire_temperature(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	int reading = read_word(LM75A_TEMPERATURE_REGISTER) & 0xffff;
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff ffc4 	bl	80012b4 <read_word>
 800132c:	4603      	mov	r3, r0
 800132e:	b29b      	uxth	r3, r3
 8001330:	607b      	str	r3, [r7, #4]

	printf("%s, reading = %x\n", __func__, reading);
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4914      	ldr	r1, [pc, #80]	; (8001388 <lm75a_acquire_temperature+0x68>)
 8001336:	4815      	ldr	r0, [pc, #84]	; (800138c <lm75a_acquire_temperature+0x6c>)
 8001338:	f009 fff6 	bl	800b328 <iprintf>

	reading >>= 5;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	115b      	asrs	r3, r3, #5
 8001340:	607b      	str	r3, [r7, #4]

	float temperature = reading * 0.125;
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff f8fe 	bl	8000544 <__aeabi_i2d>
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001350:	f7ff f962 	bl	8000618 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fc54 	bl	8000c08 <__aeabi_d2f>
 8001360:	4603      	mov	r3, r0
 8001362:	603b      	str	r3, [r7, #0]

	printf("%s, temperature = %f\n", __func__, temperature);
 8001364:	6838      	ldr	r0, [r7, #0]
 8001366:	f7ff f8ff 	bl	8000568 <__aeabi_f2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4906      	ldr	r1, [pc, #24]	; (8001388 <lm75a_acquire_temperature+0x68>)
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <lm75a_acquire_temperature+0x70>)
 8001372:	f009 ffd9 	bl	800b328 <iprintf>

	return temperature;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	ee07 3a90 	vmov	s15, r3
}
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800e014 	.word	0x0800e014
 800138c:	0800dfa8 	.word	0x0800dfa8
 8001390:	0800dfbc 	.word	0x0800dfbc

08001394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 fb17 	bl	80019cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f83b 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f7ff fe47 	bl	8001034 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80013a6:	f000 f894 	bl	80014d2 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 80013aa:	f000 fa0b 	bl	80017c4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80013ae:	f7ff fe85 	bl	80010bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lm75a_init();
 80013b2:	f7ff ffad 	bl	8001310 <lm75a_init>

  float temperature;
  char message[] = "Hello, world!\n";
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <main+0x74>)
 80013b8:	1d3c      	adds	r4, r7, #4
 80013ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013bc:	c407      	stmia	r4!, {r0, r1, r2}
 80013be:	8023      	strh	r3, [r4, #0]
 80013c0:	3402      	adds	r4, #2
 80013c2:	0c1b      	lsrs	r3, r3, #16
 80013c4:	7023      	strb	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temperature = lm75a_acquire_temperature();
 80013c6:	f7ff ffab 	bl	8001320 <lm75a_acquire_temperature>
 80013ca:	ed87 0a05 	vstr	s0, [r7, #20]

	  sprintf(message, "%s, temperature = %.1f\n", __func__, temperature);
 80013ce:	6978      	ldr	r0, [r7, #20]
 80013d0:	f7ff f8ca 	bl	8000568 <__aeabi_f2d>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	1d38      	adds	r0, r7, #4
 80013da:	e9cd 2300 	strd	r2, r3, [sp]
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <main+0x78>)
 80013e0:	490b      	ldr	r1, [pc, #44]	; (8001410 <main+0x7c>)
 80013e2:	f009 f837 	bl	800a454 <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7fe ff51 	bl	8000290 <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	1d39      	adds	r1, r7, #4
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013f8:	4806      	ldr	r0, [pc, #24]	; (8001414 <main+0x80>)
 80013fa:	f007 fc0b 	bl	8008c14 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80013fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001402:	f000 fb5f 	bl	8001ac4 <HAL_Delay>
	  temperature = lm75a_acquire_temperature();
 8001406:	e7de      	b.n	80013c6 <main+0x32>
 8001408:	0800dfec 	.word	0x0800dfec
 800140c:	0800e030 	.word	0x0800e030
 8001410:	0800dfd4 	.word	0x0800dfd4
 8001414:	20000248 	.word	0x20000248

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b09c      	sub	sp, #112	; 0x70
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2250      	movs	r2, #80	; 0x50
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f009 ffa2 	bl	800b370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 0308 	add.w	r3, r7, #8
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <SystemClock_Config+0xac>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xac>)
 8001444:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001448:	6113      	str	r3, [r2, #16]
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xac>)
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001456:	bf00      	nop
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <SystemClock_Config+0xac>)
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b08      	cmp	r3, #8
 8001462:	d1f9      	bne.n	8001458 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800146c:	2308      	movs	r3, #8
 800146e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2340      	movs	r3, #64	; 0x40
 8001472:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fbad 	bl	8002bdc <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001488:	f000 f81e 	bl	80014c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	231f      	movs	r3, #31
 800148e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f001 ffce 	bl	800344c <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014b6:	f000 f807 	bl	80014c8 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3770      	adds	r7, #112	; 0x70
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	44020800 	.word	0x44020800

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
}
 80014ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <Error_Handler+0x8>

080014d2 <MX_MEMORYMAP_Init>:

/* USER CODE END 0 */

/* MEMORYMAP init function */
void MX_MEMORYMAP_Init(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <NMI_Handler+0x4>

080014f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <HardFault_Handler+0x4>

080014fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <BusFault_Handler+0x4>

08001506 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <UsageFault_Handler+0x4>

0800150c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 faa3 	bl	8001a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_kill>:

int _kill(int pid, int sig)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800155c:	f009 ff14 	bl	800b388 <__errno>
 8001560:	4603      	mov	r3, r0
 8001562:	2216      	movs	r2, #22
 8001564:	601a      	str	r2, [r3, #0]
  return -1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_exit>:

void _exit (int status)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800157a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f7ff ffe7 	bl	8001552 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001584:	e7fe      	b.n	8001584 <_exit+0x12>

08001586 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
 8001596:	e00a      	b.n	80015ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001598:	f3af 8000 	nop.w
 800159c:	4601      	mov	r1, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	60ba      	str	r2, [r7, #8]
 80015a4:	b2ca      	uxtb	r2, r1
 80015a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	3301      	adds	r3, #1
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dbf0      	blt.n	8001598 <_read+0x12>
  }

  return len;
 80015b6:	687b      	ldr	r3, [r7, #4]
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3718      	adds	r7, #24
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	e009      	b.n	80015e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf1      	blt.n	80015d2 <_write+0x12>
  }
  return len;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_close>:

int _close(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001620:	605a      	str	r2, [r3, #4]
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_isatty>:

int _isatty(int file)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f009 fe7a 	bl	800b388 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	; (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200a0000 	.word	0x200a0000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	20000244 	.word	0x20000244
 80016c8:	20000430 	.word	0x20000430

080016cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <SystemInit+0xdc>)
 80016d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d8:	4a33      	ldr	r2, [pc, #204]	; (80017a8 <SystemInit+0xdc>)
 80016da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80016e2:	4b32      	ldr	r3, [pc, #200]	; (80017ac <SystemInit+0xe0>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80016e8:	4b30      	ldr	r3, [pc, #192]	; (80017ac <SystemInit+0xe0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <SystemInit+0xe0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <SystemInit+0xe0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	492c      	ldr	r1, [pc, #176]	; (80017ac <SystemInit+0xe0>)
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <SystemInit+0xe4>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001700:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <SystemInit+0xe0>)
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <SystemInit+0xe0>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <SystemInit+0xe0>)
 800170e:	2200      	movs	r2, #0
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001712:	4b26      	ldr	r3, [pc, #152]	; (80017ac <SystemInit+0xe0>)
 8001714:	4a27      	ldr	r2, [pc, #156]	; (80017b4 <SystemInit+0xe8>)
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <SystemInit+0xe0>)
 800171a:	2200      	movs	r2, #0
 800171c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800171e:	4b23      	ldr	r3, [pc, #140]	; (80017ac <SystemInit+0xe0>)
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <SystemInit+0xe8>)
 8001722:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001724:	4b21      	ldr	r3, [pc, #132]	; (80017ac <SystemInit+0xe0>)
 8001726:	2200      	movs	r2, #0
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <SystemInit+0xe0>)
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <SystemInit+0xe8>)
 800172e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001730:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <SystemInit+0xe0>)
 8001732:	2200      	movs	r2, #0
 8001734:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <SystemInit+0xe0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <SystemInit+0xe0>)
 800173c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001740:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <SystemInit+0xe0>)
 8001744:	2200      	movs	r2, #0
 8001746:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <SystemInit+0xdc>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001750:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <SystemInit+0xec>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8001758:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8001760:	d003      	beq.n	800176a <SystemInit+0x9e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001768:	d117      	bne.n	800179a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <SystemInit+0xec>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <SystemInit+0xec>)
 8001778:	4a10      	ldr	r2, [pc, #64]	; (80017bc <SystemInit+0xf0>)
 800177a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <SystemInit+0xec>)
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <SystemInit+0xf4>)
 8001780:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <SystemInit+0xec>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a0c      	ldr	r2, [pc, #48]	; (80017b8 <SystemInit+0xec>)
 8001788:	f043 0302 	orr.w	r3, r3, #2
 800178c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800178e:	4b0a      	ldr	r3, [pc, #40]	; (80017b8 <SystemInit+0xec>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <SystemInit+0xec>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	61d3      	str	r3, [r2, #28]
  }
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00
 80017ac:	44020c00 	.word	0x44020c00
 80017b0:	eae2eae3 	.word	0xeae2eae3
 80017b4:	01010280 	.word	0x01010280
 80017b8:	40022000 	.word	0x40022000
 80017bc:	08192a3b 	.word	0x08192a3b
 80017c0:	4c5d6e7f 	.word	0x4c5d6e7f

080017c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c8:	4b22      	ldr	r3, [pc, #136]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017ca:	4a23      	ldr	r2, [pc, #140]	; (8001858 <MX_USART3_UART_Init+0x94>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017ce:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_USART3_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001800:	4b14      	ldr	r3, [pc, #80]	; (8001854 <MX_USART3_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <MX_USART3_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <MX_USART3_UART_Init+0x90>)
 800180e:	f007 f9b1 	bl	8008b74 <HAL_UART_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001818:	f7ff fe56 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800181c:	2100      	movs	r1, #0
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_USART3_UART_Init+0x90>)
 8001820:	f007 fed6 	bl	80095d0 <HAL_UARTEx_SetTxFifoThreshold>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800182a:	f7ff fe4d 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182e:	2100      	movs	r1, #0
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <MX_USART3_UART_Init+0x90>)
 8001832:	f007 ff0b 	bl	800964c <HAL_UARTEx_SetRxFifoThreshold>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800183c:	f7ff fe44 	bl	80014c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_USART3_UART_Init+0x90>)
 8001842:	f007 fe8c 	bl	800955e <HAL_UARTEx_DisableFifoMode>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800184c:	f7ff fe3c 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000248 	.word	0x20000248
 8001858:	40004800 	.word	0x40004800

0800185c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0cc      	sub	sp, #304	; 0x130
 8001860:	af00      	add	r7, sp, #0
 8001862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001866:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800186a:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001880:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001884:	4618      	mov	r0, r3
 8001886:	f44f 7384 	mov.w	r3, #264	; 0x108
 800188a:	461a      	mov	r2, r3
 800188c:	2100      	movs	r1, #0
 800188e:	f009 fd6f 	bl	800b370 <memset>
  if(uartHandle->Instance==USART3)
 8001892:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001896:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a33      	ldr	r2, [pc, #204]	; (800196c <HAL_UART_MspInit+0x110>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d15d      	bne.n	8001960 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018a8:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 80018ac:	f04f 0204 	mov.w	r2, #4
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018bc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80018c0:	2200      	movs	r2, #0
 80018c2:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 f901 	bl	8003ad0 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 80018d4:	f7ff fdf8 	bl	80014c8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <HAL_UART_MspInit+0x114>)
 80018da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018de:	4a24      	ldr	r2, [pc, #144]	; (8001970 <HAL_UART_MspInit+0x114>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_UART_MspInit+0x114>)
 80018ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018ee:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 80018f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80018f6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001900:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001904:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001906:	4b1a      	ldr	r3, [pc, #104]	; (8001970 <HAL_UART_MspInit+0x114>)
 8001908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_UART_MspInit+0x114>)
 800190e:	f043 0308 	orr.w	r3, r3, #8
 8001912:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_UART_MspInit+0x114>)
 8001918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800191c:	f003 0208 	and.w	r2, r3, #8
 8001920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001924:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800192e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001932:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001938:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001948:	2300      	movs	r3, #0
 800194a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800194e:	2307      	movs	r3, #7
 8001950:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001954:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <HAL_UART_MspInit+0x118>)
 800195c:	f000 f9ba 	bl	8001cd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001960:	bf00      	nop
 8001962:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40004800 	.word	0x40004800
 8001970:	44020c00 	.word	0x44020c00
 8001974:	42020c00 	.word	0x42020c00

08001978 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800197a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800197c:	f7ff fea6 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001980:	480c      	ldr	r0, [pc, #48]	; (80019b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001982:	490d      	ldr	r1, [pc, #52]	; (80019b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001984:	4a0d      	ldr	r2, [pc, #52]	; (80019bc <LoopForever+0xe>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001998:	4c0a      	ldr	r4, [pc, #40]	; (80019c4 <LoopForever+0x16>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019a6:	f009 fcf5 	bl	800b394 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019aa:	f7ff fcf3 	bl	8001394 <main>

080019ae <LoopForever>:

LoopForever:
    b LoopForever
 80019ae:	e7fe      	b.n	80019ae <LoopForever>
  ldr   r0, =_estack
 80019b0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80019b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019b8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019bc:	0800e4b0 	.word	0x0800e4b0
  ldr r2, =_sbss
 80019c0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019c4:	2000042c 	.word	0x2000042c

080019c8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019c8:	e7fe      	b.n	80019c8 <ADC1_IRQHandler>
	...

080019cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f94d 	bl	8001c70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80019d6:	f001 fef1 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_Init+0x40>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_Init+0x44>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ec:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_Init+0x48>)
 80019ee:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f0:	200f      	movs	r0, #15
 80019f2:	f000 f811 	bl	8001a18 <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e002      	b.n	8001a06 <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a00:	f7ff fd6e 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	44020c00 	.word	0x44020c00
 8001a10:	0800e038 	.word	0x0800e038
 8001a14:	20000000 	.word	0x20000000

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_InitTick+0x60>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e021      	b.n	8001a70 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <HAL_InitTick+0x64>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_InitTick+0x60>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	4619      	mov	r1, r3
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f939 	bl	8001cba <HAL_SYSTICK_Config>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00e      	b.n	8001a70 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0f      	cmp	r3, #15
 8001a56:	d80a      	bhi.n	8001a6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	2200      	movs	r2, #0
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	f000 f911 	bl	8001c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a64:	4a06      	ldr	r2, [pc, #24]	; (8001a80 <HAL_InitTick+0x68>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000004 	.word	0x20000004

08001a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x20>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4413      	add	r3, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_IncTick+0x24>)
 8001a96:	6013      	str	r3, [r2, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	200002dc 	.word	0x200002dc

08001aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetTick+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	200002dc 	.word	0x200002dc

08001ac4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff ffee 	bl	8001aac <HAL_GetTick>
 8001ad0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001adc:	d005      	beq.n	8001aea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_Delay+0x44>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aea:	bf00      	nop
 8001aec:	f7ff ffde 	bl	8001aac <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d8f7      	bhi.n	8001aec <HAL_Delay+0x28>
  {
  }
}
 8001afc:	bf00      	nop
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000008 	.word	0x20000008

08001b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b3e:	4a04      	ldr	r2, [pc, #16]	; (8001b50 <__NVIC_SetPriorityGrouping+0x44>)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	60d3      	str	r3, [r2, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <__NVIC_GetPriorityGrouping+0x18>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	0a1b      	lsrs	r3, r3, #8
 8001b5e:	f003 0307 	and.w	r3, r3, #7
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c3c:	d301      	bcc.n	8001c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e00f      	b.n	8001c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c42:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <SysTick_Config+0x40>)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c50:	f7ff ff8e 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <SysTick_Config+0x40>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <SysTick_Config+0x40>)
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	e000e010 	.word	0xe000e010

08001c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff47 	bl	8001b0c <__NVIC_SetPriorityGrouping>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b086      	sub	sp, #24
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff5e 	bl	8001b54 <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ffb2 	bl	8001c2c <SysTick_Config>
 8001cc8:	4603      	mov	r3, r0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
	...

08001cd4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b087      	sub	sp, #28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001ce2:	e136      	b.n	8001f52 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 8128 	beq.w	8001f4c <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x38>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b12      	cmp	r3, #18
 8001d0a:	d125      	bne.n	8001d58 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	08da      	lsrs	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3208      	adds	r2, #8
 8001d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d18:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d00b      	beq.n	8001dac <HAL_GPIO_Init+0xd8>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d007      	beq.n	8001dac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d130      	bne.n	8001e0e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	2201      	movs	r2, #1
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 0201 	and.w	r2, r3, #1
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	697a      	ldr	r2, [r7, #20]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d07c      	beq.n	8001f4c <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e52:	4a47      	ldr	r2, [pc, #284]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3318      	adds	r3, #24
 8001e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5e:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	4013      	ands	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	0a9a      	lsrs	r2, r3, #10
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	; (8001f74 <HAL_GPIO_Init+0x2a0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	00d2      	lsls	r2, r2, #3
 8001e86:	4093      	lsls	r3, r2
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e8e:	4938      	ldr	r1, [pc, #224]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3318      	adds	r3, #24
 8001e96:	697a      	ldr	r2, [r7, #20]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e9c:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001eea:	4a21      	ldr	r2, [pc, #132]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001f16:	4a16      	ldr	r2, [pc, #88]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f24:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <HAL_GPIO_Init+0x29c>)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f aec1 	bne.w	8001ce4 <HAL_GPIO_Init+0x10>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	44022000 	.word	0x44022000
 8001f74:	002f7f7f 	.word	0x002f7f7f

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f94:	e002      	b.n	8001f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e08d      	b.n	80020d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff f8b4 	bl	800113c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2224      	movs	r2, #36	; 0x24
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0201 	bic.w	r2, r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	e006      	b.n	8002030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800202e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d108      	bne.n	800204a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	e007      	b.n	800205a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685a      	ldr	r2, [r3, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002058:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800206c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800207c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69d9      	ldr	r1, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	4603      	mov	r3, r0
 80020f0:	817b      	strh	r3, [r7, #10]
 80020f2:	460b      	mov	r3, r1
 80020f4:	813b      	strh	r3, [r7, #8]
 80020f6:	4613      	mov	r3, r2
 80020f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b20      	cmp	r3, #32
 8002104:	f040 80f9 	bne.w	80022fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <HAL_I2C_Mem_Write+0x34>
 800210e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d105      	bne.n	8002120 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0ed      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <HAL_I2C_Mem_Write+0x4e>
 800212a:	2302      	movs	r3, #2
 800212c:	e0e6      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002136:	f7ff fcb9 	bl	8001aac <HAL_GetTick>
 800213a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2319      	movs	r3, #25
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 fac3 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0d1      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2221      	movs	r2, #33	; 0x21
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a3a      	ldr	r2, [r7, #32]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002180:	88f8      	ldrh	r0, [r7, #6]
 8002182:	893a      	ldrh	r2, [r7, #8]
 8002184:	8979      	ldrh	r1, [r7, #10]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	4603      	mov	r3, r0
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f9d3 	bl	800253c <I2C_RequestMemoryWrite>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0a9      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	2bff      	cmp	r3, #255	; 0xff
 80021b0:	d90e      	bls.n	80021d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	22ff      	movs	r2, #255	; 0xff
 80021b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	2300      	movs	r3, #0
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 fc3d 	bl	8002a48 <I2C_TransferConfig>
 80021ce:	e00f      	b.n	80021f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8979      	ldrh	r1, [r7, #10]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fc2c 	bl	8002a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f000 fabc 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e07b      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d034      	beq.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002242:	2b00      	cmp	r3, #0
 8002244:	d130      	bne.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	2200      	movs	r2, #0
 800224e:	2180      	movs	r1, #128	; 0x80
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 fa3f 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e04d      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	2bff      	cmp	r3, #255	; 0xff
 8002268:	d90e      	bls.n	8002288 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002274:	b2da      	uxtb	r2, r3
 8002276:	8979      	ldrh	r1, [r7, #10]
 8002278:	2300      	movs	r3, #0
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f000 fbe1 	bl	8002a48 <I2C_TransferConfig>
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002296:	b2da      	uxtb	r2, r3
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	2300      	movs	r3, #0
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 fbd0 	bl	8002a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d19e      	bne.n	80021f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 faa2 	bl	8002800 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e01a      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2220      	movs	r2, #32
 80022cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <HAL_I2C_Mem_Write+0x224>)
 80022da:	400b      	ands	r3, r1
 80022dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	e000      	b.n	80022fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022fa:	2302      	movs	r3, #2
  }
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	fe00e800 	.word	0xfe00e800

08002308 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b20      	cmp	r3, #32
 800232c:	f040 80fd 	bne.w	800252a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <HAL_I2C_Mem_Read+0x34>
 8002336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0f1      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_I2C_Mem_Read+0x4e>
 8002352:	2302      	movs	r3, #2
 8002354:	e0ea      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800235e:	f7ff fba5 	bl	8001aac <HAL_GetTick>
 8002362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2319      	movs	r3, #25
 800236a:	2201      	movs	r2, #1
 800236c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 f9af 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0d5      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2222      	movs	r2, #34	; 0x22
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a3a      	ldr	r2, [r7, #32]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023a8:	88f8      	ldrh	r0, [r7, #6]
 80023aa:	893a      	ldrh	r2, [r7, #8]
 80023ac:	8979      	ldrh	r1, [r7, #10]
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	4603      	mov	r3, r0
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f913 	bl	80025e4 <I2C_RequestMemoryRead>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0ad      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	2bff      	cmp	r3, #255	; 0xff
 80023d8:	d90e      	bls.n	80023f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	8979      	ldrh	r1, [r7, #10]
 80023e8:	4b52      	ldr	r3, [pc, #328]	; (8002534 <HAL_I2C_Mem_Read+0x22c>)
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 fb29 	bl	8002a48 <I2C_TransferConfig>
 80023f6:	e00f      	b.n	8002418 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	b2da      	uxtb	r2, r3
 8002408:	8979      	ldrh	r1, [r7, #10]
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <HAL_I2C_Mem_Read+0x22c>)
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 fb18 	bl	8002a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	2200      	movs	r2, #0
 8002420:	2104      	movs	r1, #4
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f956 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07c      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d034      	beq.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d130      	bne.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f927 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e04d      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002494:	b29b      	uxth	r3, r3
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d90e      	bls.n	80024b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	22ff      	movs	r2, #255	; 0xff
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	8979      	ldrh	r1, [r7, #10]
 80024a8:	2300      	movs	r3, #0
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fac9 	bl	8002a48 <I2C_TransferConfig>
 80024b6:	e00f      	b.n	80024d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	8979      	ldrh	r1, [r7, #10]
 80024ca:	2300      	movs	r3, #0
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fab8 	bl	8002a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d19a      	bne.n	8002418 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f98a 	bl	8002800 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e01a      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2220      	movs	r2, #32
 80024fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_I2C_Mem_Read+0x230>)
 800250a:	400b      	ands	r3, r1
 800250c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e000      	b.n	800252c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800252a:	2302      	movs	r3, #2
  }
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	80002400 	.word	0x80002400
 8002538:	fe00e800 	.word	0xfe00e800

0800253c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	817b      	strh	r3, [r7, #10]
 800254e:	460b      	mov	r3, r1
 8002550:	813b      	strh	r3, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	8979      	ldrh	r1, [r7, #10]
 800255c:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <I2C_RequestMemoryWrite+0xa4>)
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 fa6f 	bl	8002a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	69b9      	ldr	r1, [r7, #24]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8ff 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02c      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002584:	893b      	ldrh	r3, [r7, #8]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
 800258e:	e015      	b.n	80025bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b29b      	uxth	r3, r3
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f8e5 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e012      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025b2:	893b      	ldrh	r3, [r7, #8]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f884 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	80002000 	.word	0x80002000

080025e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	8979      	ldrh	r1, [r7, #10]
 8002604:	4b20      	ldr	r3, [pc, #128]	; (8002688 <I2C_RequestMemoryRead+0xa4>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2300      	movs	r3, #0
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fa1c 	bl	8002a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	69b9      	ldr	r1, [r7, #24]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f8ac 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e02c      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
 8002634:	e015      	b.n	8002662 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002636:	893b      	ldrh	r3, [r7, #8]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	b29b      	uxth	r3, r3
 800263c:	b2da      	uxtb	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	69b9      	ldr	r1, [r7, #24]
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f892 	bl	8002772 <I2C_WaitOnTXISFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e012      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002658:	893b      	ldrh	r3, [r7, #8]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2200      	movs	r2, #0
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 f831 	bl	80026d4 <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	80002000 	.word	0x80002000

0800268c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d103      	bne.n	80026aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2200      	movs	r2, #0
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d007      	beq.n	80026c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	619a      	str	r2, [r3, #24]
  }
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e4:	e031      	b.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ec:	d02d      	beq.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7ff f9dd 	bl	8001aac <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d122      	bne.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	4013      	ands	r3, r2
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	429a      	cmp	r2, r3
 8002712:	bf0c      	ite	eq
 8002714:	2301      	moveq	r3, #1
 8002716:	2300      	movne	r3, #0
 8002718:	b2db      	uxtb	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	429a      	cmp	r2, r3
 8002720:	d113      	bne.n	800274a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00f      	b.n	800276a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699a      	ldr	r2, [r3, #24]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4013      	ands	r3, r2
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	461a      	mov	r2, r3
 8002762:	79fb      	ldrb	r3, [r7, #7]
 8002764:	429a      	cmp	r2, r3
 8002766:	d0be      	beq.n	80026e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800277e:	e033      	b.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f87f 	bl	8002888 <I2C_IsErrorOccurred>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e031      	b.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800279a:	d025      	beq.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800279c:	f7ff f986 	bl	8001aac <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d11a      	bne.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d013      	beq.n	80027e8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d1c4      	bne.n	8002780 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280c:	e02f      	b.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	68b9      	ldr	r1, [r7, #8]
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f000 f838 	bl	8002888 <I2C_IsErrorOccurred>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e02d      	b.n	800287e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002822:	f7ff f943 	bl	8001aac <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d302      	bcc.n	8002838 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d11a      	bne.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b20      	cmp	r3, #32
 8002844:	d013      	beq.n	800286e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f043 0220 	orr.w	r2, r3, #32
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e007      	b.n	800287e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b20      	cmp	r3, #32
 800287a:	d1c8      	bne.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d068      	beq.n	8002986 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2210      	movs	r2, #16
 80028ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028bc:	e049      	b.n	8002952 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c4:	d045      	beq.n	8002952 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f8f1 	bl	8001aac <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_IsErrorOccurred+0x54>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d13a      	bne.n	8002952 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fe:	d121      	bne.n	8002944 <I2C_IsErrorOccurred+0xbc>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002906:	d01d      	beq.n	8002944 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b20      	cmp	r3, #32
 800290c:	d01a      	beq.n	8002944 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800291e:	f7ff f8c5 	bl	8001aac <HAL_GetTick>
 8002922:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002924:	e00e      	b.n	8002944 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002926:	f7ff f8c1 	bl	8001aac <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b19      	cmp	r3, #25
 8002932:	d907      	bls.n	8002944 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f043 0320 	orr.w	r3, r3, #32
 800293a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002942:	e006      	b.n	8002952 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b20      	cmp	r3, #32
 8002950:	d1e9      	bne.n	8002926 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b20      	cmp	r3, #32
 800295e:	d003      	beq.n	8002968 <I2C_IsErrorOccurred+0xe0>
 8002960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0aa      	beq.n	80028be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2220      	movs	r2, #32
 8002976:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01c      	beq.n	8002a36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f7ff fe45 	bl	800268c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <I2C_IsErrorOccurred+0x1bc>)
 8002a0e:	400b      	ands	r3, r1
 8002a10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	fe00e800 	.word	0xfe00e800

08002a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b087      	sub	sp, #28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	460b      	mov	r3, r1
 8002a54:	817b      	strh	r3, [r7, #10]
 8002a56:	4613      	mov	r3, r2
 8002a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5a:	897b      	ldrh	r3, [r7, #10]
 8002a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a60:	7a7b      	ldrb	r3, [r7, #9]
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a68:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
 8002a80:	0d5b      	lsrs	r3, r3, #21
 8002a82:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a86:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <I2C_TransferConfig+0x60>)
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	ea02 0103 	and.w	r1, r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	03ff63ff 	.word	0x03ff63ff

08002aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d138      	bne.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e032      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2224      	movs	r2, #36	; 0x24
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6819      	ldr	r1, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2220      	movs	r2, #32
 8002b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b085      	sub	sp, #20
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
 8002b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b20      	cmp	r3, #32
 8002b56:	d139      	bne.n	8002bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e033      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2224      	movs	r2, #36	; 0x24
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0201 	bic.w	r2, r2, #1
 8002b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
	...

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d102      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f000 bc28 	b.w	8003440 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bf0:	4b94      	ldr	r3, [pc, #592]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	f003 0318 	and.w	r3, r3, #24
 8002bf8:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002bfa:	4b92      	ldr	r3, [pc, #584]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	f003 0303 	and.w	r3, r3, #3
 8002c02:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d05b      	beq.n	8002cc8 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d005      	beq.n	8002c22 <HAL_RCC_OscConfig+0x46>
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	2b18      	cmp	r3, #24
 8002c1a:	d114      	bne.n	8002c46 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d111      	bne.n	8002c46 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f000 bc08 	b.w	8003440 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	4981      	ldr	r1, [pc, #516]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002c44:	e040      	b.n	8002cc8 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d023      	beq.n	8002c96 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c4e:	4b7d      	ldr	r3, [pc, #500]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a7c      	ldr	r2, [pc, #496]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe ff27 	bl	8001aac <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002c62:	f7fe ff23 	bl	8001aac <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e3e5      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002c74:	4b73      	ldr	r3, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002c80:	4b70      	ldr	r3, [pc, #448]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	496d      	ldr	r1, [pc, #436]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	618b      	str	r3, [r1, #24]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c96:	4b6b      	ldr	r3, [pc, #428]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6a      	ldr	r2, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe ff03 	bl	8001aac <HAL_GetTick>
 8002ca6:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002caa:	f7fe feff 	bl	8001aac <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e3c1      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002cbc:	4b61      	ldr	r3, [pc, #388]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f0      	bne.n	8002caa <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a0 	beq.w	8002e16 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d005      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x10c>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b18      	cmp	r3, #24
 8002ce0:	d109      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 8092 	bne.w	8002e16 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e3a4      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfe:	d106      	bne.n	8002d0e <HAL_RCC_OscConfig+0x132>
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a4f      	ldr	r2, [pc, #316]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	e058      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d112      	bne.n	8002d3c <HAL_RCC_OscConfig+0x160>
 8002d16:	4b4b      	ldr	r3, [pc, #300]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4a      	ldr	r2, [pc, #296]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b48      	ldr	r3, [pc, #288]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a47      	ldr	r2, [pc, #284]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a44      	ldr	r2, [pc, #272]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e041      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d44:	d112      	bne.n	8002d6c <HAL_RCC_OscConfig+0x190>
 8002d46:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a3e      	ldr	r2, [pc, #248]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b3c      	ldr	r3, [pc, #240]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3b      	ldr	r2, [pc, #236]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a38      	ldr	r2, [pc, #224]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002d74:	d112      	bne.n	8002d9c <HAL_RCC_OscConfig+0x1c0>
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d80:	6013      	str	r3, [r2, #0]
 8002d82:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2c      	ldr	r2, [pc, #176]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e011      	b.n	8002dc0 <HAL_RCC_OscConfig+0x1e4>
 8002d9c:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a25      	ldr	r2, [pc, #148]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	4b23      	ldr	r3, [pc, #140]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002dba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7fe fe70 	bl	8001aac <HAL_GetTick>
 8002dcc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fe6c 	bl	8001aac <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e32e      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x1f4>
 8002dee:	e012      	b.n	8002e16 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df0:	f7fe fe5c 	bl	8001aac <HAL_GetTick>
 8002df4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002df8:	f7fe fe58 	bl	8001aac <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b64      	cmp	r3, #100	; 0x64
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e31a      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_RCC_OscConfig+0x268>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 809a 	beq.w	8002f58 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_RCC_OscConfig+0x25a>
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	d149      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d146      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e2fe      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
 8002e42:	bf00      	nop
 8002e44:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11c      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002e4e:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0218 	and.w	r2, r3, #24
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d014      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002e5e:	4b96      	ldr	r3, [pc, #600]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f023 0218 	bic.w	r2, r3, #24
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	4993      	ldr	r1, [pc, #588]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002e70:	f000 fdd0 	bl	8003a14 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e74:	4b91      	ldr	r3, [pc, #580]	; (80030bc <HAL_RCC_OscConfig+0x4e0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fdcd 	bl	8001a18 <HAL_InitTick>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e2db      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fe10 	bl	8001aac <HAL_GetTick>
 8002e8c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002e90:	f7fe fe0c 	bl	8001aac <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e2ce      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ea2:	4b85      	ldr	r3, [pc, #532]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002eae:	4b82      	ldr	r3, [pc, #520]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	497e      	ldr	r1, [pc, #504]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002ec2:	e049      	b.n	8002f58 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d02c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002ecc:	4b7a      	ldr	r3, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 0218 	bic.w	r2, r3, #24
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	4977      	ldr	r1, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002ede:	4b76      	ldr	r3, [pc, #472]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a75      	ldr	r2, [pc, #468]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eea:	f7fe fddf 	bl	8001aac <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ef0:	e008      	b.n	8002f04 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ef2:	f7fe fddb 	bl	8001aac <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e29d      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f04:	4b6c      	ldr	r3, [pc, #432]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d0f0      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002f10:	4b69      	ldr	r3, [pc, #420]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	4966      	ldr	r1, [pc, #408]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	610b      	str	r3, [r1, #16]
 8002f24:	e018      	b.n	8002f58 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f26:	4b64      	ldr	r3, [pc, #400]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a63      	ldr	r2, [pc, #396]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fdbb 	bl	8001aac <HAL_GetTick>
 8002f36:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f3a:	f7fe fdb7 	bl	8001aac <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e279      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f4c:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1f0      	bne.n	8002f3a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d03c      	beq.n	8002fde <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d01c      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f72:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fd96 	bl	8001aac <HAL_GetTick>
 8002f80:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fd92 	bl	8001aac <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e254      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8002f96:	4b48      	ldr	r3, [pc, #288]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0ef      	beq.n	8002f84 <HAL_RCC_OscConfig+0x3a8>
 8002fa4:	e01b      	b.n	8002fde <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fa8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fac:	4a42      	ldr	r2, [pc, #264]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002fb2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fd79 	bl	8001aac <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fbc:	e008      	b.n	8002fd0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002fbe:	f7fe fd75 	bl	8001aac <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e237      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8002fd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ef      	bne.n	8002fbe <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 80d2 	beq.w	8003190 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8002fec:	4b34      	ldr	r3, [pc, #208]	; (80030c0 <HAL_RCC_OscConfig+0x4e4>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d118      	bne.n	800302a <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8002ff8:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCC_OscConfig+0x4e4>)
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	4a30      	ldr	r2, [pc, #192]	; (80030c0 <HAL_RCC_OscConfig+0x4e4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003004:	f7fe fd52 	bl	8001aac <HAL_GetTick>
 8003008:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800300c:	f7fe fd4e 	bl	8001aac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e210      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_OscConfig+0x4e4>)
 8003020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0f0      	beq.n	800300c <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d108      	bne.n	8003044 <HAL_RCC_OscConfig+0x468>
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003038:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003042:	e074      	b.n	800312e <HAL_RCC_OscConfig+0x552>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_RCC_OscConfig+0x4a2>
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800304e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800305e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003062:	4a15      	ldr	r2, [pc, #84]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003074:	f023 0304 	bic.w	r3, r3, #4
 8003078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800307c:	e057      	b.n	800312e <HAL_RCC_OscConfig+0x552>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b05      	cmp	r3, #5
 8003084:	d11e      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4e8>
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800308c:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800308e:	f043 0304 	orr.w	r3, r3, #4
 8003092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 8003098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800309c:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 800309e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030a6:	4b04      	ldr	r3, [pc, #16]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 80030a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030ac:	4a02      	ldr	r2, [pc, #8]	; (80030b8 <HAL_RCC_OscConfig+0x4dc>)
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x552>
 80030b8:	44020c00 	.word	0x44020c00
 80030bc:	20000004 	.word	0x20000004
 80030c0:	44020800 	.word	0x44020800
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b85      	cmp	r3, #133	; 0x85
 80030ca:	d118      	bne.n	80030fe <HAL_RCC_OscConfig+0x522>
 80030cc:	4ba2      	ldr	r3, [pc, #648]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d2:	4aa1      	ldr	r2, [pc, #644]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030dc:	4b9e      	ldr	r3, [pc, #632]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e2:	4a9d      	ldr	r2, [pc, #628]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ec:	4b9a      	ldr	r3, [pc, #616]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030f2:	4a99      	ldr	r2, [pc, #612]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80030f4:	f043 0301 	orr.w	r3, r3, #1
 80030f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030fc:	e017      	b.n	800312e <HAL_RCC_OscConfig+0x552>
 80030fe:	4b96      	ldr	r3, [pc, #600]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003104:	4a94      	ldr	r2, [pc, #592]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003106:	f023 0301 	bic.w	r3, r3, #1
 800310a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800310e:	4b92      	ldr	r3, [pc, #584]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003114:	4a90      	ldr	r2, [pc, #576]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800311e:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003124:	4a8c      	ldr	r2, [pc, #560]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fcb9 	bl	8001aac <HAL_GetTick>
 800313a:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fcb5 	bl	8001aac <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e175      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003154:	4b80      	ldr	r3, [pc, #512]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0ed      	beq.n	800313e <HAL_RCC_OscConfig+0x562>
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe fca2 	bl	8001aac <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800316a:	e00a      	b.n	8003182 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316c:	f7fe fc9e 	bl	8001aac <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e15e      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003182:	4b75      	ldr	r3, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ed      	bne.n	800316c <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d036      	beq.n	800320a <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d019      	beq.n	80031d8 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80031aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fc7c 	bl	8001aac <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80031b8:	f7fe fc78 	bl	8001aac <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e13a      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80031ca:	4b63      	ldr	r3, [pc, #396]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x5dc>
 80031d6:	e018      	b.n	800320a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031d8:	4b5f      	ldr	r3, [pc, #380]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5e      	ldr	r2, [pc, #376]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80031de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fc62 	bl	8001aac <HAL_GetTick>
 80031e8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe fc5e 	bl	8001aac <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e120      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80031fe:	4b56      	ldr	r3, [pc, #344]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	f000 8115 	beq.w	800343e <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b18      	cmp	r3, #24
 8003218:	f000 80af 	beq.w	800337a <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	2b02      	cmp	r3, #2
 8003222:	f040 8086 	bne.w	8003332 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003226:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7fe fc3b 	bl	8001aac <HAL_GetTick>
 8003236:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800323a:	f7fe fc37 	bl	8001aac <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0f9      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800324c:	4b42      	ldr	r3, [pc, #264]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003258:	4b3f      	ldr	r3, [pc, #252]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003260:	f023 0303 	bic.w	r3, r3, #3
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800326c:	0212      	lsls	r2, r2, #8
 800326e:	430a      	orrs	r2, r1
 8003270:	4939      	ldr	r1, [pc, #228]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003272:	4313      	orrs	r3, r2
 8003274:	628b      	str	r3, [r1, #40]	; 0x28
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	3b01      	subs	r3, #1
 800327c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003284:	3b01      	subs	r3, #1
 8003286:	025b      	lsls	r3, r3, #9
 8003288:	b29b      	uxth	r3, r3
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003290:	3b01      	subs	r3, #1
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003298:	431a      	orrs	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	3b01      	subs	r3, #1
 80032a0:	061b      	lsls	r3, r3, #24
 80032a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80032a6:	492c      	ldr	r1, [pc, #176]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80032ac:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032b2:	f023 0310 	bic.w	r3, r3, #16
 80032b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	4a26      	ldr	r2, [pc, #152]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80032c2:	4b25      	ldr	r3, [pc, #148]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	4a24      	ldr	r2, [pc, #144]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032c8:	f043 0310 	orr.w	r3, r3, #16
 80032cc:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80032ce:	4b22      	ldr	r3, [pc, #136]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	f023 020c 	bic.w	r2, r3, #12
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	491f      	ldr	r1, [pc, #124]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	f023 0220 	bic.w	r2, r3, #32
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ec:	491a      	ldr	r1, [pc, #104]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	4a18      	ldr	r2, [pc, #96]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 80032f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032fc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a15      	ldr	r2, [pc, #84]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003304:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330a:	f7fe fbcf 	bl	8001aac <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003312:	f7fe fbcb 	bl	8001aac <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e08d      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x736>
 8003330:	e085      	b.n	800343e <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a08      	ldr	r2, [pc, #32]	; (8003358 <HAL_RCC_OscConfig+0x77c>)
 8003338:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800333c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333e:	f7fe fbb5 	bl	8001aac <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8003346:	f7fe fbb1 	bl	8001aac <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d903      	bls.n	800335c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e073      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
 8003358:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003368:	4b37      	ldr	r3, [pc, #220]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	4a36      	ldr	r2, [pc, #216]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800336e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003372:	f023 0303 	bic.w	r3, r3, #3
 8003376:	6293      	str	r3, [r2, #40]	; 0x28
 8003378:	e061      	b.n	800343e <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800337a:	4b33      	ldr	r3, [pc, #204]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003380:	4b31      	ldr	r3, [pc, #196]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 8003382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003384:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	2b01      	cmp	r3, #1
 800338c:	d031      	beq.n	80033f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0203 	and.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003398:	429a      	cmp	r2, r3
 800339a:	d12a      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	0a1b      	lsrs	r3, r3, #8
 80033a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d122      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d11a      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	0a5b      	lsrs	r3, r3, #9
 80033c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d111      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033da:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d108      	bne.n	80033f2 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	0e1b      	lsrs	r3, r3, #24
 80033e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e024      	b.n	8003440 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80033f6:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	08db      	lsrs	r3, r3, #3
 80033fc:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003404:	429a      	cmp	r2, r3
 8003406:	d01a      	beq.n	800343e <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800340e:	f023 0310 	bic.w	r3, r3, #16
 8003412:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe fb4a 	bl	8001aac <HAL_GetTick>
 8003418:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800341a:	bf00      	nop
 800341c:	f7fe fb46 	bl	8001aac <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	4293      	cmp	r3, r2
 8003426:	d0f9      	beq.n	800341c <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	4a06      	ldr	r2, [pc, #24]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8003432:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <HAL_RCC_OscConfig+0x86c>)
 8003438:	f043 0310 	orr.w	r3, r3, #16
 800343c:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	44020c00 	.word	0x44020c00

0800344c <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e19e      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003460:	4b83      	ldr	r3, [pc, #524]	; (8003670 <HAL_RCC_ClockConfig+0x224>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 030f 	and.w	r3, r3, #15
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d910      	bls.n	8003490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCC_ClockConfig+0x224>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 020f 	bic.w	r2, r3, #15
 8003476:	497e      	ldr	r1, [pc, #504]	; (8003670 <HAL_RCC_ClockConfig+0x224>)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347e:	4b7c      	ldr	r3, [pc, #496]	; (8003670 <HAL_RCC_ClockConfig+0x224>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d001      	beq.n	8003490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e186      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d012      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	4b74      	ldr	r3, [pc, #464]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	0a1b      	lsrs	r3, r3, #8
 80034a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d909      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80034ae:	4b71      	ldr	r3, [pc, #452]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	496d      	ldr	r1, [pc, #436]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d012      	beq.n	80034f4 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	4b68      	ldr	r3, [pc, #416]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	091b      	lsrs	r3, r3, #4
 80034d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034dc:	429a      	cmp	r2, r3
 80034de:	d909      	bls.n	80034f4 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80034e0:	4b64      	ldr	r3, [pc, #400]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4961      	ldr	r1, [pc, #388]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d010      	beq.n	8003522 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	4b5b      	ldr	r3, [pc, #364]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350c:	429a      	cmp	r2, r3
 800350e:	d908      	bls.n	8003522 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8003510:	4b58      	ldr	r3, [pc, #352]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	4955      	ldr	r1, [pc, #340]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 800351e:	4313      	orrs	r3, r2
 8003520:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d010      	beq.n	8003550 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	4b50      	ldr	r3, [pc, #320]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	429a      	cmp	r2, r3
 800353c:	d908      	bls.n	8003550 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800353e:	4b4d      	ldr	r3, [pc, #308]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 020f 	bic.w	r2, r3, #15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	494a      	ldr	r1, [pc, #296]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 800354c:	4313      	orrs	r3, r2
 800354e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8093 	beq.w	8003684 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b03      	cmp	r3, #3
 8003564:	d107      	bne.n	8003576 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d121      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e113      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d115      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e107      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003596:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0fb      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0f3      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80035b6:	4b2f      	ldr	r3, [pc, #188]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	492c      	ldr	r1, [pc, #176]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c8:	f7fe fa70 	bl	8001aac <HAL_GetTick>
 80035cc:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fe fa68 	bl	8001aac <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0d7      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 0318 	and.w	r3, r3, #24
 80035f6:	2b18      	cmp	r3, #24
 80035f8:	d1ee      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x18c>
 80035fa:	e043      	b.n	8003684 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b02      	cmp	r3, #2
 8003602:	d112      	bne.n	800362a <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003604:	e00a      	b.n	800361c <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003606:	f7fe fa51 	bl	8001aac <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f241 3288 	movw	r2, #5000	; 0x1388
 8003614:	4293      	cmp	r3, r2
 8003616:	d901      	bls.n	800361c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e0c0      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800361c:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 0318 	and.w	r3, r3, #24
 8003624:	2b10      	cmp	r3, #16
 8003626:	d1ee      	bne.n	8003606 <HAL_RCC_ClockConfig+0x1ba>
 8003628:	e02c      	b.n	8003684 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d122      	bne.n	8003678 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8003632:	e00a      	b.n	800364a <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003634:	f7fe fa3a 	bl	8001aac <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003642:	4293      	cmp	r3, r2
 8003644:	d901      	bls.n	800364a <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e0a9      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x228>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	f003 0318 	and.w	r3, r3, #24
 8003652:	2b08      	cmp	r3, #8
 8003654:	d1ee      	bne.n	8003634 <HAL_RCC_ClockConfig+0x1e8>
 8003656:	e015      	b.n	8003684 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	f7fe fa28 	bl	8001aac <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	f241 3288 	movw	r2, #5000	; 0x1388
 8003666:	4293      	cmp	r3, r2
 8003668:	d906      	bls.n	8003678 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e097      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
 800366e:	bf00      	nop
 8003670:	40022000 	.word	0x40022000
 8003674:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 0318 	and.w	r3, r3, #24
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e9      	bne.n	8003658 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f003 030f 	and.w	r3, r3, #15
 800369c:	429a      	cmp	r2, r3
 800369e:	d208      	bcs.n	80036b2 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80036a0:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f023 020f 	bic.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	493e      	ldr	r1, [pc, #248]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b2:	4b3e      	ldr	r3, [pc, #248]	; (80037ac <HAL_RCC_ClockConfig+0x360>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	683a      	ldr	r2, [r7, #0]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d210      	bcs.n	80036e2 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c0:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCC_ClockConfig+0x360>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f023 020f 	bic.w	r2, r3, #15
 80036c8:	4938      	ldr	r1, [pc, #224]	; (80037ac <HAL_RCC_ClockConfig+0x360>)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_RCC_ClockConfig+0x360>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d001      	beq.n	80036e2 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e05d      	b.n	800379e <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d010      	beq.n	8003710 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d208      	bcs.n	8003710 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80036fe:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4927      	ldr	r1, [pc, #156]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	4b21      	ldr	r3, [pc, #132]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800372a:	429a      	cmp	r2, r3
 800372c:	d209      	bcs.n	8003742 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	491a      	ldr	r1, [pc, #104]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	0a1b      	lsrs	r3, r3, #8
 8003758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375c:	429a      	cmp	r2, r3
 800375e:	d209      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	490e      	ldr	r1, [pc, #56]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003774:	f000 f822 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_ClockConfig+0x35c>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	490b      	ldr	r1, [pc, #44]	; (80037b0 <HAL_RCC_ClockConfig+0x364>)
 8003784:	5ccb      	ldrb	r3, [r1, r3]
 8003786:	fa22 f303 	lsr.w	r3, r2, r3
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <HAL_RCC_ClockConfig+0x368>)
 800378c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <HAL_RCC_ClockConfig+0x36c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f940 	bl	8001a18 <HAL_InitTick>
 8003798:	4603      	mov	r3, r0
 800379a:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 800379c:	7afb      	ldrb	r3, [r7, #11]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	44020c00 	.word	0x44020c00
 80037ac:	40022000 	.word	0x40022000
 80037b0:	0800e038 	.word	0x0800e038
 80037b4:	20000000 	.word	0x20000000
 80037b8:	20000004 	.word	0x20000004

080037bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	b089      	sub	sp, #36	; 0x24
 80037c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80037c2:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	f003 0318 	and.w	r3, r3, #24
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d102      	bne.n	80037d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80037ce:	4b8a      	ldr	r3, [pc, #552]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x23c>)
 80037d0:	61fb      	str	r3, [r7, #28]
 80037d2:	e107      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d4:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0318 	and.w	r3, r3, #24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d112      	bne.n	8003806 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80037e0:	4b84      	ldr	r3, [pc, #528]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80037ec:	4b81      	ldr	r3, [pc, #516]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	4a81      	ldr	r2, [pc, #516]	; (80039fc <HAL_RCC_GetSysClockFreq+0x240>)
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	e0f1      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8003800:	4b7e      	ldr	r3, [pc, #504]	; (80039fc <HAL_RCC_GetSysClockFreq+0x240>)
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	e0ee      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003806:	4b7b      	ldr	r3, [pc, #492]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	f003 0318 	and.w	r3, r3, #24
 800380e:	2b10      	cmp	r3, #16
 8003810:	d102      	bne.n	8003818 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003812:	4b7b      	ldr	r3, [pc, #492]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x244>)
 8003814:	61fb      	str	r3, [r7, #28]
 8003816:	e0e5      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003818:	4b76      	ldr	r3, [pc, #472]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f003 0318 	and.w	r3, r3, #24
 8003820:	2b18      	cmp	r3, #24
 8003822:	f040 80dd 	bne.w	80039e0 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003826:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	f003 0303 	and.w	r3, r3, #3
 800382e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003830:	4b70      	ldr	r3, [pc, #448]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	0a1b      	lsrs	r3, r3, #8
 8003836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800383c:	4b6d      	ldr	r3, [pc, #436]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	091b      	lsrs	r3, r3, #4
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003848:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 800384c:	08db      	lsrs	r3, r3, #3
 800384e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	fb02 f303 	mul.w	r3, r2, r3
 8003858:	ee07 3a90 	vmov	s15, r3
 800385c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003860:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80b7 	beq.w	80039da <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0xbe>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d056      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x16a>
 8003878:	e077      	b.n	800396a <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800387a:	4b5e      	ldr	r3, [pc, #376]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0320 	and.w	r3, r3, #32
 8003882:	2b00      	cmp	r3, #0
 8003884:	d02d      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003886:	4b5b      	ldr	r3, [pc, #364]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	08db      	lsrs	r3, r3, #3
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	4a5a      	ldr	r2, [pc, #360]	; (80039fc <HAL_RCC_GetSysClockFreq+0x240>)
 8003892:	fa22 f303 	lsr.w	r3, r2, r3
 8003896:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	ee07 3a90 	vmov	s15, r3
 800389e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038b8:	ee07 3a90 	vmov	s15, r3
 80038bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80038c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 80038c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80038d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038dc:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80038e0:	e065      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ec:	eddf 6a46 	vldr	s13, [pc, #280]	; 8003a08 <HAL_RCC_GetSysClockFreq+0x24c>
 80038f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f4:	4b3f      	ldr	r3, [pc, #252]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80038f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fc:	ee07 3a90 	vmov	s15, r3
 8003900:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003904:	ed97 6a02 	vldr	s12, [r7, #8]
 8003908:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 800390c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003910:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8003914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003918:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003924:	e043      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003930:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003a0c <HAL_RCC_GetSysClockFreq+0x250>
 8003934:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003938:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800393a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	ee07 3a90 	vmov	s15, r3
 8003944:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003948:	ed97 6a02 	vldr	s12, [r7, #8]
 800394c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 8003950:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003954:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800395c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003964:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003968:	e021      	b.n	80039ae <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003974:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a10 <HAL_RCC_GetSysClockFreq+0x254>
 8003978:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003984:	ee07 3a90 	vmov	s15, r3
 8003988:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800398c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003990:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003a04 <HAL_RCC_GetSysClockFreq+0x248>
 8003994:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003998:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800399c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80039ac:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x238>)
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	0a5b      	lsrs	r3, r3, #9
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	3301      	adds	r3, #1
 80039ba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039c6:	edd7 6a06 	vldr	s13, [r7, #24]
 80039ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039d2:	ee17 3a90 	vmov	r3, s15
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e004      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e001      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_RCC_GetSysClockFreq+0x240>)
 80039e2:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80039e4:	69fb      	ldr	r3, [r7, #28]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3724      	adds	r7, #36	; 0x24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	44020c00 	.word	0x44020c00
 80039f8:	003d0900 	.word	0x003d0900
 80039fc:	03d09000 	.word	0x03d09000
 8003a00:	017d7840 	.word	0x017d7840
 8003a04:	46000000 	.word	0x46000000
 8003a08:	4c742400 	.word	0x4c742400
 8003a0c:	4bbebc20 	.word	0x4bbebc20
 8003a10:	4a742400 	.word	0x4a742400

08003a14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a18:	f7ff fed0 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003a20:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a22:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a26:	4907      	ldr	r1, [pc, #28]	; (8003a44 <HAL_RCC_GetHCLKFreq+0x30>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003a2a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a05      	ldr	r2, [pc, #20]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x34>)
 8003a34:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <HAL_RCC_GetHCLKFreq+0x34>)
 8003a38:	681b      	ldr	r3, [r3, #0]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	44020c00 	.word	0x44020c00
 8003a44:	0800e038 	.word	0x0800e038
 8003a48:	20000000 	.word	0x20000000

08003a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003a50:	f7ff ffe0 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	44020c00 	.word	0x44020c00
 8003a74:	0800e048 	.word	0x0800e048

08003a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003a7c:	f7ff ffca 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a80:	4602      	mov	r2, r0
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4904      	ldr	r1, [pc, #16]	; (8003aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a8e:	5ccb      	ldrb	r3, [r1, r3]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	44020c00 	.word	0x44020c00
 8003aa0:	0800e048 	.word	0x0800e048

08003aa4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003aa8:	f7ff ffb4 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	0b1b      	lsrs	r3, r3, #12
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4904      	ldr	r1, [pc, #16]	; (8003acc <HAL_RCC_GetPCLK3Freq+0x28>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	f003 031f 	and.w	r3, r3, #31
 8003ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	44020c00 	.word	0x44020c00
 8003acc:	0800e048 	.word	0x0800e048

08003ad0 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad4:	b0d8      	sub	sp, #352	; 0x160
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003adc:	2300      	movs	r3, #0
 8003ade:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8003af4:	2500      	movs	r5, #0
 8003af6:	ea54 0305 	orrs.w	r3, r4, r5
 8003afa:	d00b      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003afc:	4bcd      	ldr	r3, [pc, #820]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003afe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b02:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8003b06:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4ac9      	ldr	r2, [pc, #804]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f002 0801 	and.w	r8, r2, #1
 8003b20:	f04f 0900 	mov.w	r9, #0
 8003b24:	ea58 0309 	orrs.w	r3, r8, r9
 8003b28:	d042      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003b2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d823      	bhi.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0xac>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b55 	.word	0x08003b55
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b85 	.word	0x08003b85
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b85 	.word	0x08003b85
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b58:	3308      	adds	r3, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 feda 	bl	8008914 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003b66:	e00e      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b6c:	3330      	adds	r3, #48	; 0x30
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f004 ff68 	bl	8008a44 <RCCEx_PLL3_Config>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8003b7a:	e004      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b82:	e000      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8003b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b86:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003b8e:	4ba9      	ldr	r3, [pc, #676]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b94:	f023 0107 	bic.w	r1, r3, #7
 8003b98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	4aa5      	ldr	r2, [pc, #660]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003ba0:	430b      	orrs	r3, r1
 8003ba2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003ba6:	e003      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003bac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb8:	f002 0a02 	and.w	sl, r2, #2
 8003bbc:	f04f 0b00 	mov.w	fp, #0
 8003bc0:	ea5a 030b 	orrs.w	r3, sl, fp
 8003bc4:	f000 8088 	beq.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003bc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bce:	2b28      	cmp	r3, #40	; 0x28
 8003bd0:	d868      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003cad 	.word	0x08003cad
 8003bdc:	08003ca5 	.word	0x08003ca5
 8003be0:	08003ca5 	.word	0x08003ca5
 8003be4:	08003ca5 	.word	0x08003ca5
 8003be8:	08003ca5 	.word	0x08003ca5
 8003bec:	08003ca5 	.word	0x08003ca5
 8003bf0:	08003ca5 	.word	0x08003ca5
 8003bf4:	08003ca5 	.word	0x08003ca5
 8003bf8:	08003c7d 	.word	0x08003c7d
 8003bfc:	08003ca5 	.word	0x08003ca5
 8003c00:	08003ca5 	.word	0x08003ca5
 8003c04:	08003ca5 	.word	0x08003ca5
 8003c08:	08003ca5 	.word	0x08003ca5
 8003c0c:	08003ca5 	.word	0x08003ca5
 8003c10:	08003ca5 	.word	0x08003ca5
 8003c14:	08003ca5 	.word	0x08003ca5
 8003c18:	08003c91 	.word	0x08003c91
 8003c1c:	08003ca5 	.word	0x08003ca5
 8003c20:	08003ca5 	.word	0x08003ca5
 8003c24:	08003ca5 	.word	0x08003ca5
 8003c28:	08003ca5 	.word	0x08003ca5
 8003c2c:	08003ca5 	.word	0x08003ca5
 8003c30:	08003ca5 	.word	0x08003ca5
 8003c34:	08003ca5 	.word	0x08003ca5
 8003c38:	08003cad 	.word	0x08003cad
 8003c3c:	08003ca5 	.word	0x08003ca5
 8003c40:	08003ca5 	.word	0x08003ca5
 8003c44:	08003ca5 	.word	0x08003ca5
 8003c48:	08003ca5 	.word	0x08003ca5
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003ca5 	.word	0x08003ca5
 8003c54:	08003ca5 	.word	0x08003ca5
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003ca5 	.word	0x08003ca5
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003ca5 	.word	0x08003ca5
 8003c78:	08003cad 	.word	0x08003cad
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c80:	3308      	adds	r3, #8
 8003c82:	4618      	mov	r0, r3
 8003c84:	f004 fe46 	bl	8008914 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003c8e:	e00e      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c94:	3330      	adds	r3, #48	; 0x30
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fed4 	bl	8008a44 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8003ca2:	e004      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003caa:	e000      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8003cac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cae:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003cb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cbc:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003cc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc6:	4a5b      	ldr	r2, [pc, #364]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003cc8:	430b      	orrs	r3, r1
 8003cca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003cd4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f002 0304 	and.w	r3, r2, #4
 8003ce4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003cee:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	d04e      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003cf8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cfe:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d02:	d02c      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8003d04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d08:	d825      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0e:	d028      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d14:	d81f      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d16:	2bc0      	cmp	r3, #192	; 0xc0
 8003d18:	d025      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d1c:	d81b      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d1e:	2b80      	cmp	r3, #128	; 0x80
 8003d20:	d00f      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003d22:	2b80      	cmp	r3, #128	; 0x80
 8003d24:	d817      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d01f      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003d2a:	2b40      	cmp	r3, #64	; 0x40
 8003d2c:	d113      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d32:	3308      	adds	r3, #8
 8003d34:	4618      	mov	r0, r3
 8003d36:	f004 fded 	bl	8008914 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d40:	e014      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d46:	3330      	adds	r3, #48	; 0x30
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f004 fe7b 	bl	8008a44 <RCCEx_PLL3_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d54:	e00a      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d5e:	bf00      	nop
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d62:	bf00      	nop
 8003d64:	e002      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d66:	bf00      	nop
 8003d68:	e000      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8003d6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10c      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003d74:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003d7a:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d84:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8003d86:	430b      	orrs	r3, r1
 8003d88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003d8c:	e003      	b.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f002 0308 	and.w	r3, r2, #8
 8003da2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003da6:	2300      	movs	r3, #0
 8003da8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003dac:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 8003db0:	460b      	mov	r3, r1
 8003db2:	4313      	orrs	r3, r2
 8003db4:	d056      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8003db6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dbc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003dc0:	d031      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8003dc2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003dc6:	d82a      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dcc:	d02d      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d824      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003dd4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dd8:	d029      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8003dda:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dde:	d81e      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d011      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8003de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dea:	d818      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d113      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dfa:	3308      	adds	r3, #8
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 fd89 	bl	8008914 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003e08:	e017      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e0e:	3330      	adds	r3, #48	; 0x30
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 fe17 	bl	8008a44 <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8003e1c:	e00d      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e24:	e009      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e26:	bf00      	nop
 8003e28:	e007      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e2a:	bf00      	nop
 8003e2c:	e005      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8003e2e:	bf00      	nop
 8003e30:	e003      	b.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003e32:	bf00      	nop
 8003e34:	44020c00 	.word	0x44020c00
        break;
 8003e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e3a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10c      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8003e42:	4bbb      	ldr	r3, [pc, #748]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003e48:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e52:	4ab7      	ldr	r2, [pc, #732]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003e54:	430b      	orrs	r3, r1
 8003e56:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003e5a:	e003      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 0310 	and.w	r3, r2, #16
 8003e70:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003e7a:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d053      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8003e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e8e:	d031      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003e90:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003e94:	d82a      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003e96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e9a:	d02d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ea0:	d824      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003ea2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ea6:	d029      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003ea8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eac:	d81e      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb2:	d011      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eb8:	d818      	bhi.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d020      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8003ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec2:	d113      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003ec4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ec8:	3308      	adds	r3, #8
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f004 fd22 	bl	8008914 <RCCEx_PLL2_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003ed6:	e014      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003edc:	3330      	adds	r3, #48	; 0x30
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f004 fdb0 	bl	8008a44 <RCCEx_PLL3_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8003eea:	e00a      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003ef2:	e006      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e004      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e002      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003efc:	bf00      	nop
 8003efe:	e000      	b.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8003f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f02:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10c      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003f0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003f10:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003f14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f1a:	4a85      	ldr	r2, [pc, #532]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003f22:	e003      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003f28:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 0320 	and.w	r3, r2, #32
 8003f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003f42:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d053      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8003f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003f56:	d031      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8003f58:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003f5c:	d82a      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f62:	d02d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f68:	d824      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f6a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003f6e:	d029      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8003f70:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003f74:	d81e      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7a:	d011      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d818      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8a:	d113      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f90:	3308      	adds	r3, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f004 fcbe 	bl	8008914 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003f9e:	e014      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fa4:	3330      	adds	r3, #48	; 0x30
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fd4c 	bl	8008a44 <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8003fb2:	e00a      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003fba:	e006      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003fbc:	bf00      	nop
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003fc0:	bf00      	nop
 8003fc2:	e002      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003fc4:	bf00      	nop
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8003fd2:	4b57      	ldr	r3, [pc, #348]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003fd8:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8003fdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	4a53      	ldr	r2, [pc, #332]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ff0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ff4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800400a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d053      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8004014:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800401e:	d031      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8004020:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004024:	d82a      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 800402c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004030:	d824      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8004032:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004036:	d029      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004038:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800403c:	d81e      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800403e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004042:	d011      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004044:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004048:	d818      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d020      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800404e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004052:	d113      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004054:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004058:	3308      	adds	r3, #8
 800405a:	4618      	mov	r0, r3
 800405c:	f004 fc5a 	bl	8008914 <RCCEx_PLL2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8004066:	e014      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004068:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800406c:	3330      	adds	r3, #48	; 0x30
 800406e:	4618      	mov	r0, r3
 8004070:	f004 fce8 	bl	8008a44 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800407a:	e00a      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004082:	e006      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004084:	bf00      	nop
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004088:	bf00      	nop
 800408a:	e002      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800408c:	bf00      	nop
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800409a:	4b25      	ldr	r3, [pc, #148]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800409c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80040a0:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80040a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80040b2:	e003      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80040b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80040d2:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d055      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80040dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040e6:	d033      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80040e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80040ec:	d82c      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80040ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040f2:	d02f      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80040f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80040f8:	d826      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80040fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040fe:	d02b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004100:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004104:	d820      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800410a:	d013      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800410c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004110:	d81a      	bhi.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8004112:	2b00      	cmp	r3, #0
 8004114:	d022      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8004116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800411a:	d115      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800411c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004120:	3308      	adds	r3, #8
 8004122:	4618      	mov	r0, r3
 8004124:	f004 fbf6 	bl	8008914 <RCCEx_PLL2_Config>
 8004128:	4603      	mov	r3, r0
 800412a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800412e:	e016      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8004130:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004134:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004138:	3330      	adds	r3, #48	; 0x30
 800413a:	4618      	mov	r0, r3
 800413c:	f004 fc82 	bl	8008a44 <RCCEx_PLL3_Config>
 8004140:	4603      	mov	r3, r0
 8004142:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8004146:	e00a      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800414e:	e006      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004150:	bf00      	nop
 8004152:	e004      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004154:	bf00      	nop
 8004156:	e002      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8004158:	bf00      	nop
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10c      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8004166:	4bbb      	ldr	r3, [pc, #748]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800416c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004174:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004176:	4ab7      	ldr	r2, [pc, #732]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004178:	430b      	orrs	r3, r1
 800417a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800417e:	e003      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004184:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8004188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004194:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800419e:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d053      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80041a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041b2:	d031      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80041b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80041b8:	d82a      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80041ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041be:	d02d      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80041c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c4:	d824      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80041c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041ca:	d029      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80041cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80041d0:	d81e      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80041d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041d6:	d011      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80041d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041dc:	d818      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d020      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80041e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041e6:	d113      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80041e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80041ec:	3308      	adds	r3, #8
 80041ee:	4618      	mov	r0, r3
 80041f0:	f004 fb90 	bl	8008914 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80041fa:	e014      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80041fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004200:	3330      	adds	r3, #48	; 0x30
 8004202:	4618      	mov	r0, r3
 8004204:	f004 fc1e 	bl	8008a44 <RCCEx_PLL3_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800420e:	e00a      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004216:	e006      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004218:	bf00      	nop
 800421a:	e004      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800421c:	bf00      	nop
 800421e:	e002      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004220:	bf00      	nop
 8004222:	e000      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8004224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004226:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800422e:	4b89      	ldr	r3, [pc, #548]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004234:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004238:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800423c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423e:	4a85      	ldr	r2, [pc, #532]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8004240:	430b      	orrs	r3, r1
 8004242:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800424c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8004250:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800425c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004266:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d055      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8004270:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004278:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800427c:	d031      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x812>
 800427e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8004282:	d82a      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004284:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004288:	d02d      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x816>
 800428a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800428e:	d824      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8004290:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004294:	d029      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8004296:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800429a:	d81e      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800429c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a0:	d011      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80042a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042a6:	d818      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80042ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b0:	d113      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80042b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042b6:	3308      	adds	r3, #8
 80042b8:	4618      	mov	r0, r3
 80042ba:	f004 fb2b 	bl	8008914 <RCCEx_PLL2_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80042c4:	e014      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80042c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80042ca:	3330      	adds	r3, #48	; 0x30
 80042cc:	4618      	mov	r0, r3
 80042ce:	f004 fbb9 	bl	8008a44 <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80042e2:	bf00      	nop
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80042f8:	4b56      	ldr	r3, [pc, #344]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80042fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80042fe:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 8004302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430a:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800430c:	430b      	orrs	r3, r1
 800430e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004312:	e003      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004318:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800431c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004328:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004332:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d044      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 800433c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004344:	2b05      	cmp	r3, #5
 8004346:	d823      	bhi.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004399 	.word	0x08004399
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437d 	.word	0x0800437d
 800435c:	08004399 	.word	0x08004399
 8004360:	08004399 	.word	0x08004399
 8004364:	08004399 	.word	0x08004399
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004368:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800436c:	3308      	adds	r3, #8
 800436e:	4618      	mov	r0, r3
 8004370:	f004 fad0 	bl	8008914 <RCCEx_PLL2_Config>
 8004374:	4603      	mov	r3, r0
 8004376:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800437a:	e00e      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800437c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004380:	3330      	adds	r3, #48	; 0x30
 8004382:	4618      	mov	r0, r3
 8004384:	f004 fb5e 	bl	8008a44 <RCCEx_PLL3_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800438e:	e004      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004396:	e000      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8004398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10d      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80043a2:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80043a8:	f023 0107 	bic.w	r1, r3, #7
 80043ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	4a27      	ldr	r2, [pc, #156]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80043b6:	430b      	orrs	r3, r1
 80043b8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80043c2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80043c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80043d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80043dc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d04f      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80043e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ee:	2b50      	cmp	r3, #80	; 0x50
 80043f0:	d029      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80043f2:	2b50      	cmp	r3, #80	; 0x50
 80043f4:	d823      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d027      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d81f      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80043fe:	2b30      	cmp	r3, #48	; 0x30
 8004400:	d025      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8004402:	2b30      	cmp	r3, #48	; 0x30
 8004404:	d81b      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004406:	2b20      	cmp	r3, #32
 8004408:	d00f      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800440a:	2b20      	cmp	r3, #32
 800440c:	d817      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800440e:	2b00      	cmp	r3, #0
 8004410:	d022      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004412:	2b10      	cmp	r3, #16
 8004414:	d113      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004416:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800441a:	3308      	adds	r3, #8
 800441c:	4618      	mov	r0, r3
 800441e:	f004 fa79 	bl	8008914 <RCCEx_PLL2_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8004428:	e017      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800442a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800442e:	3330      	adds	r3, #48	; 0x30
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fb07 	bl	8008a44 <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800443c:	e00d      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004444:	e009      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8004446:	bf00      	nop
 8004448:	e007      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800444a:	bf00      	nop
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800444e:	bf00      	nop
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8004452:	bf00      	nop
 8004454:	44020c00 	.word	0x44020c00
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10d      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8004462:	4baf      	ldr	r3, [pc, #700]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004464:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004468:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800446c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	4aaa      	ldr	r2, [pc, #680]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004476:	430b      	orrs	r3, r1
 8004478:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004482:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004486:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004492:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800449c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d055      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80044a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044ae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80044b2:	d031      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80044b4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80044b8:	d82a      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80044ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044be:	d02d      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80044c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044c4:	d824      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80044c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044ca:	d029      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80044cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80044d0:	d81e      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80044d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044d6:	d011      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80044d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80044dc:	d818      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d020      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80044e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044e6:	d113      	bne.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80044e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80044ec:	3308      	adds	r3, #8
 80044ee:	4618      	mov	r0, r3
 80044f0:	f004 fa10 	bl	8008914 <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80044fa:	e014      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80044fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004500:	3330      	adds	r3, #48	; 0x30
 8004502:	4618      	mov	r0, r3
 8004504:	f004 fa9e 	bl	8008a44 <RCCEx_PLL3_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800450e:	e00a      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004516:	e006      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004518:	bf00      	nop
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8004524:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004526:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10d      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800452e:	4b7c      	ldr	r3, [pc, #496]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004534:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004538:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800453c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004540:	4a77      	ldr	r2, [pc, #476]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004542:	430b      	orrs	r3, r1
 8004544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004548:	e003      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800454e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004552:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800455e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004562:	2300      	movs	r3, #0
 8004564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d03d      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8004572:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800457e:	d01b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8004580:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004584:	d814      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800458a:	d017      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xaec>
 800458c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004590:	d80e      	bhi.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d014      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8004596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459a:	d109      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800459c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045a0:	3330      	adds	r3, #48	; 0x30
 80045a2:	4618      	mov	r0, r3
 80045a4:	f004 fa4e 	bl	8008a44 <RCCEx_PLL3_Config>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80045ae:	e008      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80045b8:	bf00      	nop
 80045ba:	e002      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80045bc:	bf00      	nop
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10d      	bne.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80045cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045d0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80045d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	4a50      	ldr	r2, [pc, #320]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80045e4:	e003      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80045ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80045f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80045fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045fe:	2300      	movs	r3, #0
 8004600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004604:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004608:	460b      	mov	r3, r1
 800460a:	4313      	orrs	r3, r2
 800460c:	d03d      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 800460e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004616:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800461a:	d01b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 800461c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004620:	d814      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004622:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004626:	d017      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8004628:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800462c:	d80e      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d014      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8004632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004636:	d109      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004638:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800463c:	3330      	adds	r3, #48	; 0x30
 800463e:	4618      	mov	r0, r3
 8004640:	f004 fa00 	bl	8008a44 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800464a:	e008      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004652:	e004      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004654:	bf00      	nop
 8004656:	e002      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8004658:	bf00      	nop
 800465a:	e000      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800465c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800465e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004666:	4b2e      	ldr	r3, [pc, #184]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004668:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800466c:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004670:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004678:	4a29      	ldr	r2, [pc, #164]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800467a:	430b      	orrs	r3, r1
 800467c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004680:	e003      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004682:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004686:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800468a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004696:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80046a0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d040      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80046aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046b6:	d01b      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80046b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046bc:	d814      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80046be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c2:	d017      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80046c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046c8:	d80e      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80046ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d2:	d109      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80046d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80046d8:	3330      	adds	r3, #48	; 0x30
 80046da:	4618      	mov	r0, r3
 80046dc:	f004 f9b2 	bl	8008a44 <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80046e6:	e008      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80046f0:	bf00      	nop
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80046f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d110      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004704:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004708:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800470c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004710:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8004716:	430b      	orrs	r3, r1
 8004718:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800471c:	e006      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 800471e:	bf00      	nop
 8004720:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004724:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004728:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800472c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004734:	2100      	movs	r1, #0
 8004736:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004742:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004746:	460b      	mov	r3, r1
 8004748:	4313      	orrs	r3, r2
 800474a:	d03d      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 800474c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004754:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004758:	d01b      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800475a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475e:	d814      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8004760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004764:	d017      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8004766:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800476a:	d80e      	bhi.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xcba>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d014      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8004770:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004774:	d109      	bne.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800477a:	3330      	adds	r3, #48	; 0x30
 800477c:	4618      	mov	r0, r3
 800477e:	f004 f961 	bl	8008a44 <RCCEx_PLL3_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8004788:	e008      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004790:	e004      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004792:	bf00      	nop
 8004794:	e002      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8004796:	bf00      	nop
 8004798:	e000      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800479a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10d      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80047a4:	4bbe      	ldr	r3, [pc, #760]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80047a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80047aa:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80047ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047b6:	4aba      	ldr	r2, [pc, #744]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80047be:	e003      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80047c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80047c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d035      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80047e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80047ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80047f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f4:	d015      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80047f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047fa:	d80e      	bhi.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d012      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8004800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004804:	d109      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004806:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800480a:	3330      	adds	r3, #48	; 0x30
 800480c:	4618      	mov	r0, r3
 800480e:	f004 f919 	bl	8008a44 <RCCEx_PLL3_Config>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8004818:	e006      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004820:	e002      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004822:	bf00      	nop
 8004824:	e000      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8004826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004828:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10d      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8004830:	4b9b      	ldr	r3, [pc, #620]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004832:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004836:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 800483a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800483e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004842:	4a97      	ldr	r2, [pc, #604]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004844:	430b      	orrs	r3, r1
 8004846:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800484a:	e003      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004850:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004854:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	2100      	movs	r1, #0
 800485e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800486a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800486e:	460b      	mov	r3, r1
 8004870:	4313      	orrs	r3, r2
 8004872:	d00e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004874:	4b8a      	ldr	r3, [pc, #552]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4a89      	ldr	r2, [pc, #548]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800487a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800487e:	61d3      	str	r3, [r2, #28]
 8004880:	4b87      	ldr	r3, [pc, #540]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004882:	69d9      	ldr	r1, [r3, #28]
 8004884:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004888:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800488c:	4a84      	ldr	r2, [pc, #528]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800488e:	430b      	orrs	r3, r1
 8004890:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004892:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800489e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80048a8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d055      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80048b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80048ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048be:	d031      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80048c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80048c4:	d82a      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80048c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ca:	d02d      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d824      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80048d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d6:	d029      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80048d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048dc:	d81e      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80048de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e2:	d011      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d818      	bhi.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80048ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048f2:	d113      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80048f8:	3308      	adds	r3, #8
 80048fa:	4618      	mov	r0, r3
 80048fc:	f004 f80a 	bl	8008914 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8004906:	e014      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004908:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800490c:	3330      	adds	r3, #48	; 0x30
 800490e:	4618      	mov	r0, r3
 8004910:	f004 f898 	bl	8008a44 <RCCEx_PLL3_Config>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800491a:	e00a      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004922:	e006      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004924:	bf00      	nop
 8004926:	e004      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004928:	bf00      	nop
 800492a:	e002      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800492c:	bf00      	nop
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8004930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004932:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10d      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800493a:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800493c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004940:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004944:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004948:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800494c:	4a54      	ldr	r2, [pc, #336]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800494e:	430b      	orrs	r3, r1
 8004950:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004956:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800495a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800495e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004966:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800496a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800496e:	2300      	movs	r3, #0
 8004970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004974:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d055      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 800497e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004986:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800498a:	d031      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 800498c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004990:	d82a      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8004992:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004996:	d02d      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d824      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800499e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049a2:	d029      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80049a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80049a8:	d81e      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80049aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ae:	d011      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80049b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049b4:	d818      	bhi.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d020      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80049ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049be:	d113      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049c4:	3308      	adds	r3, #8
 80049c6:	4618      	mov	r0, r3
 80049c8:	f003 ffa4 	bl	8008914 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80049d2:	e014      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80049d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80049d8:	3330      	adds	r3, #48	; 0x30
 80049da:	4618      	mov	r0, r3
 80049dc:	f004 f832 	bl	8008a44 <RCCEx_PLL3_Config>
 80049e0:	4603      	mov	r3, r0
 80049e2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80049e6:	e00a      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80049ee:	e006      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80049f0:	bf00      	nop
 80049f2:	e004      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80049f4:	bf00      	nop
 80049f6:	e002      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80049f8:	bf00      	nop
 80049fa:	e000      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80049fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049fe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a08:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004a0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004a10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a18:	4a21      	ldr	r2, [pc, #132]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004a20:	e003      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004a26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8004a2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a32:	2100      	movs	r1, #0
 8004a34:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a44:	460b      	mov	r3, r1
 8004a46:	4313      	orrs	r3, r2
 8004a48:	d057      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8004a4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a56:	d033      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8004a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5c:	d82c      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a62:	d02f      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8004a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a68:	d826      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a6e:	d02b      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8004a70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004a74:	d820      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a7a:	d013      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d81a      	bhi.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d022      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8004a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a8a:	d115      	bne.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004a90:	3308      	adds	r3, #8
 8004a92:	4618      	mov	r0, r3
 8004a94:	f003 ff3e 	bl	8008914 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004a9e:	e016      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8004aa0:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004aa4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004aa8:	3330      	adds	r3, #48	; 0x30
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f003 ffca 	bl	8008a44 <RCCEx_PLL3_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8004ab6:	e00a      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004abe:	e006      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004ac0:	bf00      	nop
 8004ac2:	e004      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004ac4:	bf00      	nop
 8004ac6:	e002      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8004acc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ace:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10d      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8004ad6:	4bbb      	ldr	r3, [pc, #748]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ad8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004adc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004ae0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ae4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ae8:	4ab6      	ldr	r2, [pc, #728]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004af0:	e003      	b.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004af6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8004afa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	2100      	movs	r1, #0
 8004b04:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004b10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4313      	orrs	r3, r2
 8004b18:	d055      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8004b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004b22:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004b26:	d031      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004b28:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004b2c:	d82a      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d02d      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8004b34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b38:	d824      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b3e:	d029      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8004b40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b44:	d81e      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4a:	d011      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8004b4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b50:	d818      	bhi.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d020      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d113      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b60:	3308      	adds	r3, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fed6 	bl	8008914 <RCCEx_PLL2_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004b6e:	e014      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004b74:	3330      	adds	r3, #48	; 0x30
 8004b76:	4618      	mov	r0, r3
 8004b78:	f003 ff64 	bl	8008a44 <RCCEx_PLL3_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8004b82:	e00a      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004b8a:	e006      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004b8c:	bf00      	nop
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004b90:	bf00      	nop
 8004b92:	e002      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004b94:	bf00      	nop
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8004ba2:	4b88      	ldr	r3, [pc, #544]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004ba4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004ba8:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 8004bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004bb4:	4a83      	ldr	r2, [pc, #524]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004bb6:	430b      	orrs	r3, r1
 8004bb8:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004bbc:	e003      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004bc2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8004bc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	2100      	movs	r1, #0
 8004bd0:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bdc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004be0:	460b      	mov	r3, r1
 8004be2:	4313      	orrs	r3, r2
 8004be4:	d055      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8004be6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004bee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004bf2:	d031      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8004bf4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004bf8:	d82a      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004bfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bfe:	d02d      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8004c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c04:	d824      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c0a:	d029      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8004c0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c10:	d81e      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c16:	d011      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8004c18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c1c:	d818      	bhi.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d020      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8004c22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c26:	d113      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 fe70 	bl	8008914 <RCCEx_PLL2_Config>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004c3a:	e014      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c40:	3330      	adds	r3, #48	; 0x30
 8004c42:	4618      	mov	r0, r3
 8004c44:	f003 fefe 	bl	8008a44 <RCCEx_PLL3_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8004c4e:	e00a      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004c56:	e006      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004c58:	bf00      	nop
 8004c5a:	e004      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004c5c:	bf00      	nop
 8004c5e:	e002      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8004c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c66:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10d      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8004c6e:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c80:	4a50      	ldr	r2, [pc, #320]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004c82:	430b      	orrs	r3, r1
 8004c84:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004c88:	e003      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004c8e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8004c92:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9a:	2100      	movs	r1, #0
 8004c9c:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 8004ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ca8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d055      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8004cb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cbe:	d031      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8004cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cc4:	d82a      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cca:	d02d      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd0:	d824      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004cd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cd6:	d029      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8004cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004cdc:	d81e      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004cde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce2:	d011      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8004ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce8:	d818      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8004cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf2:	d113      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f003 fe0a 	bl	8008914 <RCCEx_PLL2_Config>
 8004d00:	4603      	mov	r3, r0
 8004d02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004d06:	e014      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d0c:	3330      	adds	r3, #48	; 0x30
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f003 fe98 	bl	8008a44 <RCCEx_PLL3_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004d22:	e006      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d24:	bf00      	nop
 8004d26:	e004      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d28:	bf00      	nop
 8004d2a:	e002      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d2c:	bf00      	nop
 8004d2e:	e000      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8004d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10d      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d40:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004d44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d4c:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d56:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004d5a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004d6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004d74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	d055      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004d7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004d82:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004d86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d8a:	d035      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8004d8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d90:	d82e      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d96:	d031      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8004d98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9c:	d828      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da2:	d01b      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8004da4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da8:	d822      	bhi.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8004dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8004db4:	e01c      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004db6:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	4a02      	ldr	r2, [pc, #8]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8004dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8004dc4:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004dc8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004dcc:	3308      	adds	r3, #8
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 fda0 	bl	8008914 <RCCEx_PLL2_Config>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dda:	e010      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004de0:	3330      	adds	r3, #48	; 0x30
 8004de2:	4618      	mov	r0, r3
 8004de4:	f003 fe2e 	bl	8008a44 <RCCEx_PLL3_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004dee:	e006      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004df6:	e002      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8004dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dfe:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004e06:	4bc3      	ldr	r3, [pc, #780]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004e10:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004e18:	4abe      	ldr	r2, [pc, #760]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e22:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004e26:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8004e2a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e40:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004e44:	460b      	mov	r3, r1
 8004e46:	4313      	orrs	r3, r2
 8004e48:	d051      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004e4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004e52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e56:	d033      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5c:	d82c      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004e5e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e62:	d02d      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8004e64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e68:	d826      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6e:	d019      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8004e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e74:	d820      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8004e7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e7e:	d007      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8004e80:	e01a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e82:	4ba4      	ldr	r3, [pc, #656]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	4aa3      	ldr	r2, [pc, #652]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e8c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004e8e:	e018      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e94:	3308      	adds	r3, #8
 8004e96:	4618      	mov	r0, r3
 8004e98:	f003 fd3c 	bl	8008914 <RCCEx_PLL2_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004ea2:	e00e      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ea8:	3330      	adds	r3, #48	; 0x30
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f003 fdca 	bl	8008a44 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004eca:	4b92      	ldr	r3, [pc, #584]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed0:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8004ed4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004edc:	4a8d      	ldr	r2, [pc, #564]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004ede:	430b      	orrs	r3, r1
 8004ee0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ee4:	e003      	b.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004eea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8004efc:	2300      	movs	r3, #0
 8004efe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d032      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004f0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d80f      	bhi.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d211      	bcs.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d911      	bls.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d109      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f26:	3308      	adds	r3, #8
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f003 fcf3 	bl	8008914 <RCCEx_PLL2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f34:	e006      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004f3c:	e002      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004f3e:	bf00      	nop
 8004f40:	e000      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8004f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f44:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10d      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004f4c:	4b71      	ldr	r3, [pc, #452]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f52:	f023 0107 	bic.w	r1, r3, #7
 8004f56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f5a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004f5e:	4a6d      	ldr	r2, [pc, #436]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004f6c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8004f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	6739      	str	r1, [r7, #112]	; 0x70
 8004f7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f80:	677b      	str	r3, [r7, #116]	; 0x74
 8004f82:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f86:	460b      	mov	r3, r1
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	d024      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004f8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d005      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8004fa2:	e002      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004fa4:	bf00      	nop
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8004fa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004faa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8004fb2:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fb8:	f023 0108 	bic.w	r1, r3, #8
 8004fbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004fc4:	4a53      	ldr	r2, [pc, #332]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8004fd2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fde:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004fec:	460b      	mov	r3, r1
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f000 80b9 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004ff4:	4b48      	ldr	r3, [pc, #288]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	4a47      	ldr	r2, [pc, #284]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005000:	f7fc fd54 	bl	8001aac <HAL_GetTick>
 8005004:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005008:	e00b      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500a:	f7fc fd4f 	bl	8001aac <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d903      	bls.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005020:	e005      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005022:	4b3d      	ldr	r3, [pc, #244]	; (8005118 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0ed      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800502e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 8093 	bne.w	800515e <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005038:	4b36      	ldr	r3, [pc, #216]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800503a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005046:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800504a:	2b00      	cmp	r3, #0
 800504c:	d023      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800504e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005052:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8005056:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800505a:	4293      	cmp	r3, r2
 800505c:	d01b      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800505e:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005068:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800506c:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800506e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005072:	4a28      	ldr	r2, [pc, #160]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800507c:	4b25      	ldr	r3, [pc, #148]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800507e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005082:	4a24      	ldr	r2, [pc, #144]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005084:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005088:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800508c:	4a21      	ldr	r2, [pc, #132]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800508e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005092:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005096:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d019      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a2:	f7fc fd03 	bl	8001aac <HAL_GetTick>
 80050a6:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050aa:	e00d      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ac:	f7fc fcfe 	bl	8001aac <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80050b6:	1ad2      	subs	r2, r2, r3
 80050b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 80050c6:	e006      	b.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050c8:	4b12      	ldr	r3, [pc, #72]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0ea      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80050d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d13a      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80050de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050e2:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80050e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ee:	d115      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80050f0:	4b08      	ldr	r3, [pc, #32]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80050f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80050fc:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005106:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800510a:	4a02      	ldr	r2, [pc, #8]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800510c:	430b      	orrs	r3, r1
 800510e:	61d3      	str	r3, [r2, #28]
 8005110:	e00a      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8005112:	bf00      	nop
 8005114:	44020c00 	.word	0x44020c00
 8005118:	44020800 	.word	0x44020800
 800511c:	4b9f      	ldr	r3, [pc, #636]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	4a9e      	ldr	r2, [pc, #632]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005122:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005126:	61d3      	str	r3, [r2, #28]
 8005128:	4b9c      	ldr	r3, [pc, #624]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800512a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800512e:	4a9b      	ldr	r2, [pc, #620]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005134:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005138:	4b98      	ldr	r3, [pc, #608]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800513a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800513e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005142:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	4a94      	ldr	r2, [pc, #592]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800514c:	430b      	orrs	r3, r1
 800514e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005152:	e008      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005154:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005158:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 800515c:	e003      	b.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005162:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005166:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800516a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005172:	663b      	str	r3, [r7, #96]	; 0x60
 8005174:	2300      	movs	r3, #0
 8005176:	667b      	str	r3, [r7, #100]	; 0x64
 8005178:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800517c:	460b      	mov	r3, r1
 800517e:	4313      	orrs	r3, r2
 8005180:	d035      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005182:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005186:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800518a:	2b30      	cmp	r3, #48	; 0x30
 800518c:	d014      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 800518e:	2b30      	cmp	r3, #48	; 0x30
 8005190:	d80e      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8005192:	2b20      	cmp	r3, #32
 8005194:	d012      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8005196:	2b20      	cmp	r3, #32
 8005198:	d80a      	bhi.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800519e:	2b10      	cmp	r3, #16
 80051a0:	d106      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051a2:	4b7e      	ldr	r3, [pc, #504]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a6:	4a7d      	ldr	r2, [pc, #500]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ac:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80051ae:	e008      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80051b6:	e004      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80051b8:	bf00      	nop
 80051ba:	e002      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80051bc:	bf00      	nop
 80051be:	e000      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80051c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10d      	bne.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80051ca:	4b74      	ldr	r3, [pc, #464]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80051d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051d8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80051dc:	4a6f      	ldr	r2, [pc, #444]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80051de:	430b      	orrs	r3, r1
 80051e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051e4:	e003      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80051ea:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80051f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80051fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80051fc:	2300      	movs	r3, #0
 80051fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005200:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005204:	460b      	mov	r3, r1
 8005206:	4313      	orrs	r3, r2
 8005208:	d033      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800520a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800520e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d007      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800521a:	e010      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800521c:	4b5f      	ldr	r3, [pc, #380]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005220:	4a5e      	ldr	r2, [pc, #376]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005226:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8005228:	e00d      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800522a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800522e:	3308      	adds	r3, #8
 8005230:	4618      	mov	r0, r3
 8005232:	f003 fb6f 	bl	8008914 <RCCEx_PLL2_Config>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800523c:	e003      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005246:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10d      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800524e:	4b53      	ldr	r3, [pc, #332]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005250:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005254:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005258:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800525c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8005260:	4a4e      	ldr	r2, [pc, #312]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005262:	430b      	orrs	r3, r1
 8005264:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005268:	e003      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800526e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005272:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800527e:	653b      	str	r3, [r7, #80]	; 0x50
 8005280:	2300      	movs	r3, #0
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
 8005284:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005288:	460b      	mov	r3, r1
 800528a:	4313      	orrs	r3, r2
 800528c:	d033      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 800528e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005292:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	d007      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800529e:	e010      	b.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a0:	4b3e      	ldr	r3, [pc, #248]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	4a3d      	ldr	r2, [pc, #244]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052aa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80052ac:	e00d      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052b2:	3308      	adds	r3, #8
 80052b4:	4618      	mov	r0, r3
 80052b6:	f003 fb2d 	bl	8008914 <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80052c0:	e003      	b.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80052c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10d      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80052d2:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80052d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80052dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052e0:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80052e4:	4a2d      	ldr	r2, [pc, #180]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80052e6:	430b      	orrs	r3, r1
 80052e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80052f2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80052f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48
 8005304:	2300      	movs	r3, #0
 8005306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005308:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800530c:	460b      	mov	r3, r1
 800530e:	4313      	orrs	r3, r2
 8005310:	d04a      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8005312:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800531a:	2b04      	cmp	r3, #4
 800531c:	d827      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005339 	.word	0x08005339
 8005328:	08005347 	.word	0x08005347
 800532c:	0800535b 	.word	0x0800535b
 8005330:	08005377 	.word	0x08005377
 8005334:	08005377 	.word	0x08005377
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005338:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533c:	4a17      	ldr	r2, [pc, #92]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800533e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005342:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005344:	e018      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005346:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800534a:	3308      	adds	r3, #8
 800534c:	4618      	mov	r0, r3
 800534e:	f003 fae1 	bl	8008914 <RCCEx_PLL2_Config>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8005358:	e00e      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800535a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800535e:	3330      	adds	r3, #48	; 0x30
 8005360:	4618      	mov	r0, r3
 8005362:	f003 fb6f 	bl	8008a44 <RCCEx_PLL3_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800536c:	e004      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005374:	e000      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 8005376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005378:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10f      	bne.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005386:	f023 0107 	bic.w	r1, r3, #7
 800538a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800538e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005392:	4a02      	ldr	r2, [pc, #8]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8005394:	430b      	orrs	r3, r1
 8005396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800539a:	e005      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 800539c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80053a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80053a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80053b4:	643b      	str	r3, [r7, #64]	; 0x40
 80053b6:	2300      	movs	r3, #0
 80053b8:	647b      	str	r3, [r7, #68]	; 0x44
 80053ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80053be:	460b      	mov	r3, r1
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f000 8081 	beq.w	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80053c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80053ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d85f      	bhi.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80053d2:	a201      	add	r2, pc, #4	; (adr r2, 80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	0800545d 	.word	0x0800545d
 80053dc:	08005493 	.word	0x08005493
 80053e0:	08005493 	.word	0x08005493
 80053e4:	08005493 	.word	0x08005493
 80053e8:	08005493 	.word	0x08005493
 80053ec:	08005493 	.word	0x08005493
 80053f0:	08005493 	.word	0x08005493
 80053f4:	08005493 	.word	0x08005493
 80053f8:	0800546b 	.word	0x0800546b
 80053fc:	08005493 	.word	0x08005493
 8005400:	08005493 	.word	0x08005493
 8005404:	08005493 	.word	0x08005493
 8005408:	08005493 	.word	0x08005493
 800540c:	08005493 	.word	0x08005493
 8005410:	08005493 	.word	0x08005493
 8005414:	08005493 	.word	0x08005493
 8005418:	0800547f 	.word	0x0800547f
 800541c:	08005493 	.word	0x08005493
 8005420:	08005493 	.word	0x08005493
 8005424:	08005493 	.word	0x08005493
 8005428:	08005493 	.word	0x08005493
 800542c:	08005493 	.word	0x08005493
 8005430:	08005493 	.word	0x08005493
 8005434:	08005493 	.word	0x08005493
 8005438:	0800549b 	.word	0x0800549b
 800543c:	08005493 	.word	0x08005493
 8005440:	08005493 	.word	0x08005493
 8005444:	08005493 	.word	0x08005493
 8005448:	08005493 	.word	0x08005493
 800544c:	08005493 	.word	0x08005493
 8005450:	08005493 	.word	0x08005493
 8005454:	08005493 	.word	0x08005493
 8005458:	0800549b 	.word	0x0800549b
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800545c:	4bab      	ldr	r3, [pc, #684]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800545e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005460:	4aaa      	ldr	r2, [pc, #680]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005462:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005466:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005468:	e018      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800546a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800546e:	3308      	adds	r3, #8
 8005470:	4618      	mov	r0, r3
 8005472:	f003 fa4f 	bl	8008914 <RCCEx_PLL2_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800547c:	e00e      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800547e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005482:	3330      	adds	r3, #48	; 0x30
 8005484:	4618      	mov	r0, r3
 8005486:	f003 fadd 	bl	8008a44 <RCCEx_PLL3_Config>
 800548a:	4603      	mov	r3, r0
 800548c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8005490:	e004      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005498:	e000      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800549a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800549c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10d      	bne.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80054a4:	4b99      	ldr	r3, [pc, #612]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80054a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80054ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054b6:	4a95      	ldr	r2, [pc, #596]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80054b8:	430b      	orrs	r3, r1
 80054ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054be:	e003      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80054c4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80054c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80054d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054d6:	2300      	movs	r3, #0
 80054d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80054de:	460b      	mov	r3, r1
 80054e0:	4313      	orrs	r3, r2
 80054e2:	d04e      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80054e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80054e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f0:	d02e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d827      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80054f8:	2bc0      	cmp	r3, #192	; 0xc0
 80054fa:	d02b      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80054fc:	2bc0      	cmp	r3, #192	; 0xc0
 80054fe:	d823      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005500:	2b80      	cmp	r3, #128	; 0x80
 8005502:	d017      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d81f      	bhi.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 800550c:	2b40      	cmp	r3, #64	; 0x40
 800550e:	d007      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8005510:	e01a      	b.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005516:	4a7d      	ldr	r2, [pc, #500]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800551c:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800551e:	e01a      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005520:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005524:	3308      	adds	r3, #8
 8005526:	4618      	mov	r0, r3
 8005528:	f003 f9f4 	bl	8008914 <RCCEx_PLL2_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005532:	e010      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005534:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005538:	3330      	adds	r3, #48	; 0x30
 800553a:	4618      	mov	r0, r3
 800553c:	f003 fa82 	bl	8008a44 <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8005546:	e006      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800554e:	e002      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005550:	bf00      	nop
 8005552:	e000      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8005554:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005556:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10d      	bne.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800555e:	4b6b      	ldr	r3, [pc, #428]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005564:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005568:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800556c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005570:	4a66      	ldr	r2, [pc, #408]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005572:	430b      	orrs	r3, r1
 8005574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005578:	e003      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800557a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800557e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005582:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800558e:	633b      	str	r3, [r7, #48]	; 0x30
 8005590:	2300      	movs	r3, #0
 8005592:	637b      	str	r3, [r7, #52]	; 0x34
 8005594:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005598:	460b      	mov	r3, r1
 800559a:	4313      	orrs	r3, r2
 800559c:	d055      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 800559e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80055a6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055aa:	d031      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80055ac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80055b0:	d82a      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b6:	d02d      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80055b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055bc:	d824      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80055be:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c2:	d029      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80055c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c8:	d81e      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80055ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ce:	d011      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80055d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055d4:	d818      	bhi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80055da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055de:	d113      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055e4:	3308      	adds	r3, #8
 80055e6:	4618      	mov	r0, r3
 80055e8:	f003 f994 	bl	8008914 <RCCEx_PLL2_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80055f2:	e014      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	4618      	mov	r0, r3
 80055fc:	f003 fa22 	bl	8008a44 <RCCEx_PLL3_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8005606:	e00a      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800560e:	e006      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005610:	bf00      	nop
 8005612:	e004      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005614:	bf00      	nop
 8005616:	e002      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8005618:	bf00      	nop
 800561a:	e000      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800561c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800561e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10d      	bne.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005626:	4b39      	ldr	r3, [pc, #228]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800562c:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8005630:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005634:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005638:	4a34      	ldr	r2, [pc, #208]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800563a:	430b      	orrs	r3, r1
 800563c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005640:	e003      	b.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005642:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005646:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800564a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28
 8005658:	2300      	movs	r3, #0
 800565a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800565c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005660:	460b      	mov	r3, r1
 8005662:	4313      	orrs	r3, r2
 8005664:	d058      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8005666:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800566a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800566e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005672:	d031      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8005674:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005678:	d82a      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800567a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800567e:	d02d      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8005680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005684:	d824      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005686:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800568a:	d029      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 800568c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005690:	d81e      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	d011      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8005698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569c:	d818      	bhi.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d020      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80056a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a6:	d113      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056ac:	3308      	adds	r3, #8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 f930 	bl	8008914 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80056ba:	e014      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056c0:	3330      	adds	r3, #48	; 0x30
 80056c2:	4618      	mov	r0, r3
 80056c4:	f003 f9be 	bl	8008a44 <RCCEx_PLL3_Config>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80056ce:	e00a      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80056d6:	e006      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80056d8:	bf00      	nop
 80056da:	e004      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80056dc:	bf00      	nop
 80056de:	e002      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80056e0:	bf00      	nop
 80056e2:	e000      	b.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80056e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d110      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80056ee:	4b07      	ldr	r3, [pc, #28]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80056f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80056f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80056fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005700:	4902      	ldr	r1, [pc, #8]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005708:	e006      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800570a:	bf00      	nop
 800570c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005714:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005718:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	2100      	movs	r1, #0
 8005722:	6239      	str	r1, [r7, #32]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
 800572a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800572e:	460b      	mov	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	d055      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8005734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800573c:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005740:	d031      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8005742:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8005746:	d82a      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005748:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800574c:	d02d      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 800574e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005752:	d824      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005754:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8005758:	d029      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800575a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800575e:	d81e      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8005760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005764:	d011      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8005766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800576a:	d818      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005774:	d113      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800577a:	3308      	adds	r3, #8
 800577c:	4618      	mov	r0, r3
 800577e:	f003 f8c9 	bl	8008914 <RCCEx_PLL2_Config>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005788:	e014      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800578a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800578e:	3330      	adds	r3, #48	; 0x30
 8005790:	4618      	mov	r0, r3
 8005792:	f003 f957 	bl	8008a44 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800579c:	e00a      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80057a4:	e006      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057a6:	bf00      	nop
 80057a8:	e004      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057aa:	bf00      	nop
 80057ac:	e002      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057ae:	bf00      	nop
 80057b0:	e000      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80057b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10d      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80057bc:	4b88      	ldr	r3, [pc, #544]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80057be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057c2:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 80057c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ce:	4984      	ldr	r1, [pc, #528]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80057d6:	e003      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80057dc:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	2100      	movs	r1, #0
 80057ea:	61b9      	str	r1, [r7, #24]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d03d      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80057fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005800:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005804:	2b03      	cmp	r3, #3
 8005806:	d81c      	bhi.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	0800584b 	.word	0x0800584b
 8005814:	08005821 	.word	0x08005821
 8005818:	0800582f 	.word	0x0800582f
 800581c:	0800584b 	.word	0x0800584b
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005820:	4b6f      	ldr	r3, [pc, #444]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005824:	4a6e      	ldr	r2, [pc, #440]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800582a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800582c:	e00e      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800582e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005832:	3308      	adds	r3, #8
 8005834:	4618      	mov	r0, r3
 8005836:	f003 f86d 	bl	8008914 <RCCEx_PLL2_Config>
 800583a:	4603      	mov	r3, r0
 800583c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8005840:	e004      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005848:	e000      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800584a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800584c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10d      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005854:	4b62      	ldr	r3, [pc, #392]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005856:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800585a:	f023 0203 	bic.w	r2, r3, #3
 800585e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005862:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005866:	495e      	ldr	r1, [pc, #376]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800586e:	e003      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005870:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005874:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005878:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	2100      	movs	r1, #0
 8005882:	6139      	str	r1, [r7, #16]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800588e:	460b      	mov	r3, r1
 8005890:	4313      	orrs	r3, r2
 8005892:	d03a      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8005894:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005898:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800589c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a0:	d00e      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80058a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058a6:	d815      	bhi.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d017      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80058ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b0:	d110      	bne.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b2:	4b4b      	ldr	r3, [pc, #300]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	4a4a      	ldr	r2, [pc, #296]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058bc:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80058be:	e00e      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058c4:	3308      	adds	r3, #8
 80058c6:	4618      	mov	r0, r3
 80058c8:	f003 f824 	bl	8008914 <RCCEx_PLL2_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80058d2:	e004      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80058da:	e000      	b.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80058dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80058e6:	4b3e      	ldr	r3, [pc, #248]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80058f4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058f8:	4939      	ldr	r1, [pc, #228]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8005900:	e003      	b.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005902:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005906:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800590a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	2100      	movs	r1, #0
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	60fb      	str	r3, [r7, #12]
 800591c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d038      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8005926:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800592a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800592e:	2b30      	cmp	r3, #48	; 0x30
 8005930:	d01b      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8005932:	2b30      	cmp	r3, #48	; 0x30
 8005934:	d815      	bhi.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8005936:	2b10      	cmp	r3, #16
 8005938:	d002      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d007      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 800593e:	e010      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005940:	4b27      	ldr	r3, [pc, #156]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005944:	4a26      	ldr	r2, [pc, #152]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800594a:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800594c:	e00e      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800594e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005952:	3330      	adds	r3, #48	; 0x30
 8005954:	4618      	mov	r0, r3
 8005956:	f003 f875 	bl	8008a44 <RCCEx_PLL3_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8005960:	e004      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800596a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800596c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10d      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005976:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800597a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800597e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8005982:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005986:	4916      	ldr	r1, [pc, #88]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800598e:	e003      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8005994:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005998:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800599c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a0:	2100      	movs	r1, #0
 80059a2:	6039      	str	r1, [r7, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80059ae:	460b      	mov	r3, r1
 80059b0:	4313      	orrs	r3, r2
 80059b2:	d00c      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80059be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80059c2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80059c6:	4906      	ldr	r1, [pc, #24]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 80059ce:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80059d8:	46bd      	mov	sp, r7
 80059da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059de:	bf00      	nop
 80059e0:	44020c00 	.word	0x44020c00

080059e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b08b      	sub	sp, #44	; 0x2c
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80059ec:	4bad      	ldr	r3, [pc, #692]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80059f6:	4bab      	ldr	r3, [pc, #684]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005a00:	4ba8      	ldr	r3, [pc, #672]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a0a:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8005a0c:	4ba5      	ldr	r3, [pc, #660]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	f003 0310 	and.w	r3, r3, #16
 8005a14:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005a16:	4ba3      	ldr	r3, [pc, #652]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	08db      	lsrs	r3, r3, #3
 8005a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8126 	beq.w	8005c86 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d053      	beq.n	8005ae8 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b03      	cmp	r3, #3
 8005a44:	d86f      	bhi.n	8005b26 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d02b      	beq.n	8005aaa <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8005a52:	e068      	b.n	8005b26 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a54:	4b93      	ldr	r3, [pc, #588]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	08db      	lsrs	r3, r3, #3
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	4a92      	ldr	r2, [pc, #584]	; (8005ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	ee07 3a90 	vmov	s15, r3
 8005a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a7e:	6a3b      	ldr	r3, [r7, #32]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a88:	ed97 6a04 	vldr	s12, [r7, #16]
 8005a8c:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005cac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005aa8:	e068      	b.n	8005b7c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	ee07 3a90 	vmov	s15, r3
 8005ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005cb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8005ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac6:	ed97 6a04 	vldr	s12, [r7, #16]
 8005aca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005cac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005ae6:	e049      	b.n	8005b7c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	ee07 3a90 	vmov	s15, r3
 8005aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af2:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005cb4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8005af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b04:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b08:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005cac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005b0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b20:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005b24:	e02a      	b.n	8005b7c <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b26:	4b5f      	ldr	r3, [pc, #380]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	08db      	lsrs	r3, r3, #3
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	4a5d      	ldr	r2, [pc, #372]	; (8005ca8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8005b32:	fa22 f303 	lsr.w	r3, r2, r3
 8005b36:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005b5e:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005cac <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005b7a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b7c:	4b49      	ldr	r3, [pc, #292]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b88:	d121      	bne.n	8005bce <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005b8a:	4b46      	ldr	r3, [pc, #280]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d017      	beq.n	8005bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b96:	4b43      	ldr	r3, [pc, #268]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8005ba8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005bb0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bbc:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e002      	b.n	8005bd4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bd4:	4b33      	ldr	r3, [pc, #204]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be0:	d121      	bne.n	8005c26 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005be2:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d017      	beq.n	8005c1e <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005bee:	4b2d      	ldr	r3, [pc, #180]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	0c1b      	lsrs	r3, r3, #16
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c04:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005c08:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c14:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	e006      	b.n	8005c2c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	605a      	str	r2, [r3, #4]
 8005c24:	e002      	b.n	8005c2c <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c2c:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c38:	d121      	bne.n	8005c7e <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d017      	beq.n	8005c76 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005c46:	4b17      	ldr	r3, [pc, #92]	; (8005ca4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4a:	0e1b      	lsrs	r3, r3, #24
 8005c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8005c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8005c60:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c6c:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005c74:	e010      	b.n	8005c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	609a      	str	r2, [r3, #8]
}
 8005c7c:	e00c      	b.n	8005c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	609a      	str	r2, [r3, #8]
}
 8005c84:	e008      	b.n	8005c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	372c      	adds	r7, #44	; 0x2c
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	44020c00 	.word	0x44020c00
 8005ca8:	03d09000 	.word	0x03d09000
 8005cac:	46000000 	.word	0x46000000
 8005cb0:	4a742400 	.word	0x4a742400
 8005cb4:	4bbebc20 	.word	0x4bbebc20

08005cb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b08b      	sub	sp, #44	; 0x2c
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005cc0:	4bad      	ldr	r3, [pc, #692]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc8:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005cca:	4bab      	ldr	r3, [pc, #684]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8005cd4:	4ba8      	ldr	r3, [pc, #672]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	0a1b      	lsrs	r3, r3, #8
 8005cda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cde:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8005ce0:	4ba5      	ldr	r3, [pc, #660]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005cea:	4ba3      	ldr	r3, [pc, #652]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	08db      	lsrs	r3, r3, #3
 8005cf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	ee07 3a90 	vmov	s15, r3
 8005cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d02:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8126 	beq.w	8005f5a <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d053      	beq.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d86f      	bhi.n	8005dfa <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d02b      	beq.n	8005d7e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8005d26:	e068      	b.n	8005dfa <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d28:	4b93      	ldr	r3, [pc, #588]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	08db      	lsrs	r3, r3, #3
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	4a92      	ldr	r2, [pc, #584]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
 8005d38:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	ee07 3a90 	vmov	s15, r3
 8005d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5c:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d60:	eddf 5a87 	vldr	s11, [pc, #540]	; 8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005d64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005d7c:	e068      	b.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d88:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005f84 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8005d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a04 	vldr	s12, [r7, #16]
 8005d9e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005dba:	e049      	b.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005f88 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd8:	ed97 6a04 	vldr	s12, [r7, #16]
 8005ddc:	eddf 5a68 	vldr	s11, [pc, #416]	; 8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005de0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8005df8:	e02a      	b.n	8005e50 <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005dfa:	4b5f      	ldr	r3, [pc, #380]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	08db      	lsrs	r3, r3, #3
 8005e00:	f003 0303 	and.w	r3, r3, #3
 8005e04:	4a5d      	ldr	r2, [pc, #372]	; (8005f7c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8005e06:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0a:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	ee07 3a90 	vmov	s15, r3
 8005e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a04 	vldr	s12, [r7, #16]
 8005e32:	eddf 5a53 	vldr	s11, [pc, #332]	; 8005f80 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8005e4e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e50:	4b49      	ldr	r3, [pc, #292]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e5c:	d121      	bne.n	8005ea2 <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005e5e:	4b46      	ldr	r3, [pc, #280]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d017      	beq.n	8005e9a <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005e6a:	4b43      	ldr	r3, [pc, #268]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e6e:	0a5b      	lsrs	r3, r3, #9
 8005e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e74:	ee07 3a90 	vmov	s15, r3
 8005e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8005e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e80:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005e84:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e90:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	e002      	b.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ea8:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005eb4:	d121      	bne.n	8005efa <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005eb6:	4b30      	ldr	r3, [pc, #192]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d017      	beq.n	8005ef2 <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ecc:	ee07 3a90 	vmov	s15, r3
 8005ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005edc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee8:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	605a      	str	r2, [r3, #4]
 8005ef0:	e006      	b.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f00:	4b1d      	ldr	r3, [pc, #116]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f0c:	d121      	bne.n	8005f52 <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005f0e:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d017      	beq.n	8005f4a <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005f1a:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1e:	0e1b      	lsrs	r3, r3, #24
 8005f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8005f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f30:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8005f34:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f40:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f48:	e010      	b.n	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	609a      	str	r2, [r3, #8]
}
 8005f50:	e00c      	b.n	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	e008      	b.n	8005f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	372c      	adds	r7, #44	; 0x2c
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	44020c00 	.word	0x44020c00
 8005f7c:	03d09000 	.word	0x03d09000
 8005f80:	46000000 	.word	0x46000000
 8005f84:	4a742400 	.word	0x4a742400
 8005f88:	4bbebc20 	.word	0x4bbebc20

08005f8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b08b      	sub	sp, #44	; 0x2c
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005f94:	4bad      	ldr	r3, [pc, #692]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005f9e:	4bab      	ldr	r3, [pc, #684]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8005fa8:	4ba8      	ldr	r3, [pc, #672]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	0a1b      	lsrs	r3, r3, #8
 8005fae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fb2:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8005fb4:	4ba5      	ldr	r3, [pc, #660]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f003 0310 	and.w	r3, r3, #16
 8005fbc:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005fbe:	4ba3      	ldr	r3, [pc, #652]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8126 	beq.w	800622e <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d053      	beq.n	8006090 <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d86f      	bhi.n	80060ce <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d02b      	beq.n	8006052 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8005ffa:	e068      	b.n	80060ce <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005ffc:	4b93      	ldr	r3, [pc, #588]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f003 0303 	and.w	r3, r3, #3
 8006006:	4a92      	ldr	r2, [pc, #584]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006008:	fa22 f303 	lsr.w	r3, r2, r3
 800600c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	ee07 3a90 	vmov	s15, r3
 8006014:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006030:	ed97 6a04 	vldr	s12, [r7, #16]
 8006034:	eddf 5a87 	vldr	s11, [pc, #540]	; 8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006038:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006040:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006044:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006050:	e068      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800605c:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8006258 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8006060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 800608e:	e049      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800609a:	eddf 6a70 	vldr	s13, [pc, #448]	; 800625c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800609e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ac:	ed97 6a04 	vldr	s12, [r7, #16]
 80060b0:	eddf 5a68 	vldr	s11, [pc, #416]	; 8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80060b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80060cc:	e02a      	b.n	8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80060ce:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	08db      	lsrs	r3, r3, #3
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	4a5d      	ldr	r2, [pc, #372]	; (8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80060da:	fa22 f303 	lsr.w	r3, r2, r3
 80060de:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a04 	vldr	s12, [r7, #16]
 8006106:	eddf 5a53 	vldr	s11, [pc, #332]	; 8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8006122:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006124:	4b49      	ldr	r3, [pc, #292]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800612c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006130:	d121      	bne.n	8006176 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006132:	4b46      	ldr	r3, [pc, #280]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d017      	beq.n	800616e <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800613e:	4b43      	ldr	r3, [pc, #268]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006142:	0a5b      	lsrs	r3, r3, #9
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	ee07 3a90 	vmov	s15, r3
 800614c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8006150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006154:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006158:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800615c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006164:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e006      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	e002      	b.n	800617c <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800617c:	4b33      	ldr	r3, [pc, #204]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006188:	d121      	bne.n	80061ce <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800618a:	4b30      	ldr	r3, [pc, #192]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800618c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d017      	beq.n	80061c6 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006196:	4b2d      	ldr	r3, [pc, #180]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80061a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061ac:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80061b0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80061b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061bc:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	605a      	str	r2, [r3, #4]
 80061c4:	e006      	b.n	80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80061d4:	4b1d      	ldr	r3, [pc, #116]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e0:	d121      	bne.n	8006226 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80061e2:	4b1a      	ldr	r3, [pc, #104]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d017      	beq.n	800621e <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80061ee:	4b17      	ldr	r3, [pc, #92]	; (800624c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	0e1b      	lsrs	r3, r3, #24
 80061f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8006200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006204:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8006208:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800620c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006214:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800621c:	e010      	b.n	8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	e00c      	b.n	8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	609a      	str	r2, [r3, #8]
}
 800622c:	e008      	b.n	8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	372c      	adds	r7, #44	; 0x2c
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	44020c00 	.word	0x44020c00
 8006250:	03d09000 	.word	0x03d09000
 8006254:	46000000 	.word	0x46000000
 8006258:	4a742400 	.word	0x4a742400
 800625c:	4bbebc20 	.word	0x4bbebc20

08006260 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006260:	b590      	push	{r4, r7, lr}
 8006262:	b08f      	sub	sp, #60	; 0x3c
 8006264:	af00      	add	r7, sp, #0
 8006266:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800626a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800626e:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 8006272:	4321      	orrs	r1, r4
 8006274:	d150      	bne.n	8006318 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006276:	4b26      	ldr	r3, [pc, #152]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800627c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006280:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	2b02      	cmp	r3, #2
 800628e:	d108      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006296:	d104      	bne.n	80062a2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
 800629e:	f002 bb2a 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80062a2:	4b1b      	ldr	r3, [pc, #108]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062b0:	d108      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d104      	bne.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80062ba:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062be:	637b      	str	r3, [r7, #52]	; 0x34
 80062c0:	f002 bb19 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80062c4:	4b12      	ldr	r3, [pc, #72]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d0:	d119      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80062d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062d8:	d115      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062da:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80062e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e6:	d30a      	bcc.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80062e8:	4b09      	ldr	r3, [pc, #36]	; (8006310 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f2:	4a08      	ldr	r2, [pc, #32]	; (8006314 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80062fa:	f002 bafc 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006302:	f002 baf8 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
 800630a:	f002 baf4 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800630e:	bf00      	nop
 8006310:	44020c00 	.word	0x44020c00
 8006314:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800631c:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 8006320:	ea50 0104 	orrs.w	r1, r0, r4
 8006324:	f001 8275 	beq.w	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8006328:	e9d7 0100 	ldrd	r0, r1, [r7]
 800632c:	2801      	cmp	r0, #1
 800632e:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 8006332:	f082 82dd 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800633a:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800633e:	ea50 0104 	orrs.w	r1, r0, r4
 8006342:	f001 816c 	beq.w	800761e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8006346:	e9d7 0100 	ldrd	r0, r1, [r7]
 800634a:	2801      	cmp	r0, #1
 800634c:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 8006350:	f082 82ce 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006358:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 800635c:	ea50 0104 	orrs.w	r1, r0, r4
 8006360:	f001 8602 	beq.w	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8006364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006368:	2801      	cmp	r0, #1
 800636a:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 800636e:	f082 82bf 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006376:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 800637a:	ea50 0104 	orrs.w	r1, r0, r4
 800637e:	f001 854c 	beq.w	8007e1a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8006382:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006386:	2801      	cmp	r0, #1
 8006388:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 800638c:	f082 82b0 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006394:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 8006398:	ea50 0104 	orrs.w	r1, r0, r4
 800639c:	f001 849e 	beq.w	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80063a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063a4:	2801      	cmp	r0, #1
 80063a6:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80063aa:	f082 82a1 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063b2:	f1a1 0420 	sub.w	r4, r1, #32
 80063b6:	ea50 0104 	orrs.w	r1, r0, r4
 80063ba:	f001 83e8 	beq.w	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80063be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063c2:	2801      	cmp	r0, #1
 80063c4:	f171 0120 	sbcs.w	r1, r1, #32
 80063c8:	f082 8292 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063d0:	f1a1 0410 	sub.w	r4, r1, #16
 80063d4:	ea50 0104 	orrs.w	r1, r0, r4
 80063d8:	f002 8256 	beq.w	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80063dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063e0:	2801      	cmp	r0, #1
 80063e2:	f171 0110 	sbcs.w	r1, r1, #16
 80063e6:	f082 8283 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80063ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063ee:	f1a1 0408 	sub.w	r4, r1, #8
 80063f2:	ea50 0104 	orrs.w	r1, r0, r4
 80063f6:	f002 81cc 	beq.w	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80063fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80063fe:	2801      	cmp	r0, #1
 8006400:	f171 0108 	sbcs.w	r1, r1, #8
 8006404:	f082 8274 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800640c:	1f0c      	subs	r4, r1, #4
 800640e:	ea50 0104 	orrs.w	r1, r0, r4
 8006412:	f001 8648 	beq.w	80080a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8006416:	e9d7 0100 	ldrd	r0, r1, [r7]
 800641a:	2801      	cmp	r0, #1
 800641c:	f171 0104 	sbcs.w	r1, r1, #4
 8006420:	f082 8266 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006424:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006428:	1e8c      	subs	r4, r1, #2
 800642a:	ea50 0104 	orrs.w	r1, r0, r4
 800642e:	f002 8143 	beq.w	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8006432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006436:	2801      	cmp	r0, #1
 8006438:	f171 0102 	sbcs.w	r1, r1, #2
 800643c:	f082 8258 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006444:	1e4c      	subs	r4, r1, #1
 8006446:	ea50 0104 	orrs.w	r1, r0, r4
 800644a:	f002 80ce 	beq.w	80085ea <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800644e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006452:	2801      	cmp	r0, #1
 8006454:	f171 0101 	sbcs.w	r1, r1, #1
 8006458:	f082 824a 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800645c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006460:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 8006464:	4321      	orrs	r1, r4
 8006466:	f002 8059 	beq.w	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800646a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800646e:	4cd9      	ldr	r4, [pc, #868]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006470:	42a0      	cmp	r0, r4
 8006472:	f171 0100 	sbcs.w	r1, r1, #0
 8006476:	f082 823b 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800647a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800647e:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 8006482:	4321      	orrs	r1, r4
 8006484:	f001 87d9 	beq.w	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8006488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800648c:	4cd2      	ldr	r4, [pc, #840]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800648e:	42a0      	cmp	r0, r4
 8006490:	f171 0100 	sbcs.w	r1, r1, #0
 8006494:	f082 822c 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006498:	e9d7 0100 	ldrd	r0, r1, [r7]
 800649c:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80064a0:	4321      	orrs	r1, r4
 80064a2:	f001 8751 	beq.w	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80064a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064aa:	4ccc      	ldr	r4, [pc, #816]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	f171 0100 	sbcs.w	r1, r1, #0
 80064b2:	f082 821d 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064ba:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 80064be:	4321      	orrs	r1, r4
 80064c0:	f001 869a 	beq.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80064c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064c8:	4cc5      	ldr	r4, [pc, #788]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80064ca:	42a0      	cmp	r0, r4
 80064cc:	f171 0100 	sbcs.w	r1, r1, #0
 80064d0:	f082 820e 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064d8:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 80064dc:	4321      	orrs	r1, r4
 80064de:	f001 8612 	beq.w	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80064e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064e6:	4cbf      	ldr	r4, [pc, #764]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80064e8:	42a0      	cmp	r0, r4
 80064ea:	f171 0100 	sbcs.w	r1, r1, #0
 80064ee:	f082 81ff 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80064f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80064f6:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 80064fa:	4321      	orrs	r1, r4
 80064fc:	f002 817e 	beq.w	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8006500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006504:	4cb8      	ldr	r4, [pc, #736]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006506:	42a0      	cmp	r0, r4
 8006508:	f171 0100 	sbcs.w	r1, r1, #0
 800650c:	f082 81f0 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006510:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006514:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8006518:	4321      	orrs	r1, r4
 800651a:	f000 829e 	beq.w	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800651e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006522:	4cb2      	ldr	r4, [pc, #712]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006524:	42a0      	cmp	r0, r4
 8006526:	f171 0100 	sbcs.w	r1, r1, #0
 800652a:	f082 81e1 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800652e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006532:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8006536:	4321      	orrs	r1, r4
 8006538:	f000 826d 	beq.w	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800653c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006540:	4cab      	ldr	r4, [pc, #684]	; (80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006542:	42a0      	cmp	r0, r4
 8006544:	f171 0100 	sbcs.w	r1, r1, #0
 8006548:	f082 81d2 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800654c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006550:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8006554:	4321      	orrs	r1, r4
 8006556:	f001 800d 	beq.w	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800655a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800655e:	4ca5      	ldr	r4, [pc, #660]	; (80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006560:	42a0      	cmp	r0, r4
 8006562:	f171 0100 	sbcs.w	r1, r1, #0
 8006566:	f082 81c3 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800656a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800656e:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8006572:	4321      	orrs	r1, r4
 8006574:	f000 81d0 	beq.w	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8006578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800657c:	4c9e      	ldr	r4, [pc, #632]	; (80067f8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800657e:	42a0      	cmp	r0, r4
 8006580:	f171 0100 	sbcs.w	r1, r1, #0
 8006584:	f082 81b4 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006588:	e9d7 0100 	ldrd	r0, r1, [r7]
 800658c:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8006590:	4321      	orrs	r1, r4
 8006592:	f000 8142 	beq.w	800681a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8006596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800659a:	4c98      	ldr	r4, [pc, #608]	; (80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800659c:	42a0      	cmp	r0, r4
 800659e:	f171 0100 	sbcs.w	r1, r1, #0
 80065a2:	f082 81a5 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065aa:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 80065ae:	4321      	orrs	r1, r4
 80065b0:	f001 824e 	beq.w	8007a50 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80065b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065b8:	4c91      	ldr	r4, [pc, #580]	; (8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80065ba:	42a0      	cmp	r0, r4
 80065bc:	f171 0100 	sbcs.w	r1, r1, #0
 80065c0:	f082 8196 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065c8:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 80065cc:	4321      	orrs	r1, r4
 80065ce:	f001 8197 	beq.w	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80065d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065d6:	4c8b      	ldr	r4, [pc, #556]	; (8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80065d8:	42a0      	cmp	r0, r4
 80065da:	f171 0100 	sbcs.w	r1, r1, #0
 80065de:	f082 8187 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80065e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065e6:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 80065ea:	4321      	orrs	r1, r4
 80065ec:	f001 8154 	beq.w	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80065f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065f4:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 80065f8:	f171 0100 	sbcs.w	r1, r1, #0
 80065fc:	f082 8178 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006600:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006604:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8006608:	4321      	orrs	r1, r4
 800660a:	f001 80b7 	beq.w	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800660e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006612:	f248 0401 	movw	r4, #32769	; 0x8001
 8006616:	42a0      	cmp	r0, r4
 8006618:	f171 0100 	sbcs.w	r1, r1, #0
 800661c:	f082 8168 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006624:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8006628:	4321      	orrs	r1, r4
 800662a:	f001 8064 	beq.w	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800662e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006632:	f244 0401 	movw	r4, #16385	; 0x4001
 8006636:	42a0      	cmp	r0, r4
 8006638:	f171 0100 	sbcs.w	r1, r1, #0
 800663c:	f082 8158 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006644:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8006648:	4321      	orrs	r1, r4
 800664a:	f001 8011 	beq.w	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800664e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006652:	f242 0401 	movw	r4, #8193	; 0x2001
 8006656:	42a0      	cmp	r0, r4
 8006658:	f171 0100 	sbcs.w	r1, r1, #0
 800665c:	f082 8148 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006664:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8006668:	4321      	orrs	r1, r4
 800666a:	f000 871e 	beq.w	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800666e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006672:	f241 0401 	movw	r4, #4097	; 0x1001
 8006676:	42a0      	cmp	r0, r4
 8006678:	f171 0100 	sbcs.w	r1, r1, #0
 800667c:	f082 8138 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006684:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8006688:	4321      	orrs	r1, r4
 800668a:	f000 86a8 	beq.w	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800668e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006692:	f640 0401 	movw	r4, #2049	; 0x801
 8006696:	42a0      	cmp	r0, r4
 8006698:	f171 0100 	sbcs.w	r1, r1, #0
 800669c:	f082 8128 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066a4:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 80066a8:	4321      	orrs	r1, r4
 80066aa:	f000 8632 	beq.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80066ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066b2:	f240 4401 	movw	r4, #1025	; 0x401
 80066b6:	42a0      	cmp	r0, r4
 80066b8:	f171 0100 	sbcs.w	r1, r1, #0
 80066bc:	f082 8118 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066c4:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 80066c8:	4321      	orrs	r1, r4
 80066ca:	f000 85b0 	beq.w	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80066ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066d2:	f240 2401 	movw	r4, #513	; 0x201
 80066d6:	42a0      	cmp	r0, r4
 80066d8:	f171 0100 	sbcs.w	r1, r1, #0
 80066dc:	f082 8108 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80066e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066e4:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 80066e8:	4321      	orrs	r1, r4
 80066ea:	f000 8535 	beq.w	8007158 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80066ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80066f2:	f240 1401 	movw	r4, #257	; 0x101
 80066f6:	42a0      	cmp	r0, r4
 80066f8:	f171 0100 	sbcs.w	r1, r1, #0
 80066fc:	f082 80f8 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006704:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8006708:	4321      	orrs	r1, r4
 800670a:	f000 84ba 	beq.w	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800670e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006712:	2881      	cmp	r0, #129	; 0x81
 8006714:	f171 0100 	sbcs.w	r1, r1, #0
 8006718:	f082 80ea 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800671c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006720:	2821      	cmp	r0, #33	; 0x21
 8006722:	f171 0100 	sbcs.w	r1, r1, #0
 8006726:	d26f      	bcs.n	8006808 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800672c:	4301      	orrs	r1, r0
 800672e:	f002 80df 	beq.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006732:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006736:	1e42      	subs	r2, r0, #1
 8006738:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 800673c:	2a20      	cmp	r2, #32
 800673e:	f173 0100 	sbcs.w	r1, r3, #0
 8006742:	f082 80d5 	bcs.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8006746:	2a1f      	cmp	r2, #31
 8006748:	f202 80d2 	bhi.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800674c:	a101      	add	r1, pc, #4	; (adr r1, 8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800674e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006ab5 	.word	0x08006ab5
 8006758:	08006b81 	.word	0x08006b81
 800675c:	080088f1 	.word	0x080088f1
 8006760:	08006c41 	.word	0x08006c41
 8006764:	080088f1 	.word	0x080088f1
 8006768:	080088f1 	.word	0x080088f1
 800676c:	080088f1 	.word	0x080088f1
 8006770:	08006d11 	.word	0x08006d11
 8006774:	080088f1 	.word	0x080088f1
 8006778:	080088f1 	.word	0x080088f1
 800677c:	080088f1 	.word	0x080088f1
 8006780:	080088f1 	.word	0x080088f1
 8006784:	080088f1 	.word	0x080088f1
 8006788:	080088f1 	.word	0x080088f1
 800678c:	080088f1 	.word	0x080088f1
 8006790:	08006df3 	.word	0x08006df3
 8006794:	080088f1 	.word	0x080088f1
 8006798:	080088f1 	.word	0x080088f1
 800679c:	080088f1 	.word	0x080088f1
 80067a0:	080088f1 	.word	0x080088f1
 80067a4:	080088f1 	.word	0x080088f1
 80067a8:	080088f1 	.word	0x080088f1
 80067ac:	080088f1 	.word	0x080088f1
 80067b0:	080088f1 	.word	0x080088f1
 80067b4:	080088f1 	.word	0x080088f1
 80067b8:	080088f1 	.word	0x080088f1
 80067bc:	080088f1 	.word	0x080088f1
 80067c0:	080088f1 	.word	0x080088f1
 80067c4:	080088f1 	.word	0x080088f1
 80067c8:	080088f1 	.word	0x080088f1
 80067cc:	080088f1 	.word	0x080088f1
 80067d0:	08006ec9 	.word	0x08006ec9
 80067d4:	80000001 	.word	0x80000001
 80067d8:	40000001 	.word	0x40000001
 80067dc:	20000001 	.word	0x20000001
 80067e0:	10000001 	.word	0x10000001
 80067e4:	08000001 	.word	0x08000001
 80067e8:	04000001 	.word	0x04000001
 80067ec:	00800001 	.word	0x00800001
 80067f0:	00400001 	.word	0x00400001
 80067f4:	00200001 	.word	0x00200001
 80067f8:	00100001 	.word	0x00100001
 80067fc:	00080001 	.word	0x00080001
 8006800:	00040001 	.word	0x00040001
 8006804:	00020001 	.word	0x00020001
 8006808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800680c:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006810:	430b      	orrs	r3, r1
 8006812:	f000 83c4 	beq.w	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8006816:	f002 b86b 	b.w	80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800681a:	4ba1      	ldr	r3, [pc, #644]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800681c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006820:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006824:	633b      	str	r3, [r7, #48]	; 0x30
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800682c:	d036      	beq.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006834:	d86b      	bhi.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800683c:	d02b      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006844:	d863      	bhi.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684c:	d01b      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006854:	d85b      	bhi.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006862:	d008      	beq.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8006864:	e053      	b.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006866:	f107 0320 	add.w	r3, r7, #32
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f8ba 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006874:	e04e      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fa1c 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006884:	e046      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006886:	f107 0308 	add.w	r3, r7, #8
 800688a:	4618      	mov	r0, r3
 800688c:	f7ff fb7e 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006894:	e03e      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006896:	4b83      	ldr	r3, [pc, #524]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800689a:	e03b      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800689c:	4b80      	ldr	r3, [pc, #512]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800689e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80068a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068a8:	4b7d      	ldr	r3, [pc, #500]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d10c      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80068ba:	4b79      	ldr	r3, [pc, #484]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	08db      	lsrs	r3, r3, #3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	4a78      	ldr	r2, [pc, #480]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80068c6:	fa22 f303 	lsr.w	r3, r2, r3
 80068ca:	637b      	str	r3, [r7, #52]	; 0x34
 80068cc:	e01e      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ce:	4b74      	ldr	r3, [pc, #464]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068da:	d106      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d102      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80068e4:	4b71      	ldr	r3, [pc, #452]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34
 80068e8:	e010      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068ea:	4b6d      	ldr	r3, [pc, #436]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068f6:	d106      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80068f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068fe:	d102      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006900:	4b6b      	ldr	r3, [pc, #428]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
 8006904:	e002      	b.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800690a:	e003      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800690c:	e002      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006912:	bf00      	nop
          }
        }
        break;
 8006914:	f001 bfef 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006918:	4b61      	ldr	r3, [pc, #388]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800691a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800691e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8006922:	633b      	str	r3, [r7, #48]	; 0x30
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800692a:	d036      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006932:	d86b      	bhi.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800693a:	d02b      	beq.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006942:	d863      	bhi.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694a:	d01b      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006952:	d85b      	bhi.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006956:	2b00      	cmp	r3, #0
 8006958:	d004      	beq.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006960:	d008      	beq.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8006962:	e053      	b.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006964:	f107 0320 	add.w	r3, r7, #32
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff f83b 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006972:	e04e      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006974:	f107 0314 	add.w	r3, r7, #20
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff f99d 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006982:	e046      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006984:	f107 0308 	add.w	r3, r7, #8
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff faff 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006992:	e03e      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006994:	4b43      	ldr	r3, [pc, #268]	; (8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006996:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006998:	e03b      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800699a:	4b41      	ldr	r3, [pc, #260]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800699c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069a6:	4b3e      	ldr	r3, [pc, #248]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d10c      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80069b8:	4b39      	ldr	r3, [pc, #228]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	08db      	lsrs	r3, r3, #3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	4a39      	ldr	r2, [pc, #228]	; (8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ca:	e01e      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80069cc:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d8:	d106      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d102      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80069e2:	4b32      	ldr	r3, [pc, #200]	; (8006aac <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80069e4:	637b      	str	r3, [r7, #52]	; 0x34
 80069e6:	e010      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80069e8:	4b2d      	ldr	r3, [pc, #180]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069f4:	d106      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80069f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069fc:	d102      	bne.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80069fe:	4b2c      	ldr	r3, [pc, #176]	; (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006a00:	637b      	str	r3, [r7, #52]	; 0x34
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006a08:	e003      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8006a0a:	e002      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006a10:	bf00      	nop
          }
        }
        break;
 8006a12:	f001 bf70 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8006a16:	4b22      	ldr	r3, [pc, #136]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a28:	f107 0320 	add.w	r3, r7, #32
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f7fe ffd9 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a36:	f001 bf5e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d108      	bne.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a40:	f107 0314 	add.w	r3, r7, #20
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7ff f937 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a4e:	f001 bf52 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006a52:	2300      	movs	r3, #0
 8006a54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a56:	f001 bf4e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8006a5a:	4b11      	ldr	r3, [pc, #68]	; (8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006a5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a64:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d108      	bne.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6c:	f107 0320 	add.w	r3, r7, #32
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe ffb7 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a7a:	f001 bf3c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2b80      	cmp	r3, #128	; 0x80
 8006a82:	d108      	bne.n	8006a96 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7ff f915 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a92:	f001 bf30 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9a:	f001 bf2c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a9e:	bf00      	nop
 8006aa0:	44020c00 	.word	0x44020c00
 8006aa4:	00bb8000 	.word	0x00bb8000
 8006aa8:	03d09000 	.word	0x03d09000
 8006aac:	003d0900 	.word	0x003d0900
 8006ab0:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006ab4:	4b9d      	ldr	r3, [pc, #628]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ab6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d104      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ac6:	f7fc ffd7 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8006aca:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006acc:	f001 bf13 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006ad0:	4b96      	ldr	r3, [pc, #600]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006adc:	d10a      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8006ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d107      	bne.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff f8e5 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
 8006af2:	e043      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8006af4:	4b8d      	ldr	r3, [pc, #564]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b00:	d10a      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d107      	bne.n	8006b18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b08:	f107 0308 	add.w	r3, r7, #8
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fa3d 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
 8006b16:	e031      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b18:	4b84      	ldr	r3, [pc, #528]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d10c      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	d109      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b2a:	4b80      	ldr	r3, [pc, #512]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	08db      	lsrs	r3, r3, #3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	4a7e      	ldr	r2, [pc, #504]	; (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006b36:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b3c:	e01e      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006b3e:	4b7b      	ldr	r3, [pc, #492]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b4a:	d105      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8006b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d102      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8006b52:	4b78      	ldr	r3, [pc, #480]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006b54:	637b      	str	r3, [r7, #52]	; 0x34
 8006b56:	e011      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006b58:	4b74      	ldr	r3, [pc, #464]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d106      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	2b05      	cmp	r3, #5
 8006b6a:	d103      	bne.n	8006b74 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8006b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	e003      	b.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b78:	f001 bebd 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b7c:	f001 bebb 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b80:	4b6a      	ldr	r3, [pc, #424]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b8a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d104      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006b92:	f7fc ff5b 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006b96:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b98:	f001 bead 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006b9c:	4b63      	ldr	r3, [pc, #396]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ba4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ba8:	d10a      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d107      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bb0:	f107 0314 	add.w	r3, r7, #20
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff f87f 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbe:	e03d      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	2b10      	cmp	r3, #16
 8006bc4:	d108      	bne.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bc6:	f107 0308 	add.w	r3, r7, #8
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff f9de 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bd4:	f001 be8f 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006bd8:	4b54      	ldr	r3, [pc, #336]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0302 	and.w	r3, r3, #2
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d10c      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be6:	2b18      	cmp	r3, #24
 8006be8:	d109      	bne.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bea:	4b50      	ldr	r3, [pc, #320]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	08db      	lsrs	r3, r3, #3
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfc:	e01e      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006bfe:	4b4b      	ldr	r3, [pc, #300]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0a:	d105      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d102      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8006c12:	4b48      	ldr	r3, [pc, #288]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006c14:	637b      	str	r3, [r7, #52]	; 0x34
 8006c16:	e011      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006c18:	4b44      	ldr	r3, [pc, #272]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d106      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	2b28      	cmp	r3, #40	; 0x28
 8006c2a:	d103      	bne.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8006c2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
 8006c32:	e003      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c38:	f001 be5d 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c3c:	f001 be5b 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006c40:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c46:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c52:	f7fc fefb 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006c56:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c58:	f001 be4d 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006c5c:	4b33      	ldr	r3, [pc, #204]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c68:	d10a      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d107      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7ff f81f 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7e:	e045      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8006c80:	4b2a      	ldr	r3, [pc, #168]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c8c:	d10a      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	2b80      	cmp	r3, #128	; 0x80
 8006c92:	d107      	bne.n	8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c94:	f107 0308 	add.w	r3, r7, #8
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff f977 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ca2:	e033      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006ca4:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d10c      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cb4:	d109      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cb6:	4b1d      	ldr	r3, [pc, #116]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	08db      	lsrs	r3, r3, #3
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	e020      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8006ce0:	4b14      	ldr	r3, [pc, #80]	; (8006d34 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8006ce2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce4:	e012      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006ce6:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006ce8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cec:	f003 0302 	and.w	r3, r3, #2
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d107      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006cfa:	d103      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8006cfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d00:	637b      	str	r3, [r7, #52]	; 0x34
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8006d04:	2300      	movs	r3, #0
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d08:	f001 bdf5 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d0c:	f001 bdf3 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006d10:	4b06      	ldr	r3, [pc, #24]	; (8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8006d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006d16:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d22:	f7fc fe93 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006d26:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d28:	f001 bde5 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d2c:	44020c00 	.word	0x44020c00
 8006d30:	03d09000 	.word	0x03d09000
 8006d34:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8006d38:	4ba0      	ldr	r3, [pc, #640]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d44:	d10b      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d4c:	d107      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe ffb0 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d5c:	e047      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8006d5e:	4b97      	ldr	r3, [pc, #604]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d72:	d107      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7ff f907 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	637b      	str	r3, [r7, #52]	; 0x34
 8006d82:	e034      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006d84:	4b8d      	ldr	r3, [pc, #564]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d10d      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d96:	d109      	bne.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d98:	4b88      	ldr	r3, [pc, #544]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f003 0303 	and.w	r3, r3, #3
 8006da2:	4a87      	ldr	r2, [pc, #540]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006da4:	fa22 f303 	lsr.w	r3, r2, r3
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
 8006daa:	e020      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8006dac:	4b83      	ldr	r3, [pc, #524]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d106      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc0:	d102      	bne.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8006dc2:	4b80      	ldr	r3, [pc, #512]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc6:	e012      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006dc8:	4b7c      	ldr	r3, [pc, #496]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006ddc:	d103      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de2:	637b      	str	r3, [r7, #52]	; 0x34
 8006de4:	e003      	b.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006dea:	f001 bd84 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dee:	f001 bd82 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006df2:	4b72      	ldr	r3, [pc, #456]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006df8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006dfc:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e04:	f7fc fe22 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006e08:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8006e0a:	f001 bd74 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8006e0e:	4b6b      	ldr	r3, [pc, #428]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e22:	d107      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e24:	f107 0314 	add.w	r3, r7, #20
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe ff45 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	e047      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8006e34:	4b61      	ldr	r3, [pc, #388]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e40:	d10b      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8006e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e48:	d107      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f89c 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
 8006e58:	e034      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006e5a:	4b58      	ldr	r3, [pc, #352]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d10d      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e6c:	d109      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e6e:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	08db      	lsrs	r3, r3, #3
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	4a51      	ldr	r2, [pc, #324]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	e020      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8006e82:	4b4e      	ldr	r3, [pc, #312]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d106      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e96:	d102      	bne.n	8006e9e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8006e98:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9c:	e012      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006e9e:	4b47      	ldr	r3, [pc, #284]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d107      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006eb2:	d103      	bne.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8006eb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ec0:	f001 bd19 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006ec4:	f001 bd17 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006ec8:	4b3c      	ldr	r3, [pc, #240]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006eca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006ece:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006ed2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006eda:	f7fc fdb7 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006ede:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8006ee0:	f001 bd09 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8006ee4:	4b35      	ldr	r3, [pc, #212]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ef0:	d10b      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006efa:	f107 0314 	add.w	r3, r7, #20
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe feda 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
 8006f08:	e047      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8006f0a:	4b2c      	ldr	r3, [pc, #176]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f16:	d10b      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f20:	f107 0308 	add.w	r3, r7, #8
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff f831 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2e:	e034      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006f30:	4b22      	ldr	r3, [pc, #136]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0302 	and.w	r3, r3, #2
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d10d      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006f42:	d109      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f44:	4b1d      	ldr	r3, [pc, #116]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	08db      	lsrs	r3, r3, #3
 8006f4a:	f003 0303 	and.w	r3, r3, #3
 8006f4e:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8006f50:	fa22 f303 	lsr.w	r3, r2, r3
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	e020      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8006f58:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f64:	d106      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f6c:	d102      	bne.n	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8006f6e:	4b15      	ldr	r3, [pc, #84]	; (8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8006f70:	637b      	str	r3, [r7, #52]	; 0x34
 8006f72:	e012      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006f74:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d107      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006f88:	d103      	bne.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006f96:	f001 bcae 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006f9a:	f001 bcac 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8006fa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006fa4:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 8006fa8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10b      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fb0:	f7fc fd4c 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8006fb4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fb6:	f001 bc9e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006fba:	bf00      	nop
 8006fbc:	44020c00 	.word	0x44020c00
 8006fc0:	03d09000 	.word	0x03d09000
 8006fc4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8006fc8:	4ba0      	ldr	r3, [pc, #640]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fd4:	d10b      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fdc:	d107      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fde:	f107 0314 	add.w	r3, r7, #20
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fe68 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
 8006fec:	e047      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8006fee:	4b97      	ldr	r3, [pc, #604]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffa:	d10b      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8006ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007002:	d107      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007004:	f107 0308 	add.w	r3, r7, #8
 8007008:	4618      	mov	r0, r3
 800700a:	f7fe ffbf 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
 8007012:	e034      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007014:	4b8d      	ldr	r3, [pc, #564]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b02      	cmp	r3, #2
 800701e:	d10d      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007022:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007026:	d109      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007028:	4b88      	ldr	r3, [pc, #544]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	08db      	lsrs	r3, r3, #3
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	4a87      	ldr	r2, [pc, #540]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8007034:	fa22 f303 	lsr.w	r3, r2, r3
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	e020      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800703c:	4b83      	ldr	r3, [pc, #524]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007048:	d106      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007050:	d102      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8007052:	4b80      	ldr	r3, [pc, #512]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	e012      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007058:	4b7c      	ldr	r3, [pc, #496]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800705a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b02      	cmp	r3, #2
 8007064:	d107      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800706c:	d103      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800706e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007072:	637b      	str	r3, [r7, #52]	; 0x34
 8007074:	e003      	b.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800707a:	f001 bc3c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800707e:	f001 bc3a 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8007082:	4b72      	ldr	r3, [pc, #456]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007084:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007088:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800708c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007094:	f7fc fcda 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007098:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800709a:	f001 bc2c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800709e:	4b6b      	ldr	r3, [pc, #428]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070aa:	d10b      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b2:	d107      	bne.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b4:	f107 0314 	add.w	r3, r7, #20
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fe fdfd 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
 80070c2:	e047      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80070c4:	4b61      	ldr	r3, [pc, #388]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070d0:	d10b      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070d8:	d107      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070da:	f107 0308 	add.w	r3, r7, #8
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fe ff54 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
 80070e8:	e034      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80070ea:	4b58      	ldr	r3, [pc, #352]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d10d      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80070fc:	d109      	bne.n	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070fe:	4b53      	ldr	r3, [pc, #332]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	08db      	lsrs	r3, r3, #3
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	4a51      	ldr	r2, [pc, #324]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800710a:	fa22 f303 	lsr.w	r3, r2, r3
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
 8007110:	e020      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007112:	4b4e      	ldr	r3, [pc, #312]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800711a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800711e:	d106      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007126:	d102      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8007128:	4b4a      	ldr	r3, [pc, #296]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
 800712c:	e012      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800712e:	4b47      	ldr	r3, [pc, #284]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b02      	cmp	r3, #2
 800713a:	d107      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007142:	d103      	bne.n	800714c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8007144:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
 800714a:	e003      	b.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007150:	f001 bbd1 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007154:	f001 bbcf 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8007158:	4b3c      	ldr	r3, [pc, #240]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800715a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800715e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007162:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800716a:	f7fc fc6f 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 800716e:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8007170:	f001 bbc1 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8007174:	4b35      	ldr	r3, [pc, #212]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800717c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007180:	d10b      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007188:	d107      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800718a:	f107 0314 	add.w	r3, r7, #20
 800718e:	4618      	mov	r0, r3
 8007190:	f7fe fd92 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
 8007198:	e047      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800719a:	4b2c      	ldr	r3, [pc, #176]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071a6:	d10b      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071ae:	d107      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b0:	f107 0308 	add.w	r3, r7, #8
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7fe fee9 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
 80071be:	e034      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80071c0:	4b22      	ldr	r3, [pc, #136]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0302 	and.w	r3, r3, #2
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d10d      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80071cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80071d2:	d109      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071d4:	4b1d      	ldr	r3, [pc, #116]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	08db      	lsrs	r3, r3, #3
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	e020      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80071e8:	4b18      	ldr	r3, [pc, #96]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071fc:	d102      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 80071fe:	4b15      	ldr	r3, [pc, #84]	; (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	e012      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8007204:	4b11      	ldr	r3, [pc, #68]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007206:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800720a:	f003 0302 	and.w	r3, r3, #2
 800720e:	2b02      	cmp	r3, #2
 8007210:	d107      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007218:	d103      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800721a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800721e:	637b      	str	r3, [r7, #52]	; 0x34
 8007220:	e003      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007226:	f001 bb66 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800722a:	f001 bb64 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800722e:	4b07      	ldr	r3, [pc, #28]	; (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007234:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8007238:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10b      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007240:	f7fc fc04 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007244:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8007246:	f001 bb56 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800724a:	bf00      	nop
 800724c:	44020c00 	.word	0x44020c00
 8007250:	03d09000 	.word	0x03d09000
 8007254:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007258:	4ba1      	ldr	r3, [pc, #644]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007264:	d10b      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800726c:	d107      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726e:	f107 0314 	add.w	r3, r7, #20
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd20 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	637b      	str	r3, [r7, #52]	; 0x34
 800727c:	e047      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800727e:	4b98      	ldr	r3, [pc, #608]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800728a:	d10b      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007292:	d107      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007294:	f107 0308 	add.w	r3, r7, #8
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe fe77 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34
 80072a2:	e034      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80072a4:	4b8e      	ldr	r3, [pc, #568]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d10d      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80072b6:	d109      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072b8:	4b89      	ldr	r3, [pc, #548]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	08db      	lsrs	r3, r3, #3
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	4a88      	ldr	r2, [pc, #544]	; (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ca:	e020      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80072cc:	4b84      	ldr	r3, [pc, #528]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d8:	d106      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e0:	d102      	bne.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80072e2:	4b81      	ldr	r3, [pc, #516]	; (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
 80072e6:	e012      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80072e8:	4b7d      	ldr	r3, [pc, #500]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80072ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d107      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80072fc:	d103      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
 8007304:	e003      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730a:	f001 baf4 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800730e:	f001 baf2 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8007312:	4b73      	ldr	r3, [pc, #460]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007314:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007324:	f7fc fb92 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007328:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800732a:	f001 bae4 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800732e:	4b6c      	ldr	r3, [pc, #432]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800733a:	d10a      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2b01      	cmp	r3, #1
 8007340:	d107      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007342:	f107 0314 	add.w	r3, r7, #20
 8007346:	4618      	mov	r0, r3
 8007348:	f7fe fcb6 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
 8007350:	e043      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8007352:	4b63      	ldr	r3, [pc, #396]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800735a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800735e:	d10a      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	2b02      	cmp	r3, #2
 8007364:	d107      	bne.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007366:	f107 0308 	add.w	r3, r7, #8
 800736a:	4618      	mov	r0, r3
 800736c:	f7fe fe0e 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	637b      	str	r3, [r7, #52]	; 0x34
 8007374:	e031      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8007376:	4b5a      	ldr	r3, [pc, #360]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 0302 	and.w	r3, r3, #2
 800737e:	2b02      	cmp	r3, #2
 8007380:	d10c      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	2b03      	cmp	r3, #3
 8007386:	d109      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007388:	4b55      	ldr	r3, [pc, #340]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	08db      	lsrs	r3, r3, #3
 800738e:	f003 0303 	and.w	r3, r3, #3
 8007392:	4a54      	ldr	r2, [pc, #336]	; (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007394:	fa22 f303 	lsr.w	r3, r2, r3
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
 800739a:	e01e      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800739c:	4b50      	ldr	r3, [pc, #320]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a8:	d105      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	2b04      	cmp	r3, #4
 80073ae:	d102      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80073b0:	4b4d      	ldr	r3, [pc, #308]	; (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
 80073b4:	e011      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80073b6:	4b4a      	ldr	r3, [pc, #296]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d106      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80073c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d103      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80073ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
 80073d0:	e003      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d6:	f001 ba8e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80073da:	f001 ba8c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80073de:	4b40      	ldr	r3, [pc, #256]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073e8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d104      	bne.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80073f0:	f7fc fb2c 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 80073f4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80073f6:	f001 ba7e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80073fa:	4b39      	ldr	r3, [pc, #228]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007406:	d10a      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b10      	cmp	r3, #16
 800740c:	d107      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800740e:	f107 0314 	add.w	r3, r7, #20
 8007412:	4618      	mov	r0, r3
 8007414:	f7fe fc50 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	637b      	str	r3, [r7, #52]	; 0x34
 800741c:	e043      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800741e:	4b30      	ldr	r3, [pc, #192]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742a:	d10a      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800742c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742e:	2b20      	cmp	r3, #32
 8007430:	d107      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007432:	f107 0308 	add.w	r3, r7, #8
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fda8 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
 8007440:	e031      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007442:	4b27      	ldr	r3, [pc, #156]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b02      	cmp	r3, #2
 800744c:	d10c      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	2b30      	cmp	r3, #48	; 0x30
 8007452:	d109      	bne.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007454:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	08db      	lsrs	r3, r3, #3
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	4a21      	ldr	r2, [pc, #132]	; (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
 8007466:	e01e      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007474:	d105      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	2b40      	cmp	r3, #64	; 0x40
 800747a:	d102      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800747c:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e011      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8007484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	2b02      	cmp	r3, #2
 800748e:	d106      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2b50      	cmp	r3, #80	; 0x50
 8007494:	d103      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8007496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	e003      	b.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a2:	f001 ba28 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074a6:	f001 ba26 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80074aa:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80074ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074b0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80074b4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d104      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80074bc:	f7fc faf2 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 80074c0:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80074c2:	f001 ba18 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80074cc:	d10e      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074ce:	f107 0314 	add.w	r3, r7, #20
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fe fbf0 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80074d8:	69bb      	ldr	r3, [r7, #24]
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074dc:	f001 ba0b 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80074e0:	44020c00 	.word	0x44020c00
 80074e4:	03d09000 	.word	0x03d09000
 80074e8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074f2:	d108      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074f4:	f107 0308 	add.w	r3, r7, #8
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fd47 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007502:	f001 b9f8 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007506:	4ba4      	ldr	r3, [pc, #656]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d10d      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007518:	d109      	bne.n	800752e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800751a:	4b9f      	ldr	r3, [pc, #636]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	08db      	lsrs	r3, r3, #3
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	4a9d      	ldr	r2, [pc, #628]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8007526:	fa22 f303 	lsr.w	r3, r2, r3
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
 800752c:	e020      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800752e:	4b9a      	ldr	r3, [pc, #616]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800753a:	d106      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007542:	d102      	bne.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8007544:	4b96      	ldr	r3, [pc, #600]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
 8007548:	e012      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800754a:	4b93      	ldr	r3, [pc, #588]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800754c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007550:	f003 0302 	and.w	r3, r3, #2
 8007554:	2b02      	cmp	r3, #2
 8007556:	d107      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800755e:	d103      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8007560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007564:	637b      	str	r3, [r7, #52]	; 0x34
 8007566:	e003      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756c:	f001 b9c3 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007570:	f001 b9c1 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007574:	4b88      	ldr	r3, [pc, #544]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800757a:	f003 0307 	and.w	r3, r3, #7
 800757e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	2b00      	cmp	r3, #0
 8007584:	d104      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8007586:	f7fc fa45 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 800758a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800758c:	f001 b9b3 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007592:	2b01      	cmp	r3, #1
 8007594:	d104      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8007596:	f7fc f911 	bl	80037bc <HAL_RCC_GetSysClockFreq>
 800759a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800759c:	f001 b9ab 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d108      	bne.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075a6:	f107 0314 	add.w	r3, r7, #20
 80075aa:	4618      	mov	r0, r3
 80075ac:	f7fe fb84 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b4:	f001 b99f 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80075b8:	4b77      	ldr	r3, [pc, #476]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075c4:	d105      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2b03      	cmp	r3, #3
 80075ca:	d102      	bne.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80075cc:	4b75      	ldr	r3, [pc, #468]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
 80075d0:	e023      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80075d2:	4b71      	ldr	r3, [pc, #452]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d10c      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d109      	bne.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075e4:	4b6c      	ldr	r3, [pc, #432]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	08db      	lsrs	r3, r3, #3
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	4a6b      	ldr	r2, [pc, #428]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80075f0:	fa22 f303 	lsr.w	r3, r2, r3
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	e010      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80075f8:	4b67      	ldr	r3, [pc, #412]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007604:	d105      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	2b05      	cmp	r3, #5
 800760a:	d102      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800760c:	4b64      	ldr	r3, [pc, #400]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	e003      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007616:	f001 b96e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800761a:	f001 b96c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800761e:	4b5e      	ldr	r3, [pc, #376]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800762a:	4b5b      	ldr	r3, [pc, #364]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800762c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b02      	cmp	r3, #2
 8007636:	d106      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800763e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
 8007644:	e012      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8007646:	4b54      	ldr	r3, [pc, #336]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800764c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007654:	d106      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8007656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007658:	2b08      	cmp	r3, #8
 800765a:	d103      	bne.n	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800765c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
 8007662:	e003      	b.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8007668:	f001 b945 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800766c:	f001 b943 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007670:	4b49      	ldr	r3, [pc, #292]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007672:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007676:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800767a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	2b00      	cmp	r3, #0
 8007680:	d104      	bne.n	800768c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007682:	f7fc f9e3 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007686:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007688:	f001 b935 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007692:	d108      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007694:	f107 0308 	add.w	r3, r7, #8
 8007698:	4618      	mov	r0, r3
 800769a:	f7fe fc77 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076a2:	f001 b928 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80076a6:	4b3c      	ldr	r3, [pc, #240]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d10d      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b8:	d109      	bne.n	80076ce <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80076ba:	4b37      	ldr	r3, [pc, #220]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	08db      	lsrs	r3, r3, #3
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	4a35      	ldr	r2, [pc, #212]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80076c6:	fa22 f303 	lsr.w	r3, r2, r3
 80076ca:	637b      	str	r3, [r7, #52]	; 0x34
 80076cc:	e011      	b.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80076ce:	4b32      	ldr	r3, [pc, #200]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076da:	d106      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80076dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076e2:	d102      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80076e4:	4b2e      	ldr	r3, [pc, #184]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34
 80076e8:	e003      	b.n	80076f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076ee:	f001 b902 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80076f2:	f001 b900 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80076f6:	4b28      	ldr	r3, [pc, #160]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80076f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80076fc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007700:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007708:	f7fc f9a0 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 800770c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800770e:	f001 b8f2 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007718:	d108      	bne.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800771a:	f107 0308 	add.w	r3, r7, #8
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fc34 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007728:	f001 b8e5 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800772c:	4b1a      	ldr	r3, [pc, #104]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b02      	cmp	r3, #2
 8007736:	d10d      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800773e:	d109      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007740:	4b15      	ldr	r3, [pc, #84]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	08db      	lsrs	r3, r3, #3
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
 8007750:	637b      	str	r3, [r7, #52]	; 0x34
 8007752:	e011      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8007754:	4b10      	ldr	r3, [pc, #64]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800775c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007760:	d106      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007768:	d102      	bne.n	8007770 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800776a:	4b0d      	ldr	r3, [pc, #52]	; (80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	e003      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007774:	f001 b8bf 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007778:	f001 b8bd 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800777e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007782:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007786:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10c      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800778e:	f7fc f989 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007792:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007794:	f001 b8af 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007798:	44020c00 	.word	0x44020c00
 800779c:	03d09000 	.word	0x03d09000
 80077a0:	003d0900 	.word	0x003d0900
 80077a4:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ae:	d108      	bne.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077b0:	f107 0308 	add.w	r3, r7, #8
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fe fbe9 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077be:	f001 b89a 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80077c2:	4b9f      	ldr	r3, [pc, #636]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d10d      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077d4:	d109      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80077d6:	4b9a      	ldr	r3, [pc, #616]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	08db      	lsrs	r3, r3, #3
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	4a98      	ldr	r2, [pc, #608]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80077e2:	fa22 f303 	lsr.w	r3, r2, r3
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
 80077e8:	e011      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80077ea:	4b95      	ldr	r3, [pc, #596]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077f6:	d106      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077fe:	d102      	bne.n	8007806 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8007800:	4b91      	ldr	r3, [pc, #580]	; (8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	e003      	b.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800780a:	f001 b874 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800780e:	f001 b872 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007812:	4b8b      	ldr	r3, [pc, #556]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007814:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007818:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800781c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8007824:	f7fc f93e 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007828:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800782a:	f001 b864 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007834:	d108      	bne.n	8007848 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fba6 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007844:	f001 b857 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007848:	4b7d      	ldr	r3, [pc, #500]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0302 	and.w	r3, r3, #2
 8007850:	2b02      	cmp	r3, #2
 8007852:	d10d      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800785a:	d109      	bne.n	8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800785c:	4b78      	ldr	r3, [pc, #480]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	4a77      	ldr	r2, [pc, #476]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	637b      	str	r3, [r7, #52]	; 0x34
 800786e:	e011      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007870:	4b73      	ldr	r3, [pc, #460]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787c:	d106      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800787e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007880:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007884:	d102      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8007886:	4b70      	ldr	r3, [pc, #448]	; (8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
 800788a:	e003      	b.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800788c:	2300      	movs	r3, #0
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007890:	f001 b831 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007894:	f001 b82f 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007898:	4b69      	ldr	r3, [pc, #420]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800789a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800789e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80078a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80078aa:	f7fc f8cf 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 80078ae:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80078b0:	f001 b821 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078ba:	d108      	bne.n	80078ce <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078bc:	f107 0308 	add.w	r3, r7, #8
 80078c0:	4618      	mov	r0, r3
 80078c2:	f7fe fb63 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ca:	f001 b814 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80078ce:	4b5c      	ldr	r3, [pc, #368]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b02      	cmp	r3, #2
 80078d8:	d10e      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80078da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078e0:	d10a      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078e2:	4b57      	ldr	r3, [pc, #348]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	08db      	lsrs	r3, r3, #3
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	4a55      	ldr	r2, [pc, #340]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80078ee:	fa22 f303 	lsr.w	r3, r2, r3
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f4:	f000 bfff 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078fc:	f000 bffb 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007900:	4b4f      	ldr	r3, [pc, #316]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007902:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8007912:	d056      	beq.n	80079c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800791a:	f200 808b 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007924:	d03e      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792c:	f200 8082 	bhi.w	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007936:	d027      	beq.n	8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793e:	d879      	bhi.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007946:	d017      	beq.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800794e:	d871      	bhi.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800795c:	d004      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800795e:	e069      	b.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007960:	f7fc f8a0 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007964:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007966:	e068      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007968:	f107 0314 	add.w	r3, r7, #20
 800796c:	4618      	mov	r0, r3
 800796e:	f7fe f9a3 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007976:	e060      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007978:	f107 0308 	add.w	r3, r7, #8
 800797c:	4618      	mov	r0, r3
 800797e:	f7fe fb05 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007986:	e058      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007988:	4b2d      	ldr	r3, [pc, #180]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800798a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800798e:	f003 0302 	and.w	r3, r3, #2
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8007996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800799a:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800799c:	e04d      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079a2:	e04a      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80079a4:	4b26      	ldr	r3, [pc, #152]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079b2:	d103      	bne.n	80079bc <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80079b4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80079ba:	e03e      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80079c0:	e03b      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079c2:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079c8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079ce:	4b1c      	ldr	r3, [pc, #112]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0302 	and.w	r3, r3, #2
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079e0:	4b17      	ldr	r3, [pc, #92]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	08db      	lsrs	r3, r3, #3
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	4a16      	ldr	r2, [pc, #88]	; (8007a44 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80079ec:	fa22 f303 	lsr.w	r3, r2, r3
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
 80079f2:	e01e      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079f4:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a00:	d106      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a08:	d102      	bne.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a0a:	4b0f      	ldr	r3, [pc, #60]	; (8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0e:	e010      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1c:	d106      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a24:	d102      	bne.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a26:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	e002      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007a30:	e003      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8007a32:	e002      	b.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007a38:	bf00      	nop
          }
        }
        break;
 8007a3a:	f000 bf5c 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007a3e:	bf00      	nop
 8007a40:	44020c00 	.word	0x44020c00
 8007a44:	03d09000 	.word	0x03d09000
 8007a48:	003d0900 	.word	0x003d0900
 8007a4c:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007a50:	4b9e      	ldr	r3, [pc, #632]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007a52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007a56:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a62:	d056      	beq.n	8007b12 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a6a:	f200 808b 	bhi.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a74:	d03e      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a7c:	f200 8082 	bhi.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a86:	d027      	beq.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a8e:	d879      	bhi.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a96:	d017      	beq.n	8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9e:	d871      	bhi.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8007aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aac:	d004      	beq.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8007aae:	e069      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007ab0:	f7fb ffcc 	bl	8003a4c <HAL_RCC_GetPCLK1Freq>
 8007ab4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007ab6:	e068      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ab8:	f107 0314 	add.w	r3, r7, #20
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7fe f8fb 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ac6:	e060      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ac8:	f107 0308 	add.w	r3, r7, #8
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe fa5d 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ad6:	e058      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ad8:	4b7c      	ldr	r3, [pc, #496]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d103      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8007ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007aec:	e04d      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007af2:	e04a      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007af4:	4b75      	ldr	r3, [pc, #468]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007afa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007afe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b02:	d103      	bne.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8007b04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b08:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007b0a:	e03e      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b10:	e03b      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b12:	4b6e      	ldr	r3, [pc, #440]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b18:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b1e:	4b6b      	ldr	r3, [pc, #428]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d10c      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d109      	bne.n	8007b44 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b30:	4b66      	ldr	r3, [pc, #408]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	08db      	lsrs	r3, r3, #3
 8007b36:	f003 0303 	and.w	r3, r3, #3
 8007b3a:	4a65      	ldr	r2, [pc, #404]	; (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b40:	637b      	str	r3, [r7, #52]	; 0x34
 8007b42:	e01e      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b44:	4b61      	ldr	r3, [pc, #388]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b50:	d106      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b58:	d102      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b5a:	4b5e      	ldr	r3, [pc, #376]	; (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	e010      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b60:	4b5a      	ldr	r3, [pc, #360]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b6c:	d106      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8007b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b74:	d102      	bne.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b76:	4b58      	ldr	r3, [pc, #352]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007b78:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7a:	e002      	b.n	8007b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007b80:	e003      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8007b82:	e002      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007b88:	bf00      	nop
          }
        }
        break;
 8007b8a:	f000 beb4 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007b8e:	4b4f      	ldr	r3, [pc, #316]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007b90:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007b94:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007b98:	633b      	str	r3, [r7, #48]	; 0x30
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba0:	d056      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8007ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ba8:	f200 808b 	bhi.w	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bb2:	d03e      	beq.n	8007c32 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8007bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bba:	f200 8082 	bhi.w	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bc4:	d027      	beq.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bcc:	d879      	bhi.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd4:	d017      	beq.n	8007c06 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bdc:	d871      	bhi.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bea:	d004      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8007bec:	e069      	b.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007bee:	f7fb ff59 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007bf2:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007bf4:	e068      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bf6:	f107 0314 	add.w	r3, r7, #20
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe f85c 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c04:	e060      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fe f9be 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c14:	e058      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007c16:	4b2d      	ldr	r3, [pc, #180]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d103      	bne.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8007c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c28:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c2a:	e04d      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c30:	e04a      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007c32:	4b26      	ldr	r3, [pc, #152]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c40:	d103      	bne.n	8007c4a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8007c42:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c46:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007c48:	e03e      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007c4e:	e03b      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007c50:	4b1e      	ldr	r3, [pc, #120]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c56:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c5a:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d10c      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d109      	bne.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	08db      	lsrs	r3, r3, #3
 8007c74:	f003 0303 	and.w	r3, r3, #3
 8007c78:	4a15      	ldr	r2, [pc, #84]	; (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8007c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c80:	e01e      	b.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007c82:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c8e:	d106      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8007c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c96:	d102      	bne.n	8007c9e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	e010      	b.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ca6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007caa:	d106      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cb2:	d102      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb8:	e002      	b.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007cbe:	e003      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007cc6:	bf00      	nop
          }
        }
        break;
 8007cc8:	f000 be15 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ccc:	44020c00 	.word	0x44020c00
 8007cd0:	03d09000 	.word	0x03d09000
 8007cd4:	003d0900 	.word	0x003d0900
 8007cd8:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8007cdc:	4b9e      	ldr	r3, [pc, #632]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007cde:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ce2:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8007ce6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cea:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007cee:	d056      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8007cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8007cf6:	f200 808b 	bhi.w	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d00:	d03e      	beq.n	8007d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d08:	f200 8082 	bhi.w	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d12:	d027      	beq.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d1a:	d879      	bhi.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d22:	d017      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d2a:	d871      	bhi.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8007d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8007d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d38:	d004      	beq.n	8007d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8007d3a:	e069      	b.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007d3c:	f7fb feb2 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007d40:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007d42:	e068      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fd ffb5 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d52:	e060      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d54:	f107 0308 	add.w	r3, r7, #8
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe f917 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d62:	e058      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007d64:	4b7c      	ldr	r3, [pc, #496]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d6a:	f003 0302 	and.w	r3, r3, #2
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d103      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8007d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d78:	e04d      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d7e:	e04a      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007d80:	4b75      	ldr	r3, [pc, #468]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007d82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d8e:	d103      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8007d90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007d96:	e03e      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007d9c:	e03b      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d9e:	4b6e      	ldr	r3, [pc, #440]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007da0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007da4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007daa:	4b6b      	ldr	r3, [pc, #428]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d10c      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d109      	bne.n	8007dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dbc:	4b66      	ldr	r3, [pc, #408]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	08db      	lsrs	r3, r3, #3
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	4a65      	ldr	r2, [pc, #404]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dce:	e01e      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007dd0:	4b61      	ldr	r3, [pc, #388]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ddc:	d106      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8007dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de4:	d102      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007de6:	4b5e      	ldr	r3, [pc, #376]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	e010      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007dec:	4b5a      	ldr	r3, [pc, #360]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df8:	d106      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e00:	d102      	bne.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007e02:	4b58      	ldr	r3, [pc, #352]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007e04:	637b      	str	r3, [r7, #52]	; 0x34
 8007e06:	e002      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007e0c:	e003      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8007e0e:	e002      	b.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e14:	bf00      	nop
          }
        }
        break;
 8007e16:	f000 bd6e 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007e1a:	4b4f      	ldr	r3, [pc, #316]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007e1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007e20:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007e24:	633b      	str	r3, [r7, #48]	; 0x30
 8007e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e28:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007e2c:	d056      	beq.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e30:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007e34:	f200 808b 	bhi.w	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e3e:	d03e      	beq.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e46:	f200 8082 	bhi.w	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e50:	d027      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007e58:	d879      	bhi.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e60:	d017      	beq.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007e68:	d871      	bhi.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d004      	beq.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8007e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e76:	d004      	beq.n	8007e82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8007e78:	e069      	b.n	8007f4e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007e7a:	f7fb fe13 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007e7e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007e80:	e068      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7fd ff16 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007e90:	e060      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe f878 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ea0:	e058      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d103      	bne.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8007eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007eb6:	e04d      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007ebc:	e04a      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007ebe:	4b26      	ldr	r3, [pc, #152]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ecc:	d103      	bne.n	8007ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8007ece:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8007ed4:	e03e      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007eda:	e03b      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007edc:	4b1e      	ldr	r3, [pc, #120]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ee2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007ee8:	4b1b      	ldr	r3, [pc, #108]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d10c      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007efa:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	08db      	lsrs	r3, r3, #3
 8007f00:	f003 0303 	and.w	r3, r3, #3
 8007f04:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8007f06:	fa22 f303 	lsr.w	r3, r2, r3
 8007f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0c:	e01e      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f1a:	d106      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8007f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f22:	d102      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f24:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8007f26:	637b      	str	r3, [r7, #52]	; 0x34
 8007f28:	e010      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f2a:	4b0b      	ldr	r3, [pc, #44]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f36:	d106      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8007f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f3e:	d102      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f40:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
 8007f44:	e002      	b.n	8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8007f4a:	e003      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8007f4c:	e002      	b.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007f52:	bf00      	nop
          }
        }
        break;
 8007f54:	f000 bccf 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f58:	44020c00 	.word	0x44020c00
 8007f5c:	03d09000 	.word	0x03d09000
 8007f60:	003d0900 	.word	0x003d0900
 8007f64:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007f68:	4b9e      	ldr	r3, [pc, #632]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007f6a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007f6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007f72:	633b      	str	r3, [r7, #48]	; 0x30
 8007f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f7a:	d056      	beq.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f82:	f200 808b 	bhi.w	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8c:	d03e      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f94:	f200 8082 	bhi.w	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f9e:	d027      	beq.n	8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa6:	d879      	bhi.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fae:	d017      	beq.n	8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb6:	d871      	bhi.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d004      	beq.n	8007fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc4:	d004      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8007fc6:	e069      	b.n	800809c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007fc8:	f7fb fd6c 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8007fcc:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8007fce:	e068      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fd0:	f107 0314 	add.w	r3, r7, #20
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fd fe6f 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fde:	e060      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd ffd1 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8007fee:	e058      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ff0:	4b7c      	ldr	r3, [pc, #496]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8007ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d103      	bne.n	8008006 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8007ffe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008002:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008004:	e04d      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008006:	2300      	movs	r3, #0
 8008008:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800800a:	e04a      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800800c:	4b75      	ldr	r3, [pc, #468]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800800e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008016:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800801a:	d103      	bne.n	8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800801c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008022:	e03e      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008028:	e03b      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800802a:	4b6e      	ldr	r3, [pc, #440]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800802c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008030:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008036:	4b6b      	ldr	r3, [pc, #428]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b02      	cmp	r3, #2
 8008040:	d10c      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	2b00      	cmp	r3, #0
 8008046:	d109      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008048:	4b66      	ldr	r3, [pc, #408]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	4a65      	ldr	r2, [pc, #404]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	637b      	str	r3, [r7, #52]	; 0x34
 800805a:	e01e      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800805c:	4b61      	ldr	r3, [pc, #388]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008068:	d106      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800806a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d102      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008072:	4b5e      	ldr	r3, [pc, #376]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8008074:	637b      	str	r3, [r7, #52]	; 0x34
 8008076:	e010      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008078:	4b5a      	ldr	r3, [pc, #360]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008084:	d106      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8008086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800808c:	d102      	bne.n	8008094 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800808e:	4b58      	ldr	r3, [pc, #352]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8008090:	637b      	str	r3, [r7, #52]	; 0x34
 8008092:	e002      	b.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008098:	e003      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800809a:	e002      	b.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80080a0:	bf00      	nop
          }
        }
        break;
 80080a2:	f000 bc28 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80080a6:	4b4f      	ldr	r3, [pc, #316]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80080b2:	4b4c      	ldr	r3, [pc, #304]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80080be:	d106      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d103      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80080c6:	4b4a      	ldr	r3, [pc, #296]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80080ca:	f000 bc14 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80080ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080d4:	d108      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080d6:	f107 0320 	add.w	r3, r7, #32
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd fc82 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080e4:	f000 bc07 	b.w	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 80080e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080ee:	d107      	bne.n	8008100 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080f0:	f107 0314 	add.w	r3, r7, #20
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fd fddf 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080fe:	e3fa      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008104:	e3f7      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008106:	4b37      	ldr	r3, [pc, #220]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	633b      	str	r3, [r7, #48]	; 0x30
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	2b04      	cmp	r3, #4
 8008116:	d861      	bhi.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8008118:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008135 	.word	0x08008135
 8008124:	08008145 	.word	0x08008145
 8008128:	08008155 	.word	0x08008155
 800812c:	08008165 	.word	0x08008165
 8008130:	0800816b 	.word	0x0800816b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008134:	f107 0320 	add.w	r3, r7, #32
 8008138:	4618      	mov	r0, r3
 800813a:	f7fd fc53 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008142:	e04e      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd fdb5 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008152:	e046      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008154:	f107 0308 	add.w	r3, r7, #8
 8008158:	4618      	mov	r0, r3
 800815a:	f7fd ff17 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008162:	e03e      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008164:	4b23      	ldr	r3, [pc, #140]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008168:	e03b      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800816a:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800816c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008170:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008174:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008176:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d10c      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8008182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008184:	2b00      	cmp	r3, #0
 8008186:	d109      	bne.n	800819c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008188:	4b16      	ldr	r3, [pc, #88]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	08db      	lsrs	r3, r3, #3
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8008194:	fa22 f303 	lsr.w	r3, r2, r3
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
 800819a:	e01e      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800819c:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a8:	d106      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d102      	bne.n	80081b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
 80081b6:	e010      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081c4:	d106      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80081c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081cc:	d102      	bne.n	80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80081ce:	4b08      	ldr	r3, [pc, #32]	; (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80081d0:	637b      	str	r3, [r7, #52]	; 0x34
 80081d2:	e002      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80081da:	e002      	b.n	80081e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80081dc:	2300      	movs	r3, #0
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80081e0:	bf00      	nop
          }
        }
        break;
 80081e2:	e388      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081e4:	44020c00 	.word	0x44020c00
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	003d0900 	.word	0x003d0900
 80081f0:	017d7840 	.word	0x017d7840
 80081f4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80081f8:	4ba9      	ldr	r3, [pc, #676]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80081fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008202:	633b      	str	r3, [r7, #48]	; 0x30
 8008204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008206:	2b20      	cmp	r3, #32
 8008208:	f200 809a 	bhi.w	8008340 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800820c:	a201      	add	r2, pc, #4	; (adr r2, 8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800820e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008212:	bf00      	nop
 8008214:	08008299 	.word	0x08008299
 8008218:	08008341 	.word	0x08008341
 800821c:	08008341 	.word	0x08008341
 8008220:	08008341 	.word	0x08008341
 8008224:	08008341 	.word	0x08008341
 8008228:	08008341 	.word	0x08008341
 800822c:	08008341 	.word	0x08008341
 8008230:	08008341 	.word	0x08008341
 8008234:	080082a9 	.word	0x080082a9
 8008238:	08008341 	.word	0x08008341
 800823c:	08008341 	.word	0x08008341
 8008240:	08008341 	.word	0x08008341
 8008244:	08008341 	.word	0x08008341
 8008248:	08008341 	.word	0x08008341
 800824c:	08008341 	.word	0x08008341
 8008250:	08008341 	.word	0x08008341
 8008254:	080082b9 	.word	0x080082b9
 8008258:	08008341 	.word	0x08008341
 800825c:	08008341 	.word	0x08008341
 8008260:	08008341 	.word	0x08008341
 8008264:	08008341 	.word	0x08008341
 8008268:	08008341 	.word	0x08008341
 800826c:	08008341 	.word	0x08008341
 8008270:	08008341 	.word	0x08008341
 8008274:	080082c9 	.word	0x080082c9
 8008278:	08008341 	.word	0x08008341
 800827c:	08008341 	.word	0x08008341
 8008280:	08008341 	.word	0x08008341
 8008284:	08008341 	.word	0x08008341
 8008288:	08008341 	.word	0x08008341
 800828c:	08008341 	.word	0x08008341
 8008290:	08008341 	.word	0x08008341
 8008294:	080082cf 	.word	0x080082cf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008298:	f107 0320 	add.w	r3, r7, #32
 800829c:	4618      	mov	r0, r3
 800829e:	f7fd fba1 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082a6:	e04e      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a8:	f107 0314 	add.w	r3, r7, #20
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fd03 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082b6:	e046      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b8:	f107 0308 	add.w	r3, r7, #8
 80082bc:	4618      	mov	r0, r3
 80082be:	f7fd fe65 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082c6:	e03e      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80082c8:	4b76      	ldr	r3, [pc, #472]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80082ca:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80082cc:	e03b      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082ce:	4b74      	ldr	r3, [pc, #464]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80082d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082d4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80082d8:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082da:	4b71      	ldr	r3, [pc, #452]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b02      	cmp	r3, #2
 80082e4:	d10c      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d109      	bne.n	8008300 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082ec:	4b6c      	ldr	r3, [pc, #432]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	4a6c      	ldr	r2, [pc, #432]	; (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80082f8:	fa22 f303 	lsr.w	r3, r2, r3
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	e01e      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008300:	4b67      	ldr	r3, [pc, #412]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800830c:	d106      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008314:	d102      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008316:	4b65      	ldr	r3, [pc, #404]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
 800831a:	e010      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800831c:	4b60      	ldr	r3, [pc, #384]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008328:	d106      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008330:	d102      	bne.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008332:	4b5f      	ldr	r3, [pc, #380]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008334:	637b      	str	r3, [r7, #52]	; 0x34
 8008336:	e002      	b.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800833c:	e003      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800833e:	e002      	b.n	8008346 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8008340:	2300      	movs	r3, #0
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008344:	bf00      	nop
          }
        }
        break;
 8008346:	e2d6      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008348:	4b55      	ldr	r3, [pc, #340]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800834a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800834e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008352:	633b      	str	r3, [r7, #48]	; 0x30
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800835a:	d031      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800835c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008362:	d866      	bhi.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	2bc0      	cmp	r3, #192	; 0xc0
 8008368:	d027      	beq.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800836a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836c:	2bc0      	cmp	r3, #192	; 0xc0
 800836e:	d860      	bhi.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	d019      	beq.n	80083aa <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	2b80      	cmp	r3, #128	; 0x80
 800837a:	d85a      	bhi.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	2b40      	cmp	r3, #64	; 0x40
 8008386:	d008      	beq.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8008388:	e053      	b.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800838a:	f107 0320 	add.w	r3, r7, #32
 800838e:	4618      	mov	r0, r3
 8008390:	f7fd fb28 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008398:	e04e      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800839a:	f107 0314 	add.w	r3, r7, #20
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fd fc8a 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083a8:	e046      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd fdec 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083b8:	e03e      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80083ba:	4b3a      	ldr	r3, [pc, #232]	; (80084a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80083bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083be:	e03b      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083c0:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80083c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80083ca:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083cc:	4b34      	ldr	r3, [pc, #208]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d10c      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083de:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	08db      	lsrs	r3, r3, #3
 80083e4:	f003 0303 	and.w	r3, r3, #3
 80083e8:	4a2f      	ldr	r2, [pc, #188]	; (80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 80083ea:	fa22 f303 	lsr.w	r3, r2, r3
 80083ee:	637b      	str	r3, [r7, #52]	; 0x34
 80083f0:	e01e      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80083f2:	4b2b      	ldr	r3, [pc, #172]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083fe:	d106      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008406:	d102      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008408:	4b28      	ldr	r3, [pc, #160]	; (80084ac <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
 800840c:	e010      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800840e:	4b24      	ldr	r3, [pc, #144]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800841a:	d106      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008422:	d102      	bne.n	800842a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008424:	4b22      	ldr	r3, [pc, #136]	; (80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800842e:	e003      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8008430:	e002      	b.n	8008438 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008436:	bf00      	nop
          }
        }
        break;
 8008438:	e25d      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800843a:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800843c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008440:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8008444:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800844c:	f7fb fb14 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8008450:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008452:	e250      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008454:	4b12      	ldr	r3, [pc, #72]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800845c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008460:	d10b      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008468:	d107      	bne.n	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800846a:	f107 0314 	add.w	r3, r7, #20
 800846e:	4618      	mov	r0, r3
 8008470:	f7fd fc22 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	637b      	str	r3, [r7, #52]	; 0x34
 8008478:	e04f      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800847a:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008486:	d115      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848e:	d111      	bne.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008490:	f107 0308 	add.w	r3, r7, #8
 8008494:	4618      	mov	r0, r3
 8008496:	f7fd fd79 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
 800849e:	e03c      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80084a0:	44020c00 	.word	0x44020c00
 80084a4:	00bb8000 	.word	0x00bb8000
 80084a8:	03d09000 	.word	0x03d09000
 80084ac:	003d0900 	.word	0x003d0900
 80084b0:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80084b4:	4b94      	ldr	r3, [pc, #592]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d10d      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084c6:	d109      	bne.n	80084dc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084c8:	4b8f      	ldr	r3, [pc, #572]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	08db      	lsrs	r3, r3, #3
 80084ce:	f003 0303 	and.w	r3, r3, #3
 80084d2:	4a8e      	ldr	r2, [pc, #568]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80084d4:	fa22 f303 	lsr.w	r3, r2, r3
 80084d8:	637b      	str	r3, [r7, #52]	; 0x34
 80084da:	e01e      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80084dc:	4b8a      	ldr	r3, [pc, #552]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e8:	d106      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 80084ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f0:	d102      	bne.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 80084f2:	4b87      	ldr	r3, [pc, #540]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
 80084f6:	e010      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80084f8:	4b83      	ldr	r3, [pc, #524]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008504:	d106      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800850c:	d102      	bne.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800850e:	4b81      	ldr	r3, [pc, #516]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8008510:	637b      	str	r3, [r7, #52]	; 0x34
 8008512:	e002      	b.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008518:	e1ed      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800851a:	e1ec      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800851c:	4b7a      	ldr	r3, [pc, #488]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800851e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008522:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008526:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	2b00      	cmp	r3, #0
 800852c:	d103      	bne.n	8008536 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800852e:	f7fb fab9 	bl	8003aa4 <HAL_RCC_GetPCLK3Freq>
 8008532:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008534:	e1df      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008536:	4b74      	ldr	r3, [pc, #464]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800853e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008542:	d10b      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800854a:	d107      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800854c:	f107 0314 	add.w	r3, r7, #20
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd fbb1 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
 800855a:	e045      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800855c:	4b6a      	ldr	r3, [pc, #424]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008568:	d10b      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008572:	f107 0308 	add.w	r3, r7, #8
 8008576:	4618      	mov	r0, r3
 8008578:	f7fd fd08 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
 8008580:	e032      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008582:	4b61      	ldr	r3, [pc, #388]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b02      	cmp	r3, #2
 800858c:	d10d      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008594:	d109      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008596:	4b5c      	ldr	r3, [pc, #368]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	08db      	lsrs	r3, r3, #3
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	4a5a      	ldr	r2, [pc, #360]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80085a2:	fa22 f303 	lsr.w	r3, r2, r3
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e01e      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80085aa:	4b57      	ldr	r3, [pc, #348]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085b6:	d106      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085be:	d102      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80085c0:	4b53      	ldr	r3, [pc, #332]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80085c2:	637b      	str	r3, [r7, #52]	; 0x34
 80085c4:	e010      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80085c6:	4b50      	ldr	r3, [pc, #320]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d2:	d106      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80085d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80085da:	d102      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80085dc:	4b4d      	ldr	r3, [pc, #308]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80085de:	637b      	str	r3, [r7, #52]	; 0x34
 80085e0:	e002      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085e6:	e186      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80085e8:	e185      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80085ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085f0:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80085fc:	f7fb fa3c 	bl	8003a78 <HAL_RCC_GetPCLK2Freq>
 8008600:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8008602:	e178      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8008604:	4b40      	ldr	r3, [pc, #256]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800860c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008610:	d10b      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008618:	d107      	bne.n	800862a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800861a:	f107 0314 	add.w	r3, r7, #20
 800861e:	4618      	mov	r0, r3
 8008620:	f7fd fb4a 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	637b      	str	r3, [r7, #52]	; 0x34
 8008628:	e045      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008636:	d10b      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8008638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d107      	bne.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008640:	f107 0308 	add.w	r3, r7, #8
 8008644:	4618      	mov	r0, r3
 8008646:	f7fd fca1 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
 800864e:	e032      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8008650:	4b2d      	ldr	r3, [pc, #180]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d10d      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008662:	d109      	bne.n	8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008664:	4b28      	ldr	r3, [pc, #160]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	08db      	lsrs	r3, r3, #3
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	4a27      	ldr	r2, [pc, #156]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8008670:	fa22 f303 	lsr.w	r3, r2, r3
 8008674:	637b      	str	r3, [r7, #52]	; 0x34
 8008676:	e01e      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8008678:	4b23      	ldr	r3, [pc, #140]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008684:	d106      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8008686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800868c:	d102      	bne.n	8008694 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800868e:	4b20      	ldr	r3, [pc, #128]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8008690:	637b      	str	r3, [r7, #52]	; 0x34
 8008692:	e010      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8008694:	4b1c      	ldr	r3, [pc, #112]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086a0:	d106      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80086a8:	d102      	bne.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80086ac:	637b      	str	r3, [r7, #52]	; 0x34
 80086ae:	e002      	b.n	80086b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086b4:	e11f      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086b6:	e11e      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80086b8:	4b13      	ldr	r3, [pc, #76]	; (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80086ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80086be:	f003 0303 	and.w	r3, r3, #3
 80086c2:	633b      	str	r3, [r7, #48]	; 0x30
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d85f      	bhi.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80086ca:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80086cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d0:	080086e1 	.word	0x080086e1
 80086d4:	080086e9 	.word	0x080086e9
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	08008719 	.word	0x08008719

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 80086e0:	f7fb f998 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 80086e4:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80086e6:	e053      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086e8:	f107 0320 	add.w	r3, r7, #32
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fd f979 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80086f6:	e04b      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086f8:	f107 0314 	add.w	r3, r7, #20
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fd fadb 	bl	8005cb8 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008706:	e043      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008708:	44020c00 	.word	0x44020c00
 800870c:	03d09000 	.word	0x03d09000
 8008710:	003d0900 	.word	0x003d0900
 8008714:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008718:	4b79      	ldr	r3, [pc, #484]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800871a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800871e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008724:	4b76      	ldr	r3, [pc, #472]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b02      	cmp	r3, #2
 800872e:	d10c      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d109      	bne.n	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008736:	4b72      	ldr	r3, [pc, #456]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	08db      	lsrs	r3, r3, #3
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	4a70      	ldr	r2, [pc, #448]	; (8008904 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
 8008748:	e01e      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800874a:	4b6d      	ldr	r3, [pc, #436]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008752:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008756:	d106      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875e:	d102      	bne.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008760:	4b69      	ldr	r3, [pc, #420]	; (8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8008762:	637b      	str	r3, [r7, #52]	; 0x34
 8008764:	e010      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008766:	4b66      	ldr	r3, [pc, #408]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800876e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008772:	d106      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8008774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800877a:	d102      	bne.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800877c:	4b63      	ldr	r3, [pc, #396]	; (800890c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
 8008780:	e002      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8008786:	e003      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8008788:	e002      	b.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800878e:	bf00      	nop
          }
        }
        break;
 8008790:	e0b1      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008792:	4b5b      	ldr	r3, [pc, #364]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800879c:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800879e:	4b58      	ldr	r3, [pc, #352]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d106      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80087ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d103      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80087b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b6:	637b      	str	r3, [r7, #52]	; 0x34
 80087b8:	e01f      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80087ba:	4b51      	ldr	r3, [pc, #324]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c8:	d106      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	2b40      	cmp	r3, #64	; 0x40
 80087ce:	d103      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80087d0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80087d4:	637b      	str	r3, [r7, #52]	; 0x34
 80087d6:	e010      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80087d8:	4b49      	ldr	r3, [pc, #292]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087e4:	d106      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	2b80      	cmp	r3, #128	; 0x80
 80087ea:	d103      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 80087ec:	f248 0312 	movw	r3, #32786	; 0x8012
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
 80087f2:	e002      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 80087f8:	e07d      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087fa:	e07c      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80087fc:	4b40      	ldr	r3, [pc, #256]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80087fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008802:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008806:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008808:	4b3d      	ldr	r3, [pc, #244]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008814:	d105      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800881c:	4b3c      	ldr	r3, [pc, #240]	; (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800881e:	637b      	str	r3, [r7, #52]	; 0x34
 8008820:	e031      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008822:	4b37      	ldr	r3, [pc, #220]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800882e:	d10a      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	2b10      	cmp	r3, #16
 8008834:	d107      	bne.n	8008846 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008836:	f107 0320 	add.w	r3, r7, #32
 800883a:	4618      	mov	r0, r3
 800883c:	f7fd f8d2 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	637b      	str	r3, [r7, #52]	; 0x34
 8008844:	e01f      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008846:	4b2e      	ldr	r3, [pc, #184]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008848:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b02      	cmp	r3, #2
 8008852:	d106      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8008854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008856:	2b20      	cmp	r3, #32
 8008858:	d103      	bne.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800885a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
 8008860:	e011      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008862:	4b27      	ldr	r3, [pc, #156]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8008864:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800886c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008870:	d106      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	2b30      	cmp	r3, #48	; 0x30
 8008876:	d103      	bne.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8008878:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
 800887e:	e002      	b.n	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8008880:	2300      	movs	r3, #0
 8008882:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8008884:	e037      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008886:	e036      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800888a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800888e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008892:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	2b10      	cmp	r3, #16
 8008898:	d107      	bne.n	80088aa <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800889a:	f107 0320 	add.w	r3, r7, #32
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fd f8a0 	bl	80059e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80088a8:	e025      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80088aa:	4b15      	ldr	r3, [pc, #84]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088b6:	d10a      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80088b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ba:	2b20      	cmp	r3, #32
 80088bc:	d107      	bne.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088be:	f107 0308 	add.w	r3, r7, #8
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fd fb62 	bl	8005f8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	637b      	str	r3, [r7, #52]	; 0x34
 80088cc:	e00f      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80088ce:	4b0c      	ldr	r3, [pc, #48]	; (8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088da:	d105      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	2b30      	cmp	r3, #48	; 0x30
 80088e0:	d102      	bne.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 80088e2:	4b0b      	ldr	r3, [pc, #44]	; (8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80088e4:	637b      	str	r3, [r7, #52]	; 0x34
 80088e6:	e002      	b.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 80088e8:	2300      	movs	r3, #0
 80088ea:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 80088ec:	e003      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088ee:	e002      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088f4:	bf00      	nop
    }
  }

  return (frequency);
 80088f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	373c      	adds	r7, #60	; 0x3c
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd90      	pop	{r4, r7, pc}
 8008900:	44020c00 	.word	0x44020c00
 8008904:	03d09000 	.word	0x03d09000
 8008908:	003d0900 	.word	0x003d0900
 800890c:	017d7840 	.word	0x017d7840
 8008910:	02dc6c00 	.word	0x02dc6c00

08008914 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800891c:	4b48      	ldr	r3, [pc, #288]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a47      	ldr	r2, [pc, #284]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008926:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008928:	f7f9 f8c0 	bl	8001aac <HAL_GetTick>
 800892c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800892e:	e008      	b.n	8008942 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008930:	f7f9 f8bc 	bl	8001aac <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e07a      	b.n	8008a38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008942:	4b3f      	ldr	r3, [pc, #252]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1f0      	bne.n	8008930 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800894e:	4b3c      	ldr	r3, [pc, #240]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008956:	f023 0303 	bic.w	r3, r3, #3
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	6852      	ldr	r2, [r2, #4]
 8008962:	0212      	lsls	r2, r2, #8
 8008964:	430a      	orrs	r2, r1
 8008966:	4936      	ldr	r1, [pc, #216]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008968:	4313      	orrs	r3, r2
 800896a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	3b01      	subs	r3, #1
 8008972:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	3b01      	subs	r3, #1
 800897c:	025b      	lsls	r3, r3, #9
 800897e:	b29b      	uxth	r3, r3
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	3b01      	subs	r3, #1
 8008988:	041b      	lsls	r3, r3, #16
 800898a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800898e:	431a      	orrs	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	3b01      	subs	r3, #1
 8008996:	061b      	lsls	r3, r3, #24
 8008998:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800899c:	4928      	ldr	r1, [pc, #160]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80089a2:	4b27      	ldr	r3, [pc, #156]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	f023 020c 	bic.w	r2, r3, #12
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	4924      	ldr	r1, [pc, #144]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089b0:	4313      	orrs	r3, r2
 80089b2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80089b4:	4b22      	ldr	r3, [pc, #136]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	f023 0220 	bic.w	r2, r3, #32
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	491f      	ldr	r1, [pc, #124]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80089c6:	4b1e      	ldr	r3, [pc, #120]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ce:	491c      	ldr	r1, [pc, #112]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80089d4:	4b1a      	ldr	r3, [pc, #104]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d8:	4a19      	ldr	r2, [pc, #100]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089da:	f023 0310 	bic.w	r3, r3, #16
 80089de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80089e0:	4b17      	ldr	r3, [pc, #92]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6a12      	ldr	r2, [r2, #32]
 80089f0:	00d2      	lsls	r2, r2, #3
 80089f2:	4913      	ldr	r1, [pc, #76]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089f4:	4313      	orrs	r3, r2
 80089f6:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80089f8:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 80089fe:	f043 0310 	orr.w	r3, r3, #16
 8008a02:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a0d      	ldr	r2, [pc, #52]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008a0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a0e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a10:	f7f9 f84c 	bl	8001aac <HAL_GetTick>
 8008a14:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a16:	e008      	b.n	8008a2a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a18:	f7f9 f848 	bl	8001aac <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e006      	b.n	8008a38 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <RCCEx_PLL2_Config+0x12c>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0f0      	beq.n	8008a18 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0

}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	44020c00 	.word	0x44020c00

08008a44 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8008a4c:	4b48      	ldr	r3, [pc, #288]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a47      	ldr	r2, [pc, #284]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a58:	f7f9 f828 	bl	8001aac <HAL_GetTick>
 8008a5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a5e:	e008      	b.n	8008a72 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a60:	f7f9 f824 	bl	8001aac <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d901      	bls.n	8008a72 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e07a      	b.n	8008b68 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a72:	4b3f      	ldr	r3, [pc, #252]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d1f0      	bne.n	8008a60 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a7e:	4b3c      	ldr	r3, [pc, #240]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a86:	f023 0303 	bic.w	r3, r3, #3
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6852      	ldr	r2, [r2, #4]
 8008a92:	0212      	lsls	r2, r2, #8
 8008a94:	430a      	orrs	r2, r1
 8008a96:	4936      	ldr	r1, [pc, #216]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	630b      	str	r3, [r1, #48]	; 0x30
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	025b      	lsls	r3, r3, #9
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	691b      	ldr	r3, [r3, #16]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	041b      	lsls	r3, r3, #16
 8008aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	695b      	ldr	r3, [r3, #20]
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	061b      	lsls	r3, r3, #24
 8008ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008acc:	4928      	ldr	r1, [pc, #160]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008ad2:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f023 020c 	bic.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	699b      	ldr	r3, [r3, #24]
 8008ade:	4924      	ldr	r1, [pc, #144]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8008ae4:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae8:	f023 0220 	bic.w	r2, r3, #32
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	69db      	ldr	r3, [r3, #28]
 8008af0:	491f      	ldr	r1, [pc, #124]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008af6:	4b1e      	ldr	r3, [pc, #120]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	491c      	ldr	r1, [pc, #112]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8008b04:	4b1a      	ldr	r3, [pc, #104]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b08:	4a19      	ldr	r2, [pc, #100]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b0a:	f023 0310 	bic.w	r3, r3, #16
 8008b0e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8008b10:	4b17      	ldr	r3, [pc, #92]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6a12      	ldr	r2, [r2, #32]
 8008b20:	00d2      	lsls	r2, r2, #3
 8008b22:	4913      	ldr	r1, [pc, #76]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8008b28:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b2c:	4a10      	ldr	r2, [pc, #64]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b2e:	f043 0310 	orr.w	r3, r3, #16
 8008b32:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8008b34:	4b0e      	ldr	r3, [pc, #56]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a0d      	ldr	r2, [pc, #52]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b40:	f7f8 ffb4 	bl	8001aac <HAL_GetTick>
 8008b44:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b46:	e008      	b.n	8008b5a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b48:	f7f8 ffb0 	bl	8001aac <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d901      	bls.n	8008b5a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e006      	b.n	8008b68 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b5a:	4b05      	ldr	r3, [pc, #20]	; (8008b70 <RCCEx_PLL3_Config+0x12c>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d0f0      	beq.n	8008b48 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3710      	adds	r7, #16
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	44020c00 	.word	0x44020c00

08008b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	e042      	b.n	8008c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7f8 fe5f 	bl	800185c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2224      	movs	r2, #36	; 0x24
 8008ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0201 	bic.w	r2, r2, #1
 8008bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d002      	beq.n	8008bc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fab4 	bl	800912c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f8c3 	bl	8008d50 <UART_SetConfig>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d101      	bne.n	8008bd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e01b      	b.n	8008c0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	689a      	ldr	r2, [r3, #8]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0201 	orr.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fb33 	bl	8009270 <UART_CheckIdleState>
 8008c0a:	4603      	mov	r3, r0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	; 0x28
 8008c18:	af02      	add	r7, sp, #8
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	603b      	str	r3, [r7, #0]
 8008c20:	4613      	mov	r3, r2
 8008c22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	f040 808b 	bne.w	8008d46 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <HAL_UART_Transmit+0x28>
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e083      	b.n	8008d48 <HAL_UART_Transmit+0x134>
    }

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b80      	cmp	r3, #128	; 0x80
 8008c4c:	d107      	bne.n	8008c5e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c5c:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2221      	movs	r2, #33	; 0x21
 8008c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008c6e:	f7f8 ff1d 	bl	8001aac <HAL_GetTick>
 8008c72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	88fa      	ldrh	r2, [r7, #6]
 8008c78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	88fa      	ldrh	r2, [r7, #6]
 8008c80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d108      	bne.n	8008ca0 <HAL_UART_Transmit+0x8c>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	61bb      	str	r3, [r7, #24]
 8008c9e:	e003      	b.n	8008ca8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ca8:	e030      	b.n	8008d0c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	9300      	str	r3, [sp, #0]
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2180      	movs	r1, #128	; 0x80
 8008cb4:	68f8      	ldr	r0, [r7, #12]
 8008cb6:	f000 fb85 	bl	80093c4 <UART_WaitOnFlagUntilTimeout>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e03d      	b.n	8008d48 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10b      	bne.n	8008cea <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ce0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	3302      	adds	r3, #2
 8008ce6:	61bb      	str	r3, [r7, #24]
 8008ce8:	e007      	b.n	8008cfa <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	781a      	ldrb	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d1c8      	bne.n	8008caa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	2140      	movs	r1, #64	; 0x40
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 fb4e 	bl	80093c4 <UART_WaitOnFlagUntilTimeout>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d005      	beq.n	8008d3a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e006      	b.n	8008d48 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008d42:	2300      	movs	r3, #0
 8008d44:	e000      	b.n	8008d48 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008d46:	2302      	movs	r3, #2
  }
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3720      	adds	r7, #32
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d54:	b094      	sub	sp, #80	; 0x50
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	4b78      	ldr	r3, [pc, #480]	; (8008f48 <UART_SetConfig+0x1f8>)
 8008d66:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	689a      	ldr	r2, [r3, #8]
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	431a      	orrs	r2, r3
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	69db      	ldr	r3, [r3, #28]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4971      	ldr	r1, [pc, #452]	; (8008f4c <UART_SetConfig+0x1fc>)
 8008d88:	4019      	ands	r1, r3
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d90:	430b      	orrs	r3, r1
 8008d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	68d9      	ldr	r1, [r3, #12]
 8008da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	ea40 0301 	orr.w	r3, r0, r1
 8008daa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dae:	699b      	ldr	r3, [r3, #24]
 8008db0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	4b64      	ldr	r3, [pc, #400]	; (8008f48 <UART_SetConfig+0x1f8>)
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d009      	beq.n	8008dd0 <UART_SetConfig+0x80>
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	4b63      	ldr	r3, [pc, #396]	; (8008f50 <UART_SetConfig+0x200>)
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d004      	beq.n	8008dd0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008dda:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dee:	f023 000f 	bic.w	r0, r3, #15
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	ea40 0301 	orr.w	r3, r0, r1
 8008dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <UART_SetConfig+0x204>)
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d102      	bne.n	8008e10 <UART_SetConfig+0xc0>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e0e:	e066      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	4b50      	ldr	r3, [pc, #320]	; (8008f58 <UART_SetConfig+0x208>)
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d102      	bne.n	8008e20 <UART_SetConfig+0xd0>
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e1e:	e05e      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	4b4d      	ldr	r3, [pc, #308]	; (8008f5c <UART_SetConfig+0x20c>)
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d102      	bne.n	8008e30 <UART_SetConfig+0xe0>
 8008e2a:	2304      	movs	r3, #4
 8008e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e2e:	e056      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	4b4a      	ldr	r3, [pc, #296]	; (8008f60 <UART_SetConfig+0x210>)
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d102      	bne.n	8008e40 <UART_SetConfig+0xf0>
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e3e:	e04e      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	4b47      	ldr	r3, [pc, #284]	; (8008f64 <UART_SetConfig+0x214>)
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d102      	bne.n	8008e50 <UART_SetConfig+0x100>
 8008e4a:	2310      	movs	r3, #16
 8008e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e4e:	e046      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4b44      	ldr	r3, [pc, #272]	; (8008f68 <UART_SetConfig+0x218>)
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d102      	bne.n	8008e60 <UART_SetConfig+0x110>
 8008e5a:	2320      	movs	r3, #32
 8008e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e5e:	e03e      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	4b41      	ldr	r3, [pc, #260]	; (8008f6c <UART_SetConfig+0x21c>)
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d102      	bne.n	8008e70 <UART_SetConfig+0x120>
 8008e6a:	2340      	movs	r3, #64	; 0x40
 8008e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e6e:	e036      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	4b3e      	ldr	r3, [pc, #248]	; (8008f70 <UART_SetConfig+0x220>)
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d102      	bne.n	8008e80 <UART_SetConfig+0x130>
 8008e7a:	2380      	movs	r3, #128	; 0x80
 8008e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e7e:	e02e      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b3b      	ldr	r3, [pc, #236]	; (8008f74 <UART_SetConfig+0x224>)
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d103      	bne.n	8008e92 <UART_SetConfig+0x142>
 8008e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e90:	e025      	b.n	8008ede <UART_SetConfig+0x18e>
 8008e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	4b38      	ldr	r3, [pc, #224]	; (8008f78 <UART_SetConfig+0x228>)
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d103      	bne.n	8008ea4 <UART_SetConfig+0x154>
 8008e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ea2:	e01c      	b.n	8008ede <UART_SetConfig+0x18e>
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	4b34      	ldr	r3, [pc, #208]	; (8008f7c <UART_SetConfig+0x22c>)
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d103      	bne.n	8008eb6 <UART_SetConfig+0x166>
 8008eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eb4:	e013      	b.n	8008ede <UART_SetConfig+0x18e>
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b31      	ldr	r3, [pc, #196]	; (8008f80 <UART_SetConfig+0x230>)
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d103      	bne.n	8008ec8 <UART_SetConfig+0x178>
 8008ec0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec6:	e00a      	b.n	8008ede <UART_SetConfig+0x18e>
 8008ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	4b1e      	ldr	r3, [pc, #120]	; (8008f48 <UART_SetConfig+0x1f8>)
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d103      	bne.n	8008eda <UART_SetConfig+0x18a>
 8008ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ed8:	e001      	b.n	8008ede <UART_SetConfig+0x18e>
 8008eda:	2300      	movs	r3, #0
 8008edc:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee0:	681a      	ldr	r2, [r3, #0]
 8008ee2:	4b19      	ldr	r3, [pc, #100]	; (8008f48 <UART_SetConfig+0x1f8>)
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d005      	beq.n	8008ef4 <UART_SetConfig+0x1a4>
 8008ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	4b18      	ldr	r3, [pc, #96]	; (8008f50 <UART_SetConfig+0x200>)
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	f040 8094 	bne.w	800901c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	627a      	str	r2, [r7, #36]	; 0x24
 8008efc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008f00:	f7fd f9ae 	bl	8006260 <HAL_RCCEx_GetPeriphCLKFreq>
 8008f04:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 80f7 	beq.w	80090fc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	4a1c      	ldr	r2, [pc, #112]	; (8008f84 <UART_SetConfig+0x234>)
 8008f14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	4613      	mov	r3, r2
 8008f28:	005b      	lsls	r3, r3, #1
 8008f2a:	4413      	add	r3, r2
 8008f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d305      	bcc.n	8008f3e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d924      	bls.n	8008f88 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f44:	e069      	b.n	800901a <UART_SetConfig+0x2ca>
 8008f46:	bf00      	nop
 8008f48:	44002400 	.word	0x44002400
 8008f4c:	cfff69f3 	.word	0xcfff69f3
 8008f50:	54002400 	.word	0x54002400
 8008f54:	40013800 	.word	0x40013800
 8008f58:	40004400 	.word	0x40004400
 8008f5c:	40004800 	.word	0x40004800
 8008f60:	40004c00 	.word	0x40004c00
 8008f64:	40005000 	.word	0x40005000
 8008f68:	40006400 	.word	0x40006400
 8008f6c:	40007800 	.word	0x40007800
 8008f70:	40007c00 	.word	0x40007c00
 8008f74:	40008000 	.word	0x40008000
 8008f78:	40006800 	.word	0x40006800
 8008f7c:	40006c00 	.word	0x40006c00
 8008f80:	40008400 	.word	0x40008400
 8008f84:	0800e050 	.word	0x0800e050
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	61bb      	str	r3, [r7, #24]
 8008f8e:	61fa      	str	r2, [r7, #28]
 8008f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	4a64      	ldr	r2, [pc, #400]	; (8009128 <UART_SetConfig+0x3d8>)
 8008f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	613b      	str	r3, [r7, #16]
 8008fa0:	617a      	str	r2, [r7, #20]
 8008fa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008faa:	f7f7 fe7d 	bl	8000ca8 <__aeabi_uldivmod>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	f04f 0200 	mov.w	r2, #0
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	020b      	lsls	r3, r1, #8
 8008fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fc4:	0202      	lsls	r2, r0, #8
 8008fc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fc8:	6849      	ldr	r1, [r1, #4]
 8008fca:	0849      	lsrs	r1, r1, #1
 8008fcc:	2000      	movs	r0, #0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	eb12 0804 	adds.w	r8, r2, r4
 8008fd6:	eb43 0905 	adc.w	r9, r3, r5
 8008fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	60bb      	str	r3, [r7, #8]
 8008fe2:	60fa      	str	r2, [r7, #12]
 8008fe4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fe5c 	bl	8000ca8 <__aeabi_uldivmod>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ffe:	d308      	bcc.n	8009012 <UART_SetConfig+0x2c2>
 8009000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009006:	d204      	bcs.n	8009012 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800900e:	60da      	str	r2, [r3, #12]
 8009010:	e003      	b.n	800901a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009018:	e070      	b.n	80090fc <UART_SetConfig+0x3ac>
 800901a:	e06f      	b.n	80090fc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009024:	d13c      	bne.n	80090a0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009028:	2200      	movs	r2, #0
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	607a      	str	r2, [r7, #4]
 800902e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009032:	f7fd f915 	bl	8006260 <HAL_RCCEx_GetPeriphCLKFreq>
 8009036:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009038:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	d05e      	beq.n	80090fc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800903e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	4a39      	ldr	r2, [pc, #228]	; (8009128 <UART_SetConfig+0x3d8>)
 8009044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009048:	461a      	mov	r2, r3
 800904a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800904c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009050:	005a      	lsls	r2, r3, #1
 8009052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	441a      	add	r2, r3
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	2b0f      	cmp	r3, #15
 8009068:	d916      	bls.n	8009098 <UART_SetConfig+0x348>
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d212      	bcs.n	8009098 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	b29b      	uxth	r3, r3
 8009076:	f023 030f 	bic.w	r3, r3, #15
 800907a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	b29a      	uxth	r2, r3
 8009088:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800908a:	4313      	orrs	r3, r2
 800908c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009094:	60da      	str	r2, [r3, #12]
 8009096:	e031      	b.n	80090fc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800909e:	e02d      	b.n	80090fc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80090a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a2:	2200      	movs	r2, #0
 80090a4:	469a      	mov	sl, r3
 80090a6:	4693      	mov	fp, r2
 80090a8:	4650      	mov	r0, sl
 80090aa:	4659      	mov	r1, fp
 80090ac:	f7fd f8d8 	bl	8006260 <HAL_RCCEx_GetPeriphCLKFreq>
 80090b0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80090b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d021      	beq.n	80090fc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	4a1a      	ldr	r2, [pc, #104]	; (8009128 <UART_SetConfig+0x3d8>)
 80090be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c2:	461a      	mov	r2, r3
 80090c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80090ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	085b      	lsrs	r3, r3, #1
 80090d0:	441a      	add	r2, r3
 80090d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090de:	2b0f      	cmp	r3, #15
 80090e0:	d909      	bls.n	80090f6 <UART_SetConfig+0x3a6>
 80090e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090e8:	d205      	bcs.n	80090f6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	b29a      	uxth	r2, r3
 80090ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60da      	str	r2, [r3, #12]
 80090f4:	e002      	b.n	80090fc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fe:	2201      	movs	r2, #1
 8009100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009106:	2201      	movs	r2, #1
 8009108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910e:	2200      	movs	r2, #0
 8009110:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	2200      	movs	r2, #0
 8009116:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009118:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800911c:	4618      	mov	r0, r3
 800911e:	3750      	adds	r7, #80	; 0x50
 8009120:	46bd      	mov	sp, r7
 8009122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009126:	bf00      	nop
 8009128:	0800e050 	.word	0x0800e050

0800912c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	f003 0308 	and.w	r3, r3, #8
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f003 0302 	and.w	r3, r3, #2
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f003 0310 	and.w	r3, r3, #16
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00a      	beq.n	80091de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00a      	beq.n	8009200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	430a      	orrs	r2, r1
 80091fe:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01a      	beq.n	8009242 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	685b      	ldr	r3, [r3, #4]
 8009212:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800922a:	d10a      	bne.n	8009242 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	430a      	orrs	r2, r1
 8009240:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	430a      	orrs	r2, r1
 8009262:	605a      	str	r2, [r3, #4]
  }
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b098      	sub	sp, #96	; 0x60
 8009274:	af02      	add	r7, sp, #8
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009280:	f7f8 fc14 	bl	8001aac <HAL_GetTick>
 8009284:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b08      	cmp	r3, #8
 8009292:	d12f      	bne.n	80092f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009294:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800929c:	2200      	movs	r2, #0
 800929e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f88e 	bl	80093c4 <UART_WaitOnFlagUntilTimeout>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d022      	beq.n	80092f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b6:	e853 3f00 	ldrex	r3, [r3]
 80092ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092c2:	653b      	str	r3, [r7, #80]	; 0x50
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092cc:	647b      	str	r3, [r7, #68]	; 0x44
 80092ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092d4:	e841 2300 	strex	r3, r2, [r1]
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d1e6      	bne.n	80092ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e063      	b.n	80093bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d149      	bne.n	8009396 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009302:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800930a:	2200      	movs	r2, #0
 800930c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f857 	bl	80093c4 <UART_WaitOnFlagUntilTimeout>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d03c      	beq.n	8009396 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	623b      	str	r3, [r7, #32]
   return(result);
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800933a:	633b      	str	r3, [r7, #48]	; 0x30
 800933c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e6      	bne.n	800931c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3308      	adds	r3, #8
 8009354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	e853 3f00 	ldrex	r3, [r3]
 800935c:	60fb      	str	r3, [r7, #12]
   return(result);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f023 0301 	bic.w	r3, r3, #1
 8009364:	64bb      	str	r3, [r7, #72]	; 0x48
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3308      	adds	r3, #8
 800936c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800936e:	61fa      	str	r2, [r7, #28]
 8009370:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	69b9      	ldr	r1, [r7, #24]
 8009374:	69fa      	ldr	r2, [r7, #28]
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	617b      	str	r3, [r7, #20]
   return(result);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e5      	bne.n	800934e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e012      	b.n	80093bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3758      	adds	r7, #88	; 0x58
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	603b      	str	r3, [r7, #0]
 80093d0:	4613      	mov	r3, r2
 80093d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d4:	e049      	b.n	800946a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093dc:	d045      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093de:	f7f8 fb65 	bl	8001aac <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d302      	bcc.n	80093f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d101      	bne.n	80093f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e048      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0304 	and.w	r3, r3, #4
 8009402:	2b00      	cmp	r3, #0
 8009404:	d031      	beq.n	800946a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b08      	cmp	r3, #8
 8009412:	d110      	bne.n	8009436 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2208      	movs	r2, #8
 800941a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 f838 	bl	8009492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2208      	movs	r2, #8
 8009426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e029      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009444:	d111      	bne.n	800946a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 f81e 	bl	8009492 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2220      	movs	r2, #32
 800945a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009466:	2303      	movs	r3, #3
 8009468:	e00f      	b.n	800948a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	69da      	ldr	r2, [r3, #28]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4013      	ands	r3, r2
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	429a      	cmp	r2, r3
 8009478:	bf0c      	ite	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	2300      	movne	r3, #0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	429a      	cmp	r2, r3
 8009486:	d0a6      	beq.n	80093d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009492:	b480      	push	{r7}
 8009494:	b095      	sub	sp, #84	; 0x54
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a2:	e853 3f00 	ldrex	r3, [r3]
 80094a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094b8:	643b      	str	r3, [r7, #64]	; 0x40
 80094ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e6      	bne.n	800949a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	3308      	adds	r3, #8
 80094d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	e853 3f00 	ldrex	r3, [r3]
 80094da:	61fb      	str	r3, [r7, #28]
   return(result);
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e2:	f023 0301 	bic.w	r3, r3, #1
 80094e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3308      	adds	r3, #8
 80094ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f8:	e841 2300 	strex	r3, r2, [r1]
 80094fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1e3      	bne.n	80094cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	2b01      	cmp	r3, #1
 800950a:	d118      	bne.n	800953e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	e853 3f00 	ldrex	r3, [r3]
 8009518:	60bb      	str	r3, [r7, #8]
   return(result);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f023 0310 	bic.w	r3, r3, #16
 8009520:	647b      	str	r3, [r7, #68]	; 0x44
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800952a:	61bb      	str	r3, [r7, #24]
 800952c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6979      	ldr	r1, [r7, #20]
 8009530:	69ba      	ldr	r2, [r7, #24]
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	613b      	str	r3, [r7, #16]
   return(result);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e6      	bne.n	800950c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2200      	movs	r2, #0
 800954a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009552:	bf00      	nop
 8009554:	3754      	adds	r7, #84	; 0x54
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800955e:	b480      	push	{r7}
 8009560:	b085      	sub	sp, #20
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_UARTEx_DisableFifoMode+0x16>
 8009570:	2302      	movs	r3, #2
 8009572:	e027      	b.n	80095c4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2224      	movs	r2, #36	; 0x24
 8009580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3714      	adds	r7, #20
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d101      	bne.n	80095e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e02d      	b.n	8009644 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2224      	movs	r2, #36	; 0x24
 80095f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0201 	bic.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	683a      	ldr	r2, [r7, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f84f 	bl	80096c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2220      	movs	r2, #32
 8009636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800965c:	2b01      	cmp	r3, #1
 800965e:	d101      	bne.n	8009664 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009660:	2302      	movs	r3, #2
 8009662:	e02d      	b.n	80096c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2224      	movs	r2, #36	; 0x24
 8009670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0201 	bic.w	r2, r2, #1
 800968a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	683a      	ldr	r2, [r7, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 f811 	bl	80096c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b085      	sub	sp, #20
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d108      	bne.n	80096ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80096e8:	e031      	b.n	800974e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80096ea:	2308      	movs	r3, #8
 80096ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80096ee:	2308      	movs	r3, #8
 80096f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	0e5b      	lsrs	r3, r3, #25
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	0f5b      	lsrs	r3, r3, #29
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0307 	and.w	r3, r3, #7
 8009710:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009712:	7bbb      	ldrb	r3, [r7, #14]
 8009714:	7b3a      	ldrb	r2, [r7, #12]
 8009716:	4911      	ldr	r1, [pc, #68]	; (800975c <UARTEx_SetNbDataToProcess+0x94>)
 8009718:	5c8a      	ldrb	r2, [r1, r2]
 800971a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800971e:	7b3a      	ldrb	r2, [r7, #12]
 8009720:	490f      	ldr	r1, [pc, #60]	; (8009760 <UARTEx_SetNbDataToProcess+0x98>)
 8009722:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009724:	fb93 f3f2 	sdiv	r3, r3, r2
 8009728:	b29a      	uxth	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	7b7a      	ldrb	r2, [r7, #13]
 8009734:	4909      	ldr	r1, [pc, #36]	; (800975c <UARTEx_SetNbDataToProcess+0x94>)
 8009736:	5c8a      	ldrb	r2, [r1, r2]
 8009738:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800973c:	7b7a      	ldrb	r2, [r7, #13]
 800973e:	4908      	ldr	r1, [pc, #32]	; (8009760 <UARTEx_SetNbDataToProcess+0x98>)
 8009740:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009742:	fb93 f3f2 	sdiv	r3, r3, r2
 8009746:	b29a      	uxth	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	0800e068 	.word	0x0800e068
 8009760:	0800e070 	.word	0x0800e070

08009764 <__cvt>:
 8009764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	ec55 4b10 	vmov	r4, r5, d0
 800976c:	2d00      	cmp	r5, #0
 800976e:	460e      	mov	r6, r1
 8009770:	4619      	mov	r1, r3
 8009772:	462b      	mov	r3, r5
 8009774:	bfb4      	ite	lt
 8009776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800977a:	2300      	movge	r3, #0
 800977c:	4691      	mov	r9, r2
 800977e:	bfbf      	itttt	lt
 8009780:	4622      	movlt	r2, r4
 8009782:	461d      	movlt	r5, r3
 8009784:	232d      	movlt	r3, #45	; 0x2d
 8009786:	4614      	movlt	r4, r2
 8009788:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800978c:	700b      	strb	r3, [r1, #0]
 800978e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009790:	f023 0820 	bic.w	r8, r3, #32
 8009794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009798:	d005      	beq.n	80097a6 <__cvt+0x42>
 800979a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800979e:	d100      	bne.n	80097a2 <__cvt+0x3e>
 80097a0:	3601      	adds	r6, #1
 80097a2:	2102      	movs	r1, #2
 80097a4:	e000      	b.n	80097a8 <__cvt+0x44>
 80097a6:	2103      	movs	r1, #3
 80097a8:	ab03      	add	r3, sp, #12
 80097aa:	4632      	mov	r2, r6
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	ab02      	add	r3, sp, #8
 80097b0:	ec45 4b10 	vmov	d0, r4, r5
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	4653      	mov	r3, sl
 80097b8:	f001 fece 	bl	800b558 <_dtoa_r>
 80097bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097c0:	4607      	mov	r7, r0
 80097c2:	d102      	bne.n	80097ca <__cvt+0x66>
 80097c4:	f019 0f01 	tst.w	r9, #1
 80097c8:	d022      	beq.n	8009810 <__cvt+0xac>
 80097ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097ce:	eb07 0906 	add.w	r9, r7, r6
 80097d2:	d110      	bne.n	80097f6 <__cvt+0x92>
 80097d4:	783b      	ldrb	r3, [r7, #0]
 80097d6:	2b30      	cmp	r3, #48	; 0x30
 80097d8:	d10a      	bne.n	80097f0 <__cvt+0x8c>
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f981 	bl	8000ae8 <__aeabi_dcmpeq>
 80097e6:	b918      	cbnz	r0, 80097f0 <__cvt+0x8c>
 80097e8:	f1c6 0601 	rsb	r6, r6, #1
 80097ec:	f8ca 6000 	str.w	r6, [sl]
 80097f0:	f8da 3000 	ldr.w	r3, [sl]
 80097f4:	4499      	add	r9, r3
 80097f6:	2200      	movs	r2, #0
 80097f8:	2300      	movs	r3, #0
 80097fa:	4620      	mov	r0, r4
 80097fc:	4629      	mov	r1, r5
 80097fe:	f7f7 f973 	bl	8000ae8 <__aeabi_dcmpeq>
 8009802:	b108      	cbz	r0, 8009808 <__cvt+0xa4>
 8009804:	f8cd 900c 	str.w	r9, [sp, #12]
 8009808:	2230      	movs	r2, #48	; 0x30
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	454b      	cmp	r3, r9
 800980e:	d307      	bcc.n	8009820 <__cvt+0xbc>
 8009810:	9b03      	ldr	r3, [sp, #12]
 8009812:	4638      	mov	r0, r7
 8009814:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009816:	1bdb      	subs	r3, r3, r7
 8009818:	6013      	str	r3, [r2, #0]
 800981a:	b004      	add	sp, #16
 800981c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009820:	1c59      	adds	r1, r3, #1
 8009822:	9103      	str	r1, [sp, #12]
 8009824:	701a      	strb	r2, [r3, #0]
 8009826:	e7f0      	b.n	800980a <__cvt+0xa6>

08009828 <__exponent>:
 8009828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800982a:	2900      	cmp	r1, #0
 800982c:	4603      	mov	r3, r0
 800982e:	bfb8      	it	lt
 8009830:	4249      	neglt	r1, r1
 8009832:	f803 2b02 	strb.w	r2, [r3], #2
 8009836:	bfb4      	ite	lt
 8009838:	222d      	movlt	r2, #45	; 0x2d
 800983a:	222b      	movge	r2, #43	; 0x2b
 800983c:	2909      	cmp	r1, #9
 800983e:	7042      	strb	r2, [r0, #1]
 8009840:	dd29      	ble.n	8009896 <__exponent+0x6e>
 8009842:	f10d 0207 	add.w	r2, sp, #7
 8009846:	260a      	movs	r6, #10
 8009848:	4617      	mov	r7, r2
 800984a:	4694      	mov	ip, r2
 800984c:	3a01      	subs	r2, #1
 800984e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009852:	fb06 1415 	mls	r4, r6, r5, r1
 8009856:	3430      	adds	r4, #48	; 0x30
 8009858:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800985c:	460c      	mov	r4, r1
 800985e:	4629      	mov	r1, r5
 8009860:	2c63      	cmp	r4, #99	; 0x63
 8009862:	dcf2      	bgt.n	800984a <__exponent+0x22>
 8009864:	3130      	adds	r1, #48	; 0x30
 8009866:	f1ac 0402 	sub.w	r4, ip, #2
 800986a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800986e:	1c41      	adds	r1, r0, #1
 8009870:	4622      	mov	r2, r4
 8009872:	42ba      	cmp	r2, r7
 8009874:	d30a      	bcc.n	800988c <__exponent+0x64>
 8009876:	f10d 0209 	add.w	r2, sp, #9
 800987a:	eba2 020c 	sub.w	r2, r2, ip
 800987e:	42bc      	cmp	r4, r7
 8009880:	bf88      	it	hi
 8009882:	2200      	movhi	r2, #0
 8009884:	4413      	add	r3, r2
 8009886:	1a18      	subs	r0, r3, r0
 8009888:	b003      	add	sp, #12
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009890:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009894:	e7ed      	b.n	8009872 <__exponent+0x4a>
 8009896:	2330      	movs	r3, #48	; 0x30
 8009898:	3130      	adds	r1, #48	; 0x30
 800989a:	7083      	strb	r3, [r0, #2]
 800989c:	1d03      	adds	r3, r0, #4
 800989e:	70c1      	strb	r1, [r0, #3]
 80098a0:	e7f1      	b.n	8009886 <__exponent+0x5e>
	...

080098a4 <_printf_float>:
 80098a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	ed2d 8b02 	vpush	{d8}
 80098ac:	b08d      	sub	sp, #52	; 0x34
 80098ae:	460c      	mov	r4, r1
 80098b0:	4616      	mov	r6, r2
 80098b2:	461f      	mov	r7, r3
 80098b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098b8:	4605      	mov	r5, r0
 80098ba:	f001 fd61 	bl	800b380 <_localeconv_r>
 80098be:	f8d0 a000 	ldr.w	sl, [r0]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7f6 fce4 	bl	8000290 <strlen>
 80098c8:	2300      	movs	r3, #0
 80098ca:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098ce:	ee08 0a10 	vmov	s16, r0
 80098d2:	930a      	str	r3, [sp, #40]	; 0x28
 80098d4:	6823      	ldr	r3, [r4, #0]
 80098d6:	9305      	str	r3, [sp, #20]
 80098d8:	f8d8 3000 	ldr.w	r3, [r8]
 80098dc:	3307      	adds	r3, #7
 80098de:	f023 0307 	bic.w	r3, r3, #7
 80098e2:	f103 0208 	add.w	r2, r3, #8
 80098e6:	f8c8 2000 	str.w	r2, [r8]
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80098fa:	9307      	str	r3, [sp, #28]
 80098fc:	4b9f      	ldr	r3, [pc, #636]	; (8009b7c <_printf_float+0x2d8>)
 80098fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009902:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009906:	f7f7 f921 	bl	8000b4c <__aeabi_dcmpun>
 800990a:	bb88      	cbnz	r0, 8009970 <_printf_float+0xcc>
 800990c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009910:	4b9a      	ldr	r3, [pc, #616]	; (8009b7c <_printf_float+0x2d8>)
 8009912:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009916:	f7f7 f8fb 	bl	8000b10 <__aeabi_dcmple>
 800991a:	bb48      	cbnz	r0, 8009970 <_printf_float+0xcc>
 800991c:	2200      	movs	r2, #0
 800991e:	2300      	movs	r3, #0
 8009920:	4640      	mov	r0, r8
 8009922:	4649      	mov	r1, r9
 8009924:	f7f7 f8ea 	bl	8000afc <__aeabi_dcmplt>
 8009928:	b110      	cbz	r0, 8009930 <_printf_float+0x8c>
 800992a:	232d      	movs	r3, #45	; 0x2d
 800992c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009930:	4a93      	ldr	r2, [pc, #588]	; (8009b80 <_printf_float+0x2dc>)
 8009932:	4b94      	ldr	r3, [pc, #592]	; (8009b84 <_printf_float+0x2e0>)
 8009934:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009938:	bf94      	ite	ls
 800993a:	4690      	movls	r8, r2
 800993c:	4698      	movhi	r8, r3
 800993e:	2303      	movs	r3, #3
 8009940:	f04f 0900 	mov.w	r9, #0
 8009944:	6123      	str	r3, [r4, #16]
 8009946:	9b05      	ldr	r3, [sp, #20]
 8009948:	f023 0304 	bic.w	r3, r3, #4
 800994c:	6023      	str	r3, [r4, #0]
 800994e:	4633      	mov	r3, r6
 8009950:	aa0b      	add	r2, sp, #44	; 0x2c
 8009952:	4621      	mov	r1, r4
 8009954:	4628      	mov	r0, r5
 8009956:	9700      	str	r7, [sp, #0]
 8009958:	f000 f9da 	bl	8009d10 <_printf_common>
 800995c:	3001      	adds	r0, #1
 800995e:	f040 8090 	bne.w	8009a82 <_printf_float+0x1de>
 8009962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009966:	b00d      	add	sp, #52	; 0x34
 8009968:	ecbd 8b02 	vpop	{d8}
 800996c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009970:	4642      	mov	r2, r8
 8009972:	464b      	mov	r3, r9
 8009974:	4640      	mov	r0, r8
 8009976:	4649      	mov	r1, r9
 8009978:	f7f7 f8e8 	bl	8000b4c <__aeabi_dcmpun>
 800997c:	b140      	cbz	r0, 8009990 <_printf_float+0xec>
 800997e:	464b      	mov	r3, r9
 8009980:	4a81      	ldr	r2, [pc, #516]	; (8009b88 <_printf_float+0x2e4>)
 8009982:	2b00      	cmp	r3, #0
 8009984:	bfbc      	itt	lt
 8009986:	232d      	movlt	r3, #45	; 0x2d
 8009988:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800998c:	4b7f      	ldr	r3, [pc, #508]	; (8009b8c <_printf_float+0x2e8>)
 800998e:	e7d1      	b.n	8009934 <_printf_float+0x90>
 8009990:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009994:	6863      	ldr	r3, [r4, #4]
 8009996:	9206      	str	r2, [sp, #24]
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	d13f      	bne.n	8009a1c <_printf_float+0x178>
 800999c:	2306      	movs	r3, #6
 800999e:	6063      	str	r3, [r4, #4]
 80099a0:	9b05      	ldr	r3, [sp, #20]
 80099a2:	4628      	mov	r0, r5
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099aa:	2300      	movs	r3, #0
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	ab0a      	add	r3, sp, #40	; 0x28
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099b6:	ab09      	add	r3, sp, #36	; 0x24
 80099b8:	ec49 8b10 	vmov	d0, r8, r9
 80099bc:	9300      	str	r3, [sp, #0]
 80099be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099c2:	f7ff fecf 	bl	8009764 <__cvt>
 80099c6:	9b06      	ldr	r3, [sp, #24]
 80099c8:	4680      	mov	r8, r0
 80099ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099cc:	2b47      	cmp	r3, #71	; 0x47
 80099ce:	d108      	bne.n	80099e2 <_printf_float+0x13e>
 80099d0:	1cc8      	adds	r0, r1, #3
 80099d2:	db02      	blt.n	80099da <_printf_float+0x136>
 80099d4:	6863      	ldr	r3, [r4, #4]
 80099d6:	4299      	cmp	r1, r3
 80099d8:	dd41      	ble.n	8009a5e <_printf_float+0x1ba>
 80099da:	f1ab 0302 	sub.w	r3, fp, #2
 80099de:	fa5f fb83 	uxtb.w	fp, r3
 80099e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099e6:	d820      	bhi.n	8009a2a <_printf_float+0x186>
 80099e8:	3901      	subs	r1, #1
 80099ea:	465a      	mov	r2, fp
 80099ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099f0:	9109      	str	r1, [sp, #36]	; 0x24
 80099f2:	f7ff ff19 	bl	8009828 <__exponent>
 80099f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099f8:	4681      	mov	r9, r0
 80099fa:	1813      	adds	r3, r2, r0
 80099fc:	2a01      	cmp	r2, #1
 80099fe:	6123      	str	r3, [r4, #16]
 8009a00:	dc02      	bgt.n	8009a08 <_printf_float+0x164>
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	07d2      	lsls	r2, r2, #31
 8009a06:	d501      	bpl.n	8009a0c <_printf_float+0x168>
 8009a08:	3301      	adds	r3, #1
 8009a0a:	6123      	str	r3, [r4, #16]
 8009a0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d09c      	beq.n	800994e <_printf_float+0xaa>
 8009a14:	232d      	movs	r3, #45	; 0x2d
 8009a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a1a:	e798      	b.n	800994e <_printf_float+0xaa>
 8009a1c:	9a06      	ldr	r2, [sp, #24]
 8009a1e:	2a47      	cmp	r2, #71	; 0x47
 8009a20:	d1be      	bne.n	80099a0 <_printf_float+0xfc>
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1bc      	bne.n	80099a0 <_printf_float+0xfc>
 8009a26:	2301      	movs	r3, #1
 8009a28:	e7b9      	b.n	800999e <_printf_float+0xfa>
 8009a2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a2e:	d118      	bne.n	8009a62 <_printf_float+0x1be>
 8009a30:	2900      	cmp	r1, #0
 8009a32:	6863      	ldr	r3, [r4, #4]
 8009a34:	dd0b      	ble.n	8009a4e <_printf_float+0x1aa>
 8009a36:	6121      	str	r1, [r4, #16]
 8009a38:	b913      	cbnz	r3, 8009a40 <_printf_float+0x19c>
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	07d0      	lsls	r0, r2, #31
 8009a3e:	d502      	bpl.n	8009a46 <_printf_float+0x1a2>
 8009a40:	3301      	adds	r3, #1
 8009a42:	440b      	add	r3, r1
 8009a44:	6123      	str	r3, [r4, #16]
 8009a46:	f04f 0900 	mov.w	r9, #0
 8009a4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a4c:	e7de      	b.n	8009a0c <_printf_float+0x168>
 8009a4e:	b913      	cbnz	r3, 8009a56 <_printf_float+0x1b2>
 8009a50:	6822      	ldr	r2, [r4, #0]
 8009a52:	07d2      	lsls	r2, r2, #31
 8009a54:	d501      	bpl.n	8009a5a <_printf_float+0x1b6>
 8009a56:	3302      	adds	r3, #2
 8009a58:	e7f4      	b.n	8009a44 <_printf_float+0x1a0>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7f2      	b.n	8009a44 <_printf_float+0x1a0>
 8009a5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a64:	4299      	cmp	r1, r3
 8009a66:	db05      	blt.n	8009a74 <_printf_float+0x1d0>
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	6121      	str	r1, [r4, #16]
 8009a6c:	07d8      	lsls	r0, r3, #31
 8009a6e:	d5ea      	bpl.n	8009a46 <_printf_float+0x1a2>
 8009a70:	1c4b      	adds	r3, r1, #1
 8009a72:	e7e7      	b.n	8009a44 <_printf_float+0x1a0>
 8009a74:	2900      	cmp	r1, #0
 8009a76:	bfd4      	ite	le
 8009a78:	f1c1 0202 	rsble	r2, r1, #2
 8009a7c:	2201      	movgt	r2, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	e7e0      	b.n	8009a44 <_printf_float+0x1a0>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	055a      	lsls	r2, r3, #21
 8009a86:	d407      	bmi.n	8009a98 <_printf_float+0x1f4>
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	4642      	mov	r2, r8
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	d12c      	bne.n	8009af0 <_printf_float+0x24c>
 8009a96:	e764      	b.n	8009962 <_printf_float+0xbe>
 8009a98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a9c:	f240 80e0 	bls.w	8009c60 <_printf_float+0x3bc>
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009aa8:	f7f7 f81e 	bl	8000ae8 <__aeabi_dcmpeq>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d034      	beq.n	8009b1a <_printf_float+0x276>
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	4a37      	ldr	r2, [pc, #220]	; (8009b90 <_printf_float+0x2ec>)
 8009ab4:	4631      	mov	r1, r6
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	47b8      	blx	r7
 8009aba:	3001      	adds	r0, #1
 8009abc:	f43f af51 	beq.w	8009962 <_printf_float+0xbe>
 8009ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	db02      	blt.n	8009ace <_printf_float+0x22a>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	07d8      	lsls	r0, r3, #31
 8009acc:	d510      	bpl.n	8009af0 <_printf_float+0x24c>
 8009ace:	ee18 3a10 	vmov	r3, s16
 8009ad2:	4652      	mov	r2, sl
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	47b8      	blx	r7
 8009ada:	3001      	adds	r0, #1
 8009adc:	f43f af41 	beq.w	8009962 <_printf_float+0xbe>
 8009ae0:	f04f 0800 	mov.w	r8, #0
 8009ae4:	f104 091a 	add.w	r9, r4, #26
 8009ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aea:	3b01      	subs	r3, #1
 8009aec:	4543      	cmp	r3, r8
 8009aee:	dc09      	bgt.n	8009b04 <_printf_float+0x260>
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	079b      	lsls	r3, r3, #30
 8009af4:	f100 8107 	bmi.w	8009d06 <_printf_float+0x462>
 8009af8:	68e0      	ldr	r0, [r4, #12]
 8009afa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009afc:	4298      	cmp	r0, r3
 8009afe:	bfb8      	it	lt
 8009b00:	4618      	movlt	r0, r3
 8009b02:	e730      	b.n	8009966 <_printf_float+0xc2>
 8009b04:	2301      	movs	r3, #1
 8009b06:	464a      	mov	r2, r9
 8009b08:	4631      	mov	r1, r6
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b8      	blx	r7
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f43f af27 	beq.w	8009962 <_printf_float+0xbe>
 8009b14:	f108 0801 	add.w	r8, r8, #1
 8009b18:	e7e6      	b.n	8009ae8 <_printf_float+0x244>
 8009b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dc39      	bgt.n	8009b94 <_printf_float+0x2f0>
 8009b20:	2301      	movs	r3, #1
 8009b22:	4a1b      	ldr	r2, [pc, #108]	; (8009b90 <_printf_float+0x2ec>)
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af19 	beq.w	8009962 <_printf_float+0xbe>
 8009b30:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b34:	4313      	orrs	r3, r2
 8009b36:	d102      	bne.n	8009b3e <_printf_float+0x29a>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	d5d8      	bpl.n	8009af0 <_printf_float+0x24c>
 8009b3e:	ee18 3a10 	vmov	r3, s16
 8009b42:	4652      	mov	r2, sl
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f af09 	beq.w	8009962 <_printf_float+0xbe>
 8009b50:	f04f 0900 	mov.w	r9, #0
 8009b54:	f104 0a1a 	add.w	sl, r4, #26
 8009b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5a:	425b      	negs	r3, r3
 8009b5c:	454b      	cmp	r3, r9
 8009b5e:	dc01      	bgt.n	8009b64 <_printf_float+0x2c0>
 8009b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b62:	e792      	b.n	8009a8a <_printf_float+0x1e6>
 8009b64:	2301      	movs	r3, #1
 8009b66:	4652      	mov	r2, sl
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f aef7 	beq.w	8009962 <_printf_float+0xbe>
 8009b74:	f109 0901 	add.w	r9, r9, #1
 8009b78:	e7ee      	b.n	8009b58 <_printf_float+0x2b4>
 8009b7a:	bf00      	nop
 8009b7c:	7fefffff 	.word	0x7fefffff
 8009b80:	0800e078 	.word	0x0800e078
 8009b84:	0800e07c 	.word	0x0800e07c
 8009b88:	0800e080 	.word	0x0800e080
 8009b8c:	0800e084 	.word	0x0800e084
 8009b90:	0800e088 	.word	0x0800e088
 8009b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	bfa8      	it	ge
 8009b9c:	461a      	movge	r2, r3
 8009b9e:	2a00      	cmp	r2, #0
 8009ba0:	4691      	mov	r9, r2
 8009ba2:	dc37      	bgt.n	8009c14 <_printf_float+0x370>
 8009ba4:	f04f 0b00 	mov.w	fp, #0
 8009ba8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bac:	f104 021a 	add.w	r2, r4, #26
 8009bb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	eba3 0309 	sub.w	r3, r3, r9
 8009bb8:	455b      	cmp	r3, fp
 8009bba:	dc33      	bgt.n	8009c24 <_printf_float+0x380>
 8009bbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	db3b      	blt.n	8009c3c <_printf_float+0x398>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	07da      	lsls	r2, r3, #31
 8009bc8:	d438      	bmi.n	8009c3c <_printf_float+0x398>
 8009bca:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bce:	eba2 0903 	sub.w	r9, r2, r3
 8009bd2:	9b05      	ldr	r3, [sp, #20]
 8009bd4:	1ad2      	subs	r2, r2, r3
 8009bd6:	4591      	cmp	r9, r2
 8009bd8:	bfa8      	it	ge
 8009bda:	4691      	movge	r9, r2
 8009bdc:	f1b9 0f00 	cmp.w	r9, #0
 8009be0:	dc35      	bgt.n	8009c4e <_printf_float+0x3aa>
 8009be2:	f04f 0800 	mov.w	r8, #0
 8009be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bea:	f104 0a1a 	add.w	sl, r4, #26
 8009bee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bf2:	1a9b      	subs	r3, r3, r2
 8009bf4:	eba3 0309 	sub.w	r3, r3, r9
 8009bf8:	4543      	cmp	r3, r8
 8009bfa:	f77f af79 	ble.w	8009af0 <_printf_float+0x24c>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4652      	mov	r2, sl
 8009c02:	4631      	mov	r1, r6
 8009c04:	4628      	mov	r0, r5
 8009c06:	47b8      	blx	r7
 8009c08:	3001      	adds	r0, #1
 8009c0a:	f43f aeaa 	beq.w	8009962 <_printf_float+0xbe>
 8009c0e:	f108 0801 	add.w	r8, r8, #1
 8009c12:	e7ec      	b.n	8009bee <_printf_float+0x34a>
 8009c14:	4613      	mov	r3, r2
 8009c16:	4631      	mov	r1, r6
 8009c18:	4642      	mov	r2, r8
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d1c0      	bne.n	8009ba4 <_printf_float+0x300>
 8009c22:	e69e      	b.n	8009962 <_printf_float+0xbe>
 8009c24:	2301      	movs	r3, #1
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	9205      	str	r2, [sp, #20]
 8009c2c:	47b8      	blx	r7
 8009c2e:	3001      	adds	r0, #1
 8009c30:	f43f ae97 	beq.w	8009962 <_printf_float+0xbe>
 8009c34:	f10b 0b01 	add.w	fp, fp, #1
 8009c38:	9a05      	ldr	r2, [sp, #20]
 8009c3a:	e7b9      	b.n	8009bb0 <_printf_float+0x30c>
 8009c3c:	ee18 3a10 	vmov	r3, s16
 8009c40:	4652      	mov	r2, sl
 8009c42:	4631      	mov	r1, r6
 8009c44:	4628      	mov	r0, r5
 8009c46:	47b8      	blx	r7
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d1be      	bne.n	8009bca <_printf_float+0x326>
 8009c4c:	e689      	b.n	8009962 <_printf_float+0xbe>
 8009c4e:	9a05      	ldr	r2, [sp, #20]
 8009c50:	464b      	mov	r3, r9
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	4442      	add	r2, r8
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	d1c1      	bne.n	8009be2 <_printf_float+0x33e>
 8009c5e:	e680      	b.n	8009962 <_printf_float+0xbe>
 8009c60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c62:	2a01      	cmp	r2, #1
 8009c64:	dc01      	bgt.n	8009c6a <_printf_float+0x3c6>
 8009c66:	07db      	lsls	r3, r3, #31
 8009c68:	d53a      	bpl.n	8009ce0 <_printf_float+0x43c>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b8      	blx	r7
 8009c74:	3001      	adds	r0, #1
 8009c76:	f43f ae74 	beq.w	8009962 <_printf_float+0xbe>
 8009c7a:	ee18 3a10 	vmov	r3, s16
 8009c7e:	4652      	mov	r2, sl
 8009c80:	4631      	mov	r1, r6
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	f43f ae6b 	beq.w	8009962 <_printf_float+0xbe>
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2300      	movs	r3, #0
 8009c90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009c94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c98:	f7f6 ff26 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c9c:	b9d8      	cbnz	r0, 8009cd6 <_printf_float+0x432>
 8009c9e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009ca2:	f108 0201 	add.w	r2, r8, #1
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	d10e      	bne.n	8009cce <_printf_float+0x42a>
 8009cb0:	e657      	b.n	8009962 <_printf_float+0xbe>
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	4652      	mov	r2, sl
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4628      	mov	r0, r5
 8009cba:	47b8      	blx	r7
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f43f ae50 	beq.w	8009962 <_printf_float+0xbe>
 8009cc2:	f108 0801 	add.w	r8, r8, #1
 8009cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc8:	3b01      	subs	r3, #1
 8009cca:	4543      	cmp	r3, r8
 8009ccc:	dcf1      	bgt.n	8009cb2 <_printf_float+0x40e>
 8009cce:	464b      	mov	r3, r9
 8009cd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cd4:	e6da      	b.n	8009a8c <_printf_float+0x1e8>
 8009cd6:	f04f 0800 	mov.w	r8, #0
 8009cda:	f104 0a1a 	add.w	sl, r4, #26
 8009cde:	e7f2      	b.n	8009cc6 <_printf_float+0x422>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	4642      	mov	r2, r8
 8009ce4:	e7df      	b.n	8009ca6 <_printf_float+0x402>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	464a      	mov	r2, r9
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	f43f ae36 	beq.w	8009962 <_printf_float+0xbe>
 8009cf6:	f108 0801 	add.w	r8, r8, #1
 8009cfa:	68e3      	ldr	r3, [r4, #12]
 8009cfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cfe:	1a5b      	subs	r3, r3, r1
 8009d00:	4543      	cmp	r3, r8
 8009d02:	dcf0      	bgt.n	8009ce6 <_printf_float+0x442>
 8009d04:	e6f8      	b.n	8009af8 <_printf_float+0x254>
 8009d06:	f04f 0800 	mov.w	r8, #0
 8009d0a:	f104 0919 	add.w	r9, r4, #25
 8009d0e:	e7f4      	b.n	8009cfa <_printf_float+0x456>

08009d10 <_printf_common>:
 8009d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d14:	4616      	mov	r6, r2
 8009d16:	4699      	mov	r9, r3
 8009d18:	688a      	ldr	r2, [r1, #8]
 8009d1a:	4607      	mov	r7, r0
 8009d1c:	690b      	ldr	r3, [r1, #16]
 8009d1e:	460c      	mov	r4, r1
 8009d20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d24:	4293      	cmp	r3, r2
 8009d26:	bfb8      	it	lt
 8009d28:	4613      	movlt	r3, r2
 8009d2a:	6033      	str	r3, [r6, #0]
 8009d2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d30:	b10a      	cbz	r2, 8009d36 <_printf_common+0x26>
 8009d32:	3301      	adds	r3, #1
 8009d34:	6033      	str	r3, [r6, #0]
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	0699      	lsls	r1, r3, #26
 8009d3a:	bf42      	ittt	mi
 8009d3c:	6833      	ldrmi	r3, [r6, #0]
 8009d3e:	3302      	addmi	r3, #2
 8009d40:	6033      	strmi	r3, [r6, #0]
 8009d42:	6825      	ldr	r5, [r4, #0]
 8009d44:	f015 0506 	ands.w	r5, r5, #6
 8009d48:	d106      	bne.n	8009d58 <_printf_common+0x48>
 8009d4a:	f104 0a19 	add.w	sl, r4, #25
 8009d4e:	68e3      	ldr	r3, [r4, #12]
 8009d50:	6832      	ldr	r2, [r6, #0]
 8009d52:	1a9b      	subs	r3, r3, r2
 8009d54:	42ab      	cmp	r3, r5
 8009d56:	dc2b      	bgt.n	8009db0 <_printf_common+0xa0>
 8009d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d5c:	1e13      	subs	r3, r2, #0
 8009d5e:	6822      	ldr	r2, [r4, #0]
 8009d60:	bf18      	it	ne
 8009d62:	2301      	movne	r3, #1
 8009d64:	0692      	lsls	r2, r2, #26
 8009d66:	d430      	bmi.n	8009dca <_printf_common+0xba>
 8009d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d6c:	4649      	mov	r1, r9
 8009d6e:	4638      	mov	r0, r7
 8009d70:	47c0      	blx	r8
 8009d72:	3001      	adds	r0, #1
 8009d74:	d023      	beq.n	8009dbe <_printf_common+0xae>
 8009d76:	6823      	ldr	r3, [r4, #0]
 8009d78:	341a      	adds	r4, #26
 8009d7a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009d7e:	f003 0306 	and.w	r3, r3, #6
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	bf0a      	itet	eq
 8009d86:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009d8a:	2500      	movne	r5, #0
 8009d8c:	6833      	ldreq	r3, [r6, #0]
 8009d8e:	f04f 0600 	mov.w	r6, #0
 8009d92:	bf08      	it	eq
 8009d94:	1aed      	subeq	r5, r5, r3
 8009d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009d9a:	bf08      	it	eq
 8009d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009da0:	4293      	cmp	r3, r2
 8009da2:	bfc4      	itt	gt
 8009da4:	1a9b      	subgt	r3, r3, r2
 8009da6:	18ed      	addgt	r5, r5, r3
 8009da8:	42b5      	cmp	r5, r6
 8009daa:	d11a      	bne.n	8009de2 <_printf_common+0xd2>
 8009dac:	2000      	movs	r0, #0
 8009dae:	e008      	b.n	8009dc2 <_printf_common+0xb2>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4652      	mov	r2, sl
 8009db4:	4649      	mov	r1, r9
 8009db6:	4638      	mov	r0, r7
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d103      	bne.n	8009dc6 <_printf_common+0xb6>
 8009dbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	3501      	adds	r5, #1
 8009dc8:	e7c1      	b.n	8009d4e <_printf_common+0x3e>
 8009dca:	18e1      	adds	r1, r4, r3
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	2030      	movs	r0, #48	; 0x30
 8009dd0:	3302      	adds	r3, #2
 8009dd2:	4422      	add	r2, r4
 8009dd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ddc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009de0:	e7c2      	b.n	8009d68 <_printf_common+0x58>
 8009de2:	2301      	movs	r3, #1
 8009de4:	4622      	mov	r2, r4
 8009de6:	4649      	mov	r1, r9
 8009de8:	4638      	mov	r0, r7
 8009dea:	47c0      	blx	r8
 8009dec:	3001      	adds	r0, #1
 8009dee:	d0e6      	beq.n	8009dbe <_printf_common+0xae>
 8009df0:	3601      	adds	r6, #1
 8009df2:	e7d9      	b.n	8009da8 <_printf_common+0x98>

08009df4 <_printf_i>:
 8009df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	7e0f      	ldrb	r7, [r1, #24]
 8009dfa:	4691      	mov	r9, r2
 8009dfc:	4680      	mov	r8, r0
 8009dfe:	460c      	mov	r4, r1
 8009e00:	2f78      	cmp	r7, #120	; 0x78
 8009e02:	469a      	mov	sl, r3
 8009e04:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e0a:	d807      	bhi.n	8009e1c <_printf_i+0x28>
 8009e0c:	2f62      	cmp	r7, #98	; 0x62
 8009e0e:	d80a      	bhi.n	8009e26 <_printf_i+0x32>
 8009e10:	2f00      	cmp	r7, #0
 8009e12:	f000 80d3 	beq.w	8009fbc <_printf_i+0x1c8>
 8009e16:	2f58      	cmp	r7, #88	; 0x58
 8009e18:	f000 80bf 	beq.w	8009f9a <_printf_i+0x1a6>
 8009e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e24:	e03a      	b.n	8009e9c <_printf_i+0xa8>
 8009e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e2a:	2b15      	cmp	r3, #21
 8009e2c:	d8f6      	bhi.n	8009e1c <_printf_i+0x28>
 8009e2e:	a101      	add	r1, pc, #4	; (adr r1, 8009e34 <_printf_i+0x40>)
 8009e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e34:	08009e8d 	.word	0x08009e8d
 8009e38:	08009ea1 	.word	0x08009ea1
 8009e3c:	08009e1d 	.word	0x08009e1d
 8009e40:	08009e1d 	.word	0x08009e1d
 8009e44:	08009e1d 	.word	0x08009e1d
 8009e48:	08009e1d 	.word	0x08009e1d
 8009e4c:	08009ea1 	.word	0x08009ea1
 8009e50:	08009e1d 	.word	0x08009e1d
 8009e54:	08009e1d 	.word	0x08009e1d
 8009e58:	08009e1d 	.word	0x08009e1d
 8009e5c:	08009e1d 	.word	0x08009e1d
 8009e60:	08009fa3 	.word	0x08009fa3
 8009e64:	08009ecd 	.word	0x08009ecd
 8009e68:	08009f5f 	.word	0x08009f5f
 8009e6c:	08009e1d 	.word	0x08009e1d
 8009e70:	08009e1d 	.word	0x08009e1d
 8009e74:	08009fc5 	.word	0x08009fc5
 8009e78:	08009e1d 	.word	0x08009e1d
 8009e7c:	08009ecd 	.word	0x08009ecd
 8009e80:	08009e1d 	.word	0x08009e1d
 8009e84:	08009e1d 	.word	0x08009e1d
 8009e88:	08009f67 	.word	0x08009f67
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	1d1a      	adds	r2, r3, #4
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	602a      	str	r2, [r5, #0]
 8009e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e09e      	b.n	8009fde <_printf_i+0x1ea>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	682b      	ldr	r3, [r5, #0]
 8009ea4:	0607      	lsls	r7, r0, #24
 8009ea6:	f103 0104 	add.w	r1, r3, #4
 8009eaa:	6029      	str	r1, [r5, #0]
 8009eac:	d501      	bpl.n	8009eb2 <_printf_i+0xbe>
 8009eae:	681e      	ldr	r6, [r3, #0]
 8009eb0:	e003      	b.n	8009eba <_printf_i+0xc6>
 8009eb2:	0646      	lsls	r6, r0, #25
 8009eb4:	d5fb      	bpl.n	8009eae <_printf_i+0xba>
 8009eb6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009eba:	2e00      	cmp	r6, #0
 8009ebc:	da03      	bge.n	8009ec6 <_printf_i+0xd2>
 8009ebe:	232d      	movs	r3, #45	; 0x2d
 8009ec0:	4276      	negs	r6, r6
 8009ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec6:	4859      	ldr	r0, [pc, #356]	; (800a02c <_printf_i+0x238>)
 8009ec8:	230a      	movs	r3, #10
 8009eca:	e012      	b.n	8009ef2 <_printf_i+0xfe>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	6820      	ldr	r0, [r4, #0]
 8009ed0:	1d19      	adds	r1, r3, #4
 8009ed2:	6029      	str	r1, [r5, #0]
 8009ed4:	0605      	lsls	r5, r0, #24
 8009ed6:	d501      	bpl.n	8009edc <_printf_i+0xe8>
 8009ed8:	681e      	ldr	r6, [r3, #0]
 8009eda:	e002      	b.n	8009ee2 <_printf_i+0xee>
 8009edc:	0641      	lsls	r1, r0, #25
 8009ede:	d5fb      	bpl.n	8009ed8 <_printf_i+0xe4>
 8009ee0:	881e      	ldrh	r6, [r3, #0]
 8009ee2:	2f6f      	cmp	r7, #111	; 0x6f
 8009ee4:	4851      	ldr	r0, [pc, #324]	; (800a02c <_printf_i+0x238>)
 8009ee6:	bf0c      	ite	eq
 8009ee8:	2308      	moveq	r3, #8
 8009eea:	230a      	movne	r3, #10
 8009eec:	2100      	movs	r1, #0
 8009eee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ef2:	6865      	ldr	r5, [r4, #4]
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	60a5      	str	r5, [r4, #8]
 8009ef8:	bfa2      	ittt	ge
 8009efa:	6821      	ldrge	r1, [r4, #0]
 8009efc:	f021 0104 	bicge.w	r1, r1, #4
 8009f00:	6021      	strge	r1, [r4, #0]
 8009f02:	b90e      	cbnz	r6, 8009f08 <_printf_i+0x114>
 8009f04:	2d00      	cmp	r5, #0
 8009f06:	d04a      	beq.n	8009f9e <_printf_i+0x1aa>
 8009f08:	4615      	mov	r5, r2
 8009f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f0e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f12:	5dc7      	ldrb	r7, [r0, r7]
 8009f14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f18:	4637      	mov	r7, r6
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	42bb      	cmp	r3, r7
 8009f1e:	d9f4      	bls.n	8009f0a <_printf_i+0x116>
 8009f20:	2b08      	cmp	r3, #8
 8009f22:	d10b      	bne.n	8009f3c <_printf_i+0x148>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	07de      	lsls	r6, r3, #31
 8009f28:	d508      	bpl.n	8009f3c <_printf_i+0x148>
 8009f2a:	6923      	ldr	r3, [r4, #16]
 8009f2c:	6861      	ldr	r1, [r4, #4]
 8009f2e:	4299      	cmp	r1, r3
 8009f30:	bfde      	ittt	le
 8009f32:	2330      	movle	r3, #48	; 0x30
 8009f34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f3c:	1b52      	subs	r2, r2, r5
 8009f3e:	6122      	str	r2, [r4, #16]
 8009f40:	464b      	mov	r3, r9
 8009f42:	aa03      	add	r2, sp, #12
 8009f44:	4621      	mov	r1, r4
 8009f46:	4640      	mov	r0, r8
 8009f48:	f8cd a000 	str.w	sl, [sp]
 8009f4c:	f7ff fee0 	bl	8009d10 <_printf_common>
 8009f50:	3001      	adds	r0, #1
 8009f52:	d149      	bne.n	8009fe8 <_printf_i+0x1f4>
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f58:	b004      	add	sp, #16
 8009f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	f043 0320 	orr.w	r3, r3, #32
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	2778      	movs	r7, #120	; 0x78
 8009f68:	4831      	ldr	r0, [pc, #196]	; (800a030 <_printf_i+0x23c>)
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f70:	061f      	lsls	r7, r3, #24
 8009f72:	6829      	ldr	r1, [r5, #0]
 8009f74:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f78:	d402      	bmi.n	8009f80 <_printf_i+0x18c>
 8009f7a:	065f      	lsls	r7, r3, #25
 8009f7c:	bf48      	it	mi
 8009f7e:	b2b6      	uxthmi	r6, r6
 8009f80:	07df      	lsls	r7, r3, #31
 8009f82:	6029      	str	r1, [r5, #0]
 8009f84:	bf44      	itt	mi
 8009f86:	f043 0320 	orrmi.w	r3, r3, #32
 8009f8a:	6023      	strmi	r3, [r4, #0]
 8009f8c:	b91e      	cbnz	r6, 8009f96 <_printf_i+0x1a2>
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	f023 0320 	bic.w	r3, r3, #32
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	2310      	movs	r3, #16
 8009f98:	e7a8      	b.n	8009eec <_printf_i+0xf8>
 8009f9a:	4824      	ldr	r0, [pc, #144]	; (800a02c <_printf_i+0x238>)
 8009f9c:	e7e5      	b.n	8009f6a <_printf_i+0x176>
 8009f9e:	4615      	mov	r5, r2
 8009fa0:	e7be      	b.n	8009f20 <_printf_i+0x12c>
 8009fa2:	682b      	ldr	r3, [r5, #0]
 8009fa4:	6826      	ldr	r6, [r4, #0]
 8009fa6:	1d18      	adds	r0, r3, #4
 8009fa8:	6961      	ldr	r1, [r4, #20]
 8009faa:	6028      	str	r0, [r5, #0]
 8009fac:	0635      	lsls	r5, r6, #24
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	d501      	bpl.n	8009fb6 <_printf_i+0x1c2>
 8009fb2:	6019      	str	r1, [r3, #0]
 8009fb4:	e002      	b.n	8009fbc <_printf_i+0x1c8>
 8009fb6:	0670      	lsls	r0, r6, #25
 8009fb8:	d5fb      	bpl.n	8009fb2 <_printf_i+0x1be>
 8009fba:	8019      	strh	r1, [r3, #0]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	4615      	mov	r5, r2
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	e7bd      	b.n	8009f40 <_printf_i+0x14c>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	1d1a      	adds	r2, r3, #4
 8009fca:	602a      	str	r2, [r5, #0]
 8009fcc:	681d      	ldr	r5, [r3, #0]
 8009fce:	6862      	ldr	r2, [r4, #4]
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f001 fa05 	bl	800b3e0 <memchr>
 8009fd6:	b108      	cbz	r0, 8009fdc <_printf_i+0x1e8>
 8009fd8:	1b40      	subs	r0, r0, r5
 8009fda:	6060      	str	r0, [r4, #4]
 8009fdc:	6863      	ldr	r3, [r4, #4]
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe6:	e7ab      	b.n	8009f40 <_printf_i+0x14c>
 8009fe8:	6923      	ldr	r3, [r4, #16]
 8009fea:	462a      	mov	r2, r5
 8009fec:	4649      	mov	r1, r9
 8009fee:	4640      	mov	r0, r8
 8009ff0:	47d0      	blx	sl
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	d0ae      	beq.n	8009f54 <_printf_i+0x160>
 8009ff6:	6823      	ldr	r3, [r4, #0]
 8009ff8:	079b      	lsls	r3, r3, #30
 8009ffa:	d413      	bmi.n	800a024 <_printf_i+0x230>
 8009ffc:	68e0      	ldr	r0, [r4, #12]
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	4298      	cmp	r0, r3
 800a002:	bfb8      	it	lt
 800a004:	4618      	movlt	r0, r3
 800a006:	e7a7      	b.n	8009f58 <_printf_i+0x164>
 800a008:	2301      	movs	r3, #1
 800a00a:	4632      	mov	r2, r6
 800a00c:	4649      	mov	r1, r9
 800a00e:	4640      	mov	r0, r8
 800a010:	47d0      	blx	sl
 800a012:	3001      	adds	r0, #1
 800a014:	d09e      	beq.n	8009f54 <_printf_i+0x160>
 800a016:	3501      	adds	r5, #1
 800a018:	68e3      	ldr	r3, [r4, #12]
 800a01a:	9903      	ldr	r1, [sp, #12]
 800a01c:	1a5b      	subs	r3, r3, r1
 800a01e:	42ab      	cmp	r3, r5
 800a020:	dcf2      	bgt.n	800a008 <_printf_i+0x214>
 800a022:	e7eb      	b.n	8009ffc <_printf_i+0x208>
 800a024:	2500      	movs	r5, #0
 800a026:	f104 0619 	add.w	r6, r4, #25
 800a02a:	e7f5      	b.n	800a018 <_printf_i+0x224>
 800a02c:	0800e08a 	.word	0x0800e08a
 800a030:	0800e09b 	.word	0x0800e09b

0800a034 <_scanf_float>:
 800a034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a038:	b087      	sub	sp, #28
 800a03a:	4617      	mov	r7, r2
 800a03c:	468b      	mov	fp, r1
 800a03e:	4680      	mov	r8, r0
 800a040:	9303      	str	r3, [sp, #12]
 800a042:	460c      	mov	r4, r1
 800a044:	688b      	ldr	r3, [r1, #8]
 800a046:	1e5a      	subs	r2, r3, #1
 800a048:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a04c:	bf8b      	itete	hi
 800a04e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a052:	2300      	movls	r3, #0
 800a054:	195b      	addhi	r3, r3, r5
 800a056:	9302      	strls	r3, [sp, #8]
 800a058:	f04f 0500 	mov.w	r5, #0
 800a05c:	bf84      	itt	hi
 800a05e:	9302      	strhi	r3, [sp, #8]
 800a060:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a064:	46aa      	mov	sl, r5
 800a066:	46a9      	mov	r9, r5
 800a068:	bf88      	it	hi
 800a06a:	608b      	strhi	r3, [r1, #8]
 800a06c:	680b      	ldr	r3, [r1, #0]
 800a06e:	9501      	str	r5, [sp, #4]
 800a070:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a074:	f84b 3b1c 	str.w	r3, [fp], #28
 800a078:	465e      	mov	r6, fp
 800a07a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a07e:	68a2      	ldr	r2, [r4, #8]
 800a080:	b152      	cbz	r2, 800a098 <_scanf_float+0x64>
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b4e      	cmp	r3, #78	; 0x4e
 800a088:	d864      	bhi.n	800a154 <_scanf_float+0x120>
 800a08a:	2b40      	cmp	r3, #64	; 0x40
 800a08c:	d83c      	bhi.n	800a108 <_scanf_float+0xd4>
 800a08e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a092:	b2c8      	uxtb	r0, r1
 800a094:	280e      	cmp	r0, #14
 800a096:	d93a      	bls.n	800a10e <_scanf_float+0xda>
 800a098:	f1b9 0f00 	cmp.w	r9, #0
 800a09c:	d003      	beq.n	800a0a6 <_scanf_float+0x72>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a0aa:	f1ba 0f01 	cmp.w	sl, #1
 800a0ae:	f200 8113 	bhi.w	800a2d8 <_scanf_float+0x2a4>
 800a0b2:	455e      	cmp	r6, fp
 800a0b4:	f200 8105 	bhi.w	800a2c2 <_scanf_float+0x28e>
 800a0b8:	2501      	movs	r5, #1
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	b007      	add	sp, #28
 800a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a0c6:	2a0d      	cmp	r2, #13
 800a0c8:	d8e6      	bhi.n	800a098 <_scanf_float+0x64>
 800a0ca:	a101      	add	r1, pc, #4	; (adr r1, 800a0d0 <_scanf_float+0x9c>)
 800a0cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a0d0:	0800a20f 	.word	0x0800a20f
 800a0d4:	0800a099 	.word	0x0800a099
 800a0d8:	0800a099 	.word	0x0800a099
 800a0dc:	0800a099 	.word	0x0800a099
 800a0e0:	0800a26f 	.word	0x0800a26f
 800a0e4:	0800a247 	.word	0x0800a247
 800a0e8:	0800a099 	.word	0x0800a099
 800a0ec:	0800a099 	.word	0x0800a099
 800a0f0:	0800a21d 	.word	0x0800a21d
 800a0f4:	0800a099 	.word	0x0800a099
 800a0f8:	0800a099 	.word	0x0800a099
 800a0fc:	0800a099 	.word	0x0800a099
 800a100:	0800a099 	.word	0x0800a099
 800a104:	0800a1d5 	.word	0x0800a1d5
 800a108:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a10c:	e7db      	b.n	800a0c6 <_scanf_float+0x92>
 800a10e:	290e      	cmp	r1, #14
 800a110:	d8c2      	bhi.n	800a098 <_scanf_float+0x64>
 800a112:	a001      	add	r0, pc, #4	; (adr r0, 800a118 <_scanf_float+0xe4>)
 800a114:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a118:	0800a1c7 	.word	0x0800a1c7
 800a11c:	0800a099 	.word	0x0800a099
 800a120:	0800a1c7 	.word	0x0800a1c7
 800a124:	0800a25b 	.word	0x0800a25b
 800a128:	0800a099 	.word	0x0800a099
 800a12c:	0800a175 	.word	0x0800a175
 800a130:	0800a1b1 	.word	0x0800a1b1
 800a134:	0800a1b1 	.word	0x0800a1b1
 800a138:	0800a1b1 	.word	0x0800a1b1
 800a13c:	0800a1b1 	.word	0x0800a1b1
 800a140:	0800a1b1 	.word	0x0800a1b1
 800a144:	0800a1b1 	.word	0x0800a1b1
 800a148:	0800a1b1 	.word	0x0800a1b1
 800a14c:	0800a1b1 	.word	0x0800a1b1
 800a150:	0800a1b1 	.word	0x0800a1b1
 800a154:	2b6e      	cmp	r3, #110	; 0x6e
 800a156:	d809      	bhi.n	800a16c <_scanf_float+0x138>
 800a158:	2b60      	cmp	r3, #96	; 0x60
 800a15a:	d8b2      	bhi.n	800a0c2 <_scanf_float+0x8e>
 800a15c:	2b54      	cmp	r3, #84	; 0x54
 800a15e:	d077      	beq.n	800a250 <_scanf_float+0x21c>
 800a160:	2b59      	cmp	r3, #89	; 0x59
 800a162:	d199      	bne.n	800a098 <_scanf_float+0x64>
 800a164:	2d07      	cmp	r5, #7
 800a166:	d197      	bne.n	800a098 <_scanf_float+0x64>
 800a168:	2508      	movs	r5, #8
 800a16a:	e029      	b.n	800a1c0 <_scanf_float+0x18c>
 800a16c:	2b74      	cmp	r3, #116	; 0x74
 800a16e:	d06f      	beq.n	800a250 <_scanf_float+0x21c>
 800a170:	2b79      	cmp	r3, #121	; 0x79
 800a172:	e7f6      	b.n	800a162 <_scanf_float+0x12e>
 800a174:	6821      	ldr	r1, [r4, #0]
 800a176:	05c8      	lsls	r0, r1, #23
 800a178:	d51a      	bpl.n	800a1b0 <_scanf_float+0x17c>
 800a17a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a17e:	9b02      	ldr	r3, [sp, #8]
 800a180:	f109 0901 	add.w	r9, r9, #1
 800a184:	6021      	str	r1, [r4, #0]
 800a186:	b11b      	cbz	r3, 800a190 <_scanf_float+0x15c>
 800a188:	3b01      	subs	r3, #1
 800a18a:	3201      	adds	r2, #1
 800a18c:	9302      	str	r3, [sp, #8]
 800a18e:	60a2      	str	r2, [r4, #8]
 800a190:	68a3      	ldr	r3, [r4, #8]
 800a192:	3b01      	subs	r3, #1
 800a194:	60a3      	str	r3, [r4, #8]
 800a196:	6923      	ldr	r3, [r4, #16]
 800a198:	3301      	adds	r3, #1
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	607b      	str	r3, [r7, #4]
 800a1a4:	f340 8084 	ble.w	800a2b0 <_scanf_float+0x27c>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	603b      	str	r3, [r7, #0]
 800a1ae:	e766      	b.n	800a07e <_scanf_float+0x4a>
 800a1b0:	eb1a 0f05 	cmn.w	sl, r5
 800a1b4:	f47f af70 	bne.w	800a098 <_scanf_float+0x64>
 800a1b8:	6822      	ldr	r2, [r4, #0]
 800a1ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a1be:	6022      	str	r2, [r4, #0]
 800a1c0:	f806 3b01 	strb.w	r3, [r6], #1
 800a1c4:	e7e4      	b.n	800a190 <_scanf_float+0x15c>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	0610      	lsls	r0, r2, #24
 800a1ca:	f57f af65 	bpl.w	800a098 <_scanf_float+0x64>
 800a1ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a1d2:	e7f4      	b.n	800a1be <_scanf_float+0x18a>
 800a1d4:	f1ba 0f00 	cmp.w	sl, #0
 800a1d8:	d10e      	bne.n	800a1f8 <_scanf_float+0x1c4>
 800a1da:	f1b9 0f00 	cmp.w	r9, #0
 800a1de:	d10e      	bne.n	800a1fe <_scanf_float+0x1ca>
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a1e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a1ea:	d108      	bne.n	800a1fe <_scanf_float+0x1ca>
 800a1ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1f0:	f04f 0a01 	mov.w	sl, #1
 800a1f4:	6022      	str	r2, [r4, #0]
 800a1f6:	e7e3      	b.n	800a1c0 <_scanf_float+0x18c>
 800a1f8:	f1ba 0f02 	cmp.w	sl, #2
 800a1fc:	d055      	beq.n	800a2aa <_scanf_float+0x276>
 800a1fe:	2d01      	cmp	r5, #1
 800a200:	d002      	beq.n	800a208 <_scanf_float+0x1d4>
 800a202:	2d04      	cmp	r5, #4
 800a204:	f47f af48 	bne.w	800a098 <_scanf_float+0x64>
 800a208:	3501      	adds	r5, #1
 800a20a:	b2ed      	uxtb	r5, r5
 800a20c:	e7d8      	b.n	800a1c0 <_scanf_float+0x18c>
 800a20e:	f1ba 0f01 	cmp.w	sl, #1
 800a212:	f47f af41 	bne.w	800a098 <_scanf_float+0x64>
 800a216:	f04f 0a02 	mov.w	sl, #2
 800a21a:	e7d1      	b.n	800a1c0 <_scanf_float+0x18c>
 800a21c:	b97d      	cbnz	r5, 800a23e <_scanf_float+0x20a>
 800a21e:	f1b9 0f00 	cmp.w	r9, #0
 800a222:	f47f af3c 	bne.w	800a09e <_scanf_float+0x6a>
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a22c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a230:	f47f af39 	bne.w	800a0a6 <_scanf_float+0x72>
 800a234:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a238:	2501      	movs	r5, #1
 800a23a:	6022      	str	r2, [r4, #0]
 800a23c:	e7c0      	b.n	800a1c0 <_scanf_float+0x18c>
 800a23e:	2d03      	cmp	r5, #3
 800a240:	d0e2      	beq.n	800a208 <_scanf_float+0x1d4>
 800a242:	2d05      	cmp	r5, #5
 800a244:	e7de      	b.n	800a204 <_scanf_float+0x1d0>
 800a246:	2d02      	cmp	r5, #2
 800a248:	f47f af26 	bne.w	800a098 <_scanf_float+0x64>
 800a24c:	2503      	movs	r5, #3
 800a24e:	e7b7      	b.n	800a1c0 <_scanf_float+0x18c>
 800a250:	2d06      	cmp	r5, #6
 800a252:	f47f af21 	bne.w	800a098 <_scanf_float+0x64>
 800a256:	2507      	movs	r5, #7
 800a258:	e7b2      	b.n	800a1c0 <_scanf_float+0x18c>
 800a25a:	6822      	ldr	r2, [r4, #0]
 800a25c:	0591      	lsls	r1, r2, #22
 800a25e:	f57f af1b 	bpl.w	800a098 <_scanf_float+0x64>
 800a262:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a266:	f8cd 9004 	str.w	r9, [sp, #4]
 800a26a:	6022      	str	r2, [r4, #0]
 800a26c:	e7a8      	b.n	800a1c0 <_scanf_float+0x18c>
 800a26e:	6822      	ldr	r2, [r4, #0]
 800a270:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a274:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a278:	d006      	beq.n	800a288 <_scanf_float+0x254>
 800a27a:	0550      	lsls	r0, r2, #21
 800a27c:	f57f af0c 	bpl.w	800a098 <_scanf_float+0x64>
 800a280:	f1b9 0f00 	cmp.w	r9, #0
 800a284:	f43f af0f 	beq.w	800a0a6 <_scanf_float+0x72>
 800a288:	0591      	lsls	r1, r2, #22
 800a28a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a28e:	bf58      	it	pl
 800a290:	9901      	ldrpl	r1, [sp, #4]
 800a292:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a296:	bf58      	it	pl
 800a298:	eba9 0101 	subpl.w	r1, r9, r1
 800a29c:	6022      	str	r2, [r4, #0]
 800a29e:	f04f 0900 	mov.w	r9, #0
 800a2a2:	bf58      	it	pl
 800a2a4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2a8:	e78a      	b.n	800a1c0 <_scanf_float+0x18c>
 800a2aa:	f04f 0a03 	mov.w	sl, #3
 800a2ae:	e787      	b.n	800a1c0 <_scanf_float+0x18c>
 800a2b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	4798      	blx	r3
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f aedf 	beq.w	800a07e <_scanf_float+0x4a>
 800a2c0:	e6ea      	b.n	800a098 <_scanf_float+0x64>
 800a2c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2c6:	463a      	mov	r2, r7
 800a2c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	4798      	blx	r3
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	6123      	str	r3, [r4, #16]
 800a2d6:	e6ec      	b.n	800a0b2 <_scanf_float+0x7e>
 800a2d8:	1e6b      	subs	r3, r5, #1
 800a2da:	2b06      	cmp	r3, #6
 800a2dc:	d825      	bhi.n	800a32a <_scanf_float+0x2f6>
 800a2de:	2d02      	cmp	r5, #2
 800a2e0:	d836      	bhi.n	800a350 <_scanf_float+0x31c>
 800a2e2:	455e      	cmp	r6, fp
 800a2e4:	f67f aee8 	bls.w	800a0b8 <_scanf_float+0x84>
 800a2e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2ec:	463a      	mov	r2, r7
 800a2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4798      	blx	r3
 800a2f6:	6923      	ldr	r3, [r4, #16]
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	6123      	str	r3, [r4, #16]
 800a2fc:	e7f1      	b.n	800a2e2 <_scanf_float+0x2ae>
 800a2fe:	9802      	ldr	r0, [sp, #8]
 800a300:	463a      	mov	r2, r7
 800a302:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a306:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a30a:	9002      	str	r0, [sp, #8]
 800a30c:	4640      	mov	r0, r8
 800a30e:	4798      	blx	r3
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	3b01      	subs	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a31a:	fa5f fa8a 	uxtb.w	sl, sl
 800a31e:	f1ba 0f02 	cmp.w	sl, #2
 800a322:	d1ec      	bne.n	800a2fe <_scanf_float+0x2ca>
 800a324:	3d03      	subs	r5, #3
 800a326:	b2ed      	uxtb	r5, r5
 800a328:	1b76      	subs	r6, r6, r5
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	05da      	lsls	r2, r3, #23
 800a32e:	d52e      	bpl.n	800a38e <_scanf_float+0x35a>
 800a330:	055b      	lsls	r3, r3, #21
 800a332:	d510      	bpl.n	800a356 <_scanf_float+0x322>
 800a334:	455e      	cmp	r6, fp
 800a336:	f67f aebf 	bls.w	800a0b8 <_scanf_float+0x84>
 800a33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a33e:	463a      	mov	r2, r7
 800a340:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a344:	4640      	mov	r0, r8
 800a346:	4798      	blx	r3
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	6123      	str	r3, [r4, #16]
 800a34e:	e7f1      	b.n	800a334 <_scanf_float+0x300>
 800a350:	46aa      	mov	sl, r5
 800a352:	9602      	str	r6, [sp, #8]
 800a354:	e7df      	b.n	800a316 <_scanf_float+0x2e2>
 800a356:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a35a:	1e75      	subs	r5, r6, #1
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	2965      	cmp	r1, #101	; 0x65
 800a360:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	d00c      	beq.n	800a382 <_scanf_float+0x34e>
 800a368:	2945      	cmp	r1, #69	; 0x45
 800a36a:	d00a      	beq.n	800a382 <_scanf_float+0x34e>
 800a36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a370:	463a      	mov	r2, r7
 800a372:	4640      	mov	r0, r8
 800a374:	1eb5      	subs	r5, r6, #2
 800a376:	4798      	blx	r3
 800a378:	6923      	ldr	r3, [r4, #16]
 800a37a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a37e:	3b01      	subs	r3, #1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	462e      	mov	r6, r5
 800a384:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a388:	463a      	mov	r2, r7
 800a38a:	4640      	mov	r0, r8
 800a38c:	4798      	blx	r3
 800a38e:	6825      	ldr	r5, [r4, #0]
 800a390:	f015 0510 	ands.w	r5, r5, #16
 800a394:	d158      	bne.n	800a448 <_scanf_float+0x414>
 800a396:	7035      	strb	r5, [r6, #0]
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a2:	d11c      	bne.n	800a3de <_scanf_float+0x3aa>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	454b      	cmp	r3, r9
 800a3a8:	eba3 0209 	sub.w	r2, r3, r9
 800a3ac:	d124      	bne.n	800a3f8 <_scanf_float+0x3c4>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4659      	mov	r1, fp
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	f000 ff10 	bl	800b1d8 <_strtod_r>
 800a3b8:	6821      	ldr	r1, [r4, #0]
 800a3ba:	9b03      	ldr	r3, [sp, #12]
 800a3bc:	f011 0f02 	tst.w	r1, #2
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	ec57 6b10 	vmov	r6, r7, d0
 800a3c6:	f103 0204 	add.w	r2, r3, #4
 800a3ca:	d020      	beq.n	800a40e <_scanf_float+0x3da>
 800a3cc:	9903      	ldr	r1, [sp, #12]
 800a3ce:	600a      	str	r2, [r1, #0]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	e9c3 6700 	strd	r6, r7, [r3]
 800a3d6:	68e3      	ldr	r3, [r4, #12]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	60e3      	str	r3, [r4, #12]
 800a3dc:	e66d      	b.n	800a0ba <_scanf_float+0x86>
 800a3de:	9b04      	ldr	r3, [sp, #16]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0e4      	beq.n	800a3ae <_scanf_float+0x37a>
 800a3e4:	9905      	ldr	r1, [sp, #20]
 800a3e6:	230a      	movs	r3, #10
 800a3e8:	462a      	mov	r2, r5
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	3101      	adds	r1, #1
 800a3ee:	f000 ff7b 	bl	800b2e8 <_strtol_r>
 800a3f2:	9b04      	ldr	r3, [sp, #16]
 800a3f4:	9e05      	ldr	r6, [sp, #20]
 800a3f6:	1ac2      	subs	r2, r0, r3
 800a3f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a3fc:	4913      	ldr	r1, [pc, #76]	; (800a44c <_scanf_float+0x418>)
 800a3fe:	429e      	cmp	r6, r3
 800a400:	bf28      	it	cs
 800a402:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a406:	4630      	mov	r0, r6
 800a408:	f000 f824 	bl	800a454 <siprintf>
 800a40c:	e7cf      	b.n	800a3ae <_scanf_float+0x37a>
 800a40e:	f011 0f04 	tst.w	r1, #4
 800a412:	9903      	ldr	r1, [sp, #12]
 800a414:	600a      	str	r2, [r1, #0]
 800a416:	d1db      	bne.n	800a3d0 <_scanf_float+0x39c>
 800a418:	f8d3 8000 	ldr.w	r8, [r3]
 800a41c:	ee10 2a10 	vmov	r2, s0
 800a420:	463b      	mov	r3, r7
 800a422:	ee10 0a10 	vmov	r0, s0
 800a426:	4639      	mov	r1, r7
 800a428:	f7f6 fb90 	bl	8000b4c <__aeabi_dcmpun>
 800a42c:	b128      	cbz	r0, 800a43a <_scanf_float+0x406>
 800a42e:	4808      	ldr	r0, [pc, #32]	; (800a450 <_scanf_float+0x41c>)
 800a430:	f000 fffa 	bl	800b428 <nanf>
 800a434:	ed88 0a00 	vstr	s0, [r8]
 800a438:	e7cd      	b.n	800a3d6 <_scanf_float+0x3a2>
 800a43a:	4630      	mov	r0, r6
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f6 fbe3 	bl	8000c08 <__aeabi_d2f>
 800a442:	f8c8 0000 	str.w	r0, [r8]
 800a446:	e7c6      	b.n	800a3d6 <_scanf_float+0x3a2>
 800a448:	2500      	movs	r5, #0
 800a44a:	e636      	b.n	800a0ba <_scanf_float+0x86>
 800a44c:	0800e0ac 	.word	0x0800e0ac
 800a450:	0800e49f 	.word	0x0800e49f

0800a454 <siprintf>:
 800a454:	b40e      	push	{r1, r2, r3}
 800a456:	b500      	push	{lr}
 800a458:	b09c      	sub	sp, #112	; 0x70
 800a45a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a45e:	ab1d      	add	r3, sp, #116	; 0x74
 800a460:	9002      	str	r0, [sp, #8]
 800a462:	9006      	str	r0, [sp, #24]
 800a464:	9107      	str	r1, [sp, #28]
 800a466:	9104      	str	r1, [sp, #16]
 800a468:	4808      	ldr	r0, [pc, #32]	; (800a48c <siprintf+0x38>)
 800a46a:	4909      	ldr	r1, [pc, #36]	; (800a490 <siprintf+0x3c>)
 800a46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a470:	9105      	str	r1, [sp, #20]
 800a472:	a902      	add	r1, sp, #8
 800a474:	6800      	ldr	r0, [r0, #0]
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	f002 fa0e 	bl	800c898 <_svfiprintf_r>
 800a47c:	9b02      	ldr	r3, [sp, #8]
 800a47e:	2200      	movs	r2, #0
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	b01c      	add	sp, #112	; 0x70
 800a484:	f85d eb04 	ldr.w	lr, [sp], #4
 800a488:	b003      	add	sp, #12
 800a48a:	4770      	bx	lr
 800a48c:	200001d0 	.word	0x200001d0
 800a490:	ffff0208 	.word	0xffff0208

0800a494 <std>:
 800a494:	2300      	movs	r3, #0
 800a496:	b510      	push	{r4, lr}
 800a498:	4604      	mov	r4, r0
 800a49a:	6083      	str	r3, [r0, #8]
 800a49c:	8181      	strh	r1, [r0, #12]
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6643      	str	r3, [r0, #100]	; 0x64
 800a4a2:	81c2      	strh	r2, [r0, #14]
 800a4a4:	2208      	movs	r2, #8
 800a4a6:	6183      	str	r3, [r0, #24]
 800a4a8:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4b0:	305c      	adds	r0, #92	; 0x5c
 800a4b2:	f000 ff5d 	bl	800b370 <memset>
 800a4b6:	4b05      	ldr	r3, [pc, #20]	; (800a4cc <std+0x38>)
 800a4b8:	6224      	str	r4, [r4, #32]
 800a4ba:	6263      	str	r3, [r4, #36]	; 0x24
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <std+0x3c>)
 800a4be:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4c0:	4b04      	ldr	r3, [pc, #16]	; (800a4d4 <std+0x40>)
 800a4c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4c4:	4b04      	ldr	r3, [pc, #16]	; (800a4d8 <std+0x44>)
 800a4c6:	6323      	str	r3, [r4, #48]	; 0x30
 800a4c8:	bd10      	pop	{r4, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800d973 	.word	0x0800d973
 800a4d0:	0800d995 	.word	0x0800d995
 800a4d4:	0800d9cd 	.word	0x0800d9cd
 800a4d8:	0800d9f1 	.word	0x0800d9f1

0800a4dc <stdio_exit_handler>:
 800a4dc:	4a02      	ldr	r2, [pc, #8]	; (800a4e8 <stdio_exit_handler+0xc>)
 800a4de:	4903      	ldr	r1, [pc, #12]	; (800a4ec <stdio_exit_handler+0x10>)
 800a4e0:	4803      	ldr	r0, [pc, #12]	; (800a4f0 <stdio_exit_handler+0x14>)
 800a4e2:	f000 bf03 	b.w	800b2ec <_fwalk_sglue>
 800a4e6:	bf00      	nop
 800a4e8:	2000000c 	.word	0x2000000c
 800a4ec:	0800cf99 	.word	0x0800cf99
 800a4f0:	20000184 	.word	0x20000184

0800a4f4 <cleanup_stdio>:
 800a4f4:	6841      	ldr	r1, [r0, #4]
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	; (800a528 <cleanup_stdio+0x34>)
 800a4f8:	4299      	cmp	r1, r3
 800a4fa:	b510      	push	{r4, lr}
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	d001      	beq.n	800a504 <cleanup_stdio+0x10>
 800a500:	f002 fd4a 	bl	800cf98 <_fflush_r>
 800a504:	68a1      	ldr	r1, [r4, #8]
 800a506:	4b09      	ldr	r3, [pc, #36]	; (800a52c <cleanup_stdio+0x38>)
 800a508:	4299      	cmp	r1, r3
 800a50a:	d002      	beq.n	800a512 <cleanup_stdio+0x1e>
 800a50c:	4620      	mov	r0, r4
 800a50e:	f002 fd43 	bl	800cf98 <_fflush_r>
 800a512:	68e1      	ldr	r1, [r4, #12]
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <cleanup_stdio+0x3c>)
 800a516:	4299      	cmp	r1, r3
 800a518:	d004      	beq.n	800a524 <cleanup_stdio+0x30>
 800a51a:	4620      	mov	r0, r4
 800a51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a520:	f002 bd3a 	b.w	800cf98 <_fflush_r>
 800a524:	bd10      	pop	{r4, pc}
 800a526:	bf00      	nop
 800a528:	200002e0 	.word	0x200002e0
 800a52c:	20000348 	.word	0x20000348
 800a530:	200003b0 	.word	0x200003b0

0800a534 <global_stdio_init.part.0>:
 800a534:	b510      	push	{r4, lr}
 800a536:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <global_stdio_init.part.0+0x30>)
 800a538:	2104      	movs	r1, #4
 800a53a:	4c0b      	ldr	r4, [pc, #44]	; (800a568 <global_stdio_init.part.0+0x34>)
 800a53c:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <global_stdio_init.part.0+0x38>)
 800a53e:	4620      	mov	r0, r4
 800a540:	601a      	str	r2, [r3, #0]
 800a542:	2200      	movs	r2, #0
 800a544:	f7ff ffa6 	bl	800a494 <std>
 800a548:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a54c:	2201      	movs	r2, #1
 800a54e:	2109      	movs	r1, #9
 800a550:	f7ff ffa0 	bl	800a494 <std>
 800a554:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a558:	2202      	movs	r2, #2
 800a55a:	2112      	movs	r1, #18
 800a55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a560:	f7ff bf98 	b.w	800a494 <std>
 800a564:	20000418 	.word	0x20000418
 800a568:	200002e0 	.word	0x200002e0
 800a56c:	0800a4dd 	.word	0x0800a4dd

0800a570 <__sfp_lock_acquire>:
 800a570:	4801      	ldr	r0, [pc, #4]	; (800a578 <__sfp_lock_acquire+0x8>)
 800a572:	f000 bf33 	b.w	800b3dc <__retarget_lock_acquire_recursive>
 800a576:	bf00      	nop
 800a578:	2000041d 	.word	0x2000041d

0800a57c <__sfp_lock_release>:
 800a57c:	4801      	ldr	r0, [pc, #4]	; (800a584 <__sfp_lock_release+0x8>)
 800a57e:	f000 bf2e 	b.w	800b3de <__retarget_lock_release_recursive>
 800a582:	bf00      	nop
 800a584:	2000041d 	.word	0x2000041d

0800a588 <__sinit>:
 800a588:	b510      	push	{r4, lr}
 800a58a:	4604      	mov	r4, r0
 800a58c:	f7ff fff0 	bl	800a570 <__sfp_lock_acquire>
 800a590:	6a23      	ldr	r3, [r4, #32]
 800a592:	b11b      	cbz	r3, 800a59c <__sinit+0x14>
 800a594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a598:	f7ff bff0 	b.w	800a57c <__sfp_lock_release>
 800a59c:	4b04      	ldr	r3, [pc, #16]	; (800a5b0 <__sinit+0x28>)
 800a59e:	6223      	str	r3, [r4, #32]
 800a5a0:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <__sinit+0x2c>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d1f5      	bne.n	800a594 <__sinit+0xc>
 800a5a8:	f7ff ffc4 	bl	800a534 <global_stdio_init.part.0>
 800a5ac:	e7f2      	b.n	800a594 <__sinit+0xc>
 800a5ae:	bf00      	nop
 800a5b0:	0800a4f5 	.word	0x0800a4f5
 800a5b4:	20000418 	.word	0x20000418

0800a5b8 <sulp>:
 800a5b8:	b570      	push	{r4, r5, r6, lr}
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	460d      	mov	r5, r1
 800a5be:	4616      	mov	r6, r2
 800a5c0:	ec45 4b10 	vmov	d0, r4, r5
 800a5c4:	f003 f890 	bl	800d6e8 <__ulp>
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	b17e      	cbz	r6, 800a5ee <sulp+0x36>
 800a5ce:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a5d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	dd09      	ble.n	800a5ee <sulp+0x36>
 800a5da:	051b      	lsls	r3, r3, #20
 800a5dc:	2400      	movs	r4, #0
 800a5de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5e8:	462b      	mov	r3, r5
 800a5ea:	f7f6 f815 	bl	8000618 <__aeabi_dmul>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}

0800a5f0 <_strtod_l>:
 800a5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f4:	ed2d 8b02 	vpush	{d8}
 800a5f8:	b09b      	sub	sp, #108	; 0x6c
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	460d      	mov	r5, r1
 800a5fe:	f04f 0800 	mov.w	r8, #0
 800a602:	9213      	str	r2, [sp, #76]	; 0x4c
 800a604:	2200      	movs	r2, #0
 800a606:	f04f 0900 	mov.w	r9, #0
 800a60a:	9216      	str	r2, [sp, #88]	; 0x58
 800a60c:	460a      	mov	r2, r1
 800a60e:	9215      	str	r2, [sp, #84]	; 0x54
 800a610:	7811      	ldrb	r1, [r2, #0]
 800a612:	292b      	cmp	r1, #43	; 0x2b
 800a614:	d04c      	beq.n	800a6b0 <_strtod_l+0xc0>
 800a616:	d83a      	bhi.n	800a68e <_strtod_l+0x9e>
 800a618:	290d      	cmp	r1, #13
 800a61a:	d834      	bhi.n	800a686 <_strtod_l+0x96>
 800a61c:	2908      	cmp	r1, #8
 800a61e:	d834      	bhi.n	800a68a <_strtod_l+0x9a>
 800a620:	2900      	cmp	r1, #0
 800a622:	d03d      	beq.n	800a6a0 <_strtod_l+0xb0>
 800a624:	2200      	movs	r2, #0
 800a626:	920a      	str	r2, [sp, #40]	; 0x28
 800a628:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a62a:	7832      	ldrb	r2, [r6, #0]
 800a62c:	2a30      	cmp	r2, #48	; 0x30
 800a62e:	f040 80b4 	bne.w	800a79a <_strtod_l+0x1aa>
 800a632:	7872      	ldrb	r2, [r6, #1]
 800a634:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a638:	2a58      	cmp	r2, #88	; 0x58
 800a63a:	d170      	bne.n	800a71e <_strtod_l+0x12e>
 800a63c:	9302      	str	r3, [sp, #8]
 800a63e:	a915      	add	r1, sp, #84	; 0x54
 800a640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a642:	4620      	mov	r0, r4
 800a644:	4a8e      	ldr	r2, [pc, #568]	; (800a880 <_strtod_l+0x290>)
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	ab16      	add	r3, sp, #88	; 0x58
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	ab17      	add	r3, sp, #92	; 0x5c
 800a64e:	f001 fdd9 	bl	800c204 <__gethex>
 800a652:	f010 070f 	ands.w	r7, r0, #15
 800a656:	4605      	mov	r5, r0
 800a658:	d005      	beq.n	800a666 <_strtod_l+0x76>
 800a65a:	2f06      	cmp	r7, #6
 800a65c:	d12a      	bne.n	800a6b4 <_strtod_l+0xc4>
 800a65e:	3601      	adds	r6, #1
 800a660:	2300      	movs	r3, #0
 800a662:	9615      	str	r6, [sp, #84]	; 0x54
 800a664:	930a      	str	r3, [sp, #40]	; 0x28
 800a666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a668:	2b00      	cmp	r3, #0
 800a66a:	f040 8581 	bne.w	800b170 <_strtod_l+0xb80>
 800a66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a670:	b1db      	cbz	r3, 800a6aa <_strtod_l+0xba>
 800a672:	4642      	mov	r2, r8
 800a674:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a678:	ec43 2b10 	vmov	d0, r2, r3
 800a67c:	b01b      	add	sp, #108	; 0x6c
 800a67e:	ecbd 8b02 	vpop	{d8}
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	2920      	cmp	r1, #32
 800a688:	d1cc      	bne.n	800a624 <_strtod_l+0x34>
 800a68a:	3201      	adds	r2, #1
 800a68c:	e7bf      	b.n	800a60e <_strtod_l+0x1e>
 800a68e:	292d      	cmp	r1, #45	; 0x2d
 800a690:	d1c8      	bne.n	800a624 <_strtod_l+0x34>
 800a692:	2101      	movs	r1, #1
 800a694:	910a      	str	r1, [sp, #40]	; 0x28
 800a696:	1c51      	adds	r1, r2, #1
 800a698:	9115      	str	r1, [sp, #84]	; 0x54
 800a69a:	7852      	ldrb	r2, [r2, #1]
 800a69c:	2a00      	cmp	r2, #0
 800a69e:	d1c3      	bne.n	800a628 <_strtod_l+0x38>
 800a6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6a2:	9515      	str	r5, [sp, #84]	; 0x54
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f040 8561 	bne.w	800b16c <_strtod_l+0xb7c>
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	464b      	mov	r3, r9
 800a6ae:	e7e3      	b.n	800a678 <_strtod_l+0x88>
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	e7ef      	b.n	800a694 <_strtod_l+0xa4>
 800a6b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6b6:	b13a      	cbz	r2, 800a6c8 <_strtod_l+0xd8>
 800a6b8:	2135      	movs	r1, #53	; 0x35
 800a6ba:	a818      	add	r0, sp, #96	; 0x60
 800a6bc:	f003 f915 	bl	800d8ea <__copybits>
 800a6c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f002 fcdc 	bl	800d080 <_Bfree>
 800a6c8:	3f01      	subs	r7, #1
 800a6ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a6cc:	2f04      	cmp	r7, #4
 800a6ce:	d806      	bhi.n	800a6de <_strtod_l+0xee>
 800a6d0:	e8df f007 	tbb	[pc, r7]
 800a6d4:	201d0314 	.word	0x201d0314
 800a6d8:	14          	.byte	0x14
 800a6d9:	00          	.byte	0x00
 800a6da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a6de:	05e9      	lsls	r1, r5, #23
 800a6e0:	bf48      	it	mi
 800a6e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a6e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a6ea:	0d1b      	lsrs	r3, r3, #20
 800a6ec:	051b      	lsls	r3, r3, #20
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1b9      	bne.n	800a666 <_strtod_l+0x76>
 800a6f2:	f000 fe49 	bl	800b388 <__errno>
 800a6f6:	2322      	movs	r3, #34	; 0x22
 800a6f8:	6003      	str	r3, [r0, #0]
 800a6fa:	e7b4      	b.n	800a666 <_strtod_l+0x76>
 800a6fc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a700:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a704:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a708:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a70c:	e7e7      	b.n	800a6de <_strtod_l+0xee>
 800a70e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a888 <_strtod_l+0x298>
 800a712:	e7e4      	b.n	800a6de <_strtod_l+0xee>
 800a714:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a718:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a71c:	e7df      	b.n	800a6de <_strtod_l+0xee>
 800a71e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a720:	1c5a      	adds	r2, r3, #1
 800a722:	9215      	str	r2, [sp, #84]	; 0x54
 800a724:	785b      	ldrb	r3, [r3, #1]
 800a726:	2b30      	cmp	r3, #48	; 0x30
 800a728:	d0f9      	beq.n	800a71e <_strtod_l+0x12e>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d09b      	beq.n	800a666 <_strtod_l+0x76>
 800a72e:	2301      	movs	r3, #1
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	9304      	str	r3, [sp, #16]
 800a736:	220a      	movs	r2, #10
 800a738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a73a:	46d3      	mov	fp, sl
 800a73c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a740:	930b      	str	r3, [sp, #44]	; 0x2c
 800a742:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a744:	7806      	ldrb	r6, [r0, #0]
 800a746:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a74a:	b2d9      	uxtb	r1, r3
 800a74c:	2909      	cmp	r1, #9
 800a74e:	d926      	bls.n	800a79e <_strtod_l+0x1ae>
 800a750:	2201      	movs	r2, #1
 800a752:	494c      	ldr	r1, [pc, #304]	; (800a884 <_strtod_l+0x294>)
 800a754:	f000 fdfa 	bl	800b34c <strncmp>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d030      	beq.n	800a7be <_strtod_l+0x1ce>
 800a75c:	2000      	movs	r0, #0
 800a75e:	4632      	mov	r2, r6
 800a760:	465e      	mov	r6, fp
 800a762:	4603      	mov	r3, r0
 800a764:	9005      	str	r0, [sp, #20]
 800a766:	2a65      	cmp	r2, #101	; 0x65
 800a768:	d001      	beq.n	800a76e <_strtod_l+0x17e>
 800a76a:	2a45      	cmp	r2, #69	; 0x45
 800a76c:	d113      	bne.n	800a796 <_strtod_l+0x1a6>
 800a76e:	b91e      	cbnz	r6, 800a778 <_strtod_l+0x188>
 800a770:	9a04      	ldr	r2, [sp, #16]
 800a772:	4302      	orrs	r2, r0
 800a774:	d094      	beq.n	800a6a0 <_strtod_l+0xb0>
 800a776:	2600      	movs	r6, #0
 800a778:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a77a:	1c6a      	adds	r2, r5, #1
 800a77c:	9215      	str	r2, [sp, #84]	; 0x54
 800a77e:	786a      	ldrb	r2, [r5, #1]
 800a780:	2a2b      	cmp	r2, #43	; 0x2b
 800a782:	d073      	beq.n	800a86c <_strtod_l+0x27c>
 800a784:	2a2d      	cmp	r2, #45	; 0x2d
 800a786:	d077      	beq.n	800a878 <_strtod_l+0x288>
 800a788:	f04f 0c00 	mov.w	ip, #0
 800a78c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a790:	2909      	cmp	r1, #9
 800a792:	d97f      	bls.n	800a894 <_strtod_l+0x2a4>
 800a794:	9515      	str	r5, [sp, #84]	; 0x54
 800a796:	2700      	movs	r7, #0
 800a798:	e09e      	b.n	800a8d8 <_strtod_l+0x2e8>
 800a79a:	2300      	movs	r3, #0
 800a79c:	e7c8      	b.n	800a730 <_strtod_l+0x140>
 800a79e:	f1bb 0f08 	cmp.w	fp, #8
 800a7a2:	f100 0001 	add.w	r0, r0, #1
 800a7a6:	f10b 0b01 	add.w	fp, fp, #1
 800a7aa:	bfd4      	ite	le
 800a7ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a7ae:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a7b2:	9015      	str	r0, [sp, #84]	; 0x54
 800a7b4:	bfdc      	itt	le
 800a7b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800a7ba:	9309      	strle	r3, [sp, #36]	; 0x24
 800a7bc:	e7c1      	b.n	800a742 <_strtod_l+0x152>
 800a7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	9215      	str	r2, [sp, #84]	; 0x54
 800a7c4:	785a      	ldrb	r2, [r3, #1]
 800a7c6:	f1bb 0f00 	cmp.w	fp, #0
 800a7ca:	d036      	beq.n	800a83a <_strtod_l+0x24a>
 800a7cc:	465e      	mov	r6, fp
 800a7ce:	9005      	str	r0, [sp, #20]
 800a7d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a7d4:	2b09      	cmp	r3, #9
 800a7d6:	d912      	bls.n	800a7fe <_strtod_l+0x20e>
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e7c4      	b.n	800a766 <_strtod_l+0x176>
 800a7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7de:	3001      	adds	r0, #1
 800a7e0:	1c5a      	adds	r2, r3, #1
 800a7e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a7e4:	785a      	ldrb	r2, [r3, #1]
 800a7e6:	2a30      	cmp	r2, #48	; 0x30
 800a7e8:	d0f8      	beq.n	800a7dc <_strtod_l+0x1ec>
 800a7ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	f200 84c3 	bhi.w	800b17a <_strtod_l+0xb8a>
 800a7f4:	9005      	str	r0, [sp, #20]
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7fe:	3a30      	subs	r2, #48	; 0x30
 800a800:	f100 0301 	add.w	r3, r0, #1
 800a804:	d013      	beq.n	800a82e <_strtod_l+0x23e>
 800a806:	9905      	ldr	r1, [sp, #20]
 800a808:	eb00 0c06 	add.w	ip, r0, r6
 800a80c:	4419      	add	r1, r3
 800a80e:	4633      	mov	r3, r6
 800a810:	9105      	str	r1, [sp, #20]
 800a812:	210a      	movs	r1, #10
 800a814:	4563      	cmp	r3, ip
 800a816:	d112      	bne.n	800a83e <_strtod_l+0x24e>
 800a818:	1833      	adds	r3, r6, r0
 800a81a:	3601      	adds	r6, #1
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	4406      	add	r6, r0
 800a820:	dc1a      	bgt.n	800a858 <_strtod_l+0x268>
 800a822:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a824:	230a      	movs	r3, #10
 800a826:	fb03 2301 	mla	r3, r3, r1, r2
 800a82a:	9309      	str	r3, [sp, #36]	; 0x24
 800a82c:	2300      	movs	r3, #0
 800a82e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a830:	4618      	mov	r0, r3
 800a832:	1c51      	adds	r1, r2, #1
 800a834:	9115      	str	r1, [sp, #84]	; 0x54
 800a836:	7852      	ldrb	r2, [r2, #1]
 800a838:	e7ca      	b.n	800a7d0 <_strtod_l+0x1e0>
 800a83a:	4658      	mov	r0, fp
 800a83c:	e7d3      	b.n	800a7e6 <_strtod_l+0x1f6>
 800a83e:	2b08      	cmp	r3, #8
 800a840:	f103 0301 	add.w	r3, r3, #1
 800a844:	dc03      	bgt.n	800a84e <_strtod_l+0x25e>
 800a846:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a848:	434f      	muls	r7, r1
 800a84a:	9709      	str	r7, [sp, #36]	; 0x24
 800a84c:	e7e2      	b.n	800a814 <_strtod_l+0x224>
 800a84e:	2b10      	cmp	r3, #16
 800a850:	bfd8      	it	le
 800a852:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a856:	e7dd      	b.n	800a814 <_strtod_l+0x224>
 800a858:	2e10      	cmp	r6, #16
 800a85a:	bfdc      	itt	le
 800a85c:	230a      	movle	r3, #10
 800a85e:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a862:	e7e3      	b.n	800a82c <_strtod_l+0x23c>
 800a864:	2300      	movs	r3, #0
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	2301      	movs	r3, #1
 800a86a:	e781      	b.n	800a770 <_strtod_l+0x180>
 800a86c:	f04f 0c00 	mov.w	ip, #0
 800a870:	1caa      	adds	r2, r5, #2
 800a872:	9215      	str	r2, [sp, #84]	; 0x54
 800a874:	78aa      	ldrb	r2, [r5, #2]
 800a876:	e789      	b.n	800a78c <_strtod_l+0x19c>
 800a878:	f04f 0c01 	mov.w	ip, #1
 800a87c:	e7f8      	b.n	800a870 <_strtod_l+0x280>
 800a87e:	bf00      	nop
 800a880:	0800e0b4 	.word	0x0800e0b4
 800a884:	0800e0b1 	.word	0x0800e0b1
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a88e:	1c51      	adds	r1, r2, #1
 800a890:	9115      	str	r1, [sp, #84]	; 0x54
 800a892:	7852      	ldrb	r2, [r2, #1]
 800a894:	2a30      	cmp	r2, #48	; 0x30
 800a896:	d0f9      	beq.n	800a88c <_strtod_l+0x29c>
 800a898:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a89c:	2908      	cmp	r1, #8
 800a89e:	f63f af7a 	bhi.w	800a796 <_strtod_l+0x1a6>
 800a8a2:	3a30      	subs	r2, #48	; 0x30
 800a8a4:	9208      	str	r2, [sp, #32]
 800a8a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8a8:	920c      	str	r2, [sp, #48]	; 0x30
 800a8aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8ac:	1c57      	adds	r7, r2, #1
 800a8ae:	9715      	str	r7, [sp, #84]	; 0x54
 800a8b0:	7852      	ldrb	r2, [r2, #1]
 800a8b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a8b6:	f1be 0f09 	cmp.w	lr, #9
 800a8ba:	d938      	bls.n	800a92e <_strtod_l+0x33e>
 800a8bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a8be:	1a7f      	subs	r7, r7, r1
 800a8c0:	2f08      	cmp	r7, #8
 800a8c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a8c6:	dc03      	bgt.n	800a8d0 <_strtod_l+0x2e0>
 800a8c8:	9908      	ldr	r1, [sp, #32]
 800a8ca:	428f      	cmp	r7, r1
 800a8cc:	bfa8      	it	ge
 800a8ce:	460f      	movge	r7, r1
 800a8d0:	f1bc 0f00 	cmp.w	ip, #0
 800a8d4:	d000      	beq.n	800a8d8 <_strtod_l+0x2e8>
 800a8d6:	427f      	negs	r7, r7
 800a8d8:	2e00      	cmp	r6, #0
 800a8da:	d14f      	bne.n	800a97c <_strtod_l+0x38c>
 800a8dc:	9904      	ldr	r1, [sp, #16]
 800a8de:	4301      	orrs	r1, r0
 800a8e0:	f47f aec1 	bne.w	800a666 <_strtod_l+0x76>
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f47f aedb 	bne.w	800a6a0 <_strtod_l+0xb0>
 800a8ea:	2a69      	cmp	r2, #105	; 0x69
 800a8ec:	d029      	beq.n	800a942 <_strtod_l+0x352>
 800a8ee:	dc26      	bgt.n	800a93e <_strtod_l+0x34e>
 800a8f0:	2a49      	cmp	r2, #73	; 0x49
 800a8f2:	d026      	beq.n	800a942 <_strtod_l+0x352>
 800a8f4:	2a4e      	cmp	r2, #78	; 0x4e
 800a8f6:	f47f aed3 	bne.w	800a6a0 <_strtod_l+0xb0>
 800a8fa:	499c      	ldr	r1, [pc, #624]	; (800ab6c <_strtod_l+0x57c>)
 800a8fc:	a815      	add	r0, sp, #84	; 0x54
 800a8fe:	f001 fec1 	bl	800c684 <__match>
 800a902:	2800      	cmp	r0, #0
 800a904:	f43f aecc 	beq.w	800a6a0 <_strtod_l+0xb0>
 800a908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	2b28      	cmp	r3, #40	; 0x28
 800a90e:	d12f      	bne.n	800a970 <_strtod_l+0x380>
 800a910:	aa18      	add	r2, sp, #96	; 0x60
 800a912:	4997      	ldr	r1, [pc, #604]	; (800ab70 <_strtod_l+0x580>)
 800a914:	a815      	add	r0, sp, #84	; 0x54
 800a916:	f001 fec9 	bl	800c6ac <__hexnan>
 800a91a:	2805      	cmp	r0, #5
 800a91c:	d128      	bne.n	800a970 <_strtod_l+0x380>
 800a91e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a92c:	e69b      	b.n	800a666 <_strtod_l+0x76>
 800a92e:	9f08      	ldr	r7, [sp, #32]
 800a930:	210a      	movs	r1, #10
 800a932:	fb01 2107 	mla	r1, r1, r7, r2
 800a936:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a93a:	9208      	str	r2, [sp, #32]
 800a93c:	e7b5      	b.n	800a8aa <_strtod_l+0x2ba>
 800a93e:	2a6e      	cmp	r2, #110	; 0x6e
 800a940:	e7d9      	b.n	800a8f6 <_strtod_l+0x306>
 800a942:	498c      	ldr	r1, [pc, #560]	; (800ab74 <_strtod_l+0x584>)
 800a944:	a815      	add	r0, sp, #84	; 0x54
 800a946:	f001 fe9d 	bl	800c684 <__match>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f43f aea8 	beq.w	800a6a0 <_strtod_l+0xb0>
 800a950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a952:	a815      	add	r0, sp, #84	; 0x54
 800a954:	4988      	ldr	r1, [pc, #544]	; (800ab78 <_strtod_l+0x588>)
 800a956:	3b01      	subs	r3, #1
 800a958:	9315      	str	r3, [sp, #84]	; 0x54
 800a95a:	f001 fe93 	bl	800c684 <__match>
 800a95e:	b910      	cbnz	r0, 800a966 <_strtod_l+0x376>
 800a960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a962:	3301      	adds	r3, #1
 800a964:	9315      	str	r3, [sp, #84]	; 0x54
 800a966:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800ab88 <_strtod_l+0x598>
 800a96a:	f04f 0800 	mov.w	r8, #0
 800a96e:	e67a      	b.n	800a666 <_strtod_l+0x76>
 800a970:	4882      	ldr	r0, [pc, #520]	; (800ab7c <_strtod_l+0x58c>)
 800a972:	f000 fd51 	bl	800b418 <nan>
 800a976:	ec59 8b10 	vmov	r8, r9, d0
 800a97a:	e674      	b.n	800a666 <_strtod_l+0x76>
 800a97c:	9b05      	ldr	r3, [sp, #20]
 800a97e:	f1bb 0f00 	cmp.w	fp, #0
 800a982:	bf08      	it	eq
 800a984:	46b3      	moveq	fp, r6
 800a986:	2e10      	cmp	r6, #16
 800a988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a98a:	eba7 0303 	sub.w	r3, r7, r3
 800a98e:	4635      	mov	r5, r6
 800a990:	bfa8      	it	ge
 800a992:	2510      	movge	r5, #16
 800a994:	9308      	str	r3, [sp, #32]
 800a996:	f7f5 fdc5 	bl	8000524 <__aeabi_ui2d>
 800a99a:	2e09      	cmp	r6, #9
 800a99c:	4680      	mov	r8, r0
 800a99e:	4689      	mov	r9, r1
 800a9a0:	dd13      	ble.n	800a9ca <_strtod_l+0x3da>
 800a9a2:	4b77      	ldr	r3, [pc, #476]	; (800ab80 <_strtod_l+0x590>)
 800a9a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a9ac:	f7f5 fe34 	bl	8000618 <__aeabi_dmul>
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	4689      	mov	r9, r1
 800a9b4:	4650      	mov	r0, sl
 800a9b6:	f7f5 fdb5 	bl	8000524 <__aeabi_ui2d>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fc73 	bl	80002ac <__adddf3>
 800a9c6:	4680      	mov	r8, r0
 800a9c8:	4689      	mov	r9, r1
 800a9ca:	2e0f      	cmp	r6, #15
 800a9cc:	dc38      	bgt.n	800aa40 <_strtod_l+0x450>
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f43f ae48 	beq.w	800a666 <_strtod_l+0x76>
 800a9d6:	dd24      	ble.n	800aa22 <_strtod_l+0x432>
 800a9d8:	2b16      	cmp	r3, #22
 800a9da:	dc0b      	bgt.n	800a9f4 <_strtod_l+0x404>
 800a9dc:	4968      	ldr	r1, [pc, #416]	; (800ab80 <_strtod_l+0x590>)
 800a9de:	4642      	mov	r2, r8
 800a9e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9ea:	f7f5 fe15 	bl	8000618 <__aeabi_dmul>
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4689      	mov	r9, r1
 800a9f2:	e638      	b.n	800a666 <_strtod_l+0x76>
 800a9f4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a9f8:	9a08      	ldr	r2, [sp, #32]
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	db20      	blt.n	800aa40 <_strtod_l+0x450>
 800a9fe:	f1c6 060f 	rsb	r6, r6, #15
 800aa02:	4c5f      	ldr	r4, [pc, #380]	; (800ab80 <_strtod_l+0x590>)
 800aa04:	4642      	mov	r2, r8
 800aa06:	464b      	mov	r3, r9
 800aa08:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aa0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa10:	f7f5 fe02 	bl	8000618 <__aeabi_dmul>
 800aa14:	9b08      	ldr	r3, [sp, #32]
 800aa16:	1b9e      	subs	r6, r3, r6
 800aa18:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aa1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa20:	e7e3      	b.n	800a9ea <_strtod_l+0x3fa>
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	3316      	adds	r3, #22
 800aa26:	db0b      	blt.n	800aa40 <_strtod_l+0x450>
 800aa28:	9b05      	ldr	r3, [sp, #20]
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	1bdf      	subs	r7, r3, r7
 800aa30:	4b53      	ldr	r3, [pc, #332]	; (800ab80 <_strtod_l+0x590>)
 800aa32:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aa36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3a:	f7f5 ff17 	bl	800086c <__aeabi_ddiv>
 800aa3e:	e7d6      	b.n	800a9ee <_strtod_l+0x3fe>
 800aa40:	1b75      	subs	r5, r6, r5
 800aa42:	9b08      	ldr	r3, [sp, #32]
 800aa44:	441d      	add	r5, r3
 800aa46:	2d00      	cmp	r5, #0
 800aa48:	dd70      	ble.n	800ab2c <_strtod_l+0x53c>
 800aa4a:	f015 030f 	ands.w	r3, r5, #15
 800aa4e:	d00a      	beq.n	800aa66 <_strtod_l+0x476>
 800aa50:	494b      	ldr	r1, [pc, #300]	; (800ab80 <_strtod_l+0x590>)
 800aa52:	4642      	mov	r2, r8
 800aa54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa58:	464b      	mov	r3, r9
 800aa5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa5e:	f7f5 fddb 	bl	8000618 <__aeabi_dmul>
 800aa62:	4680      	mov	r8, r0
 800aa64:	4689      	mov	r9, r1
 800aa66:	f035 050f 	bics.w	r5, r5, #15
 800aa6a:	d04d      	beq.n	800ab08 <_strtod_l+0x518>
 800aa6c:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800aa70:	dd22      	ble.n	800aab8 <_strtod_l+0x4c8>
 800aa72:	2500      	movs	r5, #0
 800aa74:	46ab      	mov	fp, r5
 800aa76:	9509      	str	r5, [sp, #36]	; 0x24
 800aa78:	9505      	str	r5, [sp, #20]
 800aa7a:	2322      	movs	r3, #34	; 0x22
 800aa7c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ab88 <_strtod_l+0x598>
 800aa80:	f04f 0800 	mov.w	r8, #0
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f43f adec 	beq.w	800a666 <_strtod_l+0x76>
 800aa8e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa90:	4620      	mov	r0, r4
 800aa92:	f002 faf5 	bl	800d080 <_Bfree>
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f002 faf1 	bl	800d080 <_Bfree>
 800aa9e:	4659      	mov	r1, fp
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f002 faed 	bl	800d080 <_Bfree>
 800aaa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f002 fae9 	bl	800d080 <_Bfree>
 800aaae:	4629      	mov	r1, r5
 800aab0:	4620      	mov	r0, r4
 800aab2:	f002 fae5 	bl	800d080 <_Bfree>
 800aab6:	e5d6      	b.n	800a666 <_strtod_l+0x76>
 800aab8:	4b32      	ldr	r3, [pc, #200]	; (800ab84 <_strtod_l+0x594>)
 800aaba:	112d      	asrs	r5, r5, #4
 800aabc:	4640      	mov	r0, r8
 800aabe:	4649      	mov	r1, r9
 800aac0:	9304      	str	r3, [sp, #16]
 800aac2:	2300      	movs	r3, #0
 800aac4:	469a      	mov	sl, r3
 800aac6:	2d01      	cmp	r5, #1
 800aac8:	dc21      	bgt.n	800ab0e <_strtod_l+0x51e>
 800aaca:	b10b      	cbz	r3, 800aad0 <_strtod_l+0x4e0>
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	492c      	ldr	r1, [pc, #176]	; (800ab84 <_strtod_l+0x594>)
 800aad2:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800aad6:	4642      	mov	r2, r8
 800aad8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800aadc:	464b      	mov	r3, r9
 800aade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aae2:	f7f5 fd99 	bl	8000618 <__aeabi_dmul>
 800aae6:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <_strtod_l+0x598>)
 800aae8:	460a      	mov	r2, r1
 800aaea:	4680      	mov	r8, r0
 800aaec:	400b      	ands	r3, r1
 800aaee:	4927      	ldr	r1, [pc, #156]	; (800ab8c <_strtod_l+0x59c>)
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	d8be      	bhi.n	800aa72 <_strtod_l+0x482>
 800aaf4:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf86      	itte	hi
 800aafc:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ab90 <_strtod_l+0x5a0>
 800ab00:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800ab04:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9304      	str	r3, [sp, #16]
 800ab0c:	e07c      	b.n	800ac08 <_strtod_l+0x618>
 800ab0e:	07ea      	lsls	r2, r5, #31
 800ab10:	d505      	bpl.n	800ab1e <_strtod_l+0x52e>
 800ab12:	9b04      	ldr	r3, [sp, #16]
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f7f5 fd7e 	bl	8000618 <__aeabi_dmul>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	9a04      	ldr	r2, [sp, #16]
 800ab20:	f10a 0a01 	add.w	sl, sl, #1
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	3208      	adds	r2, #8
 800ab28:	9204      	str	r2, [sp, #16]
 800ab2a:	e7cc      	b.n	800aac6 <_strtod_l+0x4d6>
 800ab2c:	d0ec      	beq.n	800ab08 <_strtod_l+0x518>
 800ab2e:	426d      	negs	r5, r5
 800ab30:	f015 020f 	ands.w	r2, r5, #15
 800ab34:	d00a      	beq.n	800ab4c <_strtod_l+0x55c>
 800ab36:	4b12      	ldr	r3, [pc, #72]	; (800ab80 <_strtod_l+0x590>)
 800ab38:	4640      	mov	r0, r8
 800ab3a:	4649      	mov	r1, r9
 800ab3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	f7f5 fe92 	bl	800086c <__aeabi_ddiv>
 800ab48:	4680      	mov	r8, r0
 800ab4a:	4689      	mov	r9, r1
 800ab4c:	112d      	asrs	r5, r5, #4
 800ab4e:	d0db      	beq.n	800ab08 <_strtod_l+0x518>
 800ab50:	2d1f      	cmp	r5, #31
 800ab52:	dd1f      	ble.n	800ab94 <_strtod_l+0x5a4>
 800ab54:	2500      	movs	r5, #0
 800ab56:	46ab      	mov	fp, r5
 800ab58:	9509      	str	r5, [sp, #36]	; 0x24
 800ab5a:	9505      	str	r5, [sp, #20]
 800ab5c:	2322      	movs	r3, #34	; 0x22
 800ab5e:	f04f 0800 	mov.w	r8, #0
 800ab62:	f04f 0900 	mov.w	r9, #0
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	e78d      	b.n	800aa86 <_strtod_l+0x496>
 800ab6a:	bf00      	nop
 800ab6c:	0800e085 	.word	0x0800e085
 800ab70:	0800e0c8 	.word	0x0800e0c8
 800ab74:	0800e07d 	.word	0x0800e07d
 800ab78:	0800e214 	.word	0x0800e214
 800ab7c:	0800e49f 	.word	0x0800e49f
 800ab80:	0800e390 	.word	0x0800e390
 800ab84:	0800e368 	.word	0x0800e368
 800ab88:	7ff00000 	.word	0x7ff00000
 800ab8c:	7ca00000 	.word	0x7ca00000
 800ab90:	7fefffff 	.word	0x7fefffff
 800ab94:	f015 0310 	ands.w	r3, r5, #16
 800ab98:	4640      	mov	r0, r8
 800ab9a:	4649      	mov	r1, r9
 800ab9c:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800af40 <_strtod_l+0x950>
 800aba0:	bf18      	it	ne
 800aba2:	236a      	movne	r3, #106	; 0x6a
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	2300      	movs	r3, #0
 800aba8:	07ea      	lsls	r2, r5, #31
 800abaa:	d504      	bpl.n	800abb6 <_strtod_l+0x5c6>
 800abac:	e9da 2300 	ldrd	r2, r3, [sl]
 800abb0:	f7f5 fd32 	bl	8000618 <__aeabi_dmul>
 800abb4:	2301      	movs	r3, #1
 800abb6:	106d      	asrs	r5, r5, #1
 800abb8:	f10a 0a08 	add.w	sl, sl, #8
 800abbc:	d1f4      	bne.n	800aba8 <_strtod_l+0x5b8>
 800abbe:	b10b      	cbz	r3, 800abc4 <_strtod_l+0x5d4>
 800abc0:	4680      	mov	r8, r0
 800abc2:	4689      	mov	r9, r1
 800abc4:	9b04      	ldr	r3, [sp, #16]
 800abc6:	b1bb      	cbz	r3, 800abf8 <_strtod_l+0x608>
 800abc8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800abcc:	4649      	mov	r1, r9
 800abce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd10      	ble.n	800abf8 <_strtod_l+0x608>
 800abd6:	2b1f      	cmp	r3, #31
 800abd8:	f340 811e 	ble.w	800ae18 <_strtod_l+0x828>
 800abdc:	2b34      	cmp	r3, #52	; 0x34
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	bfdb      	ittet	le
 800abe4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800abe8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800abec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800abf0:	4093      	lslle	r3, r2
 800abf2:	bfd8      	it	le
 800abf4:	ea03 0901 	andle.w	r9, r3, r1
 800abf8:	2200      	movs	r2, #0
 800abfa:	2300      	movs	r3, #0
 800abfc:	4640      	mov	r0, r8
 800abfe:	4649      	mov	r1, r9
 800ac00:	f7f5 ff72 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1a5      	bne.n	800ab54 <_strtod_l+0x564>
 800ac08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac0a:	465a      	mov	r2, fp
 800ac0c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac0e:	4620      	mov	r0, r4
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4633      	mov	r3, r6
 800ac14:	f002 fa9e 	bl	800d154 <__s2b>
 800ac18:	9009      	str	r0, [sp, #36]	; 0x24
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	f43f af29 	beq.w	800aa72 <_strtod_l+0x482>
 800ac20:	9a08      	ldr	r2, [sp, #32]
 800ac22:	2500      	movs	r5, #0
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	2a00      	cmp	r2, #0
 800ac28:	46ab      	mov	fp, r5
 800ac2a:	eba3 0307 	sub.w	r3, r3, r7
 800ac2e:	bfa8      	it	ge
 800ac30:	2300      	movge	r3, #0
 800ac32:	930c      	str	r3, [sp, #48]	; 0x30
 800ac34:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ac38:	9312      	str	r3, [sp, #72]	; 0x48
 800ac3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	6859      	ldr	r1, [r3, #4]
 800ac40:	f002 f9de 	bl	800d000 <_Balloc>
 800ac44:	9005      	str	r0, [sp, #20]
 800ac46:	2800      	cmp	r0, #0
 800ac48:	f43f af17 	beq.w	800aa7a <_strtod_l+0x48a>
 800ac4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac4e:	300c      	adds	r0, #12
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	f103 010c 	add.w	r1, r3, #12
 800ac56:	3202      	adds	r2, #2
 800ac58:	0092      	lsls	r2, r2, #2
 800ac5a:	f000 fbcf 	bl	800b3fc <memcpy>
 800ac5e:	aa18      	add	r2, sp, #96	; 0x60
 800ac60:	a917      	add	r1, sp, #92	; 0x5c
 800ac62:	4620      	mov	r0, r4
 800ac64:	ec49 8b10 	vmov	d0, r8, r9
 800ac68:	f002 fdb2 	bl	800d7d0 <__d2b>
 800ac6c:	9016      	str	r0, [sp, #88]	; 0x58
 800ac6e:	ec49 8b18 	vmov	d8, r8, r9
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f43f af01 	beq.w	800aa7a <_strtod_l+0x48a>
 800ac78:	2101      	movs	r1, #1
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f002 fb02 	bl	800d284 <__i2b>
 800ac80:	4683      	mov	fp, r0
 800ac82:	2800      	cmp	r0, #0
 800ac84:	f43f aef9 	beq.w	800aa7a <_strtod_l+0x48a>
 800ac88:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ac8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	bfa9      	itett	ge
 800ac90:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ac92:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ac94:	eb06 0a03 	addge.w	sl, r6, r3
 800ac98:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac9a:	bfb8      	it	lt
 800ac9c:	1b9f      	sublt	r7, r3, r6
 800ac9e:	9b04      	ldr	r3, [sp, #16]
 800aca0:	bfb8      	it	lt
 800aca2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aca6:	1af6      	subs	r6, r6, r3
 800aca8:	4ba0      	ldr	r3, [pc, #640]	; (800af2c <_strtod_l+0x93c>)
 800acaa:	4416      	add	r6, r2
 800acac:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800acb0:	3e01      	subs	r6, #1
 800acb2:	429e      	cmp	r6, r3
 800acb4:	f280 80c3 	bge.w	800ae3e <_strtod_l+0x84e>
 800acb8:	1b9b      	subs	r3, r3, r6
 800acba:	2101      	movs	r1, #1
 800acbc:	2b1f      	cmp	r3, #31
 800acbe:	eba2 0203 	sub.w	r2, r2, r3
 800acc2:	f300 80b0 	bgt.w	800ae26 <_strtod_l+0x836>
 800acc6:	fa01 f303 	lsl.w	r3, r1, r3
 800acca:	930e      	str	r3, [sp, #56]	; 0x38
 800accc:	2300      	movs	r3, #0
 800acce:	930d      	str	r3, [sp, #52]	; 0x34
 800acd0:	eb0a 0602 	add.w	r6, sl, r2
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	4417      	add	r7, r2
 800acd8:	45b2      	cmp	sl, r6
 800acda:	441f      	add	r7, r3
 800acdc:	4653      	mov	r3, sl
 800acde:	bfa8      	it	ge
 800ace0:	4633      	movge	r3, r6
 800ace2:	42bb      	cmp	r3, r7
 800ace4:	bfa8      	it	ge
 800ace6:	463b      	movge	r3, r7
 800ace8:	2b00      	cmp	r3, #0
 800acea:	bfc2      	ittt	gt
 800acec:	1af6      	subgt	r6, r6, r3
 800acee:	1aff      	subgt	r7, r7, r3
 800acf0:	ebaa 0a03 	subgt.w	sl, sl, r3
 800acf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	dd17      	ble.n	800ad2a <_strtod_l+0x73a>
 800acfa:	4659      	mov	r1, fp
 800acfc:	461a      	mov	r2, r3
 800acfe:	4620      	mov	r0, r4
 800ad00:	f002 fb80 	bl	800d404 <__pow5mult>
 800ad04:	4683      	mov	fp, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f aeb7 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad0c:	4601      	mov	r1, r0
 800ad0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad10:	4620      	mov	r0, r4
 800ad12:	f002 facd 	bl	800d2b0 <__multiply>
 800ad16:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	f43f aeae 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad1e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad20:	4620      	mov	r0, r4
 800ad22:	f002 f9ad 	bl	800d080 <_Bfree>
 800ad26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad28:	9316      	str	r3, [sp, #88]	; 0x58
 800ad2a:	2e00      	cmp	r6, #0
 800ad2c:	f300 808c 	bgt.w	800ae48 <_strtod_l+0x858>
 800ad30:	9b08      	ldr	r3, [sp, #32]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dd08      	ble.n	800ad48 <_strtod_l+0x758>
 800ad36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad38:	4620      	mov	r0, r4
 800ad3a:	9905      	ldr	r1, [sp, #20]
 800ad3c:	f002 fb62 	bl	800d404 <__pow5mult>
 800ad40:	9005      	str	r0, [sp, #20]
 800ad42:	2800      	cmp	r0, #0
 800ad44:	f43f ae99 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad48:	2f00      	cmp	r7, #0
 800ad4a:	dd08      	ble.n	800ad5e <_strtod_l+0x76e>
 800ad4c:	463a      	mov	r2, r7
 800ad4e:	9905      	ldr	r1, [sp, #20]
 800ad50:	4620      	mov	r0, r4
 800ad52:	f002 fbb1 	bl	800d4b8 <__lshift>
 800ad56:	9005      	str	r0, [sp, #20]
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	f43f ae8e 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad5e:	f1ba 0f00 	cmp.w	sl, #0
 800ad62:	dd08      	ble.n	800ad76 <_strtod_l+0x786>
 800ad64:	4659      	mov	r1, fp
 800ad66:	4652      	mov	r2, sl
 800ad68:	4620      	mov	r0, r4
 800ad6a:	f002 fba5 	bl	800d4b8 <__lshift>
 800ad6e:	4683      	mov	fp, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	f43f ae82 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad76:	9a05      	ldr	r2, [sp, #20]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad7c:	f002 fc24 	bl	800d5c8 <__mdiff>
 800ad80:	4605      	mov	r5, r0
 800ad82:	2800      	cmp	r0, #0
 800ad84:	f43f ae79 	beq.w	800aa7a <_strtod_l+0x48a>
 800ad88:	68c3      	ldr	r3, [r0, #12]
 800ad8a:	4659      	mov	r1, fp
 800ad8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad8e:	2300      	movs	r3, #0
 800ad90:	60c3      	str	r3, [r0, #12]
 800ad92:	f002 fbfd 	bl	800d590 <__mcmp>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	da60      	bge.n	800ae5c <_strtod_l+0x86c>
 800ad9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9c:	ea53 0308 	orrs.w	r3, r3, r8
 800ada0:	f040 8084 	bne.w	800aeac <_strtod_l+0x8bc>
 800ada4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d17f      	bne.n	800aeac <_strtod_l+0x8bc>
 800adac:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adb0:	0d1b      	lsrs	r3, r3, #20
 800adb2:	051b      	lsls	r3, r3, #20
 800adb4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800adb8:	d978      	bls.n	800aeac <_strtod_l+0x8bc>
 800adba:	696b      	ldr	r3, [r5, #20]
 800adbc:	b913      	cbnz	r3, 800adc4 <_strtod_l+0x7d4>
 800adbe:	692b      	ldr	r3, [r5, #16]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	dd73      	ble.n	800aeac <_strtod_l+0x8bc>
 800adc4:	4629      	mov	r1, r5
 800adc6:	2201      	movs	r2, #1
 800adc8:	4620      	mov	r0, r4
 800adca:	f002 fb75 	bl	800d4b8 <__lshift>
 800adce:	4659      	mov	r1, fp
 800add0:	4605      	mov	r5, r0
 800add2:	f002 fbdd 	bl	800d590 <__mcmp>
 800add6:	2800      	cmp	r0, #0
 800add8:	dd68      	ble.n	800aeac <_strtod_l+0x8bc>
 800adda:	9904      	ldr	r1, [sp, #16]
 800addc:	464b      	mov	r3, r9
 800adde:	4a54      	ldr	r2, [pc, #336]	; (800af30 <_strtod_l+0x940>)
 800ade0:	2900      	cmp	r1, #0
 800ade2:	f000 8084 	beq.w	800aeee <_strtod_l+0x8fe>
 800ade6:	ea02 0109 	and.w	r1, r2, r9
 800adea:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800adee:	dc7e      	bgt.n	800aeee <_strtod_l+0x8fe>
 800adf0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800adf4:	f77f aeb2 	ble.w	800ab5c <_strtod_l+0x56c>
 800adf8:	4b4e      	ldr	r3, [pc, #312]	; (800af34 <_strtod_l+0x944>)
 800adfa:	4640      	mov	r0, r8
 800adfc:	4649      	mov	r1, r9
 800adfe:	2200      	movs	r2, #0
 800ae00:	f7f5 fc0a 	bl	8000618 <__aeabi_dmul>
 800ae04:	4b4a      	ldr	r3, [pc, #296]	; (800af30 <_strtod_l+0x940>)
 800ae06:	4680      	mov	r8, r0
 800ae08:	4689      	mov	r9, r1
 800ae0a:	400b      	ands	r3, r1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f47f ae3e 	bne.w	800aa8e <_strtod_l+0x49e>
 800ae12:	2322      	movs	r3, #34	; 0x22
 800ae14:	6023      	str	r3, [r4, #0]
 800ae16:	e63a      	b.n	800aa8e <_strtod_l+0x49e>
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae20:	ea03 0808 	and.w	r8, r3, r8
 800ae24:	e6e8      	b.n	800abf8 <_strtod_l+0x608>
 800ae26:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ae2a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ae2e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ae32:	36e2      	adds	r6, #226	; 0xe2
 800ae34:	fa01 f306 	lsl.w	r3, r1, r6
 800ae38:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ae3c:	e748      	b.n	800acd0 <_strtod_l+0x6e0>
 800ae3e:	2100      	movs	r1, #0
 800ae40:	2301      	movs	r3, #1
 800ae42:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ae46:	e743      	b.n	800acd0 <_strtod_l+0x6e0>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f002 fb33 	bl	800d4b8 <__lshift>
 800ae52:	9016      	str	r0, [sp, #88]	; 0x58
 800ae54:	2800      	cmp	r0, #0
 800ae56:	f47f af6b 	bne.w	800ad30 <_strtod_l+0x740>
 800ae5a:	e60e      	b.n	800aa7a <_strtod_l+0x48a>
 800ae5c:	46ca      	mov	sl, r9
 800ae5e:	d171      	bne.n	800af44 <_strtod_l+0x954>
 800ae60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae66:	b352      	cbz	r2, 800aebe <_strtod_l+0x8ce>
 800ae68:	4a33      	ldr	r2, [pc, #204]	; (800af38 <_strtod_l+0x948>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d12a      	bne.n	800aec4 <_strtod_l+0x8d4>
 800ae6e:	9b04      	ldr	r3, [sp, #16]
 800ae70:	4641      	mov	r1, r8
 800ae72:	b1fb      	cbz	r3, 800aeb4 <_strtod_l+0x8c4>
 800ae74:	4b2e      	ldr	r3, [pc, #184]	; (800af30 <_strtod_l+0x940>)
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae7a:	ea09 0303 	and.w	r3, r9, r3
 800ae7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae82:	d81a      	bhi.n	800aeba <_strtod_l+0x8ca>
 800ae84:	0d1b      	lsrs	r3, r3, #20
 800ae86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	d118      	bne.n	800aec4 <_strtod_l+0x8d4>
 800ae92:	4b2a      	ldr	r3, [pc, #168]	; (800af3c <_strtod_l+0x94c>)
 800ae94:	459a      	cmp	sl, r3
 800ae96:	d102      	bne.n	800ae9e <_strtod_l+0x8ae>
 800ae98:	3101      	adds	r1, #1
 800ae9a:	f43f adee 	beq.w	800aa7a <_strtod_l+0x48a>
 800ae9e:	4b24      	ldr	r3, [pc, #144]	; (800af30 <_strtod_l+0x940>)
 800aea0:	f04f 0800 	mov.w	r8, #0
 800aea4:	ea0a 0303 	and.w	r3, sl, r3
 800aea8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800aeac:	9b04      	ldr	r3, [sp, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1a2      	bne.n	800adf8 <_strtod_l+0x808>
 800aeb2:	e5ec      	b.n	800aa8e <_strtod_l+0x49e>
 800aeb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeb8:	e7e9      	b.n	800ae8e <_strtod_l+0x89e>
 800aeba:	4613      	mov	r3, r2
 800aebc:	e7e7      	b.n	800ae8e <_strtod_l+0x89e>
 800aebe:	ea53 0308 	orrs.w	r3, r3, r8
 800aec2:	d08a      	beq.n	800adda <_strtod_l+0x7ea>
 800aec4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aec6:	b1e3      	cbz	r3, 800af02 <_strtod_l+0x912>
 800aec8:	ea13 0f0a 	tst.w	r3, sl
 800aecc:	d0ee      	beq.n	800aeac <_strtod_l+0x8bc>
 800aece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed0:	4640      	mov	r0, r8
 800aed2:	9a04      	ldr	r2, [sp, #16]
 800aed4:	4649      	mov	r1, r9
 800aed6:	b1c3      	cbz	r3, 800af0a <_strtod_l+0x91a>
 800aed8:	f7ff fb6e 	bl	800a5b8 <sulp>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	ec51 0b18 	vmov	r0, r1, d8
 800aee4:	f7f5 f9e2 	bl	80002ac <__adddf3>
 800aee8:	4680      	mov	r8, r0
 800aeea:	4689      	mov	r9, r1
 800aeec:	e7de      	b.n	800aeac <_strtod_l+0x8bc>
 800aeee:	4013      	ands	r3, r2
 800aef0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800aef4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aef8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800aefc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800af00:	e7d4      	b.n	800aeac <_strtod_l+0x8bc>
 800af02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af04:	ea13 0f08 	tst.w	r3, r8
 800af08:	e7e0      	b.n	800aecc <_strtod_l+0x8dc>
 800af0a:	f7ff fb55 	bl	800a5b8 <sulp>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	ec51 0b18 	vmov	r0, r1, d8
 800af16:	f7f5 f9c7 	bl	80002a8 <__aeabi_dsub>
 800af1a:	2200      	movs	r2, #0
 800af1c:	2300      	movs	r3, #0
 800af1e:	4680      	mov	r8, r0
 800af20:	4689      	mov	r9, r1
 800af22:	f7f5 fde1 	bl	8000ae8 <__aeabi_dcmpeq>
 800af26:	2800      	cmp	r0, #0
 800af28:	d0c0      	beq.n	800aeac <_strtod_l+0x8bc>
 800af2a:	e617      	b.n	800ab5c <_strtod_l+0x56c>
 800af2c:	fffffc02 	.word	0xfffffc02
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	39500000 	.word	0x39500000
 800af38:	000fffff 	.word	0x000fffff
 800af3c:	7fefffff 	.word	0x7fefffff
 800af40:	0800e0e0 	.word	0x0800e0e0
 800af44:	4659      	mov	r1, fp
 800af46:	4628      	mov	r0, r5
 800af48:	f002 fc9c 	bl	800d884 <__ratio>
 800af4c:	2200      	movs	r2, #0
 800af4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af52:	ee10 0a10 	vmov	r0, s0
 800af56:	ec57 6b10 	vmov	r6, r7, d0
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fdd8 	bl	8000b10 <__aeabi_dcmple>
 800af60:	2800      	cmp	r0, #0
 800af62:	d071      	beq.n	800b048 <_strtod_l+0xa58>
 800af64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d17c      	bne.n	800b064 <_strtod_l+0xa74>
 800af6a:	f1b8 0f00 	cmp.w	r8, #0
 800af6e:	d15a      	bne.n	800b026 <_strtod_l+0xa36>
 800af70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af74:	2b00      	cmp	r3, #0
 800af76:	d15d      	bne.n	800b034 <_strtod_l+0xa44>
 800af78:	2200      	movs	r2, #0
 800af7a:	4b91      	ldr	r3, [pc, #580]	; (800b1c0 <_strtod_l+0xbd0>)
 800af7c:	4630      	mov	r0, r6
 800af7e:	4639      	mov	r1, r7
 800af80:	f7f5 fdbc 	bl	8000afc <__aeabi_dcmplt>
 800af84:	2800      	cmp	r0, #0
 800af86:	d15c      	bne.n	800b042 <_strtod_l+0xa52>
 800af88:	4630      	mov	r0, r6
 800af8a:	4639      	mov	r1, r7
 800af8c:	2200      	movs	r2, #0
 800af8e:	4b8d      	ldr	r3, [pc, #564]	; (800b1c4 <_strtod_l+0xbd4>)
 800af90:	f7f5 fb42 	bl	8000618 <__aeabi_dmul>
 800af94:	4606      	mov	r6, r0
 800af96:	460f      	mov	r7, r1
 800af98:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800af9c:	9606      	str	r6, [sp, #24]
 800af9e:	9307      	str	r3, [sp, #28]
 800afa0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afa4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800afa8:	4b87      	ldr	r3, [pc, #540]	; (800b1c8 <_strtod_l+0xbd8>)
 800afaa:	ea0a 0303 	and.w	r3, sl, r3
 800afae:	930d      	str	r3, [sp, #52]	; 0x34
 800afb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afb2:	4b86      	ldr	r3, [pc, #536]	; (800b1cc <_strtod_l+0xbdc>)
 800afb4:	429a      	cmp	r2, r3
 800afb6:	f040 8090 	bne.w	800b0da <_strtod_l+0xaea>
 800afba:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800afbe:	ec49 8b10 	vmov	d0, r8, r9
 800afc2:	f002 fb91 	bl	800d6e8 <__ulp>
 800afc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800afca:	ec51 0b10 	vmov	r0, r1, d0
 800afce:	f7f5 fb23 	bl	8000618 <__aeabi_dmul>
 800afd2:	4642      	mov	r2, r8
 800afd4:	464b      	mov	r3, r9
 800afd6:	f7f5 f969 	bl	80002ac <__adddf3>
 800afda:	460b      	mov	r3, r1
 800afdc:	497a      	ldr	r1, [pc, #488]	; (800b1c8 <_strtod_l+0xbd8>)
 800afde:	4680      	mov	r8, r0
 800afe0:	4a7b      	ldr	r2, [pc, #492]	; (800b1d0 <_strtod_l+0xbe0>)
 800afe2:	4019      	ands	r1, r3
 800afe4:	4291      	cmp	r1, r2
 800afe6:	d944      	bls.n	800b072 <_strtod_l+0xa82>
 800afe8:	ee18 2a90 	vmov	r2, s17
 800afec:	4b79      	ldr	r3, [pc, #484]	; (800b1d4 <_strtod_l+0xbe4>)
 800afee:	429a      	cmp	r2, r3
 800aff0:	d104      	bne.n	800affc <_strtod_l+0xa0c>
 800aff2:	ee18 3a10 	vmov	r3, s16
 800aff6:	3301      	adds	r3, #1
 800aff8:	f43f ad3f 	beq.w	800aa7a <_strtod_l+0x48a>
 800affc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800b1d4 <_strtod_l+0xbe4>
 800b000:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b004:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b006:	4620      	mov	r0, r4
 800b008:	f002 f83a 	bl	800d080 <_Bfree>
 800b00c:	9905      	ldr	r1, [sp, #20]
 800b00e:	4620      	mov	r0, r4
 800b010:	f002 f836 	bl	800d080 <_Bfree>
 800b014:	4659      	mov	r1, fp
 800b016:	4620      	mov	r0, r4
 800b018:	f002 f832 	bl	800d080 <_Bfree>
 800b01c:	4629      	mov	r1, r5
 800b01e:	4620      	mov	r0, r4
 800b020:	f002 f82e 	bl	800d080 <_Bfree>
 800b024:	e609      	b.n	800ac3a <_strtod_l+0x64a>
 800b026:	f1b8 0f01 	cmp.w	r8, #1
 800b02a:	d103      	bne.n	800b034 <_strtod_l+0xa44>
 800b02c:	f1b9 0f00 	cmp.w	r9, #0
 800b030:	f43f ad94 	beq.w	800ab5c <_strtod_l+0x56c>
 800b034:	2600      	movs	r6, #0
 800b036:	4f62      	ldr	r7, [pc, #392]	; (800b1c0 <_strtod_l+0xbd0>)
 800b038:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b190 <_strtod_l+0xba0>
 800b03c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b040:	e7ae      	b.n	800afa0 <_strtod_l+0x9b0>
 800b042:	2600      	movs	r6, #0
 800b044:	4f5f      	ldr	r7, [pc, #380]	; (800b1c4 <_strtod_l+0xbd4>)
 800b046:	e7a7      	b.n	800af98 <_strtod_l+0x9a8>
 800b048:	4b5e      	ldr	r3, [pc, #376]	; (800b1c4 <_strtod_l+0xbd4>)
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	2200      	movs	r2, #0
 800b050:	f7f5 fae2 	bl	8000618 <__aeabi_dmul>
 800b054:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b056:	4606      	mov	r6, r0
 800b058:	460f      	mov	r7, r1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d09c      	beq.n	800af98 <_strtod_l+0x9a8>
 800b05e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b062:	e79d      	b.n	800afa0 <_strtod_l+0x9b0>
 800b064:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800b198 <_strtod_l+0xba8>
 800b068:	ec57 6b17 	vmov	r6, r7, d7
 800b06c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b070:	e796      	b.n	800afa0 <_strtod_l+0x9b0>
 800b072:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b076:	9b04      	ldr	r3, [sp, #16]
 800b078:	46ca      	mov	sl, r9
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1c2      	bne.n	800b004 <_strtod_l+0xa14>
 800b07e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b082:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b084:	0d1b      	lsrs	r3, r3, #20
 800b086:	051b      	lsls	r3, r3, #20
 800b088:	429a      	cmp	r2, r3
 800b08a:	d1bb      	bne.n	800b004 <_strtod_l+0xa14>
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fe22 	bl	8000cd8 <__aeabi_d2lz>
 800b094:	f7f5 fa92 	bl	80005bc <__aeabi_l2d>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4630      	mov	r0, r6
 800b09e:	4639      	mov	r1, r7
 800b0a0:	f7f5 f902 	bl	80002a8 <__aeabi_dsub>
 800b0a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0aa:	4606      	mov	r6, r0
 800b0ac:	ea43 0308 	orr.w	r3, r3, r8
 800b0b0:	460f      	mov	r7, r1
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	d054      	beq.n	800b160 <_strtod_l+0xb70>
 800b0b6:	a33a      	add	r3, pc, #232	; (adr r3, 800b1a0 <_strtod_l+0xbb0>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 fd1e 	bl	8000afc <__aeabi_dcmplt>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	f47f ace4 	bne.w	800aa8e <_strtod_l+0x49e>
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	a337      	add	r3, pc, #220	; (adr r3, 800b1a8 <_strtod_l+0xbb8>)
 800b0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d0:	f7f5 fd32 	bl	8000b38 <__aeabi_dcmpgt>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d095      	beq.n	800b004 <_strtod_l+0xa14>
 800b0d8:	e4d9      	b.n	800aa8e <_strtod_l+0x49e>
 800b0da:	9b04      	ldr	r3, [sp, #16]
 800b0dc:	b333      	cbz	r3, 800b12c <_strtod_l+0xb3c>
 800b0de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0e4:	d822      	bhi.n	800b12c <_strtod_l+0xb3c>
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	a331      	add	r3, pc, #196	; (adr r3, 800b1b0 <_strtod_l+0xbc0>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 fd0e 	bl	8000b10 <__aeabi_dcmple>
 800b0f4:	b1a0      	cbz	r0, 800b120 <_strtod_l+0xb30>
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7f5 fd65 	bl	8000bc8 <__aeabi_d2uiz>
 800b0fe:	2801      	cmp	r0, #1
 800b100:	bf38      	it	cc
 800b102:	2001      	movcc	r0, #1
 800b104:	f7f5 fa0e 	bl	8000524 <__aeabi_ui2d>
 800b108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	bb23      	cbnz	r3, 800b15a <_strtod_l+0xb6a>
 800b110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b114:	9010      	str	r0, [sp, #64]	; 0x40
 800b116:	9311      	str	r3, [sp, #68]	; 0x44
 800b118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b11c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b122:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b124:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b128:	1a9b      	subs	r3, r3, r2
 800b12a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b12c:	eeb0 0a48 	vmov.f32	s0, s16
 800b130:	eef0 0a68 	vmov.f32	s1, s17
 800b134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b138:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b13c:	f002 fad4 	bl	800d6e8 <__ulp>
 800b140:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b144:	ec53 2b10 	vmov	r2, r3, d0
 800b148:	f7f5 fa66 	bl	8000618 <__aeabi_dmul>
 800b14c:	ec53 2b18 	vmov	r2, r3, d8
 800b150:	f7f5 f8ac 	bl	80002ac <__adddf3>
 800b154:	4680      	mov	r8, r0
 800b156:	4689      	mov	r9, r1
 800b158:	e78d      	b.n	800b076 <_strtod_l+0xa86>
 800b15a:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b15e:	e7db      	b.n	800b118 <_strtod_l+0xb28>
 800b160:	a315      	add	r3, pc, #84	; (adr r3, 800b1b8 <_strtod_l+0xbc8>)
 800b162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b166:	f7f5 fcc9 	bl	8000afc <__aeabi_dcmplt>
 800b16a:	e7b3      	b.n	800b0d4 <_strtod_l+0xae4>
 800b16c:	2300      	movs	r3, #0
 800b16e:	930a      	str	r3, [sp, #40]	; 0x28
 800b170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b172:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b174:	6013      	str	r3, [r2, #0]
 800b176:	f7ff ba7a 	b.w	800a66e <_strtod_l+0x7e>
 800b17a:	2a65      	cmp	r2, #101	; 0x65
 800b17c:	f43f ab72 	beq.w	800a864 <_strtod_l+0x274>
 800b180:	2a45      	cmp	r2, #69	; 0x45
 800b182:	f43f ab6f 	beq.w	800a864 <_strtod_l+0x274>
 800b186:	2301      	movs	r3, #1
 800b188:	f7ff bba8 	b.w	800a8dc <_strtod_l+0x2ec>
 800b18c:	f3af 8000 	nop.w
 800b190:	00000000 	.word	0x00000000
 800b194:	bff00000 	.word	0xbff00000
 800b198:	00000000 	.word	0x00000000
 800b19c:	3ff00000 	.word	0x3ff00000
 800b1a0:	94a03595 	.word	0x94a03595
 800b1a4:	3fdfffff 	.word	0x3fdfffff
 800b1a8:	35afe535 	.word	0x35afe535
 800b1ac:	3fe00000 	.word	0x3fe00000
 800b1b0:	ffc00000 	.word	0xffc00000
 800b1b4:	41dfffff 	.word	0x41dfffff
 800b1b8:	94a03595 	.word	0x94a03595
 800b1bc:	3fcfffff 	.word	0x3fcfffff
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	3fe00000 	.word	0x3fe00000
 800b1c8:	7ff00000 	.word	0x7ff00000
 800b1cc:	7fe00000 	.word	0x7fe00000
 800b1d0:	7c9fffff 	.word	0x7c9fffff
 800b1d4:	7fefffff 	.word	0x7fefffff

0800b1d8 <_strtod_r>:
 800b1d8:	4b01      	ldr	r3, [pc, #4]	; (800b1e0 <_strtod_r+0x8>)
 800b1da:	f7ff ba09 	b.w	800a5f0 <_strtod_l>
 800b1de:	bf00      	nop
 800b1e0:	20000018 	.word	0x20000018

0800b1e4 <_strtol_l.constprop.0>:
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ea:	d001      	beq.n	800b1f0 <_strtol_l.constprop.0+0xc>
 800b1ec:	2b24      	cmp	r3, #36	; 0x24
 800b1ee:	d906      	bls.n	800b1fe <_strtol_l.constprop.0+0x1a>
 800b1f0:	f000 f8ca 	bl	800b388 <__errno>
 800b1f4:	2316      	movs	r3, #22
 800b1f6:	6003      	str	r3, [r0, #0]
 800b1f8:	2000      	movs	r0, #0
 800b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1fe:	460d      	mov	r5, r1
 800b200:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800b2e4 <_strtol_l.constprop.0+0x100>
 800b204:	462e      	mov	r6, r5
 800b206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b20a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b20e:	f017 0708 	ands.w	r7, r7, #8
 800b212:	d1f7      	bne.n	800b204 <_strtol_l.constprop.0+0x20>
 800b214:	2c2d      	cmp	r4, #45	; 0x2d
 800b216:	d132      	bne.n	800b27e <_strtol_l.constprop.0+0x9a>
 800b218:	782c      	ldrb	r4, [r5, #0]
 800b21a:	2701      	movs	r7, #1
 800b21c:	1cb5      	adds	r5, r6, #2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d05b      	beq.n	800b2da <_strtol_l.constprop.0+0xf6>
 800b222:	2b10      	cmp	r3, #16
 800b224:	d109      	bne.n	800b23a <_strtol_l.constprop.0+0x56>
 800b226:	2c30      	cmp	r4, #48	; 0x30
 800b228:	d107      	bne.n	800b23a <_strtol_l.constprop.0+0x56>
 800b22a:	782c      	ldrb	r4, [r5, #0]
 800b22c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b230:	2c58      	cmp	r4, #88	; 0x58
 800b232:	d14d      	bne.n	800b2d0 <_strtol_l.constprop.0+0xec>
 800b234:	786c      	ldrb	r4, [r5, #1]
 800b236:	2310      	movs	r3, #16
 800b238:	3502      	adds	r5, #2
 800b23a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b23e:	f04f 0e00 	mov.w	lr, #0
 800b242:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b246:	4676      	mov	r6, lr
 800b248:	fbb8 f9f3 	udiv	r9, r8, r3
 800b24c:	fb03 8a19 	mls	sl, r3, r9, r8
 800b250:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b254:	f1bc 0f09 	cmp.w	ip, #9
 800b258:	d816      	bhi.n	800b288 <_strtol_l.constprop.0+0xa4>
 800b25a:	4664      	mov	r4, ip
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	dd24      	ble.n	800b2aa <_strtol_l.constprop.0+0xc6>
 800b260:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b264:	d008      	beq.n	800b278 <_strtol_l.constprop.0+0x94>
 800b266:	45b1      	cmp	r9, r6
 800b268:	d31c      	bcc.n	800b2a4 <_strtol_l.constprop.0+0xc0>
 800b26a:	d101      	bne.n	800b270 <_strtol_l.constprop.0+0x8c>
 800b26c:	45a2      	cmp	sl, r4
 800b26e:	db19      	blt.n	800b2a4 <_strtol_l.constprop.0+0xc0>
 800b270:	fb06 4603 	mla	r6, r6, r3, r4
 800b274:	f04f 0e01 	mov.w	lr, #1
 800b278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b27c:	e7e8      	b.n	800b250 <_strtol_l.constprop.0+0x6c>
 800b27e:	2c2b      	cmp	r4, #43	; 0x2b
 800b280:	bf04      	itt	eq
 800b282:	782c      	ldrbeq	r4, [r5, #0]
 800b284:	1cb5      	addeq	r5, r6, #2
 800b286:	e7ca      	b.n	800b21e <_strtol_l.constprop.0+0x3a>
 800b288:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b28c:	f1bc 0f19 	cmp.w	ip, #25
 800b290:	d801      	bhi.n	800b296 <_strtol_l.constprop.0+0xb2>
 800b292:	3c37      	subs	r4, #55	; 0x37
 800b294:	e7e2      	b.n	800b25c <_strtol_l.constprop.0+0x78>
 800b296:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b29a:	f1bc 0f19 	cmp.w	ip, #25
 800b29e:	d804      	bhi.n	800b2aa <_strtol_l.constprop.0+0xc6>
 800b2a0:	3c57      	subs	r4, #87	; 0x57
 800b2a2:	e7db      	b.n	800b25c <_strtol_l.constprop.0+0x78>
 800b2a4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b2a8:	e7e6      	b.n	800b278 <_strtol_l.constprop.0+0x94>
 800b2aa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b2ae:	d105      	bne.n	800b2bc <_strtol_l.constprop.0+0xd8>
 800b2b0:	2322      	movs	r3, #34	; 0x22
 800b2b2:	4646      	mov	r6, r8
 800b2b4:	6003      	str	r3, [r0, #0]
 800b2b6:	b942      	cbnz	r2, 800b2ca <_strtol_l.constprop.0+0xe6>
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	e79e      	b.n	800b1fa <_strtol_l.constprop.0+0x16>
 800b2bc:	b107      	cbz	r7, 800b2c0 <_strtol_l.constprop.0+0xdc>
 800b2be:	4276      	negs	r6, r6
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	d0f9      	beq.n	800b2b8 <_strtol_l.constprop.0+0xd4>
 800b2c4:	f1be 0f00 	cmp.w	lr, #0
 800b2c8:	d000      	beq.n	800b2cc <_strtol_l.constprop.0+0xe8>
 800b2ca:	1e69      	subs	r1, r5, #1
 800b2cc:	6011      	str	r1, [r2, #0]
 800b2ce:	e7f3      	b.n	800b2b8 <_strtol_l.constprop.0+0xd4>
 800b2d0:	2430      	movs	r4, #48	; 0x30
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1b1      	bne.n	800b23a <_strtol_l.constprop.0+0x56>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	e7af      	b.n	800b23a <_strtol_l.constprop.0+0x56>
 800b2da:	2c30      	cmp	r4, #48	; 0x30
 800b2dc:	d0a5      	beq.n	800b22a <_strtol_l.constprop.0+0x46>
 800b2de:	230a      	movs	r3, #10
 800b2e0:	e7ab      	b.n	800b23a <_strtol_l.constprop.0+0x56>
 800b2e2:	bf00      	nop
 800b2e4:	0800e111 	.word	0x0800e111

0800b2e8 <_strtol_r>:
 800b2e8:	f7ff bf7c 	b.w	800b1e4 <_strtol_l.constprop.0>

0800b2ec <_fwalk_sglue>:
 800b2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	4688      	mov	r8, r1
 800b2f4:	4614      	mov	r4, r2
 800b2f6:	2600      	movs	r6, #0
 800b2f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2fc:	f1b9 0901 	subs.w	r9, r9, #1
 800b300:	d505      	bpl.n	800b30e <_fwalk_sglue+0x22>
 800b302:	6824      	ldr	r4, [r4, #0]
 800b304:	2c00      	cmp	r4, #0
 800b306:	d1f7      	bne.n	800b2f8 <_fwalk_sglue+0xc>
 800b308:	4630      	mov	r0, r6
 800b30a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b30e:	89ab      	ldrh	r3, [r5, #12]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d907      	bls.n	800b324 <_fwalk_sglue+0x38>
 800b314:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b318:	3301      	adds	r3, #1
 800b31a:	d003      	beq.n	800b324 <_fwalk_sglue+0x38>
 800b31c:	4629      	mov	r1, r5
 800b31e:	4638      	mov	r0, r7
 800b320:	47c0      	blx	r8
 800b322:	4306      	orrs	r6, r0
 800b324:	3568      	adds	r5, #104	; 0x68
 800b326:	e7e9      	b.n	800b2fc <_fwalk_sglue+0x10>

0800b328 <iprintf>:
 800b328:	b40f      	push	{r0, r1, r2, r3}
 800b32a:	b507      	push	{r0, r1, r2, lr}
 800b32c:	4906      	ldr	r1, [pc, #24]	; (800b348 <iprintf+0x20>)
 800b32e:	ab04      	add	r3, sp, #16
 800b330:	6808      	ldr	r0, [r1, #0]
 800b332:	f853 2b04 	ldr.w	r2, [r3], #4
 800b336:	6881      	ldr	r1, [r0, #8]
 800b338:	9301      	str	r3, [sp, #4]
 800b33a:	f001 fbd5 	bl	800cae8 <_vfiprintf_r>
 800b33e:	b003      	add	sp, #12
 800b340:	f85d eb04 	ldr.w	lr, [sp], #4
 800b344:	b004      	add	sp, #16
 800b346:	4770      	bx	lr
 800b348:	200001d0 	.word	0x200001d0

0800b34c <strncmp>:
 800b34c:	b510      	push	{r4, lr}
 800b34e:	b16a      	cbz	r2, 800b36c <strncmp+0x20>
 800b350:	3901      	subs	r1, #1
 800b352:	1884      	adds	r4, r0, r2
 800b354:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b358:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d103      	bne.n	800b368 <strncmp+0x1c>
 800b360:	42a0      	cmp	r0, r4
 800b362:	d001      	beq.n	800b368 <strncmp+0x1c>
 800b364:	2a00      	cmp	r2, #0
 800b366:	d1f5      	bne.n	800b354 <strncmp+0x8>
 800b368:	1ad0      	subs	r0, r2, r3
 800b36a:	bd10      	pop	{r4, pc}
 800b36c:	4610      	mov	r0, r2
 800b36e:	e7fc      	b.n	800b36a <strncmp+0x1e>

0800b370 <memset>:
 800b370:	4402      	add	r2, r0
 800b372:	4603      	mov	r3, r0
 800b374:	4293      	cmp	r3, r2
 800b376:	d100      	bne.n	800b37a <memset+0xa>
 800b378:	4770      	bx	lr
 800b37a:	f803 1b01 	strb.w	r1, [r3], #1
 800b37e:	e7f9      	b.n	800b374 <memset+0x4>

0800b380 <_localeconv_r>:
 800b380:	4800      	ldr	r0, [pc, #0]	; (800b384 <_localeconv_r+0x4>)
 800b382:	4770      	bx	lr
 800b384:	20000108 	.word	0x20000108

0800b388 <__errno>:
 800b388:	4b01      	ldr	r3, [pc, #4]	; (800b390 <__errno+0x8>)
 800b38a:	6818      	ldr	r0, [r3, #0]
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	200001d0 	.word	0x200001d0

0800b394 <__libc_init_array>:
 800b394:	b570      	push	{r4, r5, r6, lr}
 800b396:	4d0d      	ldr	r5, [pc, #52]	; (800b3cc <__libc_init_array+0x38>)
 800b398:	2600      	movs	r6, #0
 800b39a:	4c0d      	ldr	r4, [pc, #52]	; (800b3d0 <__libc_init_array+0x3c>)
 800b39c:	1b64      	subs	r4, r4, r5
 800b39e:	10a4      	asrs	r4, r4, #2
 800b3a0:	42a6      	cmp	r6, r4
 800b3a2:	d109      	bne.n	800b3b8 <__libc_init_array+0x24>
 800b3a4:	4d0b      	ldr	r5, [pc, #44]	; (800b3d4 <__libc_init_array+0x40>)
 800b3a6:	2600      	movs	r6, #0
 800b3a8:	4c0b      	ldr	r4, [pc, #44]	; (800b3d8 <__libc_init_array+0x44>)
 800b3aa:	f002 fdcf 	bl	800df4c <_init>
 800b3ae:	1b64      	subs	r4, r4, r5
 800b3b0:	10a4      	asrs	r4, r4, #2
 800b3b2:	42a6      	cmp	r6, r4
 800b3b4:	d105      	bne.n	800b3c2 <__libc_init_array+0x2e>
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3bc:	3601      	adds	r6, #1
 800b3be:	4798      	blx	r3
 800b3c0:	e7ee      	b.n	800b3a0 <__libc_init_array+0xc>
 800b3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c6:	3601      	adds	r6, #1
 800b3c8:	4798      	blx	r3
 800b3ca:	e7f2      	b.n	800b3b2 <__libc_init_array+0x1e>
 800b3cc:	0800e4a8 	.word	0x0800e4a8
 800b3d0:	0800e4a8 	.word	0x0800e4a8
 800b3d4:	0800e4a8 	.word	0x0800e4a8
 800b3d8:	0800e4ac 	.word	0x0800e4ac

0800b3dc <__retarget_lock_acquire_recursive>:
 800b3dc:	4770      	bx	lr

0800b3de <__retarget_lock_release_recursive>:
 800b3de:	4770      	bx	lr

0800b3e0 <memchr>:
 800b3e0:	b2c9      	uxtb	r1, r1
 800b3e2:	4402      	add	r2, r0
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	4290      	cmp	r0, r2
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	d101      	bne.n	800b3f0 <memchr+0x10>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e003      	b.n	800b3f8 <memchr+0x18>
 800b3f0:	781c      	ldrb	r4, [r3, #0]
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	428c      	cmp	r4, r1
 800b3f6:	d1f6      	bne.n	800b3e6 <memchr+0x6>
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	bd10      	pop	{r4, pc}

0800b3fc <memcpy>:
 800b3fc:	440a      	add	r2, r1
 800b3fe:	1e43      	subs	r3, r0, #1
 800b400:	4291      	cmp	r1, r2
 800b402:	d100      	bne.n	800b406 <memcpy+0xa>
 800b404:	4770      	bx	lr
 800b406:	b510      	push	{r4, lr}
 800b408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b40c:	4291      	cmp	r1, r2
 800b40e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b412:	d1f9      	bne.n	800b408 <memcpy+0xc>
 800b414:	bd10      	pop	{r4, pc}
	...

0800b418 <nan>:
 800b418:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b420 <nan+0x8>
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	00000000 	.word	0x00000000
 800b424:	7ff80000 	.word	0x7ff80000

0800b428 <nanf>:
 800b428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b430 <nanf+0x8>
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	7fc00000 	.word	0x7fc00000

0800b434 <quorem>:
 800b434:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b438:	6903      	ldr	r3, [r0, #16]
 800b43a:	4607      	mov	r7, r0
 800b43c:	690c      	ldr	r4, [r1, #16]
 800b43e:	42a3      	cmp	r3, r4
 800b440:	f2c0 8086 	blt.w	800b550 <quorem+0x11c>
 800b444:	3c01      	subs	r4, #1
 800b446:	f100 0514 	add.w	r5, r0, #20
 800b44a:	f101 0814 	add.w	r8, r1, #20
 800b44e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b452:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b456:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b464:	3301      	adds	r3, #1
 800b466:	429a      	cmp	r2, r3
 800b468:	fbb2 f6f3 	udiv	r6, r2, r3
 800b46c:	d335      	bcc.n	800b4da <quorem+0xa6>
 800b46e:	f04f 0e00 	mov.w	lr, #0
 800b472:	4640      	mov	r0, r8
 800b474:	46ac      	mov	ip, r5
 800b476:	46f2      	mov	sl, lr
 800b478:	f850 2b04 	ldr.w	r2, [r0], #4
 800b47c:	b293      	uxth	r3, r2
 800b47e:	4581      	cmp	r9, r0
 800b480:	fb06 e303 	mla	r3, r6, r3, lr
 800b484:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b488:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800b48c:	b29b      	uxth	r3, r3
 800b48e:	fb06 220e 	mla	r2, r6, lr, r2
 800b492:	ebaa 0303 	sub.w	r3, sl, r3
 800b496:	f8dc a000 	ldr.w	sl, [ip]
 800b49a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b49e:	fa1f fa8a 	uxth.w	sl, sl
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	4453      	add	r3, sl
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	f8dc 3000 	ldr.w	r3, [ip]
 800b4ac:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800b4b0:	9b00      	ldr	r3, [sp, #0]
 800b4b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4b6:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4c6:	d2d7      	bcs.n	800b478 <quorem+0x44>
 800b4c8:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4cc:	b92b      	cbnz	r3, 800b4da <quorem+0xa6>
 800b4ce:	9b01      	ldr	r3, [sp, #4]
 800b4d0:	3b04      	subs	r3, #4
 800b4d2:	429d      	cmp	r5, r3
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	d32f      	bcc.n	800b538 <quorem+0x104>
 800b4d8:	613c      	str	r4, [r7, #16]
 800b4da:	4638      	mov	r0, r7
 800b4dc:	f002 f858 	bl	800d590 <__mcmp>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	db25      	blt.n	800b530 <quorem+0xfc>
 800b4e4:	3601      	adds	r6, #1
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4ee:	f8d1 c000 	ldr.w	ip, [r1]
 800b4f2:	b293      	uxth	r3, r2
 800b4f4:	45c1      	cmp	r9, r8
 800b4f6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800b4fa:	eba0 0303 	sub.w	r3, r0, r3
 800b4fe:	fa1f f08c 	uxth.w	r0, ip
 800b502:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b506:	4403      	add	r3, r0
 800b508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b516:	f841 3b04 	str.w	r3, [r1], #4
 800b51a:	d2e6      	bcs.n	800b4ea <quorem+0xb6>
 800b51c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b520:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b524:	b922      	cbnz	r2, 800b530 <quorem+0xfc>
 800b526:	3b04      	subs	r3, #4
 800b528:	429d      	cmp	r5, r3
 800b52a:	461a      	mov	r2, r3
 800b52c:	d30a      	bcc.n	800b544 <quorem+0x110>
 800b52e:	613c      	str	r4, [r7, #16]
 800b530:	4630      	mov	r0, r6
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	6812      	ldr	r2, [r2, #0]
 800b53a:	3b04      	subs	r3, #4
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d1cb      	bne.n	800b4d8 <quorem+0xa4>
 800b540:	3c01      	subs	r4, #1
 800b542:	e7c6      	b.n	800b4d2 <quorem+0x9e>
 800b544:	6812      	ldr	r2, [r2, #0]
 800b546:	3b04      	subs	r3, #4
 800b548:	2a00      	cmp	r2, #0
 800b54a:	d1f0      	bne.n	800b52e <quorem+0xfa>
 800b54c:	3c01      	subs	r4, #1
 800b54e:	e7eb      	b.n	800b528 <quorem+0xf4>
 800b550:	2000      	movs	r0, #0
 800b552:	e7ee      	b.n	800b532 <quorem+0xfe>
 800b554:	0000      	movs	r0, r0
	...

0800b558 <_dtoa_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	69c5      	ldr	r5, [r0, #28]
 800b55e:	4604      	mov	r4, r0
 800b560:	ed2d 8b04 	vpush	{d8-d9}
 800b564:	b093      	sub	sp, #76	; 0x4c
 800b566:	ec57 6b10 	vmov	r6, r7, d0
 800b56a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b56e:	9107      	str	r1, [sp, #28]
 800b570:	920a      	str	r2, [sp, #40]	; 0x28
 800b572:	930d      	str	r3, [sp, #52]	; 0x34
 800b574:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b578:	b975      	cbnz	r5, 800b598 <_dtoa_r+0x40>
 800b57a:	2010      	movs	r0, #16
 800b57c:	f001 fbce 	bl	800cd1c <malloc>
 800b580:	4602      	mov	r2, r0
 800b582:	61e0      	str	r0, [r4, #28]
 800b584:	b920      	cbnz	r0, 800b590 <_dtoa_r+0x38>
 800b586:	4bae      	ldr	r3, [pc, #696]	; (800b840 <_dtoa_r+0x2e8>)
 800b588:	21ef      	movs	r1, #239	; 0xef
 800b58a:	48ae      	ldr	r0, [pc, #696]	; (800b844 <_dtoa_r+0x2ec>)
 800b58c:	f002 fbf8 	bl	800dd80 <__assert_func>
 800b590:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b594:	6005      	str	r5, [r0, #0]
 800b596:	60c5      	str	r5, [r0, #12]
 800b598:	69e3      	ldr	r3, [r4, #28]
 800b59a:	6819      	ldr	r1, [r3, #0]
 800b59c:	b151      	cbz	r1, 800b5b4 <_dtoa_r+0x5c>
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4093      	lsls	r3, r2
 800b5a6:	604a      	str	r2, [r1, #4]
 800b5a8:	608b      	str	r3, [r1, #8]
 800b5aa:	f001 fd69 	bl	800d080 <_Bfree>
 800b5ae:	69e3      	ldr	r3, [r4, #28]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
 800b5b4:	1e3b      	subs	r3, r7, #0
 800b5b6:	bfb7      	itett	lt
 800b5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5bc:	2300      	movge	r3, #0
 800b5be:	2201      	movlt	r2, #1
 800b5c0:	9303      	strlt	r3, [sp, #12]
 800b5c2:	bfac      	ite	ge
 800b5c4:	f8c8 3000 	strge.w	r3, [r8]
 800b5c8:	f8c8 2000 	strlt.w	r2, [r8]
 800b5cc:	4b9e      	ldr	r3, [pc, #632]	; (800b848 <_dtoa_r+0x2f0>)
 800b5ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b5d2:	ea33 0308 	bics.w	r3, r3, r8
 800b5d6:	d11b      	bne.n	800b610 <_dtoa_r+0xb8>
 800b5d8:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5de:	6013      	str	r3, [r2, #0]
 800b5e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b5e4:	4333      	orrs	r3, r6
 800b5e6:	f000 8592 	beq.w	800c10e <_dtoa_r+0xbb6>
 800b5ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5ec:	b963      	cbnz	r3, 800b608 <_dtoa_r+0xb0>
 800b5ee:	4b97      	ldr	r3, [pc, #604]	; (800b84c <_dtoa_r+0x2f4>)
 800b5f0:	e027      	b.n	800b642 <_dtoa_r+0xea>
 800b5f2:	4b97      	ldr	r3, [pc, #604]	; (800b850 <_dtoa_r+0x2f8>)
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	3308      	adds	r3, #8
 800b5f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	9800      	ldr	r0, [sp, #0]
 800b5fe:	b013      	add	sp, #76	; 0x4c
 800b600:	ecbd 8b04 	vpop	{d8-d9}
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b608:	4b90      	ldr	r3, [pc, #576]	; (800b84c <_dtoa_r+0x2f4>)
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	3303      	adds	r3, #3
 800b60e:	e7f3      	b.n	800b5f8 <_dtoa_r+0xa0>
 800b610:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b614:	2200      	movs	r2, #0
 800b616:	2300      	movs	r3, #0
 800b618:	ec51 0b17 	vmov	r0, r1, d7
 800b61c:	eeb0 8a47 	vmov.f32	s16, s14
 800b620:	eef0 8a67 	vmov.f32	s17, s15
 800b624:	f7f5 fa60 	bl	8000ae8 <__aeabi_dcmpeq>
 800b628:	4681      	mov	r9, r0
 800b62a:	b160      	cbz	r0, 800b646 <_dtoa_r+0xee>
 800b62c:	2301      	movs	r3, #1
 800b62e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b630:	6013      	str	r3, [r2, #0]
 800b632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 8567 	beq.w	800c108 <_dtoa_r+0xbb0>
 800b63a:	4b86      	ldr	r3, [pc, #536]	; (800b854 <_dtoa_r+0x2fc>)
 800b63c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b63e:	6013      	str	r3, [r2, #0]
 800b640:	3b01      	subs	r3, #1
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	e7da      	b.n	800b5fc <_dtoa_r+0xa4>
 800b646:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b64a:	eeb0 0a48 	vmov.f32	s0, s16
 800b64e:	eef0 0a68 	vmov.f32	s1, s17
 800b652:	aa10      	add	r2, sp, #64	; 0x40
 800b654:	a911      	add	r1, sp, #68	; 0x44
 800b656:	4620      	mov	r0, r4
 800b658:	f002 f8ba 	bl	800d7d0 <__d2b>
 800b65c:	4682      	mov	sl, r0
 800b65e:	2d00      	cmp	r5, #0
 800b660:	d07d      	beq.n	800b75e <_dtoa_r+0x206>
 800b662:	ee18 3a90 	vmov	r3, s17
 800b666:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b66a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b672:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b676:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b67a:	ec51 0b18 	vmov	r0, r1, d8
 800b67e:	4619      	mov	r1, r3
 800b680:	2200      	movs	r2, #0
 800b682:	4b75      	ldr	r3, [pc, #468]	; (800b858 <_dtoa_r+0x300>)
 800b684:	f7f4 fe10 	bl	80002a8 <__aeabi_dsub>
 800b688:	a367      	add	r3, pc, #412	; (adr r3, 800b828 <_dtoa_r+0x2d0>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 ffc3 	bl	8000618 <__aeabi_dmul>
 800b692:	a367      	add	r3, pc, #412	; (adr r3, 800b830 <_dtoa_r+0x2d8>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fe08 	bl	80002ac <__adddf3>
 800b69c:	4606      	mov	r6, r0
 800b69e:	460f      	mov	r7, r1
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f7f4 ff4f 	bl	8000544 <__aeabi_i2d>
 800b6a6:	a364      	add	r3, pc, #400	; (adr r3, 800b838 <_dtoa_r+0x2e0>)
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f4 ffb4 	bl	8000618 <__aeabi_dmul>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	4639      	mov	r1, r7
 800b6b8:	f7f4 fdf8 	bl	80002ac <__adddf3>
 800b6bc:	4606      	mov	r6, r0
 800b6be:	460f      	mov	r7, r1
 800b6c0:	f7f5 fa5a 	bl	8000b78 <__aeabi_d2iz>
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	4683      	mov	fp, r0
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	4639      	mov	r1, r7
 800b6ce:	f7f5 fa15 	bl	8000afc <__aeabi_dcmplt>
 800b6d2:	b148      	cbz	r0, 800b6e8 <_dtoa_r+0x190>
 800b6d4:	4658      	mov	r0, fp
 800b6d6:	f7f4 ff35 	bl	8000544 <__aeabi_i2d>
 800b6da:	4632      	mov	r2, r6
 800b6dc:	463b      	mov	r3, r7
 800b6de:	f7f5 fa03 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6e2:	b908      	cbnz	r0, 800b6e8 <_dtoa_r+0x190>
 800b6e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b6e8:	f1bb 0f16 	cmp.w	fp, #22
 800b6ec:	d857      	bhi.n	800b79e <_dtoa_r+0x246>
 800b6ee:	4b5b      	ldr	r3, [pc, #364]	; (800b85c <_dtoa_r+0x304>)
 800b6f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6f4:	ec51 0b18 	vmov	r0, r1, d8
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f7f5 f9fe 	bl	8000afc <__aeabi_dcmplt>
 800b700:	2800      	cmp	r0, #0
 800b702:	d04e      	beq.n	800b7a2 <_dtoa_r+0x24a>
 800b704:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b708:	2300      	movs	r3, #0
 800b70a:	930c      	str	r3, [sp, #48]	; 0x30
 800b70c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b70e:	1b5b      	subs	r3, r3, r5
 800b710:	1e5a      	subs	r2, r3, #1
 800b712:	bf4c      	ite	mi
 800b714:	f1c3 0301 	rsbmi	r3, r3, #1
 800b718:	2300      	movpl	r3, #0
 800b71a:	9206      	str	r2, [sp, #24]
 800b71c:	bf45      	ittet	mi
 800b71e:	9305      	strmi	r3, [sp, #20]
 800b720:	2300      	movmi	r3, #0
 800b722:	9305      	strpl	r3, [sp, #20]
 800b724:	9306      	strmi	r3, [sp, #24]
 800b726:	f1bb 0f00 	cmp.w	fp, #0
 800b72a:	db3c      	blt.n	800b7a6 <_dtoa_r+0x24e>
 800b72c:	9b06      	ldr	r3, [sp, #24]
 800b72e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b732:	445b      	add	r3, fp
 800b734:	9306      	str	r3, [sp, #24]
 800b736:	2300      	movs	r3, #0
 800b738:	9308      	str	r3, [sp, #32]
 800b73a:	9b07      	ldr	r3, [sp, #28]
 800b73c:	2b09      	cmp	r3, #9
 800b73e:	d868      	bhi.n	800b812 <_dtoa_r+0x2ba>
 800b740:	2b05      	cmp	r3, #5
 800b742:	bfc5      	ittet	gt
 800b744:	3b04      	subgt	r3, #4
 800b746:	2500      	movgt	r5, #0
 800b748:	2501      	movle	r5, #1
 800b74a:	9307      	strgt	r3, [sp, #28]
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	3b02      	subs	r3, #2
 800b750:	2b03      	cmp	r3, #3
 800b752:	f200 8087 	bhi.w	800b864 <_dtoa_r+0x30c>
 800b756:	e8df f003 	tbb	[pc, r3]
 800b75a:	3d30      	.short	0x3d30
 800b75c:	5a3b      	.short	0x5a3b
 800b75e:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b762:	441d      	add	r5, r3
 800b764:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b768:	2b20      	cmp	r3, #32
 800b76a:	bfc9      	itett	gt
 800b76c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b770:	f1c3 0320 	rsble	r3, r3, #32
 800b774:	fa08 f803 	lslgt.w	r8, r8, r3
 800b778:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b77c:	bfd8      	it	le
 800b77e:	fa06 f003 	lslle.w	r0, r6, r3
 800b782:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800b786:	bfc4      	itt	gt
 800b788:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b78c:	ea48 0003 	orrgt.w	r0, r8, r3
 800b790:	f7f4 fec8 	bl	8000524 <__aeabi_ui2d>
 800b794:	2201      	movs	r2, #1
 800b796:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b79a:	920e      	str	r2, [sp, #56]	; 0x38
 800b79c:	e76f      	b.n	800b67e <_dtoa_r+0x126>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	e7b3      	b.n	800b70a <_dtoa_r+0x1b2>
 800b7a2:	900c      	str	r0, [sp, #48]	; 0x30
 800b7a4:	e7b2      	b.n	800b70c <_dtoa_r+0x1b4>
 800b7a6:	9b05      	ldr	r3, [sp, #20]
 800b7a8:	eba3 030b 	sub.w	r3, r3, fp
 800b7ac:	9305      	str	r3, [sp, #20]
 800b7ae:	f1cb 0300 	rsb	r3, fp, #0
 800b7b2:	9308      	str	r3, [sp, #32]
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b7b8:	e7bf      	b.n	800b73a <_dtoa_r+0x1e2>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b7be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dc52      	bgt.n	800b86a <_dtoa_r+0x312>
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	9304      	str	r3, [sp, #16]
 800b7cc:	920a      	str	r2, [sp, #40]	; 0x28
 800b7ce:	e00b      	b.n	800b7e8 <_dtoa_r+0x290>
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e7f3      	b.n	800b7bc <_dtoa_r+0x264>
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7da:	445b      	add	r3, fp
 800b7dc:	9301      	str	r3, [sp, #4]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	9304      	str	r3, [sp, #16]
 800b7e4:	bfb8      	it	lt
 800b7e6:	2301      	movlt	r3, #1
 800b7e8:	69e0      	ldr	r0, [r4, #28]
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	2204      	movs	r2, #4
 800b7ee:	f102 0614 	add.w	r6, r2, #20
 800b7f2:	429e      	cmp	r6, r3
 800b7f4:	d93d      	bls.n	800b872 <_dtoa_r+0x31a>
 800b7f6:	6041      	str	r1, [r0, #4]
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f001 fc01 	bl	800d000 <_Balloc>
 800b7fe:	9000      	str	r0, [sp, #0]
 800b800:	2800      	cmp	r0, #0
 800b802:	d139      	bne.n	800b878 <_dtoa_r+0x320>
 800b804:	4b16      	ldr	r3, [pc, #88]	; (800b860 <_dtoa_r+0x308>)
 800b806:	4602      	mov	r2, r0
 800b808:	f240 11af 	movw	r1, #431	; 0x1af
 800b80c:	e6bd      	b.n	800b58a <_dtoa_r+0x32>
 800b80e:	2301      	movs	r3, #1
 800b810:	e7e1      	b.n	800b7d6 <_dtoa_r+0x27e>
 800b812:	2501      	movs	r5, #1
 800b814:	2300      	movs	r3, #0
 800b816:	9509      	str	r5, [sp, #36]	; 0x24
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b81e:	2200      	movs	r2, #0
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	9304      	str	r3, [sp, #16]
 800b824:	2312      	movs	r3, #18
 800b826:	e7d1      	b.n	800b7cc <_dtoa_r+0x274>
 800b828:	636f4361 	.word	0x636f4361
 800b82c:	3fd287a7 	.word	0x3fd287a7
 800b830:	8b60c8b3 	.word	0x8b60c8b3
 800b834:	3fc68a28 	.word	0x3fc68a28
 800b838:	509f79fb 	.word	0x509f79fb
 800b83c:	3fd34413 	.word	0x3fd34413
 800b840:	0800e21e 	.word	0x0800e21e
 800b844:	0800e235 	.word	0x0800e235
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	0800e21a 	.word	0x0800e21a
 800b850:	0800e211 	.word	0x0800e211
 800b854:	0800e089 	.word	0x0800e089
 800b858:	3ff80000 	.word	0x3ff80000
 800b85c:	0800e390 	.word	0x0800e390
 800b860:	0800e28d 	.word	0x0800e28d
 800b864:	2301      	movs	r3, #1
 800b866:	9309      	str	r3, [sp, #36]	; 0x24
 800b868:	e7d7      	b.n	800b81a <_dtoa_r+0x2c2>
 800b86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	9304      	str	r3, [sp, #16]
 800b870:	e7ba      	b.n	800b7e8 <_dtoa_r+0x290>
 800b872:	3101      	adds	r1, #1
 800b874:	0052      	lsls	r2, r2, #1
 800b876:	e7ba      	b.n	800b7ee <_dtoa_r+0x296>
 800b878:	69e3      	ldr	r3, [r4, #28]
 800b87a:	9a00      	ldr	r2, [sp, #0]
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	2b0e      	cmp	r3, #14
 800b882:	f200 80a8 	bhi.w	800b9d6 <_dtoa_r+0x47e>
 800b886:	2d00      	cmp	r5, #0
 800b888:	f000 80a5 	beq.w	800b9d6 <_dtoa_r+0x47e>
 800b88c:	f1bb 0f00 	cmp.w	fp, #0
 800b890:	dd38      	ble.n	800b904 <_dtoa_r+0x3ac>
 800b892:	f00b 020f 	and.w	r2, fp, #15
 800b896:	4bbf      	ldr	r3, [pc, #764]	; (800bb94 <_dtoa_r+0x63c>)
 800b898:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b89c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b8a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b8a4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b8a8:	d019      	beq.n	800b8de <_dtoa_r+0x386>
 800b8aa:	4bbb      	ldr	r3, [pc, #748]	; (800bb98 <_dtoa_r+0x640>)
 800b8ac:	f008 080f 	and.w	r8, r8, #15
 800b8b0:	2503      	movs	r5, #3
 800b8b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b8b6:	ec51 0b18 	vmov	r0, r1, d8
 800b8ba:	f7f4 ffd7 	bl	800086c <__aeabi_ddiv>
 800b8be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bb98 <_dtoa_r+0x640>
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	d10a      	bne.n	800b8e2 <_dtoa_r+0x38a>
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d4:	f7f4 ffca 	bl	800086c <__aeabi_ddiv>
 800b8d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8dc:	e02b      	b.n	800b936 <_dtoa_r+0x3de>
 800b8de:	2502      	movs	r5, #2
 800b8e0:	e7ef      	b.n	800b8c2 <_dtoa_r+0x36a>
 800b8e2:	f018 0f01 	tst.w	r8, #1
 800b8e6:	d008      	beq.n	800b8fa <_dtoa_r+0x3a2>
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b8f2:	f7f4 fe91 	bl	8000618 <__aeabi_dmul>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	460f      	mov	r7, r1
 800b8fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b8fe:	f109 0908 	add.w	r9, r9, #8
 800b902:	e7e0      	b.n	800b8c6 <_dtoa_r+0x36e>
 800b904:	f000 809f 	beq.w	800ba46 <_dtoa_r+0x4ee>
 800b908:	f1cb 0600 	rsb	r6, fp, #0
 800b90c:	4ba1      	ldr	r3, [pc, #644]	; (800bb94 <_dtoa_r+0x63c>)
 800b90e:	4fa2      	ldr	r7, [pc, #648]	; (800bb98 <_dtoa_r+0x640>)
 800b910:	2502      	movs	r5, #2
 800b912:	f006 020f 	and.w	r2, r6, #15
 800b916:	1136      	asrs	r6, r6, #4
 800b918:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b91c:	ec51 0b18 	vmov	r0, r1, d8
 800b920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b924:	f7f4 fe78 	bl	8000618 <__aeabi_dmul>
 800b928:	2300      	movs	r3, #0
 800b92a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b92e:	2e00      	cmp	r6, #0
 800b930:	d17e      	bne.n	800ba30 <_dtoa_r+0x4d8>
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1d0      	bne.n	800b8d8 <_dtoa_r+0x380>
 800b936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b938:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8084 	beq.w	800ba4a <_dtoa_r+0x4f2>
 800b942:	2200      	movs	r2, #0
 800b944:	4b95      	ldr	r3, [pc, #596]	; (800bb9c <_dtoa_r+0x644>)
 800b946:	4640      	mov	r0, r8
 800b948:	4649      	mov	r1, r9
 800b94a:	f7f5 f8d7 	bl	8000afc <__aeabi_dcmplt>
 800b94e:	2800      	cmp	r0, #0
 800b950:	d07b      	beq.n	800ba4a <_dtoa_r+0x4f2>
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d078      	beq.n	800ba4a <_dtoa_r+0x4f2>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	dd39      	ble.n	800b9d2 <_dtoa_r+0x47a>
 800b95e:	2200      	movs	r2, #0
 800b960:	4b8f      	ldr	r3, [pc, #572]	; (800bba0 <_dtoa_r+0x648>)
 800b962:	4640      	mov	r0, r8
 800b964:	4649      	mov	r1, r9
 800b966:	f7f4 fe57 	bl	8000618 <__aeabi_dmul>
 800b96a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b96e:	3501      	adds	r5, #1
 800b970:	9e01      	ldr	r6, [sp, #4]
 800b972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b976:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b97a:	4628      	mov	r0, r5
 800b97c:	f7f4 fde2 	bl	8000544 <__aeabi_i2d>
 800b980:	4642      	mov	r2, r8
 800b982:	464b      	mov	r3, r9
 800b984:	f7f4 fe48 	bl	8000618 <__aeabi_dmul>
 800b988:	4b86      	ldr	r3, [pc, #536]	; (800bba4 <_dtoa_r+0x64c>)
 800b98a:	2200      	movs	r2, #0
 800b98c:	f7f4 fc8e 	bl	80002ac <__adddf3>
 800b990:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	d158      	bne.n	800ba50 <_dtoa_r+0x4f8>
 800b99e:	2200      	movs	r2, #0
 800b9a0:	4b81      	ldr	r3, [pc, #516]	; (800bba8 <_dtoa_r+0x650>)
 800b9a2:	4640      	mov	r0, r8
 800b9a4:	4649      	mov	r1, r9
 800b9a6:	f7f4 fc7f 	bl	80002a8 <__aeabi_dsub>
 800b9aa:	4680      	mov	r8, r0
 800b9ac:	4689      	mov	r9, r1
 800b9ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b9b2:	f7f5 f8c1 	bl	8000b38 <__aeabi_dcmpgt>
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f040 8296 	bne.w	800bee8 <_dtoa_r+0x990>
 800b9bc:	4640      	mov	r0, r8
 800b9be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	f7f5 f898 	bl	8000afc <__aeabi_dcmplt>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	f040 8289 	bne.w	800bee4 <_dtoa_r+0x98c>
 800b9d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b9d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f2c0 814e 	blt.w	800bc7a <_dtoa_r+0x722>
 800b9de:	f1bb 0f0e 	cmp.w	fp, #14
 800b9e2:	f300 814a 	bgt.w	800bc7a <_dtoa_r+0x722>
 800b9e6:	4b6b      	ldr	r3, [pc, #428]	; (800bb94 <_dtoa_r+0x63c>)
 800b9e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b9ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f280 80dc 	bge.w	800bbb0 <_dtoa_r+0x658>
 800b9f8:	9b04      	ldr	r3, [sp, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	f300 80d8 	bgt.w	800bbb0 <_dtoa_r+0x658>
 800ba00:	f040 826f 	bne.w	800bee2 <_dtoa_r+0x98a>
 800ba04:	2200      	movs	r2, #0
 800ba06:	4b68      	ldr	r3, [pc, #416]	; (800bba8 <_dtoa_r+0x650>)
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	f7f4 fe04 	bl	8000618 <__aeabi_dmul>
 800ba10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ba14:	f7f5 f886 	bl	8000b24 <__aeabi_dcmpge>
 800ba18:	9e04      	ldr	r6, [sp, #16]
 800ba1a:	4637      	mov	r7, r6
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	f040 8245 	bne.w	800beac <_dtoa_r+0x954>
 800ba22:	9d00      	ldr	r5, [sp, #0]
 800ba24:	2331      	movs	r3, #49	; 0x31
 800ba26:	f10b 0b01 	add.w	fp, fp, #1
 800ba2a:	f805 3b01 	strb.w	r3, [r5], #1
 800ba2e:	e241      	b.n	800beb4 <_dtoa_r+0x95c>
 800ba30:	07f2      	lsls	r2, r6, #31
 800ba32:	d505      	bpl.n	800ba40 <_dtoa_r+0x4e8>
 800ba34:	3501      	adds	r5, #1
 800ba36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba3a:	f7f4 fded 	bl	8000618 <__aeabi_dmul>
 800ba3e:	2301      	movs	r3, #1
 800ba40:	1076      	asrs	r6, r6, #1
 800ba42:	3708      	adds	r7, #8
 800ba44:	e773      	b.n	800b92e <_dtoa_r+0x3d6>
 800ba46:	2502      	movs	r5, #2
 800ba48:	e775      	b.n	800b936 <_dtoa_r+0x3de>
 800ba4a:	465f      	mov	r7, fp
 800ba4c:	9e04      	ldr	r6, [sp, #16]
 800ba4e:	e792      	b.n	800b976 <_dtoa_r+0x41e>
 800ba50:	9900      	ldr	r1, [sp, #0]
 800ba52:	4b50      	ldr	r3, [pc, #320]	; (800bb94 <_dtoa_r+0x63c>)
 800ba54:	4431      	add	r1, r6
 800ba56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba5e:	9102      	str	r1, [sp, #8]
 800ba60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba62:	eeb0 9a47 	vmov.f32	s18, s14
 800ba66:	eef0 9a67 	vmov.f32	s19, s15
 800ba6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ba6e:	2900      	cmp	r1, #0
 800ba70:	d044      	beq.n	800bafc <_dtoa_r+0x5a4>
 800ba72:	2000      	movs	r0, #0
 800ba74:	494d      	ldr	r1, [pc, #308]	; (800bbac <_dtoa_r+0x654>)
 800ba76:	f7f4 fef9 	bl	800086c <__aeabi_ddiv>
 800ba7a:	ec53 2b19 	vmov	r2, r3, d9
 800ba7e:	f7f4 fc13 	bl	80002a8 <__aeabi_dsub>
 800ba82:	9d00      	ldr	r5, [sp, #0]
 800ba84:	ec41 0b19 	vmov	d9, r0, r1
 800ba88:	4649      	mov	r1, r9
 800ba8a:	4640      	mov	r0, r8
 800ba8c:	f7f5 f874 	bl	8000b78 <__aeabi_d2iz>
 800ba90:	4606      	mov	r6, r0
 800ba92:	f7f4 fd57 	bl	8000544 <__aeabi_i2d>
 800ba96:	4602      	mov	r2, r0
 800ba98:	3630      	adds	r6, #48	; 0x30
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	4649      	mov	r1, r9
 800baa0:	f7f4 fc02 	bl	80002a8 <__aeabi_dsub>
 800baa4:	f805 6b01 	strb.w	r6, [r5], #1
 800baa8:	4680      	mov	r8, r0
 800baaa:	4689      	mov	r9, r1
 800baac:	ec53 2b19 	vmov	r2, r3, d9
 800bab0:	f7f5 f824 	bl	8000afc <__aeabi_dcmplt>
 800bab4:	2800      	cmp	r0, #0
 800bab6:	d164      	bne.n	800bb82 <_dtoa_r+0x62a>
 800bab8:	4642      	mov	r2, r8
 800baba:	464b      	mov	r3, r9
 800babc:	2000      	movs	r0, #0
 800babe:	4937      	ldr	r1, [pc, #220]	; (800bb9c <_dtoa_r+0x644>)
 800bac0:	f7f4 fbf2 	bl	80002a8 <__aeabi_dsub>
 800bac4:	ec53 2b19 	vmov	r2, r3, d9
 800bac8:	f7f5 f818 	bl	8000afc <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f040 80b6 	bne.w	800bc3e <_dtoa_r+0x6e6>
 800bad2:	9b02      	ldr	r3, [sp, #8]
 800bad4:	429d      	cmp	r5, r3
 800bad6:	f43f af7c 	beq.w	800b9d2 <_dtoa_r+0x47a>
 800bada:	2200      	movs	r2, #0
 800badc:	4b30      	ldr	r3, [pc, #192]	; (800bba0 <_dtoa_r+0x648>)
 800bade:	ec51 0b19 	vmov	r0, r1, d9
 800bae2:	f7f4 fd99 	bl	8000618 <__aeabi_dmul>
 800bae6:	2200      	movs	r2, #0
 800bae8:	4b2d      	ldr	r3, [pc, #180]	; (800bba0 <_dtoa_r+0x648>)
 800baea:	ec41 0b19 	vmov	d9, r0, r1
 800baee:	4640      	mov	r0, r8
 800baf0:	4649      	mov	r1, r9
 800baf2:	f7f4 fd91 	bl	8000618 <__aeabi_dmul>
 800baf6:	4680      	mov	r8, r0
 800baf8:	4689      	mov	r9, r1
 800bafa:	e7c5      	b.n	800ba88 <_dtoa_r+0x530>
 800bafc:	ec51 0b17 	vmov	r0, r1, d7
 800bb00:	f7f4 fd8a 	bl	8000618 <__aeabi_dmul>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	9d00      	ldr	r5, [sp, #0]
 800bb08:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb0a:	ec41 0b19 	vmov	d9, r0, r1
 800bb0e:	4649      	mov	r1, r9
 800bb10:	4640      	mov	r0, r8
 800bb12:	f7f5 f831 	bl	8000b78 <__aeabi_d2iz>
 800bb16:	4606      	mov	r6, r0
 800bb18:	f7f4 fd14 	bl	8000544 <__aeabi_i2d>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4640      	mov	r0, r8
 800bb22:	4649      	mov	r1, r9
 800bb24:	3630      	adds	r6, #48	; 0x30
 800bb26:	f7f4 fbbf 	bl	80002a8 <__aeabi_dsub>
 800bb2a:	9b02      	ldr	r3, [sp, #8]
 800bb2c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb30:	4680      	mov	r8, r0
 800bb32:	429d      	cmp	r5, r3
 800bb34:	4689      	mov	r9, r1
 800bb36:	f04f 0200 	mov.w	r2, #0
 800bb3a:	d124      	bne.n	800bb86 <_dtoa_r+0x62e>
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	; (800bbac <_dtoa_r+0x654>)
 800bb3e:	ec51 0b19 	vmov	r0, r1, d9
 800bb42:	f7f4 fbb3 	bl	80002ac <__adddf3>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	4640      	mov	r0, r8
 800bb4c:	4649      	mov	r1, r9
 800bb4e:	f7f4 fff3 	bl	8000b38 <__aeabi_dcmpgt>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d173      	bne.n	800bc3e <_dtoa_r+0x6e6>
 800bb56:	2000      	movs	r0, #0
 800bb58:	4914      	ldr	r1, [pc, #80]	; (800bbac <_dtoa_r+0x654>)
 800bb5a:	ec53 2b19 	vmov	r2, r3, d9
 800bb5e:	f7f4 fba3 	bl	80002a8 <__aeabi_dsub>
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f4 ffc7 	bl	8000afc <__aeabi_dcmplt>
 800bb6e:	2800      	cmp	r0, #0
 800bb70:	f43f af2f 	beq.w	800b9d2 <_dtoa_r+0x47a>
 800bb74:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bb76:	1e6b      	subs	r3, r5, #1
 800bb78:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bb7e:	2b30      	cmp	r3, #48	; 0x30
 800bb80:	d0f8      	beq.n	800bb74 <_dtoa_r+0x61c>
 800bb82:	46bb      	mov	fp, r7
 800bb84:	e04a      	b.n	800bc1c <_dtoa_r+0x6c4>
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <_dtoa_r+0x648>)
 800bb88:	f7f4 fd46 	bl	8000618 <__aeabi_dmul>
 800bb8c:	4680      	mov	r8, r0
 800bb8e:	4689      	mov	r9, r1
 800bb90:	e7bd      	b.n	800bb0e <_dtoa_r+0x5b6>
 800bb92:	bf00      	nop
 800bb94:	0800e390 	.word	0x0800e390
 800bb98:	0800e368 	.word	0x0800e368
 800bb9c:	3ff00000 	.word	0x3ff00000
 800bba0:	40240000 	.word	0x40240000
 800bba4:	401c0000 	.word	0x401c0000
 800bba8:	40140000 	.word	0x40140000
 800bbac:	3fe00000 	.word	0x3fe00000
 800bbb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bbb4:	9d00      	ldr	r5, [sp, #0]
 800bbb6:	4642      	mov	r2, r8
 800bbb8:	464b      	mov	r3, r9
 800bbba:	4630      	mov	r0, r6
 800bbbc:	4639      	mov	r1, r7
 800bbbe:	f7f4 fe55 	bl	800086c <__aeabi_ddiv>
 800bbc2:	f7f4 ffd9 	bl	8000b78 <__aeabi_d2iz>
 800bbc6:	9001      	str	r0, [sp, #4]
 800bbc8:	f7f4 fcbc 	bl	8000544 <__aeabi_i2d>
 800bbcc:	4642      	mov	r2, r8
 800bbce:	464b      	mov	r3, r9
 800bbd0:	f7f4 fd22 	bl	8000618 <__aeabi_dmul>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4630      	mov	r0, r6
 800bbda:	4639      	mov	r1, r7
 800bbdc:	f7f4 fb64 	bl	80002a8 <__aeabi_dsub>
 800bbe0:	9e01      	ldr	r6, [sp, #4]
 800bbe2:	9f04      	ldr	r7, [sp, #16]
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	3630      	adds	r6, #48	; 0x30
 800bbe8:	460b      	mov	r3, r1
 800bbea:	f805 6b01 	strb.w	r6, [r5], #1
 800bbee:	9e00      	ldr	r6, [sp, #0]
 800bbf0:	1bae      	subs	r6, r5, r6
 800bbf2:	42b7      	cmp	r7, r6
 800bbf4:	d134      	bne.n	800bc60 <_dtoa_r+0x708>
 800bbf6:	f7f4 fb59 	bl	80002ac <__adddf3>
 800bbfa:	4642      	mov	r2, r8
 800bbfc:	464b      	mov	r3, r9
 800bbfe:	4606      	mov	r6, r0
 800bc00:	460f      	mov	r7, r1
 800bc02:	f7f4 ff99 	bl	8000b38 <__aeabi_dcmpgt>
 800bc06:	b9c8      	cbnz	r0, 800bc3c <_dtoa_r+0x6e4>
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	4639      	mov	r1, r7
 800bc10:	f7f4 ff6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc14:	b110      	cbz	r0, 800bc1c <_dtoa_r+0x6c4>
 800bc16:	9b01      	ldr	r3, [sp, #4]
 800bc18:	07db      	lsls	r3, r3, #31
 800bc1a:	d40f      	bmi.n	800bc3c <_dtoa_r+0x6e4>
 800bc1c:	4651      	mov	r1, sl
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f001 fa2e 	bl	800d080 <_Bfree>
 800bc24:	2300      	movs	r3, #0
 800bc26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc28:	702b      	strb	r3, [r5, #0]
 800bc2a:	f10b 0301 	add.w	r3, fp, #1
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f43f ace2 	beq.w	800b5fc <_dtoa_r+0xa4>
 800bc38:	601d      	str	r5, [r3, #0]
 800bc3a:	e4df      	b.n	800b5fc <_dtoa_r+0xa4>
 800bc3c:	465f      	mov	r7, fp
 800bc3e:	462b      	mov	r3, r5
 800bc40:	461d      	mov	r5, r3
 800bc42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc46:	2a39      	cmp	r2, #57	; 0x39
 800bc48:	d106      	bne.n	800bc58 <_dtoa_r+0x700>
 800bc4a:	9a00      	ldr	r2, [sp, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d1f7      	bne.n	800bc40 <_dtoa_r+0x6e8>
 800bc50:	2230      	movs	r2, #48	; 0x30
 800bc52:	9900      	ldr	r1, [sp, #0]
 800bc54:	3701      	adds	r7, #1
 800bc56:	700a      	strb	r2, [r1, #0]
 800bc58:	781a      	ldrb	r2, [r3, #0]
 800bc5a:	3201      	adds	r2, #1
 800bc5c:	701a      	strb	r2, [r3, #0]
 800bc5e:	e790      	b.n	800bb82 <_dtoa_r+0x62a>
 800bc60:	2200      	movs	r2, #0
 800bc62:	4ba3      	ldr	r3, [pc, #652]	; (800bef0 <_dtoa_r+0x998>)
 800bc64:	f7f4 fcd8 	bl	8000618 <__aeabi_dmul>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	460f      	mov	r7, r1
 800bc70:	f7f4 ff3a 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	d09e      	beq.n	800bbb6 <_dtoa_r+0x65e>
 800bc78:	e7d0      	b.n	800bc1c <_dtoa_r+0x6c4>
 800bc7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc7c:	2a00      	cmp	r2, #0
 800bc7e:	f000 80ca 	beq.w	800be16 <_dtoa_r+0x8be>
 800bc82:	9a07      	ldr	r2, [sp, #28]
 800bc84:	2a01      	cmp	r2, #1
 800bc86:	f300 80ad 	bgt.w	800bde4 <_dtoa_r+0x88c>
 800bc8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc8c:	2a00      	cmp	r2, #0
 800bc8e:	f000 80a5 	beq.w	800bddc <_dtoa_r+0x884>
 800bc92:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bc96:	9e08      	ldr	r6, [sp, #32]
 800bc98:	9d05      	ldr	r5, [sp, #20]
 800bc9a:	9a05      	ldr	r2, [sp, #20]
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	4620      	mov	r0, r4
 800bca0:	441a      	add	r2, r3
 800bca2:	9205      	str	r2, [sp, #20]
 800bca4:	9a06      	ldr	r2, [sp, #24]
 800bca6:	441a      	add	r2, r3
 800bca8:	9206      	str	r2, [sp, #24]
 800bcaa:	f001 faeb 	bl	800d284 <__i2b>
 800bcae:	4607      	mov	r7, r0
 800bcb0:	b165      	cbz	r5, 800bccc <_dtoa_r+0x774>
 800bcb2:	9b06      	ldr	r3, [sp, #24]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	dd09      	ble.n	800bccc <_dtoa_r+0x774>
 800bcb8:	42ab      	cmp	r3, r5
 800bcba:	9a05      	ldr	r2, [sp, #20]
 800bcbc:	bfa8      	it	ge
 800bcbe:	462b      	movge	r3, r5
 800bcc0:	1ad2      	subs	r2, r2, r3
 800bcc2:	1aed      	subs	r5, r5, r3
 800bcc4:	9205      	str	r2, [sp, #20]
 800bcc6:	9a06      	ldr	r2, [sp, #24]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	9306      	str	r3, [sp, #24]
 800bccc:	9b08      	ldr	r3, [sp, #32]
 800bcce:	b1f3      	cbz	r3, 800bd0e <_dtoa_r+0x7b6>
 800bcd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a3 	beq.w	800be1e <_dtoa_r+0x8c6>
 800bcd8:	2e00      	cmp	r6, #0
 800bcda:	dd10      	ble.n	800bcfe <_dtoa_r+0x7a6>
 800bcdc:	4639      	mov	r1, r7
 800bcde:	4632      	mov	r2, r6
 800bce0:	4620      	mov	r0, r4
 800bce2:	f001 fb8f 	bl	800d404 <__pow5mult>
 800bce6:	4652      	mov	r2, sl
 800bce8:	4601      	mov	r1, r0
 800bcea:	4607      	mov	r7, r0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f001 fadf 	bl	800d2b0 <__multiply>
 800bcf2:	4680      	mov	r8, r0
 800bcf4:	4651      	mov	r1, sl
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	46c2      	mov	sl, r8
 800bcfa:	f001 f9c1 	bl	800d080 <_Bfree>
 800bcfe:	9b08      	ldr	r3, [sp, #32]
 800bd00:	1b9a      	subs	r2, r3, r6
 800bd02:	d004      	beq.n	800bd0e <_dtoa_r+0x7b6>
 800bd04:	4651      	mov	r1, sl
 800bd06:	4620      	mov	r0, r4
 800bd08:	f001 fb7c 	bl	800d404 <__pow5mult>
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	2101      	movs	r1, #1
 800bd10:	4620      	mov	r0, r4
 800bd12:	f001 fab7 	bl	800d284 <__i2b>
 800bd16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd18:	4606      	mov	r6, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f340 8081 	ble.w	800be22 <_dtoa_r+0x8ca>
 800bd20:	461a      	mov	r2, r3
 800bd22:	4601      	mov	r1, r0
 800bd24:	4620      	mov	r0, r4
 800bd26:	f001 fb6d 	bl	800d404 <__pow5mult>
 800bd2a:	9b07      	ldr	r3, [sp, #28]
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	2b01      	cmp	r3, #1
 800bd30:	dd7a      	ble.n	800be28 <_dtoa_r+0x8d0>
 800bd32:	f04f 0800 	mov.w	r8, #0
 800bd36:	6933      	ldr	r3, [r6, #16]
 800bd38:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bd3c:	6918      	ldr	r0, [r3, #16]
 800bd3e:	f001 fa53 	bl	800d1e8 <__hi0bits>
 800bd42:	f1c0 0020 	rsb	r0, r0, #32
 800bd46:	9b06      	ldr	r3, [sp, #24]
 800bd48:	4418      	add	r0, r3
 800bd4a:	f010 001f 	ands.w	r0, r0, #31
 800bd4e:	f000 8094 	beq.w	800be7a <_dtoa_r+0x922>
 800bd52:	f1c0 0320 	rsb	r3, r0, #32
 800bd56:	2b04      	cmp	r3, #4
 800bd58:	f340 8085 	ble.w	800be66 <_dtoa_r+0x90e>
 800bd5c:	f1c0 001c 	rsb	r0, r0, #28
 800bd60:	9b05      	ldr	r3, [sp, #20]
 800bd62:	4403      	add	r3, r0
 800bd64:	4405      	add	r5, r0
 800bd66:	9305      	str	r3, [sp, #20]
 800bd68:	9b06      	ldr	r3, [sp, #24]
 800bd6a:	4403      	add	r3, r0
 800bd6c:	9306      	str	r3, [sp, #24]
 800bd6e:	9b05      	ldr	r3, [sp, #20]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	dd05      	ble.n	800bd80 <_dtoa_r+0x828>
 800bd74:	4651      	mov	r1, sl
 800bd76:	461a      	mov	r2, r3
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f001 fb9d 	bl	800d4b8 <__lshift>
 800bd7e:	4682      	mov	sl, r0
 800bd80:	9b06      	ldr	r3, [sp, #24]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd05      	ble.n	800bd92 <_dtoa_r+0x83a>
 800bd86:	4631      	mov	r1, r6
 800bd88:	461a      	mov	r2, r3
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f001 fb94 	bl	800d4b8 <__lshift>
 800bd90:	4606      	mov	r6, r0
 800bd92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d072      	beq.n	800be7e <_dtoa_r+0x926>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4650      	mov	r0, sl
 800bd9c:	f001 fbf8 	bl	800d590 <__mcmp>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	da6c      	bge.n	800be7e <_dtoa_r+0x926>
 800bda4:	2300      	movs	r3, #0
 800bda6:	4651      	mov	r1, sl
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f001 f98a 	bl	800d0c4 <__multadd>
 800bdb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bdb6:	4682      	mov	sl, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	f000 81af 	beq.w	800c11c <_dtoa_r+0xbc4>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	4639      	mov	r1, r7
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	f001 f97d 	bl	800d0c4 <__multadd>
 800bdca:	9b01      	ldr	r3, [sp, #4]
 800bdcc:	4607      	mov	r7, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f300 8096 	bgt.w	800bf00 <_dtoa_r+0x9a8>
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	dc59      	bgt.n	800be8e <_dtoa_r+0x936>
 800bdda:	e091      	b.n	800bf00 <_dtoa_r+0x9a8>
 800bddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bde2:	e758      	b.n	800bc96 <_dtoa_r+0x73e>
 800bde4:	9b04      	ldr	r3, [sp, #16]
 800bde6:	1e5e      	subs	r6, r3, #1
 800bde8:	9b08      	ldr	r3, [sp, #32]
 800bdea:	42b3      	cmp	r3, r6
 800bdec:	bfb7      	itett	lt
 800bdee:	9b08      	ldrlt	r3, [sp, #32]
 800bdf0:	1b9e      	subge	r6, r3, r6
 800bdf2:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bdf4:	1af3      	sublt	r3, r6, r3
 800bdf6:	bfbe      	ittt	lt
 800bdf8:	9608      	strlt	r6, [sp, #32]
 800bdfa:	2600      	movlt	r6, #0
 800bdfc:	18d2      	addlt	r2, r2, r3
 800bdfe:	9b04      	ldr	r3, [sp, #16]
 800be00:	bfb8      	it	lt
 800be02:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800be04:	2b00      	cmp	r3, #0
 800be06:	bfb7      	itett	lt
 800be08:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800be0c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800be10:	1a9d      	sublt	r5, r3, r2
 800be12:	2300      	movlt	r3, #0
 800be14:	e741      	b.n	800bc9a <_dtoa_r+0x742>
 800be16:	9e08      	ldr	r6, [sp, #32]
 800be18:	9d05      	ldr	r5, [sp, #20]
 800be1a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be1c:	e748      	b.n	800bcb0 <_dtoa_r+0x758>
 800be1e:	9a08      	ldr	r2, [sp, #32]
 800be20:	e770      	b.n	800bd04 <_dtoa_r+0x7ac>
 800be22:	9b07      	ldr	r3, [sp, #28]
 800be24:	2b01      	cmp	r3, #1
 800be26:	dc19      	bgt.n	800be5c <_dtoa_r+0x904>
 800be28:	9b02      	ldr	r3, [sp, #8]
 800be2a:	b9bb      	cbnz	r3, 800be5c <_dtoa_r+0x904>
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be32:	b99b      	cbnz	r3, 800be5c <_dtoa_r+0x904>
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800be3a:	0d1b      	lsrs	r3, r3, #20
 800be3c:	051b      	lsls	r3, r3, #20
 800be3e:	b183      	cbz	r3, 800be62 <_dtoa_r+0x90a>
 800be40:	9b05      	ldr	r3, [sp, #20]
 800be42:	f04f 0801 	mov.w	r8, #1
 800be46:	3301      	adds	r3, #1
 800be48:	9305      	str	r3, [sp, #20]
 800be4a:	9b06      	ldr	r3, [sp, #24]
 800be4c:	3301      	adds	r3, #1
 800be4e:	9306      	str	r3, [sp, #24]
 800be50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be52:	2b00      	cmp	r3, #0
 800be54:	f47f af6f 	bne.w	800bd36 <_dtoa_r+0x7de>
 800be58:	2001      	movs	r0, #1
 800be5a:	e774      	b.n	800bd46 <_dtoa_r+0x7ee>
 800be5c:	f04f 0800 	mov.w	r8, #0
 800be60:	e7f6      	b.n	800be50 <_dtoa_r+0x8f8>
 800be62:	4698      	mov	r8, r3
 800be64:	e7f4      	b.n	800be50 <_dtoa_r+0x8f8>
 800be66:	d082      	beq.n	800bd6e <_dtoa_r+0x816>
 800be68:	331c      	adds	r3, #28
 800be6a:	9a05      	ldr	r2, [sp, #20]
 800be6c:	441a      	add	r2, r3
 800be6e:	441d      	add	r5, r3
 800be70:	9205      	str	r2, [sp, #20]
 800be72:	9a06      	ldr	r2, [sp, #24]
 800be74:	441a      	add	r2, r3
 800be76:	9206      	str	r2, [sp, #24]
 800be78:	e779      	b.n	800bd6e <_dtoa_r+0x816>
 800be7a:	4603      	mov	r3, r0
 800be7c:	e7f4      	b.n	800be68 <_dtoa_r+0x910>
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	2b00      	cmp	r3, #0
 800be82:	dc37      	bgt.n	800bef4 <_dtoa_r+0x99c>
 800be84:	9b07      	ldr	r3, [sp, #28]
 800be86:	2b02      	cmp	r3, #2
 800be88:	dd34      	ble.n	800bef4 <_dtoa_r+0x99c>
 800be8a:	9b04      	ldr	r3, [sp, #16]
 800be8c:	9301      	str	r3, [sp, #4]
 800be8e:	9b01      	ldr	r3, [sp, #4]
 800be90:	b963      	cbnz	r3, 800beac <_dtoa_r+0x954>
 800be92:	4631      	mov	r1, r6
 800be94:	2205      	movs	r2, #5
 800be96:	4620      	mov	r0, r4
 800be98:	f001 f914 	bl	800d0c4 <__multadd>
 800be9c:	4601      	mov	r1, r0
 800be9e:	4606      	mov	r6, r0
 800bea0:	4650      	mov	r0, sl
 800bea2:	f001 fb75 	bl	800d590 <__mcmp>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	f73f adbb 	bgt.w	800ba22 <_dtoa_r+0x4ca>
 800beac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800beae:	9d00      	ldr	r5, [sp, #0]
 800beb0:	ea6f 0b03 	mvn.w	fp, r3
 800beb4:	f04f 0800 	mov.w	r8, #0
 800beb8:	4631      	mov	r1, r6
 800beba:	4620      	mov	r0, r4
 800bebc:	f001 f8e0 	bl	800d080 <_Bfree>
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	f43f aeab 	beq.w	800bc1c <_dtoa_r+0x6c4>
 800bec6:	f1b8 0f00 	cmp.w	r8, #0
 800beca:	d005      	beq.n	800bed8 <_dtoa_r+0x980>
 800becc:	45b8      	cmp	r8, r7
 800bece:	d003      	beq.n	800bed8 <_dtoa_r+0x980>
 800bed0:	4641      	mov	r1, r8
 800bed2:	4620      	mov	r0, r4
 800bed4:	f001 f8d4 	bl	800d080 <_Bfree>
 800bed8:	4639      	mov	r1, r7
 800beda:	4620      	mov	r0, r4
 800bedc:	f001 f8d0 	bl	800d080 <_Bfree>
 800bee0:	e69c      	b.n	800bc1c <_dtoa_r+0x6c4>
 800bee2:	2600      	movs	r6, #0
 800bee4:	4637      	mov	r7, r6
 800bee6:	e7e1      	b.n	800beac <_dtoa_r+0x954>
 800bee8:	46bb      	mov	fp, r7
 800beea:	4637      	mov	r7, r6
 800beec:	e599      	b.n	800ba22 <_dtoa_r+0x4ca>
 800beee:	bf00      	nop
 800bef0:	40240000 	.word	0x40240000
 800bef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 80c8 	beq.w	800c08c <_dtoa_r+0xb34>
 800befc:	9b04      	ldr	r3, [sp, #16]
 800befe:	9301      	str	r3, [sp, #4]
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	dd05      	ble.n	800bf10 <_dtoa_r+0x9b8>
 800bf04:	4639      	mov	r1, r7
 800bf06:	462a      	mov	r2, r5
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f001 fad5 	bl	800d4b8 <__lshift>
 800bf0e:	4607      	mov	r7, r0
 800bf10:	f1b8 0f00 	cmp.w	r8, #0
 800bf14:	d05b      	beq.n	800bfce <_dtoa_r+0xa76>
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f001 f871 	bl	800d000 <_Balloc>
 800bf1e:	4605      	mov	r5, r0
 800bf20:	b928      	cbnz	r0, 800bf2e <_dtoa_r+0x9d6>
 800bf22:	4b82      	ldr	r3, [pc, #520]	; (800c12c <_dtoa_r+0xbd4>)
 800bf24:	4602      	mov	r2, r0
 800bf26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bf2a:	f7ff bb2e 	b.w	800b58a <_dtoa_r+0x32>
 800bf2e:	693a      	ldr	r2, [r7, #16]
 800bf30:	f107 010c 	add.w	r1, r7, #12
 800bf34:	300c      	adds	r0, #12
 800bf36:	3202      	adds	r2, #2
 800bf38:	0092      	lsls	r2, r2, #2
 800bf3a:	f7ff fa5f 	bl	800b3fc <memcpy>
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4629      	mov	r1, r5
 800bf42:	4620      	mov	r0, r4
 800bf44:	f001 fab8 	bl	800d4b8 <__lshift>
 800bf48:	9b00      	ldr	r3, [sp, #0]
 800bf4a:	46b8      	mov	r8, r7
 800bf4c:	4607      	mov	r7, r0
 800bf4e:	3301      	adds	r3, #1
 800bf50:	9304      	str	r3, [sp, #16]
 800bf52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf56:	4413      	add	r3, r2
 800bf58:	9308      	str	r3, [sp, #32]
 800bf5a:	9b02      	ldr	r3, [sp, #8]
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	9306      	str	r3, [sp, #24]
 800bf62:	9b04      	ldr	r3, [sp, #16]
 800bf64:	4631      	mov	r1, r6
 800bf66:	4650      	mov	r0, sl
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	f7ff fa62 	bl	800b434 <quorem>
 800bf70:	4641      	mov	r1, r8
 800bf72:	9002      	str	r0, [sp, #8]
 800bf74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bf78:	4650      	mov	r0, sl
 800bf7a:	f001 fb09 	bl	800d590 <__mcmp>
 800bf7e:	463a      	mov	r2, r7
 800bf80:	9005      	str	r0, [sp, #20]
 800bf82:	4631      	mov	r1, r6
 800bf84:	4620      	mov	r0, r4
 800bf86:	f001 fb1f 	bl	800d5c8 <__mdiff>
 800bf8a:	68c2      	ldr	r2, [r0, #12]
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	bb02      	cbnz	r2, 800bfd2 <_dtoa_r+0xa7a>
 800bf90:	4601      	mov	r1, r0
 800bf92:	4650      	mov	r0, sl
 800bf94:	f001 fafc 	bl	800d590 <__mcmp>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	4629      	mov	r1, r5
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bfa0:	f001 f86e 	bl	800d080 <_Bfree>
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfa8:	9d04      	ldr	r5, [sp, #16]
 800bfaa:	ea43 0102 	orr.w	r1, r3, r2
 800bfae:	9b06      	ldr	r3, [sp, #24]
 800bfb0:	4319      	orrs	r1, r3
 800bfb2:	d110      	bne.n	800bfd6 <_dtoa_r+0xa7e>
 800bfb4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bfb8:	d029      	beq.n	800c00e <_dtoa_r+0xab6>
 800bfba:	9b05      	ldr	r3, [sp, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	dd02      	ble.n	800bfc6 <_dtoa_r+0xa6e>
 800bfc0:	9b02      	ldr	r3, [sp, #8]
 800bfc2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bfc6:	9b01      	ldr	r3, [sp, #4]
 800bfc8:	f883 9000 	strb.w	r9, [r3]
 800bfcc:	e774      	b.n	800beb8 <_dtoa_r+0x960>
 800bfce:	4638      	mov	r0, r7
 800bfd0:	e7ba      	b.n	800bf48 <_dtoa_r+0x9f0>
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	e7e1      	b.n	800bf9a <_dtoa_r+0xa42>
 800bfd6:	9b05      	ldr	r3, [sp, #20]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	db04      	blt.n	800bfe6 <_dtoa_r+0xa8e>
 800bfdc:	9907      	ldr	r1, [sp, #28]
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	9906      	ldr	r1, [sp, #24]
 800bfe2:	430b      	orrs	r3, r1
 800bfe4:	d120      	bne.n	800c028 <_dtoa_r+0xad0>
 800bfe6:	2a00      	cmp	r2, #0
 800bfe8:	dded      	ble.n	800bfc6 <_dtoa_r+0xa6e>
 800bfea:	4651      	mov	r1, sl
 800bfec:	2201      	movs	r2, #1
 800bfee:	4620      	mov	r0, r4
 800bff0:	f001 fa62 	bl	800d4b8 <__lshift>
 800bff4:	4631      	mov	r1, r6
 800bff6:	4682      	mov	sl, r0
 800bff8:	f001 faca 	bl	800d590 <__mcmp>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	dc03      	bgt.n	800c008 <_dtoa_r+0xab0>
 800c000:	d1e1      	bne.n	800bfc6 <_dtoa_r+0xa6e>
 800c002:	f019 0f01 	tst.w	r9, #1
 800c006:	d0de      	beq.n	800bfc6 <_dtoa_r+0xa6e>
 800c008:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c00c:	d1d8      	bne.n	800bfc0 <_dtoa_r+0xa68>
 800c00e:	2339      	movs	r3, #57	; 0x39
 800c010:	9a01      	ldr	r2, [sp, #4]
 800c012:	7013      	strb	r3, [r2, #0]
 800c014:	462b      	mov	r3, r5
 800c016:	461d      	mov	r5, r3
 800c018:	3b01      	subs	r3, #1
 800c01a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c01e:	2a39      	cmp	r2, #57	; 0x39
 800c020:	d06b      	beq.n	800c0fa <_dtoa_r+0xba2>
 800c022:	3201      	adds	r2, #1
 800c024:	701a      	strb	r2, [r3, #0]
 800c026:	e747      	b.n	800beb8 <_dtoa_r+0x960>
 800c028:	2a00      	cmp	r2, #0
 800c02a:	dd07      	ble.n	800c03c <_dtoa_r+0xae4>
 800c02c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c030:	d0ed      	beq.n	800c00e <_dtoa_r+0xab6>
 800c032:	f109 0301 	add.w	r3, r9, #1
 800c036:	9a01      	ldr	r2, [sp, #4]
 800c038:	7013      	strb	r3, [r2, #0]
 800c03a:	e73d      	b.n	800beb8 <_dtoa_r+0x960>
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	9a08      	ldr	r2, [sp, #32]
 800c040:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c044:	4293      	cmp	r3, r2
 800c046:	d042      	beq.n	800c0ce <_dtoa_r+0xb76>
 800c048:	4651      	mov	r1, sl
 800c04a:	2300      	movs	r3, #0
 800c04c:	220a      	movs	r2, #10
 800c04e:	4620      	mov	r0, r4
 800c050:	f001 f838 	bl	800d0c4 <__multadd>
 800c054:	45b8      	cmp	r8, r7
 800c056:	4682      	mov	sl, r0
 800c058:	f04f 0300 	mov.w	r3, #0
 800c05c:	f04f 020a 	mov.w	r2, #10
 800c060:	4641      	mov	r1, r8
 800c062:	4620      	mov	r0, r4
 800c064:	d107      	bne.n	800c076 <_dtoa_r+0xb1e>
 800c066:	f001 f82d 	bl	800d0c4 <__multadd>
 800c06a:	4680      	mov	r8, r0
 800c06c:	4607      	mov	r7, r0
 800c06e:	9b04      	ldr	r3, [sp, #16]
 800c070:	3301      	adds	r3, #1
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	e775      	b.n	800bf62 <_dtoa_r+0xa0a>
 800c076:	f001 f825 	bl	800d0c4 <__multadd>
 800c07a:	4639      	mov	r1, r7
 800c07c:	4680      	mov	r8, r0
 800c07e:	2300      	movs	r3, #0
 800c080:	220a      	movs	r2, #10
 800c082:	4620      	mov	r0, r4
 800c084:	f001 f81e 	bl	800d0c4 <__multadd>
 800c088:	4607      	mov	r7, r0
 800c08a:	e7f0      	b.n	800c06e <_dtoa_r+0xb16>
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	9d00      	ldr	r5, [sp, #0]
 800c092:	4631      	mov	r1, r6
 800c094:	4650      	mov	r0, sl
 800c096:	f7ff f9cd 	bl	800b434 <quorem>
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c0a0:	f805 9b01 	strb.w	r9, [r5], #1
 800c0a4:	1aea      	subs	r2, r5, r3
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	dd07      	ble.n	800c0bc <_dtoa_r+0xb64>
 800c0ac:	4651      	mov	r1, sl
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	220a      	movs	r2, #10
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f001 f806 	bl	800d0c4 <__multadd>
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	e7ea      	b.n	800c092 <_dtoa_r+0xb3a>
 800c0bc:	9b01      	ldr	r3, [sp, #4]
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	bfcc      	ite	gt
 800c0c6:	461d      	movgt	r5, r3
 800c0c8:	2501      	movle	r5, #1
 800c0ca:	9b00      	ldr	r3, [sp, #0]
 800c0cc:	441d      	add	r5, r3
 800c0ce:	4651      	mov	r1, sl
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f001 f9f0 	bl	800d4b8 <__lshift>
 800c0d8:	4631      	mov	r1, r6
 800c0da:	4682      	mov	sl, r0
 800c0dc:	f001 fa58 	bl	800d590 <__mcmp>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	dc97      	bgt.n	800c014 <_dtoa_r+0xabc>
 800c0e4:	d102      	bne.n	800c0ec <_dtoa_r+0xb94>
 800c0e6:	f019 0f01 	tst.w	r9, #1
 800c0ea:	d193      	bne.n	800c014 <_dtoa_r+0xabc>
 800c0ec:	462b      	mov	r3, r5
 800c0ee:	461d      	mov	r5, r3
 800c0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0f4:	2a30      	cmp	r2, #48	; 0x30
 800c0f6:	d0fa      	beq.n	800c0ee <_dtoa_r+0xb96>
 800c0f8:	e6de      	b.n	800beb8 <_dtoa_r+0x960>
 800c0fa:	9a00      	ldr	r2, [sp, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d18a      	bne.n	800c016 <_dtoa_r+0xabe>
 800c100:	f10b 0b01 	add.w	fp, fp, #1
 800c104:	2331      	movs	r3, #49	; 0x31
 800c106:	e797      	b.n	800c038 <_dtoa_r+0xae0>
 800c108:	4b09      	ldr	r3, [pc, #36]	; (800c130 <_dtoa_r+0xbd8>)
 800c10a:	f7ff ba9a 	b.w	800b642 <_dtoa_r+0xea>
 800c10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c110:	2b00      	cmp	r3, #0
 800c112:	f47f aa6e 	bne.w	800b5f2 <_dtoa_r+0x9a>
 800c116:	4b07      	ldr	r3, [pc, #28]	; (800c134 <_dtoa_r+0xbdc>)
 800c118:	f7ff ba93 	b.w	800b642 <_dtoa_r+0xea>
 800c11c:	9b01      	ldr	r3, [sp, #4]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dcb6      	bgt.n	800c090 <_dtoa_r+0xb38>
 800c122:	9b07      	ldr	r3, [sp, #28]
 800c124:	2b02      	cmp	r3, #2
 800c126:	f73f aeb2 	bgt.w	800be8e <_dtoa_r+0x936>
 800c12a:	e7b1      	b.n	800c090 <_dtoa_r+0xb38>
 800c12c:	0800e28d 	.word	0x0800e28d
 800c130:	0800e088 	.word	0x0800e088
 800c134:	0800e211 	.word	0x0800e211

0800c138 <rshift>:
 800c138:	6903      	ldr	r3, [r0, #16]
 800c13a:	114a      	asrs	r2, r1, #5
 800c13c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c144:	f100 0414 	add.w	r4, r0, #20
 800c148:	dd45      	ble.n	800c1d6 <rshift+0x9e>
 800c14a:	f011 011f 	ands.w	r1, r1, #31
 800c14e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c152:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c156:	d10c      	bne.n	800c172 <rshift+0x3a>
 800c158:	f100 0710 	add.w	r7, r0, #16
 800c15c:	4629      	mov	r1, r5
 800c15e:	42b1      	cmp	r1, r6
 800c160:	d334      	bcc.n	800c1cc <rshift+0x94>
 800c162:	1a9b      	subs	r3, r3, r2
 800c164:	1eea      	subs	r2, r5, #3
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4296      	cmp	r6, r2
 800c16a:	bf38      	it	cc
 800c16c:	2300      	movcc	r3, #0
 800c16e:	4423      	add	r3, r4
 800c170:	e015      	b.n	800c19e <rshift+0x66>
 800c172:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c176:	f1c1 0820 	rsb	r8, r1, #32
 800c17a:	f105 0e04 	add.w	lr, r5, #4
 800c17e:	46a1      	mov	r9, r4
 800c180:	40cf      	lsrs	r7, r1
 800c182:	4576      	cmp	r6, lr
 800c184:	46f4      	mov	ip, lr
 800c186:	d815      	bhi.n	800c1b4 <rshift+0x7c>
 800c188:	1a9a      	subs	r2, r3, r2
 800c18a:	3501      	adds	r5, #1
 800c18c:	0092      	lsls	r2, r2, #2
 800c18e:	3a04      	subs	r2, #4
 800c190:	42ae      	cmp	r6, r5
 800c192:	bf38      	it	cc
 800c194:	2200      	movcc	r2, #0
 800c196:	18a3      	adds	r3, r4, r2
 800c198:	50a7      	str	r7, [r4, r2]
 800c19a:	b107      	cbz	r7, 800c19e <rshift+0x66>
 800c19c:	3304      	adds	r3, #4
 800c19e:	1b1a      	subs	r2, r3, r4
 800c1a0:	42a3      	cmp	r3, r4
 800c1a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c1a6:	bf08      	it	eq
 800c1a8:	2300      	moveq	r3, #0
 800c1aa:	6102      	str	r2, [r0, #16]
 800c1ac:	bf08      	it	eq
 800c1ae:	6143      	streq	r3, [r0, #20]
 800c1b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1b4:	f8dc c000 	ldr.w	ip, [ip]
 800c1b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c1bc:	ea4c 0707 	orr.w	r7, ip, r7
 800c1c0:	f849 7b04 	str.w	r7, [r9], #4
 800c1c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c1c8:	40cf      	lsrs	r7, r1
 800c1ca:	e7da      	b.n	800c182 <rshift+0x4a>
 800c1cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800c1d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800c1d4:	e7c3      	b.n	800c15e <rshift+0x26>
 800c1d6:	4623      	mov	r3, r4
 800c1d8:	e7e1      	b.n	800c19e <rshift+0x66>

0800c1da <__hexdig_fun>:
 800c1da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c1de:	2b09      	cmp	r3, #9
 800c1e0:	d802      	bhi.n	800c1e8 <__hexdig_fun+0xe>
 800c1e2:	3820      	subs	r0, #32
 800c1e4:	b2c0      	uxtb	r0, r0
 800c1e6:	4770      	bx	lr
 800c1e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c1ec:	2b05      	cmp	r3, #5
 800c1ee:	d801      	bhi.n	800c1f4 <__hexdig_fun+0x1a>
 800c1f0:	3847      	subs	r0, #71	; 0x47
 800c1f2:	e7f7      	b.n	800c1e4 <__hexdig_fun+0xa>
 800c1f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c1f8:	2b05      	cmp	r3, #5
 800c1fa:	d801      	bhi.n	800c200 <__hexdig_fun+0x26>
 800c1fc:	3827      	subs	r0, #39	; 0x27
 800c1fe:	e7f1      	b.n	800c1e4 <__hexdig_fun+0xa>
 800c200:	2000      	movs	r0, #0
 800c202:	4770      	bx	lr

0800c204 <__gethex>:
 800c204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c208:	4617      	mov	r7, r2
 800c20a:	680a      	ldr	r2, [r1, #0]
 800c20c:	b085      	sub	sp, #20
 800c20e:	4681      	mov	r9, r0
 800c210:	f102 0b02 	add.w	fp, r2, #2
 800c214:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c218:	468a      	mov	sl, r1
 800c21a:	9302      	str	r3, [sp, #8]
 800c21c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c220:	32fe      	adds	r2, #254	; 0xfe
 800c222:	eb02 030b 	add.w	r3, r2, fp
 800c226:	46d8      	mov	r8, fp
 800c228:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	2830      	cmp	r0, #48	; 0x30
 800c230:	d0f7      	beq.n	800c222 <__gethex+0x1e>
 800c232:	f7ff ffd2 	bl	800c1da <__hexdig_fun>
 800c236:	4604      	mov	r4, r0
 800c238:	2800      	cmp	r0, #0
 800c23a:	d137      	bne.n	800c2ac <__gethex+0xa8>
 800c23c:	2201      	movs	r2, #1
 800c23e:	49a7      	ldr	r1, [pc, #668]	; (800c4dc <__gethex+0x2d8>)
 800c240:	4640      	mov	r0, r8
 800c242:	f7ff f883 	bl	800b34c <strncmp>
 800c246:	4606      	mov	r6, r0
 800c248:	2800      	cmp	r0, #0
 800c24a:	d168      	bne.n	800c31e <__gethex+0x11a>
 800c24c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c250:	465d      	mov	r5, fp
 800c252:	f7ff ffc2 	bl	800c1da <__hexdig_fun>
 800c256:	2800      	cmp	r0, #0
 800c258:	d063      	beq.n	800c322 <__gethex+0x11e>
 800c25a:	465a      	mov	r2, fp
 800c25c:	7810      	ldrb	r0, [r2, #0]
 800c25e:	4690      	mov	r8, r2
 800c260:	3201      	adds	r2, #1
 800c262:	2830      	cmp	r0, #48	; 0x30
 800c264:	d0fa      	beq.n	800c25c <__gethex+0x58>
 800c266:	f7ff ffb8 	bl	800c1da <__hexdig_fun>
 800c26a:	fab0 f480 	clz	r4, r0
 800c26e:	2301      	movs	r3, #1
 800c270:	465e      	mov	r6, fp
 800c272:	0964      	lsrs	r4, r4, #5
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	4642      	mov	r2, r8
 800c278:	4615      	mov	r5, r2
 800c27a:	3201      	adds	r2, #1
 800c27c:	7828      	ldrb	r0, [r5, #0]
 800c27e:	f7ff ffac 	bl	800c1da <__hexdig_fun>
 800c282:	2800      	cmp	r0, #0
 800c284:	d1f8      	bne.n	800c278 <__gethex+0x74>
 800c286:	2201      	movs	r2, #1
 800c288:	4994      	ldr	r1, [pc, #592]	; (800c4dc <__gethex+0x2d8>)
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7ff f85e 	bl	800b34c <strncmp>
 800c290:	b978      	cbnz	r0, 800c2b2 <__gethex+0xae>
 800c292:	b946      	cbnz	r6, 800c2a6 <__gethex+0xa2>
 800c294:	1c6e      	adds	r6, r5, #1
 800c296:	4632      	mov	r2, r6
 800c298:	4615      	mov	r5, r2
 800c29a:	3201      	adds	r2, #1
 800c29c:	7828      	ldrb	r0, [r5, #0]
 800c29e:	f7ff ff9c 	bl	800c1da <__hexdig_fun>
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	d1f8      	bne.n	800c298 <__gethex+0x94>
 800c2a6:	1b73      	subs	r3, r6, r5
 800c2a8:	009e      	lsls	r6, r3, #2
 800c2aa:	e004      	b.n	800c2b6 <__gethex+0xb2>
 800c2ac:	2400      	movs	r4, #0
 800c2ae:	4626      	mov	r6, r4
 800c2b0:	e7e1      	b.n	800c276 <__gethex+0x72>
 800c2b2:	2e00      	cmp	r6, #0
 800c2b4:	d1f7      	bne.n	800c2a6 <__gethex+0xa2>
 800c2b6:	782b      	ldrb	r3, [r5, #0]
 800c2b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c2bc:	2b50      	cmp	r3, #80	; 0x50
 800c2be:	d13d      	bne.n	800c33c <__gethex+0x138>
 800c2c0:	786b      	ldrb	r3, [r5, #1]
 800c2c2:	2b2b      	cmp	r3, #43	; 0x2b
 800c2c4:	d02f      	beq.n	800c326 <__gethex+0x122>
 800c2c6:	2b2d      	cmp	r3, #45	; 0x2d
 800c2c8:	d031      	beq.n	800c32e <__gethex+0x12a>
 800c2ca:	1c69      	adds	r1, r5, #1
 800c2cc:	f04f 0b00 	mov.w	fp, #0
 800c2d0:	7808      	ldrb	r0, [r1, #0]
 800c2d2:	f7ff ff82 	bl	800c1da <__hexdig_fun>
 800c2d6:	1e42      	subs	r2, r0, #1
 800c2d8:	b2d2      	uxtb	r2, r2
 800c2da:	2a18      	cmp	r2, #24
 800c2dc:	d82e      	bhi.n	800c33c <__gethex+0x138>
 800c2de:	f1a0 0210 	sub.w	r2, r0, #16
 800c2e2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c2e6:	f7ff ff78 	bl	800c1da <__hexdig_fun>
 800c2ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c2ee:	fa5f fc8c 	uxtb.w	ip, ip
 800c2f2:	f1bc 0f18 	cmp.w	ip, #24
 800c2f6:	d91d      	bls.n	800c334 <__gethex+0x130>
 800c2f8:	f1bb 0f00 	cmp.w	fp, #0
 800c2fc:	d000      	beq.n	800c300 <__gethex+0xfc>
 800c2fe:	4252      	negs	r2, r2
 800c300:	4416      	add	r6, r2
 800c302:	f8ca 1000 	str.w	r1, [sl]
 800c306:	b1dc      	cbz	r4, 800c340 <__gethex+0x13c>
 800c308:	9b01      	ldr	r3, [sp, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bf14      	ite	ne
 800c30e:	f04f 0800 	movne.w	r8, #0
 800c312:	f04f 0806 	moveq.w	r8, #6
 800c316:	4640      	mov	r0, r8
 800c318:	b005      	add	sp, #20
 800c31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c31e:	4645      	mov	r5, r8
 800c320:	4626      	mov	r6, r4
 800c322:	2401      	movs	r4, #1
 800c324:	e7c7      	b.n	800c2b6 <__gethex+0xb2>
 800c326:	f04f 0b00 	mov.w	fp, #0
 800c32a:	1ca9      	adds	r1, r5, #2
 800c32c:	e7d0      	b.n	800c2d0 <__gethex+0xcc>
 800c32e:	f04f 0b01 	mov.w	fp, #1
 800c332:	e7fa      	b.n	800c32a <__gethex+0x126>
 800c334:	230a      	movs	r3, #10
 800c336:	fb03 0002 	mla	r0, r3, r2, r0
 800c33a:	e7d0      	b.n	800c2de <__gethex+0xda>
 800c33c:	4629      	mov	r1, r5
 800c33e:	e7e0      	b.n	800c302 <__gethex+0xfe>
 800c340:	eba5 0308 	sub.w	r3, r5, r8
 800c344:	4621      	mov	r1, r4
 800c346:	3b01      	subs	r3, #1
 800c348:	2b07      	cmp	r3, #7
 800c34a:	dc0a      	bgt.n	800c362 <__gethex+0x15e>
 800c34c:	4648      	mov	r0, r9
 800c34e:	f000 fe57 	bl	800d000 <_Balloc>
 800c352:	4604      	mov	r4, r0
 800c354:	b940      	cbnz	r0, 800c368 <__gethex+0x164>
 800c356:	4b62      	ldr	r3, [pc, #392]	; (800c4e0 <__gethex+0x2dc>)
 800c358:	4602      	mov	r2, r0
 800c35a:	21e4      	movs	r1, #228	; 0xe4
 800c35c:	4861      	ldr	r0, [pc, #388]	; (800c4e4 <__gethex+0x2e0>)
 800c35e:	f001 fd0f 	bl	800dd80 <__assert_func>
 800c362:	3101      	adds	r1, #1
 800c364:	105b      	asrs	r3, r3, #1
 800c366:	e7ef      	b.n	800c348 <__gethex+0x144>
 800c368:	2300      	movs	r3, #0
 800c36a:	f100 0a14 	add.w	sl, r0, #20
 800c36e:	495b      	ldr	r1, [pc, #364]	; (800c4dc <__gethex+0x2d8>)
 800c370:	469b      	mov	fp, r3
 800c372:	f8cd a004 	str.w	sl, [sp, #4]
 800c376:	45a8      	cmp	r8, r5
 800c378:	d342      	bcc.n	800c400 <__gethex+0x1fc>
 800c37a:	9801      	ldr	r0, [sp, #4]
 800c37c:	f840 bb04 	str.w	fp, [r0], #4
 800c380:	eba0 000a 	sub.w	r0, r0, sl
 800c384:	1080      	asrs	r0, r0, #2
 800c386:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c38a:	6120      	str	r0, [r4, #16]
 800c38c:	4658      	mov	r0, fp
 800c38e:	f000 ff2b 	bl	800d1e8 <__hi0bits>
 800c392:	683d      	ldr	r5, [r7, #0]
 800c394:	eba8 0000 	sub.w	r0, r8, r0
 800c398:	42a8      	cmp	r0, r5
 800c39a:	dd59      	ble.n	800c450 <__gethex+0x24c>
 800c39c:	eba0 0805 	sub.w	r8, r0, r5
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	f001 fac4 	bl	800d930 <__any_on>
 800c3a8:	4683      	mov	fp, r0
 800c3aa:	b1b8      	cbz	r0, 800c3dc <__gethex+0x1d8>
 800c3ac:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c3b0:	f04f 0b01 	mov.w	fp, #1
 800c3b4:	1159      	asrs	r1, r3, #5
 800c3b6:	f003 021f 	and.w	r2, r3, #31
 800c3ba:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c3be:	fa0b f202 	lsl.w	r2, fp, r2
 800c3c2:	420a      	tst	r2, r1
 800c3c4:	d00a      	beq.n	800c3dc <__gethex+0x1d8>
 800c3c6:	455b      	cmp	r3, fp
 800c3c8:	dd06      	ble.n	800c3d8 <__gethex+0x1d4>
 800c3ca:	f1a8 0102 	sub.w	r1, r8, #2
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f001 faae 	bl	800d930 <__any_on>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	d138      	bne.n	800c44a <__gethex+0x246>
 800c3d8:	f04f 0b02 	mov.w	fp, #2
 800c3dc:	4446      	add	r6, r8
 800c3de:	4641      	mov	r1, r8
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7ff fea9 	bl	800c138 <rshift>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	42b3      	cmp	r3, r6
 800c3ea:	da41      	bge.n	800c470 <__gethex+0x26c>
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	f000 fe46 	bl	800d080 <_Bfree>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	e78a      	b.n	800c316 <__gethex+0x112>
 800c400:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c404:	2a2e      	cmp	r2, #46	; 0x2e
 800c406:	d014      	beq.n	800c432 <__gethex+0x22e>
 800c408:	2b20      	cmp	r3, #32
 800c40a:	d106      	bne.n	800c41a <__gethex+0x216>
 800c40c:	9b01      	ldr	r3, [sp, #4]
 800c40e:	f843 bb04 	str.w	fp, [r3], #4
 800c412:	f04f 0b00 	mov.w	fp, #0
 800c416:	9301      	str	r3, [sp, #4]
 800c418:	465b      	mov	r3, fp
 800c41a:	7828      	ldrb	r0, [r5, #0]
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	f7ff fedc 	bl	800c1da <__hexdig_fun>
 800c422:	9b03      	ldr	r3, [sp, #12]
 800c424:	f000 000f 	and.w	r0, r0, #15
 800c428:	4098      	lsls	r0, r3
 800c42a:	3304      	adds	r3, #4
 800c42c:	ea4b 0b00 	orr.w	fp, fp, r0
 800c430:	e7a1      	b.n	800c376 <__gethex+0x172>
 800c432:	45a8      	cmp	r8, r5
 800c434:	d8e8      	bhi.n	800c408 <__gethex+0x204>
 800c436:	2201      	movs	r2, #1
 800c438:	4628      	mov	r0, r5
 800c43a:	9303      	str	r3, [sp, #12]
 800c43c:	f7fe ff86 	bl	800b34c <strncmp>
 800c440:	4926      	ldr	r1, [pc, #152]	; (800c4dc <__gethex+0x2d8>)
 800c442:	9b03      	ldr	r3, [sp, #12]
 800c444:	2800      	cmp	r0, #0
 800c446:	d1df      	bne.n	800c408 <__gethex+0x204>
 800c448:	e795      	b.n	800c376 <__gethex+0x172>
 800c44a:	f04f 0b03 	mov.w	fp, #3
 800c44e:	e7c5      	b.n	800c3dc <__gethex+0x1d8>
 800c450:	da0b      	bge.n	800c46a <__gethex+0x266>
 800c452:	eba5 0800 	sub.w	r8, r5, r0
 800c456:	4621      	mov	r1, r4
 800c458:	4648      	mov	r0, r9
 800c45a:	4642      	mov	r2, r8
 800c45c:	eba6 0608 	sub.w	r6, r6, r8
 800c460:	f001 f82a 	bl	800d4b8 <__lshift>
 800c464:	4604      	mov	r4, r0
 800c466:	f100 0a14 	add.w	sl, r0, #20
 800c46a:	f04f 0b00 	mov.w	fp, #0
 800c46e:	e7ba      	b.n	800c3e6 <__gethex+0x1e2>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	42b3      	cmp	r3, r6
 800c474:	dd74      	ble.n	800c560 <__gethex+0x35c>
 800c476:	1b9e      	subs	r6, r3, r6
 800c478:	42b5      	cmp	r5, r6
 800c47a:	dc35      	bgt.n	800c4e8 <__gethex+0x2e4>
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	d023      	beq.n	800c4ca <__gethex+0x2c6>
 800c482:	2b03      	cmp	r3, #3
 800c484:	d025      	beq.n	800c4d2 <__gethex+0x2ce>
 800c486:	2b01      	cmp	r3, #1
 800c488:	d115      	bne.n	800c4b6 <__gethex+0x2b2>
 800c48a:	42b5      	cmp	r5, r6
 800c48c:	d113      	bne.n	800c4b6 <__gethex+0x2b2>
 800c48e:	2d01      	cmp	r5, #1
 800c490:	d10b      	bne.n	800c4aa <__gethex+0x2a6>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c498:	9a02      	ldr	r2, [sp, #8]
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	2301      	movs	r3, #1
 800c49e:	6123      	str	r3, [r4, #16]
 800c4a0:	f8ca 3000 	str.w	r3, [sl]
 800c4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4a6:	601c      	str	r4, [r3, #0]
 800c4a8:	e735      	b.n	800c316 <__gethex+0x112>
 800c4aa:	1e69      	subs	r1, r5, #1
 800c4ac:	4620      	mov	r0, r4
 800c4ae:	f001 fa3f 	bl	800d930 <__any_on>
 800c4b2:	2800      	cmp	r0, #0
 800c4b4:	d1ed      	bne.n	800c492 <__gethex+0x28e>
 800c4b6:	4621      	mov	r1, r4
 800c4b8:	4648      	mov	r0, r9
 800c4ba:	f000 fde1 	bl	800d080 <_Bfree>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c4c6:	6013      	str	r3, [r2, #0]
 800c4c8:	e725      	b.n	800c316 <__gethex+0x112>
 800c4ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1f2      	bne.n	800c4b6 <__gethex+0x2b2>
 800c4d0:	e7df      	b.n	800c492 <__gethex+0x28e>
 800c4d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1dc      	bne.n	800c492 <__gethex+0x28e>
 800c4d8:	e7ed      	b.n	800c4b6 <__gethex+0x2b2>
 800c4da:	bf00      	nop
 800c4dc:	0800e0b1 	.word	0x0800e0b1
 800c4e0:	0800e28d 	.word	0x0800e28d
 800c4e4:	0800e29e 	.word	0x0800e29e
 800c4e8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c4ec:	f1bb 0f00 	cmp.w	fp, #0
 800c4f0:	d133      	bne.n	800c55a <__gethex+0x356>
 800c4f2:	f1b8 0f00 	cmp.w	r8, #0
 800c4f6:	d004      	beq.n	800c502 <__gethex+0x2fe>
 800c4f8:	4641      	mov	r1, r8
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f001 fa18 	bl	800d930 <__any_on>
 800c500:	4683      	mov	fp, r0
 800c502:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c506:	2301      	movs	r3, #1
 800c508:	f008 081f 	and.w	r8, r8, #31
 800c50c:	4631      	mov	r1, r6
 800c50e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c512:	4620      	mov	r0, r4
 800c514:	fa03 f308 	lsl.w	r3, r3, r8
 800c518:	1bad      	subs	r5, r5, r6
 800c51a:	f04f 0802 	mov.w	r8, #2
 800c51e:	4213      	tst	r3, r2
 800c520:	bf18      	it	ne
 800c522:	f04b 0b02 	orrne.w	fp, fp, #2
 800c526:	f7ff fe07 	bl	800c138 <rshift>
 800c52a:	687e      	ldr	r6, [r7, #4]
 800c52c:	f1bb 0f00 	cmp.w	fp, #0
 800c530:	d04a      	beq.n	800c5c8 <__gethex+0x3c4>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b02      	cmp	r3, #2
 800c536:	d016      	beq.n	800c566 <__gethex+0x362>
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d018      	beq.n	800c56e <__gethex+0x36a>
 800c53c:	2b01      	cmp	r3, #1
 800c53e:	d109      	bne.n	800c554 <__gethex+0x350>
 800c540:	f01b 0f02 	tst.w	fp, #2
 800c544:	d006      	beq.n	800c554 <__gethex+0x350>
 800c546:	f8da 3000 	ldr.w	r3, [sl]
 800c54a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c54e:	f01b 0f01 	tst.w	fp, #1
 800c552:	d10f      	bne.n	800c574 <__gethex+0x370>
 800c554:	f048 0810 	orr.w	r8, r8, #16
 800c558:	e036      	b.n	800c5c8 <__gethex+0x3c4>
 800c55a:	f04f 0b01 	mov.w	fp, #1
 800c55e:	e7d0      	b.n	800c502 <__gethex+0x2fe>
 800c560:	f04f 0801 	mov.w	r8, #1
 800c564:	e7e2      	b.n	800c52c <__gethex+0x328>
 800c566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c568:	f1c3 0301 	rsb	r3, r3, #1
 800c56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c56e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0ef      	beq.n	800c554 <__gethex+0x350>
 800c574:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c578:	f104 0214 	add.w	r2, r4, #20
 800c57c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c580:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	2300      	movs	r3, #0
 800c588:	4694      	mov	ip, r2
 800c58a:	f852 1b04 	ldr.w	r1, [r2], #4
 800c58e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c592:	d01e      	beq.n	800c5d2 <__gethex+0x3ce>
 800c594:	3101      	adds	r1, #1
 800c596:	f8cc 1000 	str.w	r1, [ip]
 800c59a:	f1b8 0f02 	cmp.w	r8, #2
 800c59e:	f104 0214 	add.w	r2, r4, #20
 800c5a2:	d13d      	bne.n	800c620 <__gethex+0x41c>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	3b01      	subs	r3, #1
 800c5a8:	42ab      	cmp	r3, r5
 800c5aa:	d10b      	bne.n	800c5c4 <__gethex+0x3c0>
 800c5ac:	1169      	asrs	r1, r5, #5
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	f005 051f 	and.w	r5, r5, #31
 800c5b4:	fa03 f505 	lsl.w	r5, r3, r5
 800c5b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5bc:	421d      	tst	r5, r3
 800c5be:	bf18      	it	ne
 800c5c0:	f04f 0801 	movne.w	r8, #1
 800c5c4:	f048 0820 	orr.w	r8, r8, #32
 800c5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5ca:	601c      	str	r4, [r3, #0]
 800c5cc:	9b02      	ldr	r3, [sp, #8]
 800c5ce:	601e      	str	r6, [r3, #0]
 800c5d0:	e6a1      	b.n	800c316 <__gethex+0x112>
 800c5d2:	4290      	cmp	r0, r2
 800c5d4:	f842 3c04 	str.w	r3, [r2, #-4]
 800c5d8:	d8d6      	bhi.n	800c588 <__gethex+0x384>
 800c5da:	68a2      	ldr	r2, [r4, #8]
 800c5dc:	4593      	cmp	fp, r2
 800c5de:	db17      	blt.n	800c610 <__gethex+0x40c>
 800c5e0:	6861      	ldr	r1, [r4, #4]
 800c5e2:	4648      	mov	r0, r9
 800c5e4:	3101      	adds	r1, #1
 800c5e6:	f000 fd0b 	bl	800d000 <_Balloc>
 800c5ea:	4682      	mov	sl, r0
 800c5ec:	b918      	cbnz	r0, 800c5f6 <__gethex+0x3f2>
 800c5ee:	4b1b      	ldr	r3, [pc, #108]	; (800c65c <__gethex+0x458>)
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	2184      	movs	r1, #132	; 0x84
 800c5f4:	e6b2      	b.n	800c35c <__gethex+0x158>
 800c5f6:	6922      	ldr	r2, [r4, #16]
 800c5f8:	f104 010c 	add.w	r1, r4, #12
 800c5fc:	300c      	adds	r0, #12
 800c5fe:	3202      	adds	r2, #2
 800c600:	0092      	lsls	r2, r2, #2
 800c602:	f7fe fefb 	bl	800b3fc <memcpy>
 800c606:	4621      	mov	r1, r4
 800c608:	4654      	mov	r4, sl
 800c60a:	4648      	mov	r0, r9
 800c60c:	f000 fd38 	bl	800d080 <_Bfree>
 800c610:	6922      	ldr	r2, [r4, #16]
 800c612:	1c51      	adds	r1, r2, #1
 800c614:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c618:	6121      	str	r1, [r4, #16]
 800c61a:	2101      	movs	r1, #1
 800c61c:	6151      	str	r1, [r2, #20]
 800c61e:	e7bc      	b.n	800c59a <__gethex+0x396>
 800c620:	6921      	ldr	r1, [r4, #16]
 800c622:	4559      	cmp	r1, fp
 800c624:	dd0b      	ble.n	800c63e <__gethex+0x43a>
 800c626:	2101      	movs	r1, #1
 800c628:	4620      	mov	r0, r4
 800c62a:	f7ff fd85 	bl	800c138 <rshift>
 800c62e:	3601      	adds	r6, #1
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	42b3      	cmp	r3, r6
 800c634:	f6ff aeda 	blt.w	800c3ec <__gethex+0x1e8>
 800c638:	f04f 0801 	mov.w	r8, #1
 800c63c:	e7c2      	b.n	800c5c4 <__gethex+0x3c0>
 800c63e:	f015 051f 	ands.w	r5, r5, #31
 800c642:	d0f9      	beq.n	800c638 <__gethex+0x434>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	f1c5 0520 	rsb	r5, r5, #32
 800c64a:	441a      	add	r2, r3
 800c64c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c650:	f000 fdca 	bl	800d1e8 <__hi0bits>
 800c654:	42a8      	cmp	r0, r5
 800c656:	dbe6      	blt.n	800c626 <__gethex+0x422>
 800c658:	e7ee      	b.n	800c638 <__gethex+0x434>
 800c65a:	bf00      	nop
 800c65c:	0800e28d 	.word	0x0800e28d

0800c660 <L_shift>:
 800c660:	f1c2 0208 	rsb	r2, r2, #8
 800c664:	0092      	lsls	r2, r2, #2
 800c666:	b570      	push	{r4, r5, r6, lr}
 800c668:	f1c2 0620 	rsb	r6, r2, #32
 800c66c:	6843      	ldr	r3, [r0, #4]
 800c66e:	6804      	ldr	r4, [r0, #0]
 800c670:	fa03 f506 	lsl.w	r5, r3, r6
 800c674:	40d3      	lsrs	r3, r2
 800c676:	432c      	orrs	r4, r5
 800c678:	6004      	str	r4, [r0, #0]
 800c67a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c67e:	4288      	cmp	r0, r1
 800c680:	d3f4      	bcc.n	800c66c <L_shift+0xc>
 800c682:	bd70      	pop	{r4, r5, r6, pc}

0800c684 <__match>:
 800c684:	6803      	ldr	r3, [r0, #0]
 800c686:	3301      	adds	r3, #1
 800c688:	b530      	push	{r4, r5, lr}
 800c68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68e:	b914      	cbnz	r4, 800c696 <__match+0x12>
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	2001      	movs	r0, #1
 800c694:	bd30      	pop	{r4, r5, pc}
 800c696:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c69a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c69e:	2d19      	cmp	r5, #25
 800c6a0:	bf98      	it	ls
 800c6a2:	3220      	addls	r2, #32
 800c6a4:	42a2      	cmp	r2, r4
 800c6a6:	d0f0      	beq.n	800c68a <__match+0x6>
 800c6a8:	2000      	movs	r0, #0
 800c6aa:	e7f3      	b.n	800c694 <__match+0x10>

0800c6ac <__hexnan>:
 800c6ac:	680b      	ldr	r3, [r1, #0]
 800c6ae:	6801      	ldr	r1, [r0, #0]
 800c6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b4:	115e      	asrs	r6, r3, #5
 800c6b6:	f013 031f 	ands.w	r3, r3, #31
 800c6ba:	f04f 0500 	mov.w	r5, #0
 800c6be:	b087      	sub	sp, #28
 800c6c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c6c4:	4682      	mov	sl, r0
 800c6c6:	4690      	mov	r8, r2
 800c6c8:	46ab      	mov	fp, r5
 800c6ca:	bf18      	it	ne
 800c6cc:	3604      	addne	r6, #4
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	9502      	str	r5, [sp, #8]
 800c6d2:	1f37      	subs	r7, r6, #4
 800c6d4:	f846 5c04 	str.w	r5, [r6, #-4]
 800c6d8:	46b9      	mov	r9, r7
 800c6da:	463c      	mov	r4, r7
 800c6dc:	1c4b      	adds	r3, r1, #1
 800c6de:	784a      	ldrb	r2, [r1, #1]
 800c6e0:	9303      	str	r3, [sp, #12]
 800c6e2:	b342      	cbz	r2, 800c736 <__hexnan+0x8a>
 800c6e4:	4610      	mov	r0, r2
 800c6e6:	9105      	str	r1, [sp, #20]
 800c6e8:	9204      	str	r2, [sp, #16]
 800c6ea:	f7ff fd76 	bl	800c1da <__hexdig_fun>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d14f      	bne.n	800c792 <__hexnan+0xe6>
 800c6f2:	9a04      	ldr	r2, [sp, #16]
 800c6f4:	9905      	ldr	r1, [sp, #20]
 800c6f6:	2a20      	cmp	r2, #32
 800c6f8:	d818      	bhi.n	800c72c <__hexnan+0x80>
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	459b      	cmp	fp, r3
 800c6fe:	dd13      	ble.n	800c728 <__hexnan+0x7c>
 800c700:	454c      	cmp	r4, r9
 800c702:	d206      	bcs.n	800c712 <__hexnan+0x66>
 800c704:	2d07      	cmp	r5, #7
 800c706:	dc04      	bgt.n	800c712 <__hexnan+0x66>
 800c708:	462a      	mov	r2, r5
 800c70a:	4649      	mov	r1, r9
 800c70c:	4620      	mov	r0, r4
 800c70e:	f7ff ffa7 	bl	800c660 <L_shift>
 800c712:	4544      	cmp	r4, r8
 800c714:	d94f      	bls.n	800c7b6 <__hexnan+0x10a>
 800c716:	2300      	movs	r3, #0
 800c718:	f1a4 0904 	sub.w	r9, r4, #4
 800c71c:	f8cd b008 	str.w	fp, [sp, #8]
 800c720:	f844 3c04 	str.w	r3, [r4, #-4]
 800c724:	461d      	mov	r5, r3
 800c726:	464c      	mov	r4, r9
 800c728:	9903      	ldr	r1, [sp, #12]
 800c72a:	e7d7      	b.n	800c6dc <__hexnan+0x30>
 800c72c:	2a29      	cmp	r2, #41	; 0x29
 800c72e:	d154      	bne.n	800c7da <__hexnan+0x12e>
 800c730:	3102      	adds	r1, #2
 800c732:	f8ca 1000 	str.w	r1, [sl]
 800c736:	f1bb 0f00 	cmp.w	fp, #0
 800c73a:	d04e      	beq.n	800c7da <__hexnan+0x12e>
 800c73c:	454c      	cmp	r4, r9
 800c73e:	d206      	bcs.n	800c74e <__hexnan+0xa2>
 800c740:	2d07      	cmp	r5, #7
 800c742:	dc04      	bgt.n	800c74e <__hexnan+0xa2>
 800c744:	462a      	mov	r2, r5
 800c746:	4649      	mov	r1, r9
 800c748:	4620      	mov	r0, r4
 800c74a:	f7ff ff89 	bl	800c660 <L_shift>
 800c74e:	4544      	cmp	r4, r8
 800c750:	d933      	bls.n	800c7ba <__hexnan+0x10e>
 800c752:	f1a8 0204 	sub.w	r2, r8, #4
 800c756:	4623      	mov	r3, r4
 800c758:	f853 1b04 	ldr.w	r1, [r3], #4
 800c75c:	429f      	cmp	r7, r3
 800c75e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c762:	d2f9      	bcs.n	800c758 <__hexnan+0xac>
 800c764:	1b3b      	subs	r3, r7, r4
 800c766:	3e03      	subs	r6, #3
 800c768:	3401      	adds	r4, #1
 800c76a:	2200      	movs	r2, #0
 800c76c:	f023 0303 	bic.w	r3, r3, #3
 800c770:	3304      	adds	r3, #4
 800c772:	42a6      	cmp	r6, r4
 800c774:	bf38      	it	cc
 800c776:	2304      	movcc	r3, #4
 800c778:	4443      	add	r3, r8
 800c77a:	f843 2b04 	str.w	r2, [r3], #4
 800c77e:	429f      	cmp	r7, r3
 800c780:	d2fb      	bcs.n	800c77a <__hexnan+0xce>
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	b91b      	cbnz	r3, 800c78e <__hexnan+0xe2>
 800c786:	4547      	cmp	r7, r8
 800c788:	d125      	bne.n	800c7d6 <__hexnan+0x12a>
 800c78a:	2301      	movs	r3, #1
 800c78c:	603b      	str	r3, [r7, #0]
 800c78e:	2005      	movs	r0, #5
 800c790:	e024      	b.n	800c7dc <__hexnan+0x130>
 800c792:	3501      	adds	r5, #1
 800c794:	f10b 0b01 	add.w	fp, fp, #1
 800c798:	2d08      	cmp	r5, #8
 800c79a:	dd05      	ble.n	800c7a8 <__hexnan+0xfc>
 800c79c:	4544      	cmp	r4, r8
 800c79e:	d9c3      	bls.n	800c728 <__hexnan+0x7c>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	3c04      	subs	r4, #4
 800c7a4:	2501      	movs	r5, #1
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	6822      	ldr	r2, [r4, #0]
 800c7aa:	f000 000f 	and.w	r0, r0, #15
 800c7ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c7b2:	6020      	str	r0, [r4, #0]
 800c7b4:	e7b8      	b.n	800c728 <__hexnan+0x7c>
 800c7b6:	2508      	movs	r5, #8
 800c7b8:	e7b6      	b.n	800c728 <__hexnan+0x7c>
 800c7ba:	9b01      	ldr	r3, [sp, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0e0      	beq.n	800c782 <__hexnan+0xd6>
 800c7c0:	f1c3 0320 	rsb	r3, r3, #32
 800c7c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7c8:	40da      	lsrs	r2, r3
 800c7ca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	f846 3c04 	str.w	r3, [r6, #-4]
 800c7d4:	e7d5      	b.n	800c782 <__hexnan+0xd6>
 800c7d6:	3f04      	subs	r7, #4
 800c7d8:	e7d3      	b.n	800c782 <__hexnan+0xd6>
 800c7da:	2004      	movs	r0, #4
 800c7dc:	b007      	add	sp, #28
 800c7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c7e2 <__ssputs_r>:
 800c7e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7e6:	461f      	mov	r7, r3
 800c7e8:	688e      	ldr	r6, [r1, #8]
 800c7ea:	4682      	mov	sl, r0
 800c7ec:	460c      	mov	r4, r1
 800c7ee:	42be      	cmp	r6, r7
 800c7f0:	4690      	mov	r8, r2
 800c7f2:	680b      	ldr	r3, [r1, #0]
 800c7f4:	d82c      	bhi.n	800c850 <__ssputs_r+0x6e>
 800c7f6:	898a      	ldrh	r2, [r1, #12]
 800c7f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7fc:	d026      	beq.n	800c84c <__ssputs_r+0x6a>
 800c7fe:	6965      	ldr	r5, [r4, #20]
 800c800:	6909      	ldr	r1, [r1, #16]
 800c802:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c806:	eba3 0901 	sub.w	r9, r3, r1
 800c80a:	1c7b      	adds	r3, r7, #1
 800c80c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c810:	444b      	add	r3, r9
 800c812:	106d      	asrs	r5, r5, #1
 800c814:	429d      	cmp	r5, r3
 800c816:	bf38      	it	cc
 800c818:	461d      	movcc	r5, r3
 800c81a:	0553      	lsls	r3, r2, #21
 800c81c:	d527      	bpl.n	800c86e <__ssputs_r+0x8c>
 800c81e:	4629      	mov	r1, r5
 800c820:	f000 faa4 	bl	800cd6c <_malloc_r>
 800c824:	4606      	mov	r6, r0
 800c826:	b360      	cbz	r0, 800c882 <__ssputs_r+0xa0>
 800c828:	464a      	mov	r2, r9
 800c82a:	6921      	ldr	r1, [r4, #16]
 800c82c:	f7fe fde6 	bl	800b3fc <memcpy>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	6126      	str	r6, [r4, #16]
 800c83e:	444e      	add	r6, r9
 800c840:	6165      	str	r5, [r4, #20]
 800c842:	eba5 0509 	sub.w	r5, r5, r9
 800c846:	6026      	str	r6, [r4, #0]
 800c848:	463e      	mov	r6, r7
 800c84a:	60a5      	str	r5, [r4, #8]
 800c84c:	42be      	cmp	r6, r7
 800c84e:	d900      	bls.n	800c852 <__ssputs_r+0x70>
 800c850:	463e      	mov	r6, r7
 800c852:	4632      	mov	r2, r6
 800c854:	4641      	mov	r1, r8
 800c856:	6820      	ldr	r0, [r4, #0]
 800c858:	f001 fa00 	bl	800dc5c <memmove>
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	2000      	movs	r0, #0
 800c860:	1b9b      	subs	r3, r3, r6
 800c862:	60a3      	str	r3, [r4, #8]
 800c864:	6823      	ldr	r3, [r4, #0]
 800c866:	4433      	add	r3, r6
 800c868:	6023      	str	r3, [r4, #0]
 800c86a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86e:	462a      	mov	r2, r5
 800c870:	f001 f8c2 	bl	800d9f8 <_realloc_r>
 800c874:	4606      	mov	r6, r0
 800c876:	2800      	cmp	r0, #0
 800c878:	d1e0      	bne.n	800c83c <__ssputs_r+0x5a>
 800c87a:	6921      	ldr	r1, [r4, #16]
 800c87c:	4650      	mov	r0, sl
 800c87e:	f001 fab3 	bl	800dde8 <_free_r>
 800c882:	230c      	movs	r3, #12
 800c884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c888:	f8ca 3000 	str.w	r3, [sl]
 800c88c:	89a3      	ldrh	r3, [r4, #12]
 800c88e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c892:	81a3      	strh	r3, [r4, #12]
 800c894:	e7e9      	b.n	800c86a <__ssputs_r+0x88>
	...

0800c898 <_svfiprintf_r>:
 800c898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89c:	4698      	mov	r8, r3
 800c89e:	898b      	ldrh	r3, [r1, #12]
 800c8a0:	b09d      	sub	sp, #116	; 0x74
 800c8a2:	4607      	mov	r7, r0
 800c8a4:	061b      	lsls	r3, r3, #24
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	4614      	mov	r4, r2
 800c8aa:	d50e      	bpl.n	800c8ca <_svfiprintf_r+0x32>
 800c8ac:	690b      	ldr	r3, [r1, #16]
 800c8ae:	b963      	cbnz	r3, 800c8ca <_svfiprintf_r+0x32>
 800c8b0:	2140      	movs	r1, #64	; 0x40
 800c8b2:	f000 fa5b 	bl	800cd6c <_malloc_r>
 800c8b6:	6028      	str	r0, [r5, #0]
 800c8b8:	6128      	str	r0, [r5, #16]
 800c8ba:	b920      	cbnz	r0, 800c8c6 <_svfiprintf_r+0x2e>
 800c8bc:	230c      	movs	r3, #12
 800c8be:	603b      	str	r3, [r7, #0]
 800c8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8c4:	e0d0      	b.n	800ca68 <_svfiprintf_r+0x1d0>
 800c8c6:	2340      	movs	r3, #64	; 0x40
 800c8c8:	616b      	str	r3, [r5, #20]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8d0:	f04f 0901 	mov.w	r9, #1
 800c8d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca80 <_svfiprintf_r+0x1e8>
 800c8d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8da:	2320      	movs	r3, #32
 800c8dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8e0:	2330      	movs	r3, #48	; 0x30
 800c8e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8e6:	4623      	mov	r3, r4
 800c8e8:	469a      	mov	sl, r3
 800c8ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8ee:	b10a      	cbz	r2, 800c8f4 <_svfiprintf_r+0x5c>
 800c8f0:	2a25      	cmp	r2, #37	; 0x25
 800c8f2:	d1f9      	bne.n	800c8e8 <_svfiprintf_r+0x50>
 800c8f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c8f8:	d00b      	beq.n	800c912 <_svfiprintf_r+0x7a>
 800c8fa:	465b      	mov	r3, fp
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4629      	mov	r1, r5
 800c900:	4638      	mov	r0, r7
 800c902:	f7ff ff6e 	bl	800c7e2 <__ssputs_r>
 800c906:	3001      	adds	r0, #1
 800c908:	f000 80a9 	beq.w	800ca5e <_svfiprintf_r+0x1c6>
 800c90c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c90e:	445a      	add	r2, fp
 800c910:	9209      	str	r2, [sp, #36]	; 0x24
 800c912:	f89a 3000 	ldrb.w	r3, [sl]
 800c916:	2b00      	cmp	r3, #0
 800c918:	f000 80a1 	beq.w	800ca5e <_svfiprintf_r+0x1c6>
 800c91c:	2300      	movs	r3, #0
 800c91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c922:	f10a 0a01 	add.w	sl, sl, #1
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	9307      	str	r3, [sp, #28]
 800c92a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c92e:	931a      	str	r3, [sp, #104]	; 0x68
 800c930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c934:	4654      	mov	r4, sl
 800c936:	2205      	movs	r2, #5
 800c938:	4851      	ldr	r0, [pc, #324]	; (800ca80 <_svfiprintf_r+0x1e8>)
 800c93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c93e:	f7fe fd4f 	bl	800b3e0 <memchr>
 800c942:	9a04      	ldr	r2, [sp, #16]
 800c944:	b9d8      	cbnz	r0, 800c97e <_svfiprintf_r+0xe6>
 800c946:	06d0      	lsls	r0, r2, #27
 800c948:	bf44      	itt	mi
 800c94a:	2320      	movmi	r3, #32
 800c94c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c950:	0711      	lsls	r1, r2, #28
 800c952:	bf44      	itt	mi
 800c954:	232b      	movmi	r3, #43	; 0x2b
 800c956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c95a:	f89a 3000 	ldrb.w	r3, [sl]
 800c95e:	2b2a      	cmp	r3, #42	; 0x2a
 800c960:	d015      	beq.n	800c98e <_svfiprintf_r+0xf6>
 800c962:	9a07      	ldr	r2, [sp, #28]
 800c964:	4654      	mov	r4, sl
 800c966:	2000      	movs	r0, #0
 800c968:	f04f 0c0a 	mov.w	ip, #10
 800c96c:	4621      	mov	r1, r4
 800c96e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c972:	3b30      	subs	r3, #48	; 0x30
 800c974:	2b09      	cmp	r3, #9
 800c976:	d94d      	bls.n	800ca14 <_svfiprintf_r+0x17c>
 800c978:	b1b0      	cbz	r0, 800c9a8 <_svfiprintf_r+0x110>
 800c97a:	9207      	str	r2, [sp, #28]
 800c97c:	e014      	b.n	800c9a8 <_svfiprintf_r+0x110>
 800c97e:	eba0 0308 	sub.w	r3, r0, r8
 800c982:	46a2      	mov	sl, r4
 800c984:	fa09 f303 	lsl.w	r3, r9, r3
 800c988:	4313      	orrs	r3, r2
 800c98a:	9304      	str	r3, [sp, #16]
 800c98c:	e7d2      	b.n	800c934 <_svfiprintf_r+0x9c>
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	1d19      	adds	r1, r3, #4
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	9103      	str	r1, [sp, #12]
 800c998:	bfbb      	ittet	lt
 800c99a:	425b      	neglt	r3, r3
 800c99c:	f042 0202 	orrlt.w	r2, r2, #2
 800c9a0:	9307      	strge	r3, [sp, #28]
 800c9a2:	9307      	strlt	r3, [sp, #28]
 800c9a4:	bfb8      	it	lt
 800c9a6:	9204      	strlt	r2, [sp, #16]
 800c9a8:	7823      	ldrb	r3, [r4, #0]
 800c9aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c9ac:	d10c      	bne.n	800c9c8 <_svfiprintf_r+0x130>
 800c9ae:	7863      	ldrb	r3, [r4, #1]
 800c9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c9b2:	d134      	bne.n	800ca1e <_svfiprintf_r+0x186>
 800c9b4:	9b03      	ldr	r3, [sp, #12]
 800c9b6:	3402      	adds	r4, #2
 800c9b8:	1d1a      	adds	r2, r3, #4
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	9203      	str	r2, [sp, #12]
 800c9c0:	bfb8      	it	lt
 800c9c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c9c6:	9305      	str	r3, [sp, #20]
 800c9c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ca90 <_svfiprintf_r+0x1f8>
 800c9cc:	2203      	movs	r2, #3
 800c9ce:	7821      	ldrb	r1, [r4, #0]
 800c9d0:	4650      	mov	r0, sl
 800c9d2:	f7fe fd05 	bl	800b3e0 <memchr>
 800c9d6:	b138      	cbz	r0, 800c9e8 <_svfiprintf_r+0x150>
 800c9d8:	eba0 000a 	sub.w	r0, r0, sl
 800c9dc:	2240      	movs	r2, #64	; 0x40
 800c9de:	9b04      	ldr	r3, [sp, #16]
 800c9e0:	3401      	adds	r4, #1
 800c9e2:	4082      	lsls	r2, r0
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9ec:	2206      	movs	r2, #6
 800c9ee:	4825      	ldr	r0, [pc, #148]	; (800ca84 <_svfiprintf_r+0x1ec>)
 800c9f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9f4:	f7fe fcf4 	bl	800b3e0 <memchr>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d038      	beq.n	800ca6e <_svfiprintf_r+0x1d6>
 800c9fc:	4b22      	ldr	r3, [pc, #136]	; (800ca88 <_svfiprintf_r+0x1f0>)
 800c9fe:	bb1b      	cbnz	r3, 800ca48 <_svfiprintf_r+0x1b0>
 800ca00:	9b03      	ldr	r3, [sp, #12]
 800ca02:	3307      	adds	r3, #7
 800ca04:	f023 0307 	bic.w	r3, r3, #7
 800ca08:	3308      	adds	r3, #8
 800ca0a:	9303      	str	r3, [sp, #12]
 800ca0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0e:	4433      	add	r3, r6
 800ca10:	9309      	str	r3, [sp, #36]	; 0x24
 800ca12:	e768      	b.n	800c8e6 <_svfiprintf_r+0x4e>
 800ca14:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca18:	460c      	mov	r4, r1
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	e7a6      	b.n	800c96c <_svfiprintf_r+0xd4>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	3401      	adds	r4, #1
 800ca22:	f04f 0c0a 	mov.w	ip, #10
 800ca26:	4619      	mov	r1, r3
 800ca28:	9305      	str	r3, [sp, #20]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca30:	3a30      	subs	r2, #48	; 0x30
 800ca32:	2a09      	cmp	r2, #9
 800ca34:	d903      	bls.n	800ca3e <_svfiprintf_r+0x1a6>
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d0c6      	beq.n	800c9c8 <_svfiprintf_r+0x130>
 800ca3a:	9105      	str	r1, [sp, #20]
 800ca3c:	e7c4      	b.n	800c9c8 <_svfiprintf_r+0x130>
 800ca3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca42:	4604      	mov	r4, r0
 800ca44:	2301      	movs	r3, #1
 800ca46:	e7f0      	b.n	800ca2a <_svfiprintf_r+0x192>
 800ca48:	ab03      	add	r3, sp, #12
 800ca4a:	462a      	mov	r2, r5
 800ca4c:	a904      	add	r1, sp, #16
 800ca4e:	4638      	mov	r0, r7
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	4b0e      	ldr	r3, [pc, #56]	; (800ca8c <_svfiprintf_r+0x1f4>)
 800ca54:	f7fc ff26 	bl	80098a4 <_printf_float>
 800ca58:	1c42      	adds	r2, r0, #1
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	d1d6      	bne.n	800ca0c <_svfiprintf_r+0x174>
 800ca5e:	89ab      	ldrh	r3, [r5, #12]
 800ca60:	065b      	lsls	r3, r3, #25
 800ca62:	f53f af2d 	bmi.w	800c8c0 <_svfiprintf_r+0x28>
 800ca66:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca68:	b01d      	add	sp, #116	; 0x74
 800ca6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6e:	ab03      	add	r3, sp, #12
 800ca70:	462a      	mov	r2, r5
 800ca72:	a904      	add	r1, sp, #16
 800ca74:	4638      	mov	r0, r7
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	4b04      	ldr	r3, [pc, #16]	; (800ca8c <_svfiprintf_r+0x1f4>)
 800ca7a:	f7fd f9bb 	bl	8009df4 <_printf_i>
 800ca7e:	e7eb      	b.n	800ca58 <_svfiprintf_r+0x1c0>
 800ca80:	0800e2fe 	.word	0x0800e2fe
 800ca84:	0800e308 	.word	0x0800e308
 800ca88:	080098a5 	.word	0x080098a5
 800ca8c:	0800c7e3 	.word	0x0800c7e3
 800ca90:	0800e304 	.word	0x0800e304

0800ca94 <__sfputc_r>:
 800ca94:	6893      	ldr	r3, [r2, #8]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	6093      	str	r3, [r2, #8]
 800ca9c:	b410      	push	{r4}
 800ca9e:	da08      	bge.n	800cab2 <__sfputc_r+0x1e>
 800caa0:	6994      	ldr	r4, [r2, #24]
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	db01      	blt.n	800caaa <__sfputc_r+0x16>
 800caa6:	290a      	cmp	r1, #10
 800caa8:	d103      	bne.n	800cab2 <__sfputc_r+0x1e>
 800caaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800caae:	f000 bfd2 	b.w	800da56 <__swbuf_r>
 800cab2:	6813      	ldr	r3, [r2, #0]
 800cab4:	1c58      	adds	r0, r3, #1
 800cab6:	6010      	str	r0, [r2, #0]
 800cab8:	4608      	mov	r0, r1
 800caba:	7019      	strb	r1, [r3, #0]
 800cabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cac0:	4770      	bx	lr

0800cac2 <__sfputs_r>:
 800cac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cac4:	4606      	mov	r6, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	4614      	mov	r4, r2
 800caca:	18d5      	adds	r5, r2, r3
 800cacc:	42ac      	cmp	r4, r5
 800cace:	d101      	bne.n	800cad4 <__sfputs_r+0x12>
 800cad0:	2000      	movs	r0, #0
 800cad2:	e007      	b.n	800cae4 <__sfputs_r+0x22>
 800cad4:	463a      	mov	r2, r7
 800cad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cada:	4630      	mov	r0, r6
 800cadc:	f7ff ffda 	bl	800ca94 <__sfputc_r>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d1f3      	bne.n	800cacc <__sfputs_r+0xa>
 800cae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cae8 <_vfiprintf_r>:
 800cae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caec:	460d      	mov	r5, r1
 800caee:	b09d      	sub	sp, #116	; 0x74
 800caf0:	4614      	mov	r4, r2
 800caf2:	4698      	mov	r8, r3
 800caf4:	4606      	mov	r6, r0
 800caf6:	b118      	cbz	r0, 800cb00 <_vfiprintf_r+0x18>
 800caf8:	6a03      	ldr	r3, [r0, #32]
 800cafa:	b90b      	cbnz	r3, 800cb00 <_vfiprintf_r+0x18>
 800cafc:	f7fd fd44 	bl	800a588 <__sinit>
 800cb00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb02:	07d9      	lsls	r1, r3, #31
 800cb04:	d405      	bmi.n	800cb12 <_vfiprintf_r+0x2a>
 800cb06:	89ab      	ldrh	r3, [r5, #12]
 800cb08:	059a      	lsls	r2, r3, #22
 800cb0a:	d402      	bmi.n	800cb12 <_vfiprintf_r+0x2a>
 800cb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb0e:	f7fe fc65 	bl	800b3dc <__retarget_lock_acquire_recursive>
 800cb12:	89ab      	ldrh	r3, [r5, #12]
 800cb14:	071b      	lsls	r3, r3, #28
 800cb16:	d501      	bpl.n	800cb1c <_vfiprintf_r+0x34>
 800cb18:	692b      	ldr	r3, [r5, #16]
 800cb1a:	b99b      	cbnz	r3, 800cb44 <_vfiprintf_r+0x5c>
 800cb1c:	4629      	mov	r1, r5
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f000 ffd6 	bl	800dad0 <__swsetup_r>
 800cb24:	b170      	cbz	r0, 800cb44 <_vfiprintf_r+0x5c>
 800cb26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb28:	07dc      	lsls	r4, r3, #31
 800cb2a:	d504      	bpl.n	800cb36 <_vfiprintf_r+0x4e>
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb30:	b01d      	add	sp, #116	; 0x74
 800cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb36:	89ab      	ldrh	r3, [r5, #12]
 800cb38:	0598      	lsls	r0, r3, #22
 800cb3a:	d4f7      	bmi.n	800cb2c <_vfiprintf_r+0x44>
 800cb3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb3e:	f7fe fc4e 	bl	800b3de <__retarget_lock_release_recursive>
 800cb42:	e7f3      	b.n	800cb2c <_vfiprintf_r+0x44>
 800cb44:	2300      	movs	r3, #0
 800cb46:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb4a:	f04f 0901 	mov.w	r9, #1
 800cb4e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800cd08 <_vfiprintf_r+0x220>
 800cb52:	9309      	str	r3, [sp, #36]	; 0x24
 800cb54:	2320      	movs	r3, #32
 800cb56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb5a:	2330      	movs	r3, #48	; 0x30
 800cb5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb60:	4623      	mov	r3, r4
 800cb62:	469a      	mov	sl, r3
 800cb64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb68:	b10a      	cbz	r2, 800cb6e <_vfiprintf_r+0x86>
 800cb6a:	2a25      	cmp	r2, #37	; 0x25
 800cb6c:	d1f9      	bne.n	800cb62 <_vfiprintf_r+0x7a>
 800cb6e:	ebba 0b04 	subs.w	fp, sl, r4
 800cb72:	d00b      	beq.n	800cb8c <_vfiprintf_r+0xa4>
 800cb74:	465b      	mov	r3, fp
 800cb76:	4622      	mov	r2, r4
 800cb78:	4629      	mov	r1, r5
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f7ff ffa1 	bl	800cac2 <__sfputs_r>
 800cb80:	3001      	adds	r0, #1
 800cb82:	f000 80a9 	beq.w	800ccd8 <_vfiprintf_r+0x1f0>
 800cb86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb88:	445a      	add	r2, fp
 800cb8a:	9209      	str	r2, [sp, #36]	; 0x24
 800cb8c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	f000 80a1 	beq.w	800ccd8 <_vfiprintf_r+0x1f0>
 800cb96:	2300      	movs	r3, #0
 800cb98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb9c:	f10a 0a01 	add.w	sl, sl, #1
 800cba0:	9304      	str	r3, [sp, #16]
 800cba2:	9307      	str	r3, [sp, #28]
 800cba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cba8:	931a      	str	r3, [sp, #104]	; 0x68
 800cbaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbae:	4654      	mov	r4, sl
 800cbb0:	2205      	movs	r2, #5
 800cbb2:	4855      	ldr	r0, [pc, #340]	; (800cd08 <_vfiprintf_r+0x220>)
 800cbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb8:	f7fe fc12 	bl	800b3e0 <memchr>
 800cbbc:	9a04      	ldr	r2, [sp, #16]
 800cbbe:	b9d8      	cbnz	r0, 800cbf8 <_vfiprintf_r+0x110>
 800cbc0:	06d1      	lsls	r1, r2, #27
 800cbc2:	bf44      	itt	mi
 800cbc4:	2320      	movmi	r3, #32
 800cbc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbca:	0713      	lsls	r3, r2, #28
 800cbcc:	bf44      	itt	mi
 800cbce:	232b      	movmi	r3, #43	; 0x2b
 800cbd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbd4:	f89a 3000 	ldrb.w	r3, [sl]
 800cbd8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbda:	d015      	beq.n	800cc08 <_vfiprintf_r+0x120>
 800cbdc:	9a07      	ldr	r2, [sp, #28]
 800cbde:	4654      	mov	r4, sl
 800cbe0:	2000      	movs	r0, #0
 800cbe2:	f04f 0c0a 	mov.w	ip, #10
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbec:	3b30      	subs	r3, #48	; 0x30
 800cbee:	2b09      	cmp	r3, #9
 800cbf0:	d94d      	bls.n	800cc8e <_vfiprintf_r+0x1a6>
 800cbf2:	b1b0      	cbz	r0, 800cc22 <_vfiprintf_r+0x13a>
 800cbf4:	9207      	str	r2, [sp, #28]
 800cbf6:	e014      	b.n	800cc22 <_vfiprintf_r+0x13a>
 800cbf8:	eba0 0308 	sub.w	r3, r0, r8
 800cbfc:	46a2      	mov	sl, r4
 800cbfe:	fa09 f303 	lsl.w	r3, r9, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	9304      	str	r3, [sp, #16]
 800cc06:	e7d2      	b.n	800cbae <_vfiprintf_r+0xc6>
 800cc08:	9b03      	ldr	r3, [sp, #12]
 800cc0a:	1d19      	adds	r1, r3, #4
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	9103      	str	r1, [sp, #12]
 800cc12:	bfbb      	ittet	lt
 800cc14:	425b      	neglt	r3, r3
 800cc16:	f042 0202 	orrlt.w	r2, r2, #2
 800cc1a:	9307      	strge	r3, [sp, #28]
 800cc1c:	9307      	strlt	r3, [sp, #28]
 800cc1e:	bfb8      	it	lt
 800cc20:	9204      	strlt	r2, [sp, #16]
 800cc22:	7823      	ldrb	r3, [r4, #0]
 800cc24:	2b2e      	cmp	r3, #46	; 0x2e
 800cc26:	d10c      	bne.n	800cc42 <_vfiprintf_r+0x15a>
 800cc28:	7863      	ldrb	r3, [r4, #1]
 800cc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2c:	d134      	bne.n	800cc98 <_vfiprintf_r+0x1b0>
 800cc2e:	9b03      	ldr	r3, [sp, #12]
 800cc30:	3402      	adds	r4, #2
 800cc32:	1d1a      	adds	r2, r3, #4
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	9203      	str	r2, [sp, #12]
 800cc3a:	bfb8      	it	lt
 800cc3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc40:	9305      	str	r3, [sp, #20]
 800cc42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800cd18 <_vfiprintf_r+0x230>
 800cc46:	2203      	movs	r2, #3
 800cc48:	7821      	ldrb	r1, [r4, #0]
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	f7fe fbc8 	bl	800b3e0 <memchr>
 800cc50:	b138      	cbz	r0, 800cc62 <_vfiprintf_r+0x17a>
 800cc52:	eba0 000a 	sub.w	r0, r0, sl
 800cc56:	2240      	movs	r2, #64	; 0x40
 800cc58:	9b04      	ldr	r3, [sp, #16]
 800cc5a:	3401      	adds	r4, #1
 800cc5c:	4082      	lsls	r2, r0
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc66:	2206      	movs	r2, #6
 800cc68:	4828      	ldr	r0, [pc, #160]	; (800cd0c <_vfiprintf_r+0x224>)
 800cc6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc6e:	f7fe fbb7 	bl	800b3e0 <memchr>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d03f      	beq.n	800ccf6 <_vfiprintf_r+0x20e>
 800cc76:	4b26      	ldr	r3, [pc, #152]	; (800cd10 <_vfiprintf_r+0x228>)
 800cc78:	bb1b      	cbnz	r3, 800ccc2 <_vfiprintf_r+0x1da>
 800cc7a:	9b03      	ldr	r3, [sp, #12]
 800cc7c:	3307      	adds	r3, #7
 800cc7e:	f023 0307 	bic.w	r3, r3, #7
 800cc82:	3308      	adds	r3, #8
 800cc84:	9303      	str	r3, [sp, #12]
 800cc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc88:	443b      	add	r3, r7
 800cc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cc8c:	e768      	b.n	800cb60 <_vfiprintf_r+0x78>
 800cc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc92:	460c      	mov	r4, r1
 800cc94:	2001      	movs	r0, #1
 800cc96:	e7a6      	b.n	800cbe6 <_vfiprintf_r+0xfe>
 800cc98:	2300      	movs	r3, #0
 800cc9a:	3401      	adds	r4, #1
 800cc9c:	f04f 0c0a 	mov.w	ip, #10
 800cca0:	4619      	mov	r1, r3
 800cca2:	9305      	str	r3, [sp, #20]
 800cca4:	4620      	mov	r0, r4
 800cca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccaa:	3a30      	subs	r2, #48	; 0x30
 800ccac:	2a09      	cmp	r2, #9
 800ccae:	d903      	bls.n	800ccb8 <_vfiprintf_r+0x1d0>
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0c6      	beq.n	800cc42 <_vfiprintf_r+0x15a>
 800ccb4:	9105      	str	r1, [sp, #20]
 800ccb6:	e7c4      	b.n	800cc42 <_vfiprintf_r+0x15a>
 800ccb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e7f0      	b.n	800cca4 <_vfiprintf_r+0x1bc>
 800ccc2:	ab03      	add	r3, sp, #12
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	a904      	add	r1, sp, #16
 800ccc8:	4630      	mov	r0, r6
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <_vfiprintf_r+0x22c>)
 800ccce:	f7fc fde9 	bl	80098a4 <_printf_float>
 800ccd2:	4607      	mov	r7, r0
 800ccd4:	1c78      	adds	r0, r7, #1
 800ccd6:	d1d6      	bne.n	800cc86 <_vfiprintf_r+0x19e>
 800ccd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccda:	07d9      	lsls	r1, r3, #31
 800ccdc:	d405      	bmi.n	800ccea <_vfiprintf_r+0x202>
 800ccde:	89ab      	ldrh	r3, [r5, #12]
 800cce0:	059a      	lsls	r2, r3, #22
 800cce2:	d402      	bmi.n	800ccea <_vfiprintf_r+0x202>
 800cce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cce6:	f7fe fb7a 	bl	800b3de <__retarget_lock_release_recursive>
 800ccea:	89ab      	ldrh	r3, [r5, #12]
 800ccec:	065b      	lsls	r3, r3, #25
 800ccee:	f53f af1d 	bmi.w	800cb2c <_vfiprintf_r+0x44>
 800ccf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccf4:	e71c      	b.n	800cb30 <_vfiprintf_r+0x48>
 800ccf6:	ab03      	add	r3, sp, #12
 800ccf8:	462a      	mov	r2, r5
 800ccfa:	a904      	add	r1, sp, #16
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	4b04      	ldr	r3, [pc, #16]	; (800cd14 <_vfiprintf_r+0x22c>)
 800cd02:	f7fd f877 	bl	8009df4 <_printf_i>
 800cd06:	e7e4      	b.n	800ccd2 <_vfiprintf_r+0x1ea>
 800cd08:	0800e2fe 	.word	0x0800e2fe
 800cd0c:	0800e308 	.word	0x0800e308
 800cd10:	080098a5 	.word	0x080098a5
 800cd14:	0800cac3 	.word	0x0800cac3
 800cd18:	0800e304 	.word	0x0800e304

0800cd1c <malloc>:
 800cd1c:	4b02      	ldr	r3, [pc, #8]	; (800cd28 <malloc+0xc>)
 800cd1e:	4601      	mov	r1, r0
 800cd20:	6818      	ldr	r0, [r3, #0]
 800cd22:	f000 b823 	b.w	800cd6c <_malloc_r>
 800cd26:	bf00      	nop
 800cd28:	200001d0 	.word	0x200001d0

0800cd2c <sbrk_aligned>:
 800cd2c:	b570      	push	{r4, r5, r6, lr}
 800cd2e:	4e0e      	ldr	r6, [pc, #56]	; (800cd68 <sbrk_aligned+0x3c>)
 800cd30:	460c      	mov	r4, r1
 800cd32:	4605      	mov	r5, r0
 800cd34:	6831      	ldr	r1, [r6, #0]
 800cd36:	b911      	cbnz	r1, 800cd3e <sbrk_aligned+0x12>
 800cd38:	f001 f800 	bl	800dd3c <_sbrk_r>
 800cd3c:	6030      	str	r0, [r6, #0]
 800cd3e:	4621      	mov	r1, r4
 800cd40:	4628      	mov	r0, r5
 800cd42:	f000 fffb 	bl	800dd3c <_sbrk_r>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	d00a      	beq.n	800cd60 <sbrk_aligned+0x34>
 800cd4a:	1cc4      	adds	r4, r0, #3
 800cd4c:	f024 0403 	bic.w	r4, r4, #3
 800cd50:	42a0      	cmp	r0, r4
 800cd52:	d007      	beq.n	800cd64 <sbrk_aligned+0x38>
 800cd54:	1a21      	subs	r1, r4, r0
 800cd56:	4628      	mov	r0, r5
 800cd58:	f000 fff0 	bl	800dd3c <_sbrk_r>
 800cd5c:	3001      	adds	r0, #1
 800cd5e:	d101      	bne.n	800cd64 <sbrk_aligned+0x38>
 800cd60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cd64:	4620      	mov	r0, r4
 800cd66:	bd70      	pop	{r4, r5, r6, pc}
 800cd68:	20000424 	.word	0x20000424

0800cd6c <_malloc_r>:
 800cd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd70:	1ccd      	adds	r5, r1, #3
 800cd72:	4607      	mov	r7, r0
 800cd74:	f025 0503 	bic.w	r5, r5, #3
 800cd78:	3508      	adds	r5, #8
 800cd7a:	2d0c      	cmp	r5, #12
 800cd7c:	bf38      	it	cc
 800cd7e:	250c      	movcc	r5, #12
 800cd80:	2d00      	cmp	r5, #0
 800cd82:	db01      	blt.n	800cd88 <_malloc_r+0x1c>
 800cd84:	42a9      	cmp	r1, r5
 800cd86:	d905      	bls.n	800cd94 <_malloc_r+0x28>
 800cd88:	230c      	movs	r3, #12
 800cd8a:	2600      	movs	r6, #0
 800cd8c:	603b      	str	r3, [r7, #0]
 800cd8e:	4630      	mov	r0, r6
 800cd90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce68 <_malloc_r+0xfc>
 800cd98:	f000 f926 	bl	800cfe8 <__malloc_lock>
 800cd9c:	f8d8 3000 	ldr.w	r3, [r8]
 800cda0:	461c      	mov	r4, r3
 800cda2:	bb5c      	cbnz	r4, 800cdfc <_malloc_r+0x90>
 800cda4:	4629      	mov	r1, r5
 800cda6:	4638      	mov	r0, r7
 800cda8:	f7ff ffc0 	bl	800cd2c <sbrk_aligned>
 800cdac:	1c43      	adds	r3, r0, #1
 800cdae:	4604      	mov	r4, r0
 800cdb0:	d155      	bne.n	800ce5e <_malloc_r+0xf2>
 800cdb2:	f8d8 4000 	ldr.w	r4, [r8]
 800cdb6:	4626      	mov	r6, r4
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	d145      	bne.n	800ce48 <_malloc_r+0xdc>
 800cdbc:	2c00      	cmp	r4, #0
 800cdbe:	d048      	beq.n	800ce52 <_malloc_r+0xe6>
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	eb04 0903 	add.w	r9, r4, r3
 800cdca:	f000 ffb7 	bl	800dd3c <_sbrk_r>
 800cdce:	4581      	cmp	r9, r0
 800cdd0:	d13f      	bne.n	800ce52 <_malloc_r+0xe6>
 800cdd2:	6821      	ldr	r1, [r4, #0]
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	1a6d      	subs	r5, r5, r1
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7ff ffa7 	bl	800cd2c <sbrk_aligned>
 800cdde:	3001      	adds	r0, #1
 800cde0:	d037      	beq.n	800ce52 <_malloc_r+0xe6>
 800cde2:	6823      	ldr	r3, [r4, #0]
 800cde4:	442b      	add	r3, r5
 800cde6:	6023      	str	r3, [r4, #0]
 800cde8:	f8d8 3000 	ldr.w	r3, [r8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d038      	beq.n	800ce62 <_malloc_r+0xf6>
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	42a2      	cmp	r2, r4
 800cdf4:	d12b      	bne.n	800ce4e <_malloc_r+0xe2>
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	605a      	str	r2, [r3, #4]
 800cdfa:	e00f      	b.n	800ce1c <_malloc_r+0xb0>
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	1b52      	subs	r2, r2, r5
 800ce00:	d41f      	bmi.n	800ce42 <_malloc_r+0xd6>
 800ce02:	2a0b      	cmp	r2, #11
 800ce04:	d917      	bls.n	800ce36 <_malloc_r+0xca>
 800ce06:	1961      	adds	r1, r4, r5
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	6025      	str	r5, [r4, #0]
 800ce0c:	bf18      	it	ne
 800ce0e:	6059      	strne	r1, [r3, #4]
 800ce10:	6863      	ldr	r3, [r4, #4]
 800ce12:	bf08      	it	eq
 800ce14:	f8c8 1000 	streq.w	r1, [r8]
 800ce18:	5162      	str	r2, [r4, r5]
 800ce1a:	604b      	str	r3, [r1, #4]
 800ce1c:	f104 060b 	add.w	r6, r4, #11
 800ce20:	4638      	mov	r0, r7
 800ce22:	f000 f8e7 	bl	800cff4 <__malloc_unlock>
 800ce26:	1d23      	adds	r3, r4, #4
 800ce28:	f026 0607 	bic.w	r6, r6, #7
 800ce2c:	1af2      	subs	r2, r6, r3
 800ce2e:	d0ae      	beq.n	800cd8e <_malloc_r+0x22>
 800ce30:	1b9b      	subs	r3, r3, r6
 800ce32:	50a3      	str	r3, [r4, r2]
 800ce34:	e7ab      	b.n	800cd8e <_malloc_r+0x22>
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	6862      	ldr	r2, [r4, #4]
 800ce3a:	d1dd      	bne.n	800cdf8 <_malloc_r+0x8c>
 800ce3c:	f8c8 2000 	str.w	r2, [r8]
 800ce40:	e7ec      	b.n	800ce1c <_malloc_r+0xb0>
 800ce42:	4623      	mov	r3, r4
 800ce44:	6864      	ldr	r4, [r4, #4]
 800ce46:	e7ac      	b.n	800cda2 <_malloc_r+0x36>
 800ce48:	4634      	mov	r4, r6
 800ce4a:	6876      	ldr	r6, [r6, #4]
 800ce4c:	e7b4      	b.n	800cdb8 <_malloc_r+0x4c>
 800ce4e:	4613      	mov	r3, r2
 800ce50:	e7cc      	b.n	800cdec <_malloc_r+0x80>
 800ce52:	230c      	movs	r3, #12
 800ce54:	4638      	mov	r0, r7
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	f000 f8cc 	bl	800cff4 <__malloc_unlock>
 800ce5c:	e797      	b.n	800cd8e <_malloc_r+0x22>
 800ce5e:	6025      	str	r5, [r4, #0]
 800ce60:	e7dc      	b.n	800ce1c <_malloc_r+0xb0>
 800ce62:	605b      	str	r3, [r3, #4]
 800ce64:	deff      	udf	#255	; 0xff
 800ce66:	bf00      	nop
 800ce68:	20000420 	.word	0x20000420

0800ce6c <__ascii_mbtowc>:
 800ce6c:	b082      	sub	sp, #8
 800ce6e:	b901      	cbnz	r1, 800ce72 <__ascii_mbtowc+0x6>
 800ce70:	a901      	add	r1, sp, #4
 800ce72:	b142      	cbz	r2, 800ce86 <__ascii_mbtowc+0x1a>
 800ce74:	b14b      	cbz	r3, 800ce8a <__ascii_mbtowc+0x1e>
 800ce76:	7813      	ldrb	r3, [r2, #0]
 800ce78:	600b      	str	r3, [r1, #0]
 800ce7a:	7812      	ldrb	r2, [r2, #0]
 800ce7c:	1e10      	subs	r0, r2, #0
 800ce7e:	bf18      	it	ne
 800ce80:	2001      	movne	r0, #1
 800ce82:	b002      	add	sp, #8
 800ce84:	4770      	bx	lr
 800ce86:	4610      	mov	r0, r2
 800ce88:	e7fb      	b.n	800ce82 <__ascii_mbtowc+0x16>
 800ce8a:	f06f 0001 	mvn.w	r0, #1
 800ce8e:	e7f8      	b.n	800ce82 <__ascii_mbtowc+0x16>

0800ce90 <__sflush_r>:
 800ce90:	898a      	ldrh	r2, [r1, #12]
 800ce92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce96:	4605      	mov	r5, r0
 800ce98:	0710      	lsls	r0, r2, #28
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	d458      	bmi.n	800cf50 <__sflush_r+0xc0>
 800ce9e:	684b      	ldr	r3, [r1, #4]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dc05      	bgt.n	800ceb0 <__sflush_r+0x20>
 800cea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	dc02      	bgt.n	800ceb0 <__sflush_r+0x20>
 800ceaa:	2000      	movs	r0, #0
 800ceac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ceb2:	2e00      	cmp	r6, #0
 800ceb4:	d0f9      	beq.n	800ceaa <__sflush_r+0x1a>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cebc:	682f      	ldr	r7, [r5, #0]
 800cebe:	6a21      	ldr	r1, [r4, #32]
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	d032      	beq.n	800cf2a <__sflush_r+0x9a>
 800cec4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cec6:	89a3      	ldrh	r3, [r4, #12]
 800cec8:	075a      	lsls	r2, r3, #29
 800ceca:	d505      	bpl.n	800ced8 <__sflush_r+0x48>
 800cecc:	6863      	ldr	r3, [r4, #4]
 800cece:	1ac0      	subs	r0, r0, r3
 800ced0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ced2:	b10b      	cbz	r3, 800ced8 <__sflush_r+0x48>
 800ced4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ced6:	1ac0      	subs	r0, r0, r3
 800ced8:	2300      	movs	r3, #0
 800ceda:	4602      	mov	r2, r0
 800cedc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cede:	4628      	mov	r0, r5
 800cee0:	6a21      	ldr	r1, [r4, #32]
 800cee2:	47b0      	blx	r6
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	89a3      	ldrh	r3, [r4, #12]
 800cee8:	d106      	bne.n	800cef8 <__sflush_r+0x68>
 800ceea:	6829      	ldr	r1, [r5, #0]
 800ceec:	291d      	cmp	r1, #29
 800ceee:	d82b      	bhi.n	800cf48 <__sflush_r+0xb8>
 800cef0:	4a28      	ldr	r2, [pc, #160]	; (800cf94 <__sflush_r+0x104>)
 800cef2:	410a      	asrs	r2, r1
 800cef4:	07d6      	lsls	r6, r2, #31
 800cef6:	d427      	bmi.n	800cf48 <__sflush_r+0xb8>
 800cef8:	2200      	movs	r2, #0
 800cefa:	04d9      	lsls	r1, r3, #19
 800cefc:	6062      	str	r2, [r4, #4]
 800cefe:	6922      	ldr	r2, [r4, #16]
 800cf00:	6022      	str	r2, [r4, #0]
 800cf02:	d504      	bpl.n	800cf0e <__sflush_r+0x7e>
 800cf04:	1c42      	adds	r2, r0, #1
 800cf06:	d101      	bne.n	800cf0c <__sflush_r+0x7c>
 800cf08:	682b      	ldr	r3, [r5, #0]
 800cf0a:	b903      	cbnz	r3, 800cf0e <__sflush_r+0x7e>
 800cf0c:	6560      	str	r0, [r4, #84]	; 0x54
 800cf0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf10:	602f      	str	r7, [r5, #0]
 800cf12:	2900      	cmp	r1, #0
 800cf14:	d0c9      	beq.n	800ceaa <__sflush_r+0x1a>
 800cf16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf1a:	4299      	cmp	r1, r3
 800cf1c:	d002      	beq.n	800cf24 <__sflush_r+0x94>
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f000 ff62 	bl	800dde8 <_free_r>
 800cf24:	2000      	movs	r0, #0
 800cf26:	6360      	str	r0, [r4, #52]	; 0x34
 800cf28:	e7c0      	b.n	800ceac <__sflush_r+0x1c>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	47b0      	blx	r6
 800cf30:	1c41      	adds	r1, r0, #1
 800cf32:	d1c8      	bne.n	800cec6 <__sflush_r+0x36>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d0c5      	beq.n	800cec6 <__sflush_r+0x36>
 800cf3a:	2b1d      	cmp	r3, #29
 800cf3c:	d001      	beq.n	800cf42 <__sflush_r+0xb2>
 800cf3e:	2b16      	cmp	r3, #22
 800cf40:	d101      	bne.n	800cf46 <__sflush_r+0xb6>
 800cf42:	602f      	str	r7, [r5, #0]
 800cf44:	e7b1      	b.n	800ceaa <__sflush_r+0x1a>
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf4c:	81a3      	strh	r3, [r4, #12]
 800cf4e:	e7ad      	b.n	800ceac <__sflush_r+0x1c>
 800cf50:	690f      	ldr	r7, [r1, #16]
 800cf52:	2f00      	cmp	r7, #0
 800cf54:	d0a9      	beq.n	800ceaa <__sflush_r+0x1a>
 800cf56:	0793      	lsls	r3, r2, #30
 800cf58:	680e      	ldr	r6, [r1, #0]
 800cf5a:	600f      	str	r7, [r1, #0]
 800cf5c:	bf0c      	ite	eq
 800cf5e:	694b      	ldreq	r3, [r1, #20]
 800cf60:	2300      	movne	r3, #0
 800cf62:	eba6 0807 	sub.w	r8, r6, r7
 800cf66:	608b      	str	r3, [r1, #8]
 800cf68:	f1b8 0f00 	cmp.w	r8, #0
 800cf6c:	dd9d      	ble.n	800ceaa <__sflush_r+0x1a>
 800cf6e:	4643      	mov	r3, r8
 800cf70:	463a      	mov	r2, r7
 800cf72:	6a21      	ldr	r1, [r4, #32]
 800cf74:	4628      	mov	r0, r5
 800cf76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cf78:	47b0      	blx	r6
 800cf7a:	2800      	cmp	r0, #0
 800cf7c:	dc06      	bgt.n	800cf8c <__sflush_r+0xfc>
 800cf7e:	89a3      	ldrh	r3, [r4, #12]
 800cf80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf88:	81a3      	strh	r3, [r4, #12]
 800cf8a:	e78f      	b.n	800ceac <__sflush_r+0x1c>
 800cf8c:	4407      	add	r7, r0
 800cf8e:	eba8 0800 	sub.w	r8, r8, r0
 800cf92:	e7e9      	b.n	800cf68 <__sflush_r+0xd8>
 800cf94:	dfbffffe 	.word	0xdfbffffe

0800cf98 <_fflush_r>:
 800cf98:	b538      	push	{r3, r4, r5, lr}
 800cf9a:	690b      	ldr	r3, [r1, #16]
 800cf9c:	4605      	mov	r5, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	b913      	cbnz	r3, 800cfa8 <_fflush_r+0x10>
 800cfa2:	2500      	movs	r5, #0
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	bd38      	pop	{r3, r4, r5, pc}
 800cfa8:	b118      	cbz	r0, 800cfb2 <_fflush_r+0x1a>
 800cfaa:	6a03      	ldr	r3, [r0, #32]
 800cfac:	b90b      	cbnz	r3, 800cfb2 <_fflush_r+0x1a>
 800cfae:	f7fd faeb 	bl	800a588 <__sinit>
 800cfb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d0f3      	beq.n	800cfa2 <_fflush_r+0xa>
 800cfba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cfbc:	07d0      	lsls	r0, r2, #31
 800cfbe:	d404      	bmi.n	800cfca <_fflush_r+0x32>
 800cfc0:	0599      	lsls	r1, r3, #22
 800cfc2:	d402      	bmi.n	800cfca <_fflush_r+0x32>
 800cfc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfc6:	f7fe fa09 	bl	800b3dc <__retarget_lock_acquire_recursive>
 800cfca:	4628      	mov	r0, r5
 800cfcc:	4621      	mov	r1, r4
 800cfce:	f7ff ff5f 	bl	800ce90 <__sflush_r>
 800cfd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfd4:	4605      	mov	r5, r0
 800cfd6:	07da      	lsls	r2, r3, #31
 800cfd8:	d4e4      	bmi.n	800cfa4 <_fflush_r+0xc>
 800cfda:	89a3      	ldrh	r3, [r4, #12]
 800cfdc:	059b      	lsls	r3, r3, #22
 800cfde:	d4e1      	bmi.n	800cfa4 <_fflush_r+0xc>
 800cfe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfe2:	f7fe f9fc 	bl	800b3de <__retarget_lock_release_recursive>
 800cfe6:	e7dd      	b.n	800cfa4 <_fflush_r+0xc>

0800cfe8 <__malloc_lock>:
 800cfe8:	4801      	ldr	r0, [pc, #4]	; (800cff0 <__malloc_lock+0x8>)
 800cfea:	f7fe b9f7 	b.w	800b3dc <__retarget_lock_acquire_recursive>
 800cfee:	bf00      	nop
 800cff0:	2000041c 	.word	0x2000041c

0800cff4 <__malloc_unlock>:
 800cff4:	4801      	ldr	r0, [pc, #4]	; (800cffc <__malloc_unlock+0x8>)
 800cff6:	f7fe b9f2 	b.w	800b3de <__retarget_lock_release_recursive>
 800cffa:	bf00      	nop
 800cffc:	2000041c 	.word	0x2000041c

0800d000 <_Balloc>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	69c6      	ldr	r6, [r0, #28]
 800d004:	4604      	mov	r4, r0
 800d006:	460d      	mov	r5, r1
 800d008:	b976      	cbnz	r6, 800d028 <_Balloc+0x28>
 800d00a:	2010      	movs	r0, #16
 800d00c:	f7ff fe86 	bl	800cd1c <malloc>
 800d010:	4602      	mov	r2, r0
 800d012:	61e0      	str	r0, [r4, #28]
 800d014:	b920      	cbnz	r0, 800d020 <_Balloc+0x20>
 800d016:	4b18      	ldr	r3, [pc, #96]	; (800d078 <_Balloc+0x78>)
 800d018:	216b      	movs	r1, #107	; 0x6b
 800d01a:	4818      	ldr	r0, [pc, #96]	; (800d07c <_Balloc+0x7c>)
 800d01c:	f000 feb0 	bl	800dd80 <__assert_func>
 800d020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d024:	6006      	str	r6, [r0, #0]
 800d026:	60c6      	str	r6, [r0, #12]
 800d028:	69e6      	ldr	r6, [r4, #28]
 800d02a:	68f3      	ldr	r3, [r6, #12]
 800d02c:	b183      	cbz	r3, 800d050 <_Balloc+0x50>
 800d02e:	69e3      	ldr	r3, [r4, #28]
 800d030:	68db      	ldr	r3, [r3, #12]
 800d032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d036:	b9b8      	cbnz	r0, 800d068 <_Balloc+0x68>
 800d038:	2101      	movs	r1, #1
 800d03a:	4620      	mov	r0, r4
 800d03c:	fa01 f605 	lsl.w	r6, r1, r5
 800d040:	1d72      	adds	r2, r6, #5
 800d042:	0092      	lsls	r2, r2, #2
 800d044:	f000 feba 	bl	800ddbc <_calloc_r>
 800d048:	b160      	cbz	r0, 800d064 <_Balloc+0x64>
 800d04a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d04e:	e00e      	b.n	800d06e <_Balloc+0x6e>
 800d050:	2221      	movs	r2, #33	; 0x21
 800d052:	2104      	movs	r1, #4
 800d054:	4620      	mov	r0, r4
 800d056:	f000 feb1 	bl	800ddbc <_calloc_r>
 800d05a:	69e3      	ldr	r3, [r4, #28]
 800d05c:	60f0      	str	r0, [r6, #12]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e4      	bne.n	800d02e <_Balloc+0x2e>
 800d064:	2000      	movs	r0, #0
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	6802      	ldr	r2, [r0, #0]
 800d06a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d06e:	2300      	movs	r3, #0
 800d070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d074:	e7f7      	b.n	800d066 <_Balloc+0x66>
 800d076:	bf00      	nop
 800d078:	0800e21e 	.word	0x0800e21e
 800d07c:	0800e30f 	.word	0x0800e30f

0800d080 <_Bfree>:
 800d080:	b570      	push	{r4, r5, r6, lr}
 800d082:	69c6      	ldr	r6, [r0, #28]
 800d084:	4605      	mov	r5, r0
 800d086:	460c      	mov	r4, r1
 800d088:	b976      	cbnz	r6, 800d0a8 <_Bfree+0x28>
 800d08a:	2010      	movs	r0, #16
 800d08c:	f7ff fe46 	bl	800cd1c <malloc>
 800d090:	4602      	mov	r2, r0
 800d092:	61e8      	str	r0, [r5, #28]
 800d094:	b920      	cbnz	r0, 800d0a0 <_Bfree+0x20>
 800d096:	4b09      	ldr	r3, [pc, #36]	; (800d0bc <_Bfree+0x3c>)
 800d098:	218f      	movs	r1, #143	; 0x8f
 800d09a:	4809      	ldr	r0, [pc, #36]	; (800d0c0 <_Bfree+0x40>)
 800d09c:	f000 fe70 	bl	800dd80 <__assert_func>
 800d0a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d0a4:	6006      	str	r6, [r0, #0]
 800d0a6:	60c6      	str	r6, [r0, #12]
 800d0a8:	b13c      	cbz	r4, 800d0ba <_Bfree+0x3a>
 800d0aa:	69eb      	ldr	r3, [r5, #28]
 800d0ac:	6862      	ldr	r2, [r4, #4]
 800d0ae:	68db      	ldr	r3, [r3, #12]
 800d0b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0b4:	6021      	str	r1, [r4, #0]
 800d0b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0ba:	bd70      	pop	{r4, r5, r6, pc}
 800d0bc:	0800e21e 	.word	0x0800e21e
 800d0c0:	0800e30f 	.word	0x0800e30f

0800d0c4 <__multadd>:
 800d0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c8:	f101 0c14 	add.w	ip, r1, #20
 800d0cc:	4607      	mov	r7, r0
 800d0ce:	460c      	mov	r4, r1
 800d0d0:	461e      	mov	r6, r3
 800d0d2:	690d      	ldr	r5, [r1, #16]
 800d0d4:	2000      	movs	r0, #0
 800d0d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0da:	3001      	adds	r0, #1
 800d0dc:	b299      	uxth	r1, r3
 800d0de:	4285      	cmp	r5, r0
 800d0e0:	fb02 6101 	mla	r1, r2, r1, r6
 800d0e4:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0e8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800d0ec:	b289      	uxth	r1, r1
 800d0ee:	fb02 3306 	mla	r3, r2, r6, r3
 800d0f2:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0fa:	f84c 1b04 	str.w	r1, [ip], #4
 800d0fe:	dcea      	bgt.n	800d0d6 <__multadd+0x12>
 800d100:	b30e      	cbz	r6, 800d146 <__multadd+0x82>
 800d102:	68a3      	ldr	r3, [r4, #8]
 800d104:	42ab      	cmp	r3, r5
 800d106:	dc19      	bgt.n	800d13c <__multadd+0x78>
 800d108:	6861      	ldr	r1, [r4, #4]
 800d10a:	4638      	mov	r0, r7
 800d10c:	3101      	adds	r1, #1
 800d10e:	f7ff ff77 	bl	800d000 <_Balloc>
 800d112:	4680      	mov	r8, r0
 800d114:	b928      	cbnz	r0, 800d122 <__multadd+0x5e>
 800d116:	4602      	mov	r2, r0
 800d118:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <__multadd+0x88>)
 800d11a:	21ba      	movs	r1, #186	; 0xba
 800d11c:	480c      	ldr	r0, [pc, #48]	; (800d150 <__multadd+0x8c>)
 800d11e:	f000 fe2f 	bl	800dd80 <__assert_func>
 800d122:	6922      	ldr	r2, [r4, #16]
 800d124:	f104 010c 	add.w	r1, r4, #12
 800d128:	300c      	adds	r0, #12
 800d12a:	3202      	adds	r2, #2
 800d12c:	0092      	lsls	r2, r2, #2
 800d12e:	f7fe f965 	bl	800b3fc <memcpy>
 800d132:	4621      	mov	r1, r4
 800d134:	4644      	mov	r4, r8
 800d136:	4638      	mov	r0, r7
 800d138:	f7ff ffa2 	bl	800d080 <_Bfree>
 800d13c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d140:	3501      	adds	r5, #1
 800d142:	615e      	str	r6, [r3, #20]
 800d144:	6125      	str	r5, [r4, #16]
 800d146:	4620      	mov	r0, r4
 800d148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d14c:	0800e28d 	.word	0x0800e28d
 800d150:	0800e30f 	.word	0x0800e30f

0800d154 <__s2b>:
 800d154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d158:	4615      	mov	r5, r2
 800d15a:	461f      	mov	r7, r3
 800d15c:	2209      	movs	r2, #9
 800d15e:	3308      	adds	r3, #8
 800d160:	460c      	mov	r4, r1
 800d162:	4606      	mov	r6, r0
 800d164:	2100      	movs	r1, #0
 800d166:	fb93 f3f2 	sdiv	r3, r3, r2
 800d16a:	2201      	movs	r2, #1
 800d16c:	429a      	cmp	r2, r3
 800d16e:	db09      	blt.n	800d184 <__s2b+0x30>
 800d170:	4630      	mov	r0, r6
 800d172:	f7ff ff45 	bl	800d000 <_Balloc>
 800d176:	b940      	cbnz	r0, 800d18a <__s2b+0x36>
 800d178:	4602      	mov	r2, r0
 800d17a:	4b19      	ldr	r3, [pc, #100]	; (800d1e0 <__s2b+0x8c>)
 800d17c:	21d3      	movs	r1, #211	; 0xd3
 800d17e:	4819      	ldr	r0, [pc, #100]	; (800d1e4 <__s2b+0x90>)
 800d180:	f000 fdfe 	bl	800dd80 <__assert_func>
 800d184:	0052      	lsls	r2, r2, #1
 800d186:	3101      	adds	r1, #1
 800d188:	e7f0      	b.n	800d16c <__s2b+0x18>
 800d18a:	9b08      	ldr	r3, [sp, #32]
 800d18c:	2d09      	cmp	r5, #9
 800d18e:	6143      	str	r3, [r0, #20]
 800d190:	f04f 0301 	mov.w	r3, #1
 800d194:	6103      	str	r3, [r0, #16]
 800d196:	dd16      	ble.n	800d1c6 <__s2b+0x72>
 800d198:	f104 0909 	add.w	r9, r4, #9
 800d19c:	442c      	add	r4, r5
 800d19e:	46c8      	mov	r8, r9
 800d1a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d1a4:	4601      	mov	r1, r0
 800d1a6:	220a      	movs	r2, #10
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	3b30      	subs	r3, #48	; 0x30
 800d1ac:	f7ff ff8a 	bl	800d0c4 <__multadd>
 800d1b0:	45a0      	cmp	r8, r4
 800d1b2:	d1f5      	bne.n	800d1a0 <__s2b+0x4c>
 800d1b4:	f1a5 0408 	sub.w	r4, r5, #8
 800d1b8:	444c      	add	r4, r9
 800d1ba:	1b2d      	subs	r5, r5, r4
 800d1bc:	1963      	adds	r3, r4, r5
 800d1be:	42bb      	cmp	r3, r7
 800d1c0:	db04      	blt.n	800d1cc <__s2b+0x78>
 800d1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c6:	340a      	adds	r4, #10
 800d1c8:	2509      	movs	r5, #9
 800d1ca:	e7f6      	b.n	800d1ba <__s2b+0x66>
 800d1cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1d0:	4601      	mov	r1, r0
 800d1d2:	220a      	movs	r2, #10
 800d1d4:	4630      	mov	r0, r6
 800d1d6:	3b30      	subs	r3, #48	; 0x30
 800d1d8:	f7ff ff74 	bl	800d0c4 <__multadd>
 800d1dc:	e7ee      	b.n	800d1bc <__s2b+0x68>
 800d1de:	bf00      	nop
 800d1e0:	0800e28d 	.word	0x0800e28d
 800d1e4:	0800e30f 	.word	0x0800e30f

0800d1e8 <__hi0bits>:
 800d1e8:	0c03      	lsrs	r3, r0, #16
 800d1ea:	041b      	lsls	r3, r3, #16
 800d1ec:	b9d3      	cbnz	r3, 800d224 <__hi0bits+0x3c>
 800d1ee:	0400      	lsls	r0, r0, #16
 800d1f0:	2310      	movs	r3, #16
 800d1f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1f6:	bf04      	itt	eq
 800d1f8:	0200      	lsleq	r0, r0, #8
 800d1fa:	3308      	addeq	r3, #8
 800d1fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d200:	bf04      	itt	eq
 800d202:	0100      	lsleq	r0, r0, #4
 800d204:	3304      	addeq	r3, #4
 800d206:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d20a:	bf04      	itt	eq
 800d20c:	0080      	lsleq	r0, r0, #2
 800d20e:	3302      	addeq	r3, #2
 800d210:	2800      	cmp	r0, #0
 800d212:	db05      	blt.n	800d220 <__hi0bits+0x38>
 800d214:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d218:	f103 0301 	add.w	r3, r3, #1
 800d21c:	bf08      	it	eq
 800d21e:	2320      	moveq	r3, #32
 800d220:	4618      	mov	r0, r3
 800d222:	4770      	bx	lr
 800d224:	2300      	movs	r3, #0
 800d226:	e7e4      	b.n	800d1f2 <__hi0bits+0xa>

0800d228 <__lo0bits>:
 800d228:	6803      	ldr	r3, [r0, #0]
 800d22a:	f013 0207 	ands.w	r2, r3, #7
 800d22e:	d00c      	beq.n	800d24a <__lo0bits+0x22>
 800d230:	07d9      	lsls	r1, r3, #31
 800d232:	d422      	bmi.n	800d27a <__lo0bits+0x52>
 800d234:	079a      	lsls	r2, r3, #30
 800d236:	bf47      	ittee	mi
 800d238:	085b      	lsrmi	r3, r3, #1
 800d23a:	2201      	movmi	r2, #1
 800d23c:	089b      	lsrpl	r3, r3, #2
 800d23e:	2202      	movpl	r2, #2
 800d240:	bf4c      	ite	mi
 800d242:	6003      	strmi	r3, [r0, #0]
 800d244:	6003      	strpl	r3, [r0, #0]
 800d246:	4610      	mov	r0, r2
 800d248:	4770      	bx	lr
 800d24a:	b299      	uxth	r1, r3
 800d24c:	b909      	cbnz	r1, 800d252 <__lo0bits+0x2a>
 800d24e:	0c1b      	lsrs	r3, r3, #16
 800d250:	2210      	movs	r2, #16
 800d252:	b2d9      	uxtb	r1, r3
 800d254:	b909      	cbnz	r1, 800d25a <__lo0bits+0x32>
 800d256:	3208      	adds	r2, #8
 800d258:	0a1b      	lsrs	r3, r3, #8
 800d25a:	0719      	lsls	r1, r3, #28
 800d25c:	bf04      	itt	eq
 800d25e:	091b      	lsreq	r3, r3, #4
 800d260:	3204      	addeq	r2, #4
 800d262:	0799      	lsls	r1, r3, #30
 800d264:	bf04      	itt	eq
 800d266:	089b      	lsreq	r3, r3, #2
 800d268:	3202      	addeq	r2, #2
 800d26a:	07d9      	lsls	r1, r3, #31
 800d26c:	d403      	bmi.n	800d276 <__lo0bits+0x4e>
 800d26e:	085b      	lsrs	r3, r3, #1
 800d270:	f102 0201 	add.w	r2, r2, #1
 800d274:	d003      	beq.n	800d27e <__lo0bits+0x56>
 800d276:	6003      	str	r3, [r0, #0]
 800d278:	e7e5      	b.n	800d246 <__lo0bits+0x1e>
 800d27a:	2200      	movs	r2, #0
 800d27c:	e7e3      	b.n	800d246 <__lo0bits+0x1e>
 800d27e:	2220      	movs	r2, #32
 800d280:	e7e1      	b.n	800d246 <__lo0bits+0x1e>
	...

0800d284 <__i2b>:
 800d284:	b510      	push	{r4, lr}
 800d286:	460c      	mov	r4, r1
 800d288:	2101      	movs	r1, #1
 800d28a:	f7ff feb9 	bl	800d000 <_Balloc>
 800d28e:	4602      	mov	r2, r0
 800d290:	b928      	cbnz	r0, 800d29e <__i2b+0x1a>
 800d292:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <__i2b+0x24>)
 800d294:	f240 1145 	movw	r1, #325	; 0x145
 800d298:	4804      	ldr	r0, [pc, #16]	; (800d2ac <__i2b+0x28>)
 800d29a:	f000 fd71 	bl	800dd80 <__assert_func>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	6144      	str	r4, [r0, #20]
 800d2a2:	6103      	str	r3, [r0, #16]
 800d2a4:	bd10      	pop	{r4, pc}
 800d2a6:	bf00      	nop
 800d2a8:	0800e28d 	.word	0x0800e28d
 800d2ac:	0800e30f 	.word	0x0800e30f

0800d2b0 <__multiply>:
 800d2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2b4:	4691      	mov	r9, r2
 800d2b6:	690a      	ldr	r2, [r1, #16]
 800d2b8:	460c      	mov	r4, r1
 800d2ba:	b085      	sub	sp, #20
 800d2bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	bfbe      	ittt	lt
 800d2c4:	460b      	movlt	r3, r1
 800d2c6:	464c      	movlt	r4, r9
 800d2c8:	4699      	movlt	r9, r3
 800d2ca:	6927      	ldr	r7, [r4, #16]
 800d2cc:	68a3      	ldr	r3, [r4, #8]
 800d2ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2d2:	6861      	ldr	r1, [r4, #4]
 800d2d4:	eb07 060a 	add.w	r6, r7, sl
 800d2d8:	42b3      	cmp	r3, r6
 800d2da:	bfb8      	it	lt
 800d2dc:	3101      	addlt	r1, #1
 800d2de:	f7ff fe8f 	bl	800d000 <_Balloc>
 800d2e2:	b930      	cbnz	r0, 800d2f2 <__multiply+0x42>
 800d2e4:	4602      	mov	r2, r0
 800d2e6:	4b45      	ldr	r3, [pc, #276]	; (800d3fc <__multiply+0x14c>)
 800d2e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2ec:	4844      	ldr	r0, [pc, #272]	; (800d400 <__multiply+0x150>)
 800d2ee:	f000 fd47 	bl	800dd80 <__assert_func>
 800d2f2:	f100 0514 	add.w	r5, r0, #20
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2fc:	462b      	mov	r3, r5
 800d2fe:	4543      	cmp	r3, r8
 800d300:	d321      	bcc.n	800d346 <__multiply+0x96>
 800d302:	f104 0314 	add.w	r3, r4, #20
 800d306:	f104 0115 	add.w	r1, r4, #21
 800d30a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d30e:	f109 0314 	add.w	r3, r9, #20
 800d312:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d316:	9202      	str	r2, [sp, #8]
 800d318:	1b3a      	subs	r2, r7, r4
 800d31a:	3a15      	subs	r2, #21
 800d31c:	f022 0203 	bic.w	r2, r2, #3
 800d320:	3204      	adds	r2, #4
 800d322:	428f      	cmp	r7, r1
 800d324:	bf38      	it	cc
 800d326:	2204      	movcc	r2, #4
 800d328:	9201      	str	r2, [sp, #4]
 800d32a:	9a02      	ldr	r2, [sp, #8]
 800d32c:	9303      	str	r3, [sp, #12]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d80c      	bhi.n	800d34c <__multiply+0x9c>
 800d332:	2e00      	cmp	r6, #0
 800d334:	dd03      	ble.n	800d33e <__multiply+0x8e>
 800d336:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d05b      	beq.n	800d3f6 <__multiply+0x146>
 800d33e:	6106      	str	r6, [r0, #16]
 800d340:	b005      	add	sp, #20
 800d342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d346:	f843 2b04 	str.w	r2, [r3], #4
 800d34a:	e7d8      	b.n	800d2fe <__multiply+0x4e>
 800d34c:	f8b3 a000 	ldrh.w	sl, [r3]
 800d350:	f1ba 0f00 	cmp.w	sl, #0
 800d354:	d024      	beq.n	800d3a0 <__multiply+0xf0>
 800d356:	f104 0e14 	add.w	lr, r4, #20
 800d35a:	46a9      	mov	r9, r5
 800d35c:	f04f 0c00 	mov.w	ip, #0
 800d360:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d364:	f8d9 1000 	ldr.w	r1, [r9]
 800d368:	fa1f fb82 	uxth.w	fp, r2
 800d36c:	4577      	cmp	r7, lr
 800d36e:	b289      	uxth	r1, r1
 800d370:	fb0a 110b 	mla	r1, sl, fp, r1
 800d374:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d378:	f8d9 2000 	ldr.w	r2, [r9]
 800d37c:	4461      	add	r1, ip
 800d37e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d382:	fb0a c20b 	mla	r2, sl, fp, ip
 800d386:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d38a:	b289      	uxth	r1, r1
 800d38c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d394:	f849 1b04 	str.w	r1, [r9], #4
 800d398:	d8e2      	bhi.n	800d360 <__multiply+0xb0>
 800d39a:	9a01      	ldr	r2, [sp, #4]
 800d39c:	f845 c002 	str.w	ip, [r5, r2]
 800d3a0:	9a03      	ldr	r2, [sp, #12]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d3a8:	f1b9 0f00 	cmp.w	r9, #0
 800d3ac:	d021      	beq.n	800d3f2 <__multiply+0x142>
 800d3ae:	6829      	ldr	r1, [r5, #0]
 800d3b0:	f104 0c14 	add.w	ip, r4, #20
 800d3b4:	46ae      	mov	lr, r5
 800d3b6:	f04f 0a00 	mov.w	sl, #0
 800d3ba:	f8bc b000 	ldrh.w	fp, [ip]
 800d3be:	b289      	uxth	r1, r1
 800d3c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3c4:	fb09 220b 	mla	r2, r9, fp, r2
 800d3c8:	4452      	add	r2, sl
 800d3ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3ce:	f84e 1b04 	str.w	r1, [lr], #4
 800d3d2:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3da:	f8be 1000 	ldrh.w	r1, [lr]
 800d3de:	4567      	cmp	r7, ip
 800d3e0:	fb09 110a 	mla	r1, r9, sl, r1
 800d3e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3ec:	d8e5      	bhi.n	800d3ba <__multiply+0x10a>
 800d3ee:	9a01      	ldr	r2, [sp, #4]
 800d3f0:	50a9      	str	r1, [r5, r2]
 800d3f2:	3504      	adds	r5, #4
 800d3f4:	e799      	b.n	800d32a <__multiply+0x7a>
 800d3f6:	3e01      	subs	r6, #1
 800d3f8:	e79b      	b.n	800d332 <__multiply+0x82>
 800d3fa:	bf00      	nop
 800d3fc:	0800e28d 	.word	0x0800e28d
 800d400:	0800e30f 	.word	0x0800e30f

0800d404 <__pow5mult>:
 800d404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d408:	4615      	mov	r5, r2
 800d40a:	f012 0203 	ands.w	r2, r2, #3
 800d40e:	4606      	mov	r6, r0
 800d410:	460f      	mov	r7, r1
 800d412:	d007      	beq.n	800d424 <__pow5mult+0x20>
 800d414:	3a01      	subs	r2, #1
 800d416:	4c25      	ldr	r4, [pc, #148]	; (800d4ac <__pow5mult+0xa8>)
 800d418:	2300      	movs	r3, #0
 800d41a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d41e:	f7ff fe51 	bl	800d0c4 <__multadd>
 800d422:	4607      	mov	r7, r0
 800d424:	10ad      	asrs	r5, r5, #2
 800d426:	d03d      	beq.n	800d4a4 <__pow5mult+0xa0>
 800d428:	69f4      	ldr	r4, [r6, #28]
 800d42a:	b97c      	cbnz	r4, 800d44c <__pow5mult+0x48>
 800d42c:	2010      	movs	r0, #16
 800d42e:	f7ff fc75 	bl	800cd1c <malloc>
 800d432:	4602      	mov	r2, r0
 800d434:	61f0      	str	r0, [r6, #28]
 800d436:	b928      	cbnz	r0, 800d444 <__pow5mult+0x40>
 800d438:	4b1d      	ldr	r3, [pc, #116]	; (800d4b0 <__pow5mult+0xac>)
 800d43a:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d43e:	481d      	ldr	r0, [pc, #116]	; (800d4b4 <__pow5mult+0xb0>)
 800d440:	f000 fc9e 	bl	800dd80 <__assert_func>
 800d444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d448:	6004      	str	r4, [r0, #0]
 800d44a:	60c4      	str	r4, [r0, #12]
 800d44c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d454:	b94c      	cbnz	r4, 800d46a <__pow5mult+0x66>
 800d456:	f240 2171 	movw	r1, #625	; 0x271
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7ff ff12 	bl	800d284 <__i2b>
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	f8c8 0008 	str.w	r0, [r8, #8]
 800d468:	6003      	str	r3, [r0, #0]
 800d46a:	f04f 0900 	mov.w	r9, #0
 800d46e:	07eb      	lsls	r3, r5, #31
 800d470:	d50a      	bpl.n	800d488 <__pow5mult+0x84>
 800d472:	4639      	mov	r1, r7
 800d474:	4622      	mov	r2, r4
 800d476:	4630      	mov	r0, r6
 800d478:	f7ff ff1a 	bl	800d2b0 <__multiply>
 800d47c:	4680      	mov	r8, r0
 800d47e:	4639      	mov	r1, r7
 800d480:	4630      	mov	r0, r6
 800d482:	4647      	mov	r7, r8
 800d484:	f7ff fdfc 	bl	800d080 <_Bfree>
 800d488:	106d      	asrs	r5, r5, #1
 800d48a:	d00b      	beq.n	800d4a4 <__pow5mult+0xa0>
 800d48c:	6820      	ldr	r0, [r4, #0]
 800d48e:	b938      	cbnz	r0, 800d4a0 <__pow5mult+0x9c>
 800d490:	4622      	mov	r2, r4
 800d492:	4621      	mov	r1, r4
 800d494:	4630      	mov	r0, r6
 800d496:	f7ff ff0b 	bl	800d2b0 <__multiply>
 800d49a:	6020      	str	r0, [r4, #0]
 800d49c:	f8c0 9000 	str.w	r9, [r0]
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	e7e4      	b.n	800d46e <__pow5mult+0x6a>
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4aa:	bf00      	nop
 800d4ac:	0800e458 	.word	0x0800e458
 800d4b0:	0800e21e 	.word	0x0800e21e
 800d4b4:	0800e30f 	.word	0x0800e30f

0800d4b8 <__lshift>:
 800d4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4607      	mov	r7, r0
 800d4c0:	4691      	mov	r9, r2
 800d4c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4c6:	6923      	ldr	r3, [r4, #16]
 800d4c8:	6849      	ldr	r1, [r1, #4]
 800d4ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4ce:	68a3      	ldr	r3, [r4, #8]
 800d4d0:	f108 0601 	add.w	r6, r8, #1
 800d4d4:	42b3      	cmp	r3, r6
 800d4d6:	db0b      	blt.n	800d4f0 <__lshift+0x38>
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f7ff fd91 	bl	800d000 <_Balloc>
 800d4de:	4605      	mov	r5, r0
 800d4e0:	b948      	cbnz	r0, 800d4f6 <__lshift+0x3e>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	4b28      	ldr	r3, [pc, #160]	; (800d588 <__lshift+0xd0>)
 800d4e6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4ea:	4828      	ldr	r0, [pc, #160]	; (800d58c <__lshift+0xd4>)
 800d4ec:	f000 fc48 	bl	800dd80 <__assert_func>
 800d4f0:	3101      	adds	r1, #1
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	e7ee      	b.n	800d4d4 <__lshift+0x1c>
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f100 0114 	add.w	r1, r0, #20
 800d4fc:	f100 0210 	add.w	r2, r0, #16
 800d500:	4618      	mov	r0, r3
 800d502:	4553      	cmp	r3, sl
 800d504:	db33      	blt.n	800d56e <__lshift+0xb6>
 800d506:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d50a:	f104 0314 	add.w	r3, r4, #20
 800d50e:	6920      	ldr	r0, [r4, #16]
 800d510:	f019 091f 	ands.w	r9, r9, #31
 800d514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d51c:	d02b      	beq.n	800d576 <__lshift+0xbe>
 800d51e:	f1c9 0e20 	rsb	lr, r9, #32
 800d522:	468a      	mov	sl, r1
 800d524:	2200      	movs	r2, #0
 800d526:	6818      	ldr	r0, [r3, #0]
 800d528:	fa00 f009 	lsl.w	r0, r0, r9
 800d52c:	4310      	orrs	r0, r2
 800d52e:	f84a 0b04 	str.w	r0, [sl], #4
 800d532:	f853 2b04 	ldr.w	r2, [r3], #4
 800d536:	459c      	cmp	ip, r3
 800d538:	fa22 f20e 	lsr.w	r2, r2, lr
 800d53c:	d8f3      	bhi.n	800d526 <__lshift+0x6e>
 800d53e:	ebac 0304 	sub.w	r3, ip, r4
 800d542:	f104 0015 	add.w	r0, r4, #21
 800d546:	3b15      	subs	r3, #21
 800d548:	f023 0303 	bic.w	r3, r3, #3
 800d54c:	3304      	adds	r3, #4
 800d54e:	4584      	cmp	ip, r0
 800d550:	bf38      	it	cc
 800d552:	2304      	movcc	r3, #4
 800d554:	50ca      	str	r2, [r1, r3]
 800d556:	b10a      	cbz	r2, 800d55c <__lshift+0xa4>
 800d558:	f108 0602 	add.w	r6, r8, #2
 800d55c:	3e01      	subs	r6, #1
 800d55e:	4638      	mov	r0, r7
 800d560:	4621      	mov	r1, r4
 800d562:	612e      	str	r6, [r5, #16]
 800d564:	f7ff fd8c 	bl	800d080 <_Bfree>
 800d568:	4628      	mov	r0, r5
 800d56a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d56e:	3301      	adds	r3, #1
 800d570:	f842 0f04 	str.w	r0, [r2, #4]!
 800d574:	e7c5      	b.n	800d502 <__lshift+0x4a>
 800d576:	3904      	subs	r1, #4
 800d578:	f853 2b04 	ldr.w	r2, [r3], #4
 800d57c:	459c      	cmp	ip, r3
 800d57e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d582:	d8f9      	bhi.n	800d578 <__lshift+0xc0>
 800d584:	e7ea      	b.n	800d55c <__lshift+0xa4>
 800d586:	bf00      	nop
 800d588:	0800e28d 	.word	0x0800e28d
 800d58c:	0800e30f 	.word	0x0800e30f

0800d590 <__mcmp>:
 800d590:	6902      	ldr	r2, [r0, #16]
 800d592:	b530      	push	{r4, r5, lr}
 800d594:	690c      	ldr	r4, [r1, #16]
 800d596:	1b12      	subs	r2, r2, r4
 800d598:	d10e      	bne.n	800d5b8 <__mcmp+0x28>
 800d59a:	f100 0314 	add.w	r3, r0, #20
 800d59e:	3114      	adds	r1, #20
 800d5a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d5a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d5a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d5ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d5b0:	42a5      	cmp	r5, r4
 800d5b2:	d003      	beq.n	800d5bc <__mcmp+0x2c>
 800d5b4:	d305      	bcc.n	800d5c2 <__mcmp+0x32>
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	4610      	mov	r0, r2
 800d5ba:	bd30      	pop	{r4, r5, pc}
 800d5bc:	4283      	cmp	r3, r0
 800d5be:	d3f3      	bcc.n	800d5a8 <__mcmp+0x18>
 800d5c0:	e7fa      	b.n	800d5b8 <__mcmp+0x28>
 800d5c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d5c6:	e7f7      	b.n	800d5b8 <__mcmp+0x28>

0800d5c8 <__mdiff>:
 800d5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	4606      	mov	r6, r0
 800d5d0:	4611      	mov	r1, r2
 800d5d2:	4692      	mov	sl, r2
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7ff ffdb 	bl	800d590 <__mcmp>
 800d5da:	1e05      	subs	r5, r0, #0
 800d5dc:	d110      	bne.n	800d600 <__mdiff+0x38>
 800d5de:	4629      	mov	r1, r5
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff fd0d 	bl	800d000 <_Balloc>
 800d5e6:	b930      	cbnz	r0, 800d5f6 <__mdiff+0x2e>
 800d5e8:	4b3d      	ldr	r3, [pc, #244]	; (800d6e0 <__mdiff+0x118>)
 800d5ea:	4602      	mov	r2, r0
 800d5ec:	f240 2137 	movw	r1, #567	; 0x237
 800d5f0:	483c      	ldr	r0, [pc, #240]	; (800d6e4 <__mdiff+0x11c>)
 800d5f2:	f000 fbc5 	bl	800dd80 <__assert_func>
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d600:	bfa4      	itt	ge
 800d602:	4653      	movge	r3, sl
 800d604:	46a2      	movge	sl, r4
 800d606:	4630      	mov	r0, r6
 800d608:	bfa8      	it	ge
 800d60a:	2500      	movge	r5, #0
 800d60c:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d610:	bfac      	ite	ge
 800d612:	461c      	movge	r4, r3
 800d614:	2501      	movlt	r5, #1
 800d616:	f7ff fcf3 	bl	800d000 <_Balloc>
 800d61a:	b920      	cbnz	r0, 800d626 <__mdiff+0x5e>
 800d61c:	4b30      	ldr	r3, [pc, #192]	; (800d6e0 <__mdiff+0x118>)
 800d61e:	4602      	mov	r2, r0
 800d620:	f240 2145 	movw	r1, #581	; 0x245
 800d624:	e7e4      	b.n	800d5f0 <__mdiff+0x28>
 800d626:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d62a:	f104 0914 	add.w	r9, r4, #20
 800d62e:	6926      	ldr	r6, [r4, #16]
 800d630:	f100 0814 	add.w	r8, r0, #20
 800d634:	60c5      	str	r5, [r0, #12]
 800d636:	f10a 0514 	add.w	r5, sl, #20
 800d63a:	f10a 0210 	add.w	r2, sl, #16
 800d63e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d642:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d646:	46c2      	mov	sl, r8
 800d648:	f04f 0c00 	mov.w	ip, #0
 800d64c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d650:	f859 3b04 	ldr.w	r3, [r9], #4
 800d654:	fa1f f18b 	uxth.w	r1, fp
 800d658:	454e      	cmp	r6, r9
 800d65a:	4461      	add	r1, ip
 800d65c:	fa1f fc83 	uxth.w	ip, r3
 800d660:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d664:	eba1 010c 	sub.w	r1, r1, ip
 800d668:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d66c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d670:	b289      	uxth	r1, r1
 800d672:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d676:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d67a:	f84a 1b04 	str.w	r1, [sl], #4
 800d67e:	d8e5      	bhi.n	800d64c <__mdiff+0x84>
 800d680:	1b33      	subs	r3, r6, r4
 800d682:	3415      	adds	r4, #21
 800d684:	3b15      	subs	r3, #21
 800d686:	f023 0303 	bic.w	r3, r3, #3
 800d68a:	3304      	adds	r3, #4
 800d68c:	42a6      	cmp	r6, r4
 800d68e:	bf38      	it	cc
 800d690:	2304      	movcc	r3, #4
 800d692:	441d      	add	r5, r3
 800d694:	4443      	add	r3, r8
 800d696:	462c      	mov	r4, r5
 800d698:	461e      	mov	r6, r3
 800d69a:	4574      	cmp	r4, lr
 800d69c:	d30e      	bcc.n	800d6bc <__mdiff+0xf4>
 800d69e:	f10e 0203 	add.w	r2, lr, #3
 800d6a2:	1b52      	subs	r2, r2, r5
 800d6a4:	3d03      	subs	r5, #3
 800d6a6:	f022 0203 	bic.w	r2, r2, #3
 800d6aa:	45ae      	cmp	lr, r5
 800d6ac:	bf38      	it	cc
 800d6ae:	2200      	movcc	r2, #0
 800d6b0:	4413      	add	r3, r2
 800d6b2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d6b6:	b18a      	cbz	r2, 800d6dc <__mdiff+0x114>
 800d6b8:	6107      	str	r7, [r0, #16]
 800d6ba:	e79f      	b.n	800d5fc <__mdiff+0x34>
 800d6bc:	f854 8b04 	ldr.w	r8, [r4], #4
 800d6c0:	fa1f f288 	uxth.w	r2, r8
 800d6c4:	4462      	add	r2, ip
 800d6c6:	1411      	asrs	r1, r2, #16
 800d6c8:	b292      	uxth	r2, r2
 800d6ca:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800d6ce:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d6d2:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800d6d6:	f846 2b04 	str.w	r2, [r6], #4
 800d6da:	e7de      	b.n	800d69a <__mdiff+0xd2>
 800d6dc:	3f01      	subs	r7, #1
 800d6de:	e7e8      	b.n	800d6b2 <__mdiff+0xea>
 800d6e0:	0800e28d 	.word	0x0800e28d
 800d6e4:	0800e30f 	.word	0x0800e30f

0800d6e8 <__ulp>:
 800d6e8:	b082      	sub	sp, #8
 800d6ea:	4b11      	ldr	r3, [pc, #68]	; (800d730 <__ulp+0x48>)
 800d6ec:	ed8d 0b00 	vstr	d0, [sp]
 800d6f0:	9a01      	ldr	r2, [sp, #4]
 800d6f2:	4013      	ands	r3, r2
 800d6f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dc08      	bgt.n	800d70e <__ulp+0x26>
 800d6fc:	425b      	negs	r3, r3
 800d6fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d702:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d706:	da04      	bge.n	800d712 <__ulp+0x2a>
 800d708:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d70c:	4113      	asrs	r3, r2
 800d70e:	2200      	movs	r2, #0
 800d710:	e008      	b.n	800d724 <__ulp+0x3c>
 800d712:	f1a2 0314 	sub.w	r3, r2, #20
 800d716:	2b1e      	cmp	r3, #30
 800d718:	bfd6      	itet	le
 800d71a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d71e:	2201      	movgt	r2, #1
 800d720:	40da      	lsrle	r2, r3
 800d722:	2300      	movs	r3, #0
 800d724:	4619      	mov	r1, r3
 800d726:	4610      	mov	r0, r2
 800d728:	ec41 0b10 	vmov	d0, r0, r1
 800d72c:	b002      	add	sp, #8
 800d72e:	4770      	bx	lr
 800d730:	7ff00000 	.word	0x7ff00000

0800d734 <__b2d>:
 800d734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d738:	6906      	ldr	r6, [r0, #16]
 800d73a:	f100 0814 	add.w	r8, r0, #20
 800d73e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d742:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d746:	1f37      	subs	r7, r6, #4
 800d748:	4610      	mov	r0, r2
 800d74a:	f7ff fd4d 	bl	800d1e8 <__hi0bits>
 800d74e:	f1c0 0320 	rsb	r3, r0, #32
 800d752:	280a      	cmp	r0, #10
 800d754:	600b      	str	r3, [r1, #0]
 800d756:	491d      	ldr	r1, [pc, #116]	; (800d7cc <__b2d+0x98>)
 800d758:	dc16      	bgt.n	800d788 <__b2d+0x54>
 800d75a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d75e:	45b8      	cmp	r8, r7
 800d760:	f100 0015 	add.w	r0, r0, #21
 800d764:	fa22 f30c 	lsr.w	r3, r2, ip
 800d768:	fa02 f000 	lsl.w	r0, r2, r0
 800d76c:	ea43 0501 	orr.w	r5, r3, r1
 800d770:	bf34      	ite	cc
 800d772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d776:	2300      	movcs	r3, #0
 800d778:	fa23 f30c 	lsr.w	r3, r3, ip
 800d77c:	4303      	orrs	r3, r0
 800d77e:	461c      	mov	r4, r3
 800d780:	ec45 4b10 	vmov	d0, r4, r5
 800d784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d788:	45b8      	cmp	r8, r7
 800d78a:	bf3a      	itte	cc
 800d78c:	f1a6 0708 	subcc.w	r7, r6, #8
 800d790:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d794:	2300      	movcs	r3, #0
 800d796:	380b      	subs	r0, #11
 800d798:	d014      	beq.n	800d7c4 <__b2d+0x90>
 800d79a:	f1c0 0120 	rsb	r1, r0, #32
 800d79e:	4082      	lsls	r2, r0
 800d7a0:	4547      	cmp	r7, r8
 800d7a2:	fa23 f401 	lsr.w	r4, r3, r1
 800d7a6:	fa03 f300 	lsl.w	r3, r3, r0
 800d7aa:	ea42 0204 	orr.w	r2, r2, r4
 800d7ae:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d7b2:	bf8c      	ite	hi
 800d7b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d7b8:	2200      	movls	r2, #0
 800d7ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7be:	40ca      	lsrs	r2, r1
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	e7dc      	b.n	800d77e <__b2d+0x4a>
 800d7c4:	ea42 0501 	orr.w	r5, r2, r1
 800d7c8:	e7d9      	b.n	800d77e <__b2d+0x4a>
 800d7ca:	bf00      	nop
 800d7cc:	3ff00000 	.word	0x3ff00000

0800d7d0 <__d2b>:
 800d7d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7d4:	460f      	mov	r7, r1
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	4616      	mov	r6, r2
 800d7da:	ec59 8b10 	vmov	r8, r9, d0
 800d7de:	f7ff fc0f 	bl	800d000 <_Balloc>
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	b930      	cbnz	r0, 800d7f4 <__d2b+0x24>
 800d7e6:	4602      	mov	r2, r0
 800d7e8:	4b24      	ldr	r3, [pc, #144]	; (800d87c <__d2b+0xac>)
 800d7ea:	f240 310f 	movw	r1, #783	; 0x30f
 800d7ee:	4824      	ldr	r0, [pc, #144]	; (800d880 <__d2b+0xb0>)
 800d7f0:	f000 fac6 	bl	800dd80 <__assert_func>
 800d7f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7fc:	bb2d      	cbnz	r5, 800d84a <__d2b+0x7a>
 800d7fe:	9301      	str	r3, [sp, #4]
 800d800:	f1b8 0300 	subs.w	r3, r8, #0
 800d804:	d026      	beq.n	800d854 <__d2b+0x84>
 800d806:	4668      	mov	r0, sp
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	f7ff fd0d 	bl	800d228 <__lo0bits>
 800d80e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d812:	b1e8      	cbz	r0, 800d850 <__d2b+0x80>
 800d814:	f1c0 0320 	rsb	r3, r0, #32
 800d818:	fa02 f303 	lsl.w	r3, r2, r3
 800d81c:	40c2      	lsrs	r2, r0
 800d81e:	430b      	orrs	r3, r1
 800d820:	9201      	str	r2, [sp, #4]
 800d822:	6163      	str	r3, [r4, #20]
 800d824:	9b01      	ldr	r3, [sp, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	61a3      	str	r3, [r4, #24]
 800d82a:	bf14      	ite	ne
 800d82c:	2202      	movne	r2, #2
 800d82e:	2201      	moveq	r2, #1
 800d830:	6122      	str	r2, [r4, #16]
 800d832:	b1bd      	cbz	r5, 800d864 <__d2b+0x94>
 800d834:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d838:	4405      	add	r5, r0
 800d83a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d83e:	603d      	str	r5, [r7, #0]
 800d840:	6030      	str	r0, [r6, #0]
 800d842:	4620      	mov	r0, r4
 800d844:	b003      	add	sp, #12
 800d846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d84a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d84e:	e7d6      	b.n	800d7fe <__d2b+0x2e>
 800d850:	6161      	str	r1, [r4, #20]
 800d852:	e7e7      	b.n	800d824 <__d2b+0x54>
 800d854:	a801      	add	r0, sp, #4
 800d856:	f7ff fce7 	bl	800d228 <__lo0bits>
 800d85a:	9b01      	ldr	r3, [sp, #4]
 800d85c:	3020      	adds	r0, #32
 800d85e:	2201      	movs	r2, #1
 800d860:	6163      	str	r3, [r4, #20]
 800d862:	e7e5      	b.n	800d830 <__d2b+0x60>
 800d864:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d86c:	6038      	str	r0, [r7, #0]
 800d86e:	6918      	ldr	r0, [r3, #16]
 800d870:	f7ff fcba 	bl	800d1e8 <__hi0bits>
 800d874:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d878:	e7e2      	b.n	800d840 <__d2b+0x70>
 800d87a:	bf00      	nop
 800d87c:	0800e28d 	.word	0x0800e28d
 800d880:	0800e30f 	.word	0x0800e30f

0800d884 <__ratio>:
 800d884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d888:	4688      	mov	r8, r1
 800d88a:	4681      	mov	r9, r0
 800d88c:	4669      	mov	r1, sp
 800d88e:	f7ff ff51 	bl	800d734 <__b2d>
 800d892:	a901      	add	r1, sp, #4
 800d894:	4640      	mov	r0, r8
 800d896:	ec55 4b10 	vmov	r4, r5, d0
 800d89a:	f7ff ff4b 	bl	800d734 <__b2d>
 800d89e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d8a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d8a6:	462f      	mov	r7, r5
 800d8a8:	eba3 0c02 	sub.w	ip, r3, r2
 800d8ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8b0:	ec51 0b10 	vmov	r0, r1, d0
 800d8b4:	1a9b      	subs	r3, r3, r2
 800d8b6:	468b      	mov	fp, r1
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	bfd5      	itete	le
 800d8c2:	460a      	movle	r2, r1
 800d8c4:	462a      	movgt	r2, r5
 800d8c6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d8ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8ce:	bfd8      	it	le
 800d8d0:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8d4:	ee10 2a10 	vmov	r2, s0
 800d8d8:	4639      	mov	r1, r7
 800d8da:	465b      	mov	r3, fp
 800d8dc:	f7f2 ffc6 	bl	800086c <__aeabi_ddiv>
 800d8e0:	ec41 0b10 	vmov	d0, r0, r1
 800d8e4:	b003      	add	sp, #12
 800d8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8ea <__copybits>:
 800d8ea:	3901      	subs	r1, #1
 800d8ec:	f102 0314 	add.w	r3, r2, #20
 800d8f0:	1149      	asrs	r1, r1, #5
 800d8f2:	b570      	push	{r4, r5, r6, lr}
 800d8f4:	3101      	adds	r1, #1
 800d8f6:	6914      	ldr	r4, [r2, #16]
 800d8f8:	1f05      	subs	r5, r0, #4
 800d8fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d902:	42a3      	cmp	r3, r4
 800d904:	d30c      	bcc.n	800d920 <__copybits+0x36>
 800d906:	1aa3      	subs	r3, r4, r2
 800d908:	3211      	adds	r2, #17
 800d90a:	3b11      	subs	r3, #17
 800d90c:	f023 0303 	bic.w	r3, r3, #3
 800d910:	42a2      	cmp	r2, r4
 800d912:	bf88      	it	hi
 800d914:	2300      	movhi	r3, #0
 800d916:	4418      	add	r0, r3
 800d918:	2300      	movs	r3, #0
 800d91a:	4288      	cmp	r0, r1
 800d91c:	d305      	bcc.n	800d92a <__copybits+0x40>
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	f853 6b04 	ldr.w	r6, [r3], #4
 800d924:	f845 6f04 	str.w	r6, [r5, #4]!
 800d928:	e7eb      	b.n	800d902 <__copybits+0x18>
 800d92a:	f840 3b04 	str.w	r3, [r0], #4
 800d92e:	e7f4      	b.n	800d91a <__copybits+0x30>

0800d930 <__any_on>:
 800d930:	f100 0214 	add.w	r2, r0, #20
 800d934:	114b      	asrs	r3, r1, #5
 800d936:	6900      	ldr	r0, [r0, #16]
 800d938:	4298      	cmp	r0, r3
 800d93a:	b510      	push	{r4, lr}
 800d93c:	db11      	blt.n	800d962 <__any_on+0x32>
 800d93e:	dd0a      	ble.n	800d956 <__any_on+0x26>
 800d940:	f011 011f 	ands.w	r1, r1, #31
 800d944:	d007      	beq.n	800d956 <__any_on+0x26>
 800d946:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d94a:	fa24 f001 	lsr.w	r0, r4, r1
 800d94e:	fa00 f101 	lsl.w	r1, r0, r1
 800d952:	428c      	cmp	r4, r1
 800d954:	d10b      	bne.n	800d96e <__any_on+0x3e>
 800d956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d95a:	4293      	cmp	r3, r2
 800d95c:	d803      	bhi.n	800d966 <__any_on+0x36>
 800d95e:	2000      	movs	r0, #0
 800d960:	bd10      	pop	{r4, pc}
 800d962:	4603      	mov	r3, r0
 800d964:	e7f7      	b.n	800d956 <__any_on+0x26>
 800d966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d96a:	2900      	cmp	r1, #0
 800d96c:	d0f5      	beq.n	800d95a <__any_on+0x2a>
 800d96e:	2001      	movs	r0, #1
 800d970:	e7f6      	b.n	800d960 <__any_on+0x30>

0800d972 <__sread>:
 800d972:	b510      	push	{r4, lr}
 800d974:	460c      	mov	r4, r1
 800d976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d97a:	f000 f9cd 	bl	800dd18 <_read_r>
 800d97e:	2800      	cmp	r0, #0
 800d980:	bfab      	itete	ge
 800d982:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d984:	89a3      	ldrhlt	r3, [r4, #12]
 800d986:	181b      	addge	r3, r3, r0
 800d988:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d98c:	bfac      	ite	ge
 800d98e:	6563      	strge	r3, [r4, #84]	; 0x54
 800d990:	81a3      	strhlt	r3, [r4, #12]
 800d992:	bd10      	pop	{r4, pc}

0800d994 <__swrite>:
 800d994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d998:	461f      	mov	r7, r3
 800d99a:	898b      	ldrh	r3, [r1, #12]
 800d99c:	4605      	mov	r5, r0
 800d99e:	460c      	mov	r4, r1
 800d9a0:	05db      	lsls	r3, r3, #23
 800d9a2:	4616      	mov	r6, r2
 800d9a4:	d505      	bpl.n	800d9b2 <__swrite+0x1e>
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ae:	f000 f9a1 	bl	800dcf4 <_lseek_r>
 800d9b2:	89a3      	ldrh	r3, [r4, #12]
 800d9b4:	4632      	mov	r2, r6
 800d9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	463b      	mov	r3, r7
 800d9c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c8:	f000 b9c8 	b.w	800dd5c <_write_r>

0800d9cc <__sseek>:
 800d9cc:	b510      	push	{r4, lr}
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d4:	f000 f98e 	bl	800dcf4 <_lseek_r>
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	bf15      	itete	ne
 800d9de:	6560      	strne	r0, [r4, #84]	; 0x54
 800d9e0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d9e4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d9e8:	81a3      	strheq	r3, [r4, #12]
 800d9ea:	bf18      	it	ne
 800d9ec:	81a3      	strhne	r3, [r4, #12]
 800d9ee:	bd10      	pop	{r4, pc}

0800d9f0 <__sclose>:
 800d9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9f4:	f000 b94c 	b.w	800dc90 <_close_r>

0800d9f8 <_realloc_r>:
 800d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fc:	4680      	mov	r8, r0
 800d9fe:	4614      	mov	r4, r2
 800da00:	460e      	mov	r6, r1
 800da02:	b921      	cbnz	r1, 800da0e <_realloc_r+0x16>
 800da04:	4611      	mov	r1, r2
 800da06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da0a:	f7ff b9af 	b.w	800cd6c <_malloc_r>
 800da0e:	b92a      	cbnz	r2, 800da1c <_realloc_r+0x24>
 800da10:	4625      	mov	r5, r4
 800da12:	f000 f9e9 	bl	800dde8 <_free_r>
 800da16:	4628      	mov	r0, r5
 800da18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da1c:	f000 fa30 	bl	800de80 <_malloc_usable_size_r>
 800da20:	4284      	cmp	r4, r0
 800da22:	4607      	mov	r7, r0
 800da24:	d802      	bhi.n	800da2c <_realloc_r+0x34>
 800da26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da2a:	d812      	bhi.n	800da52 <_realloc_r+0x5a>
 800da2c:	4621      	mov	r1, r4
 800da2e:	4640      	mov	r0, r8
 800da30:	f7ff f99c 	bl	800cd6c <_malloc_r>
 800da34:	4605      	mov	r5, r0
 800da36:	2800      	cmp	r0, #0
 800da38:	d0ed      	beq.n	800da16 <_realloc_r+0x1e>
 800da3a:	42bc      	cmp	r4, r7
 800da3c:	4622      	mov	r2, r4
 800da3e:	4631      	mov	r1, r6
 800da40:	bf28      	it	cs
 800da42:	463a      	movcs	r2, r7
 800da44:	f7fd fcda 	bl	800b3fc <memcpy>
 800da48:	4631      	mov	r1, r6
 800da4a:	4640      	mov	r0, r8
 800da4c:	f000 f9cc 	bl	800dde8 <_free_r>
 800da50:	e7e1      	b.n	800da16 <_realloc_r+0x1e>
 800da52:	4635      	mov	r5, r6
 800da54:	e7df      	b.n	800da16 <_realloc_r+0x1e>

0800da56 <__swbuf_r>:
 800da56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da58:	460e      	mov	r6, r1
 800da5a:	4614      	mov	r4, r2
 800da5c:	4605      	mov	r5, r0
 800da5e:	b118      	cbz	r0, 800da68 <__swbuf_r+0x12>
 800da60:	6a03      	ldr	r3, [r0, #32]
 800da62:	b90b      	cbnz	r3, 800da68 <__swbuf_r+0x12>
 800da64:	f7fc fd90 	bl	800a588 <__sinit>
 800da68:	69a3      	ldr	r3, [r4, #24]
 800da6a:	60a3      	str	r3, [r4, #8]
 800da6c:	89a3      	ldrh	r3, [r4, #12]
 800da6e:	071a      	lsls	r2, r3, #28
 800da70:	d525      	bpl.n	800dabe <__swbuf_r+0x68>
 800da72:	6923      	ldr	r3, [r4, #16]
 800da74:	b31b      	cbz	r3, 800dabe <__swbuf_r+0x68>
 800da76:	6823      	ldr	r3, [r4, #0]
 800da78:	b2f6      	uxtb	r6, r6
 800da7a:	6922      	ldr	r2, [r4, #16]
 800da7c:	4637      	mov	r7, r6
 800da7e:	1a98      	subs	r0, r3, r2
 800da80:	6963      	ldr	r3, [r4, #20]
 800da82:	4283      	cmp	r3, r0
 800da84:	dc04      	bgt.n	800da90 <__swbuf_r+0x3a>
 800da86:	4621      	mov	r1, r4
 800da88:	4628      	mov	r0, r5
 800da8a:	f7ff fa85 	bl	800cf98 <_fflush_r>
 800da8e:	b9e0      	cbnz	r0, 800daca <__swbuf_r+0x74>
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	3b01      	subs	r3, #1
 800da94:	60a3      	str	r3, [r4, #8]
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	6022      	str	r2, [r4, #0]
 800da9c:	701e      	strb	r6, [r3, #0]
 800da9e:	1c43      	adds	r3, r0, #1
 800daa0:	6962      	ldr	r2, [r4, #20]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d004      	beq.n	800dab0 <__swbuf_r+0x5a>
 800daa6:	89a3      	ldrh	r3, [r4, #12]
 800daa8:	07db      	lsls	r3, r3, #31
 800daaa:	d506      	bpl.n	800daba <__swbuf_r+0x64>
 800daac:	2e0a      	cmp	r6, #10
 800daae:	d104      	bne.n	800daba <__swbuf_r+0x64>
 800dab0:	4621      	mov	r1, r4
 800dab2:	4628      	mov	r0, r5
 800dab4:	f7ff fa70 	bl	800cf98 <_fflush_r>
 800dab8:	b938      	cbnz	r0, 800daca <__swbuf_r+0x74>
 800daba:	4638      	mov	r0, r7
 800dabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dabe:	4621      	mov	r1, r4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f000 f805 	bl	800dad0 <__swsetup_r>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d0d5      	beq.n	800da76 <__swbuf_r+0x20>
 800daca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dace:	e7f4      	b.n	800daba <__swbuf_r+0x64>

0800dad0 <__swsetup_r>:
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4b2a      	ldr	r3, [pc, #168]	; (800db7c <__swsetup_r+0xac>)
 800dad4:	4605      	mov	r5, r0
 800dad6:	460c      	mov	r4, r1
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	b118      	cbz	r0, 800dae4 <__swsetup_r+0x14>
 800dadc:	6a03      	ldr	r3, [r0, #32]
 800dade:	b90b      	cbnz	r3, 800dae4 <__swsetup_r+0x14>
 800dae0:	f7fc fd52 	bl	800a588 <__sinit>
 800dae4:	89a3      	ldrh	r3, [r4, #12]
 800dae6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800daea:	0718      	lsls	r0, r3, #28
 800daec:	d422      	bmi.n	800db34 <__swsetup_r+0x64>
 800daee:	06d9      	lsls	r1, r3, #27
 800daf0:	d407      	bmi.n	800db02 <__swsetup_r+0x32>
 800daf2:	2309      	movs	r3, #9
 800daf4:	602b      	str	r3, [r5, #0]
 800daf6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dafa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dafe:	81a3      	strh	r3, [r4, #12]
 800db00:	e034      	b.n	800db6c <__swsetup_r+0x9c>
 800db02:	0758      	lsls	r0, r3, #29
 800db04:	d512      	bpl.n	800db2c <__swsetup_r+0x5c>
 800db06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db08:	b141      	cbz	r1, 800db1c <__swsetup_r+0x4c>
 800db0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db0e:	4299      	cmp	r1, r3
 800db10:	d002      	beq.n	800db18 <__swsetup_r+0x48>
 800db12:	4628      	mov	r0, r5
 800db14:	f000 f968 	bl	800dde8 <_free_r>
 800db18:	2300      	movs	r3, #0
 800db1a:	6363      	str	r3, [r4, #52]	; 0x34
 800db1c:	89a3      	ldrh	r3, [r4, #12]
 800db1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db22:	81a3      	strh	r3, [r4, #12]
 800db24:	2300      	movs	r3, #0
 800db26:	6063      	str	r3, [r4, #4]
 800db28:	6923      	ldr	r3, [r4, #16]
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f043 0308 	orr.w	r3, r3, #8
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	b94b      	cbnz	r3, 800db4c <__swsetup_r+0x7c>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800db3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db42:	d003      	beq.n	800db4c <__swsetup_r+0x7c>
 800db44:	4621      	mov	r1, r4
 800db46:	4628      	mov	r0, r5
 800db48:	f000 f84c 	bl	800dbe4 <__smakebuf_r>
 800db4c:	89a0      	ldrh	r0, [r4, #12]
 800db4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db52:	f010 0301 	ands.w	r3, r0, #1
 800db56:	d00a      	beq.n	800db6e <__swsetup_r+0x9e>
 800db58:	2300      	movs	r3, #0
 800db5a:	60a3      	str	r3, [r4, #8]
 800db5c:	6963      	ldr	r3, [r4, #20]
 800db5e:	425b      	negs	r3, r3
 800db60:	61a3      	str	r3, [r4, #24]
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	b943      	cbnz	r3, 800db78 <__swsetup_r+0xa8>
 800db66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800db6a:	d1c4      	bne.n	800daf6 <__swsetup_r+0x26>
 800db6c:	bd38      	pop	{r3, r4, r5, pc}
 800db6e:	0781      	lsls	r1, r0, #30
 800db70:	bf58      	it	pl
 800db72:	6963      	ldrpl	r3, [r4, #20]
 800db74:	60a3      	str	r3, [r4, #8]
 800db76:	e7f4      	b.n	800db62 <__swsetup_r+0x92>
 800db78:	2000      	movs	r0, #0
 800db7a:	e7f7      	b.n	800db6c <__swsetup_r+0x9c>
 800db7c:	200001d0 	.word	0x200001d0

0800db80 <__ascii_wctomb>:
 800db80:	b149      	cbz	r1, 800db96 <__ascii_wctomb+0x16>
 800db82:	2aff      	cmp	r2, #255	; 0xff
 800db84:	bf8d      	iteet	hi
 800db86:	238a      	movhi	r3, #138	; 0x8a
 800db88:	2001      	movls	r0, #1
 800db8a:	700a      	strbls	r2, [r1, #0]
 800db8c:	6003      	strhi	r3, [r0, #0]
 800db8e:	bf88      	it	hi
 800db90:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800db94:	4770      	bx	lr
 800db96:	4608      	mov	r0, r1
 800db98:	4770      	bx	lr

0800db9a <__swhatbuf_r>:
 800db9a:	b570      	push	{r4, r5, r6, lr}
 800db9c:	460c      	mov	r4, r1
 800db9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba2:	b096      	sub	sp, #88	; 0x58
 800dba4:	4615      	mov	r5, r2
 800dba6:	2900      	cmp	r1, #0
 800dba8:	461e      	mov	r6, r3
 800dbaa:	da0c      	bge.n	800dbc6 <__swhatbuf_r+0x2c>
 800dbac:	89a3      	ldrh	r3, [r4, #12]
 800dbae:	2100      	movs	r1, #0
 800dbb0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbb4:	bf0c      	ite	eq
 800dbb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbba:	2340      	movne	r3, #64	; 0x40
 800dbbc:	2000      	movs	r0, #0
 800dbbe:	6031      	str	r1, [r6, #0]
 800dbc0:	602b      	str	r3, [r5, #0]
 800dbc2:	b016      	add	sp, #88	; 0x58
 800dbc4:	bd70      	pop	{r4, r5, r6, pc}
 800dbc6:	466a      	mov	r2, sp
 800dbc8:	f000 f872 	bl	800dcb0 <_fstat_r>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	dbed      	blt.n	800dbac <__swhatbuf_r+0x12>
 800dbd0:	9901      	ldr	r1, [sp, #4]
 800dbd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dbd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dbda:	4259      	negs	r1, r3
 800dbdc:	4159      	adcs	r1, r3
 800dbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbe2:	e7eb      	b.n	800dbbc <__swhatbuf_r+0x22>

0800dbe4 <__smakebuf_r>:
 800dbe4:	898b      	ldrh	r3, [r1, #12]
 800dbe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbe8:	079d      	lsls	r5, r3, #30
 800dbea:	4606      	mov	r6, r0
 800dbec:	460c      	mov	r4, r1
 800dbee:	d507      	bpl.n	800dc00 <__smakebuf_r+0x1c>
 800dbf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbf4:	6023      	str	r3, [r4, #0]
 800dbf6:	6123      	str	r3, [r4, #16]
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	6163      	str	r3, [r4, #20]
 800dbfc:	b002      	add	sp, #8
 800dbfe:	bd70      	pop	{r4, r5, r6, pc}
 800dc00:	ab01      	add	r3, sp, #4
 800dc02:	466a      	mov	r2, sp
 800dc04:	f7ff ffc9 	bl	800db9a <__swhatbuf_r>
 800dc08:	9900      	ldr	r1, [sp, #0]
 800dc0a:	4605      	mov	r5, r0
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff f8ad 	bl	800cd6c <_malloc_r>
 800dc12:	b948      	cbnz	r0, 800dc28 <__smakebuf_r+0x44>
 800dc14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc18:	059a      	lsls	r2, r3, #22
 800dc1a:	d4ef      	bmi.n	800dbfc <__smakebuf_r+0x18>
 800dc1c:	f023 0303 	bic.w	r3, r3, #3
 800dc20:	f043 0302 	orr.w	r3, r3, #2
 800dc24:	81a3      	strh	r3, [r4, #12]
 800dc26:	e7e3      	b.n	800dbf0 <__smakebuf_r+0xc>
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	6020      	str	r0, [r4, #0]
 800dc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc30:	6120      	str	r0, [r4, #16]
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	9b00      	ldr	r3, [sp, #0]
 800dc36:	6163      	str	r3, [r4, #20]
 800dc38:	9b01      	ldr	r3, [sp, #4]
 800dc3a:	b15b      	cbz	r3, 800dc54 <__smakebuf_r+0x70>
 800dc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc40:	4630      	mov	r0, r6
 800dc42:	f000 f847 	bl	800dcd4 <_isatty_r>
 800dc46:	b128      	cbz	r0, 800dc54 <__smakebuf_r+0x70>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	f043 0301 	orr.w	r3, r3, #1
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	431d      	orrs	r5, r3
 800dc58:	81a5      	strh	r5, [r4, #12]
 800dc5a:	e7cf      	b.n	800dbfc <__smakebuf_r+0x18>

0800dc5c <memmove>:
 800dc5c:	4288      	cmp	r0, r1
 800dc5e:	b510      	push	{r4, lr}
 800dc60:	eb01 0402 	add.w	r4, r1, r2
 800dc64:	d902      	bls.n	800dc6c <memmove+0x10>
 800dc66:	4284      	cmp	r4, r0
 800dc68:	4623      	mov	r3, r4
 800dc6a:	d807      	bhi.n	800dc7c <memmove+0x20>
 800dc6c:	1e43      	subs	r3, r0, #1
 800dc6e:	42a1      	cmp	r1, r4
 800dc70:	d008      	beq.n	800dc84 <memmove+0x28>
 800dc72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc7a:	e7f8      	b.n	800dc6e <memmove+0x12>
 800dc7c:	4402      	add	r2, r0
 800dc7e:	4601      	mov	r1, r0
 800dc80:	428a      	cmp	r2, r1
 800dc82:	d100      	bne.n	800dc86 <memmove+0x2a>
 800dc84:	bd10      	pop	{r4, pc}
 800dc86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc8e:	e7f7      	b.n	800dc80 <memmove+0x24>

0800dc90 <_close_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	2300      	movs	r3, #0
 800dc94:	4d05      	ldr	r5, [pc, #20]	; (800dcac <_close_r+0x1c>)
 800dc96:	4604      	mov	r4, r0
 800dc98:	4608      	mov	r0, r1
 800dc9a:	602b      	str	r3, [r5, #0]
 800dc9c:	f7f3 fcac 	bl	80015f8 <_close>
 800dca0:	1c43      	adds	r3, r0, #1
 800dca2:	d102      	bne.n	800dcaa <_close_r+0x1a>
 800dca4:	682b      	ldr	r3, [r5, #0]
 800dca6:	b103      	cbz	r3, 800dcaa <_close_r+0x1a>
 800dca8:	6023      	str	r3, [r4, #0]
 800dcaa:	bd38      	pop	{r3, r4, r5, pc}
 800dcac:	20000428 	.word	0x20000428

0800dcb0 <_fstat_r>:
 800dcb0:	b538      	push	{r3, r4, r5, lr}
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	4d06      	ldr	r5, [pc, #24]	; (800dcd0 <_fstat_r+0x20>)
 800dcb6:	4604      	mov	r4, r0
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	f7f3 fca7 	bl	8001610 <_fstat>
 800dcc2:	1c43      	adds	r3, r0, #1
 800dcc4:	d102      	bne.n	800dccc <_fstat_r+0x1c>
 800dcc6:	682b      	ldr	r3, [r5, #0]
 800dcc8:	b103      	cbz	r3, 800dccc <_fstat_r+0x1c>
 800dcca:	6023      	str	r3, [r4, #0]
 800dccc:	bd38      	pop	{r3, r4, r5, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000428 	.word	0x20000428

0800dcd4 <_isatty_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	4d05      	ldr	r5, [pc, #20]	; (800dcf0 <_isatty_r+0x1c>)
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4608      	mov	r0, r1
 800dcde:	602b      	str	r3, [r5, #0]
 800dce0:	f7f3 fca6 	bl	8001630 <_isatty>
 800dce4:	1c43      	adds	r3, r0, #1
 800dce6:	d102      	bne.n	800dcee <_isatty_r+0x1a>
 800dce8:	682b      	ldr	r3, [r5, #0]
 800dcea:	b103      	cbz	r3, 800dcee <_isatty_r+0x1a>
 800dcec:	6023      	str	r3, [r4, #0]
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	20000428 	.word	0x20000428

0800dcf4 <_lseek_r>:
 800dcf4:	b538      	push	{r3, r4, r5, lr}
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	4d06      	ldr	r5, [pc, #24]	; (800dd14 <_lseek_r+0x20>)
 800dcfa:	4608      	mov	r0, r1
 800dcfc:	4611      	mov	r1, r2
 800dcfe:	2200      	movs	r2, #0
 800dd00:	602a      	str	r2, [r5, #0]
 800dd02:	461a      	mov	r2, r3
 800dd04:	f7f3 fc9f 	bl	8001646 <_lseek>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	d102      	bne.n	800dd12 <_lseek_r+0x1e>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b103      	cbz	r3, 800dd12 <_lseek_r+0x1e>
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	20000428 	.word	0x20000428

0800dd18 <_read_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4d06      	ldr	r5, [pc, #24]	; (800dd38 <_read_r+0x20>)
 800dd1e:	4608      	mov	r0, r1
 800dd20:	4611      	mov	r1, r2
 800dd22:	2200      	movs	r2, #0
 800dd24:	602a      	str	r2, [r5, #0]
 800dd26:	461a      	mov	r2, r3
 800dd28:	f7f3 fc2d 	bl	8001586 <_read>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_read_r+0x1e>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_read_r+0x1e>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	20000428 	.word	0x20000428

0800dd3c <_sbrk_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	2300      	movs	r3, #0
 800dd40:	4d05      	ldr	r5, [pc, #20]	; (800dd58 <_sbrk_r+0x1c>)
 800dd42:	4604      	mov	r4, r0
 800dd44:	4608      	mov	r0, r1
 800dd46:	602b      	str	r3, [r5, #0]
 800dd48:	f7f3 fc8a 	bl	8001660 <_sbrk>
 800dd4c:	1c43      	adds	r3, r0, #1
 800dd4e:	d102      	bne.n	800dd56 <_sbrk_r+0x1a>
 800dd50:	682b      	ldr	r3, [r5, #0]
 800dd52:	b103      	cbz	r3, 800dd56 <_sbrk_r+0x1a>
 800dd54:	6023      	str	r3, [r4, #0]
 800dd56:	bd38      	pop	{r3, r4, r5, pc}
 800dd58:	20000428 	.word	0x20000428

0800dd5c <_write_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4604      	mov	r4, r0
 800dd60:	4d06      	ldr	r5, [pc, #24]	; (800dd7c <_write_r+0x20>)
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	602a      	str	r2, [r5, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	f7f3 fc28 	bl	80015c0 <_write>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_write_r+0x1e>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_write_r+0x1e>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20000428 	.word	0x20000428

0800dd80 <__assert_func>:
 800dd80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd82:	4614      	mov	r4, r2
 800dd84:	461a      	mov	r2, r3
 800dd86:	4b09      	ldr	r3, [pc, #36]	; (800ddac <__assert_func+0x2c>)
 800dd88:	4605      	mov	r5, r0
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	68d8      	ldr	r0, [r3, #12]
 800dd8e:	b14c      	cbz	r4, 800dda4 <__assert_func+0x24>
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <__assert_func+0x30>)
 800dd92:	9100      	str	r1, [sp, #0]
 800dd94:	4907      	ldr	r1, [pc, #28]	; (800ddb4 <__assert_func+0x34>)
 800dd96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd9a:	462b      	mov	r3, r5
 800dd9c:	f000 f878 	bl	800de90 <fiprintf>
 800dda0:	f000 f888 	bl	800deb4 <abort>
 800dda4:	4b04      	ldr	r3, [pc, #16]	; (800ddb8 <__assert_func+0x38>)
 800dda6:	461c      	mov	r4, r3
 800dda8:	e7f3      	b.n	800dd92 <__assert_func+0x12>
 800ddaa:	bf00      	nop
 800ddac:	200001d0 	.word	0x200001d0
 800ddb0:	0800e464 	.word	0x0800e464
 800ddb4:	0800e471 	.word	0x0800e471
 800ddb8:	0800e49f 	.word	0x0800e49f

0800ddbc <_calloc_r>:
 800ddbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddbe:	fba1 2402 	umull	r2, r4, r1, r2
 800ddc2:	b94c      	cbnz	r4, 800ddd8 <_calloc_r+0x1c>
 800ddc4:	4611      	mov	r1, r2
 800ddc6:	9201      	str	r2, [sp, #4]
 800ddc8:	f7fe ffd0 	bl	800cd6c <_malloc_r>
 800ddcc:	9a01      	ldr	r2, [sp, #4]
 800ddce:	4605      	mov	r5, r0
 800ddd0:	b930      	cbnz	r0, 800dde0 <_calloc_r+0x24>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	b003      	add	sp, #12
 800ddd6:	bd30      	pop	{r4, r5, pc}
 800ddd8:	220c      	movs	r2, #12
 800ddda:	2500      	movs	r5, #0
 800dddc:	6002      	str	r2, [r0, #0]
 800ddde:	e7f8      	b.n	800ddd2 <_calloc_r+0x16>
 800dde0:	4621      	mov	r1, r4
 800dde2:	f7fd fac5 	bl	800b370 <memset>
 800dde6:	e7f4      	b.n	800ddd2 <_calloc_r+0x16>

0800dde8 <_free_r>:
 800dde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddea:	2900      	cmp	r1, #0
 800ddec:	d043      	beq.n	800de76 <_free_r+0x8e>
 800ddee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddf2:	1f0c      	subs	r4, r1, #4
 800ddf4:	9001      	str	r0, [sp, #4]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	bfb8      	it	lt
 800ddfa:	18e4      	addlt	r4, r4, r3
 800ddfc:	f7ff f8f4 	bl	800cfe8 <__malloc_lock>
 800de00:	4a1e      	ldr	r2, [pc, #120]	; (800de7c <_free_r+0x94>)
 800de02:	9801      	ldr	r0, [sp, #4]
 800de04:	6813      	ldr	r3, [r2, #0]
 800de06:	b933      	cbnz	r3, 800de16 <_free_r+0x2e>
 800de08:	6063      	str	r3, [r4, #4]
 800de0a:	6014      	str	r4, [r2, #0]
 800de0c:	b003      	add	sp, #12
 800de0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de12:	f7ff b8ef 	b.w	800cff4 <__malloc_unlock>
 800de16:	42a3      	cmp	r3, r4
 800de18:	d908      	bls.n	800de2c <_free_r+0x44>
 800de1a:	6825      	ldr	r5, [r4, #0]
 800de1c:	1961      	adds	r1, r4, r5
 800de1e:	428b      	cmp	r3, r1
 800de20:	bf01      	itttt	eq
 800de22:	6819      	ldreq	r1, [r3, #0]
 800de24:	685b      	ldreq	r3, [r3, #4]
 800de26:	1949      	addeq	r1, r1, r5
 800de28:	6021      	streq	r1, [r4, #0]
 800de2a:	e7ed      	b.n	800de08 <_free_r+0x20>
 800de2c:	461a      	mov	r2, r3
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	b10b      	cbz	r3, 800de36 <_free_r+0x4e>
 800de32:	42a3      	cmp	r3, r4
 800de34:	d9fa      	bls.n	800de2c <_free_r+0x44>
 800de36:	6811      	ldr	r1, [r2, #0]
 800de38:	1855      	adds	r5, r2, r1
 800de3a:	42a5      	cmp	r5, r4
 800de3c:	d10b      	bne.n	800de56 <_free_r+0x6e>
 800de3e:	6824      	ldr	r4, [r4, #0]
 800de40:	4421      	add	r1, r4
 800de42:	1854      	adds	r4, r2, r1
 800de44:	6011      	str	r1, [r2, #0]
 800de46:	42a3      	cmp	r3, r4
 800de48:	d1e0      	bne.n	800de0c <_free_r+0x24>
 800de4a:	681c      	ldr	r4, [r3, #0]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	440c      	add	r4, r1
 800de50:	6053      	str	r3, [r2, #4]
 800de52:	6014      	str	r4, [r2, #0]
 800de54:	e7da      	b.n	800de0c <_free_r+0x24>
 800de56:	d902      	bls.n	800de5e <_free_r+0x76>
 800de58:	230c      	movs	r3, #12
 800de5a:	6003      	str	r3, [r0, #0]
 800de5c:	e7d6      	b.n	800de0c <_free_r+0x24>
 800de5e:	6825      	ldr	r5, [r4, #0]
 800de60:	1961      	adds	r1, r4, r5
 800de62:	428b      	cmp	r3, r1
 800de64:	bf02      	ittt	eq
 800de66:	6819      	ldreq	r1, [r3, #0]
 800de68:	685b      	ldreq	r3, [r3, #4]
 800de6a:	1949      	addeq	r1, r1, r5
 800de6c:	6063      	str	r3, [r4, #4]
 800de6e:	bf08      	it	eq
 800de70:	6021      	streq	r1, [r4, #0]
 800de72:	6054      	str	r4, [r2, #4]
 800de74:	e7ca      	b.n	800de0c <_free_r+0x24>
 800de76:	b003      	add	sp, #12
 800de78:	bd30      	pop	{r4, r5, pc}
 800de7a:	bf00      	nop
 800de7c:	20000420 	.word	0x20000420

0800de80 <_malloc_usable_size_r>:
 800de80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de84:	1f18      	subs	r0, r3, #4
 800de86:	2b00      	cmp	r3, #0
 800de88:	bfbc      	itt	lt
 800de8a:	580b      	ldrlt	r3, [r1, r0]
 800de8c:	18c0      	addlt	r0, r0, r3
 800de8e:	4770      	bx	lr

0800de90 <fiprintf>:
 800de90:	b40e      	push	{r1, r2, r3}
 800de92:	b503      	push	{r0, r1, lr}
 800de94:	ab03      	add	r3, sp, #12
 800de96:	4601      	mov	r1, r0
 800de98:	4805      	ldr	r0, [pc, #20]	; (800deb0 <fiprintf+0x20>)
 800de9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800de9e:	6800      	ldr	r0, [r0, #0]
 800dea0:	9301      	str	r3, [sp, #4]
 800dea2:	f7fe fe21 	bl	800cae8 <_vfiprintf_r>
 800dea6:	b002      	add	sp, #8
 800dea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800deac:	b003      	add	sp, #12
 800deae:	4770      	bx	lr
 800deb0:	200001d0 	.word	0x200001d0

0800deb4 <abort>:
 800deb4:	2006      	movs	r0, #6
 800deb6:	b508      	push	{r3, lr}
 800deb8:	f000 f82c 	bl	800df14 <raise>
 800debc:	2001      	movs	r0, #1
 800debe:	f7f3 fb58 	bl	8001572 <_exit>

0800dec2 <_raise_r>:
 800dec2:	291f      	cmp	r1, #31
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4604      	mov	r4, r0
 800dec8:	460d      	mov	r5, r1
 800deca:	d904      	bls.n	800ded6 <_raise_r+0x14>
 800decc:	2316      	movs	r3, #22
 800dece:	6003      	str	r3, [r0, #0]
 800ded0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ded4:	bd38      	pop	{r3, r4, r5, pc}
 800ded6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ded8:	b112      	cbz	r2, 800dee0 <_raise_r+0x1e>
 800deda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dede:	b94b      	cbnz	r3, 800def4 <_raise_r+0x32>
 800dee0:	4620      	mov	r0, r4
 800dee2:	f000 f831 	bl	800df48 <_getpid_r>
 800dee6:	462a      	mov	r2, r5
 800dee8:	4601      	mov	r1, r0
 800deea:	4620      	mov	r0, r4
 800deec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800def0:	f000 b818 	b.w	800df24 <_kill_r>
 800def4:	2b01      	cmp	r3, #1
 800def6:	d00a      	beq.n	800df0e <_raise_r+0x4c>
 800def8:	1c59      	adds	r1, r3, #1
 800defa:	d103      	bne.n	800df04 <_raise_r+0x42>
 800defc:	2316      	movs	r3, #22
 800defe:	6003      	str	r3, [r0, #0]
 800df00:	2001      	movs	r0, #1
 800df02:	e7e7      	b.n	800ded4 <_raise_r+0x12>
 800df04:	2400      	movs	r4, #0
 800df06:	4628      	mov	r0, r5
 800df08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800df0c:	4798      	blx	r3
 800df0e:	2000      	movs	r0, #0
 800df10:	e7e0      	b.n	800ded4 <_raise_r+0x12>
	...

0800df14 <raise>:
 800df14:	4b02      	ldr	r3, [pc, #8]	; (800df20 <raise+0xc>)
 800df16:	4601      	mov	r1, r0
 800df18:	6818      	ldr	r0, [r3, #0]
 800df1a:	f7ff bfd2 	b.w	800dec2 <_raise_r>
 800df1e:	bf00      	nop
 800df20:	200001d0 	.word	0x200001d0

0800df24 <_kill_r>:
 800df24:	b538      	push	{r3, r4, r5, lr}
 800df26:	2300      	movs	r3, #0
 800df28:	4d06      	ldr	r5, [pc, #24]	; (800df44 <_kill_r+0x20>)
 800df2a:	4604      	mov	r4, r0
 800df2c:	4608      	mov	r0, r1
 800df2e:	4611      	mov	r1, r2
 800df30:	602b      	str	r3, [r5, #0]
 800df32:	f7f3 fb0e 	bl	8001552 <_kill>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d102      	bne.n	800df40 <_kill_r+0x1c>
 800df3a:	682b      	ldr	r3, [r5, #0]
 800df3c:	b103      	cbz	r3, 800df40 <_kill_r+0x1c>
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd38      	pop	{r3, r4, r5, pc}
 800df42:	bf00      	nop
 800df44:	20000428 	.word	0x20000428

0800df48 <_getpid_r>:
 800df48:	f7f3 bafb 	b.w	8001542 <_getpid>

0800df4c <_init>:
 800df4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df4e:	bf00      	nop
 800df50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df52:	bc08      	pop	{r3}
 800df54:	469e      	mov	lr, r3
 800df56:	4770      	bx	lr

0800df58 <_fini>:
 800df58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df5a:	bf00      	nop
 800df5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df5e:	bc08      	pop	{r3}
 800df60:	469e      	mov	lr, r3
 800df62:	4770      	bx	lr
