
SerialCommunicationControls.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b48  0800024c  0800024c  0001024c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007de4  08007de4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007de4  08007de4  00017de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dec  08007dec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dec  08007dec  00017dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007df0  08007df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08007e00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08007e00  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d947  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c1  00000000  00000000  0002d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000968  00000000  00000000  0002f290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000741  00000000  00000000  0002fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f2fc  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d3b3  00000000  00000000  0005f635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012b5fd  00000000  00000000  0006c9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002694  00000000  00000000  00197fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0019a67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000000c 	.word	0x2000000c
 8000268:	00000000 	.word	0x00000000
 800026c:	08007d7c 	.word	0x08007d7c

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000010 	.word	0x20000010
 8000288:	08007d7c 	.word	0x08007d7c

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800029c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a0:	f000 b982 	b.w	80005a8 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002c2:	460d      	mov	r5, r1
 80002c4:	4604      	mov	r4, r0
 80002c6:	460f      	mov	r7, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d146      	bne.n	800035a <__udivmoddi4+0x9e>
 80002cc:	428a      	cmp	r2, r1
 80002ce:	4694      	mov	ip, r2
 80002d0:	d95e      	bls.n	8000390 <__udivmoddi4+0xd4>
 80002d2:	fab2 f382 	clz	r3, r2
 80002d6:	b143      	cbz	r3, 80002ea <__udivmoddi4+0x2e>
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	409c      	lsls	r4, r3
 80002e4:	fa20 f202 	lsr.w	r2, r0, r2
 80002e8:	4317      	orrs	r7, r2
 80002ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ee:	fa1f f58c 	uxth.w	r5, ip
 80002f2:	0c22      	lsrs	r2, r4, #16
 80002f4:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002fc:	fb01 f005 	mul.w	r0, r1, r5
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x5e>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x5c>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 8134 	bhi.w	8000580 <__udivmoddi4+0x2c4>
 8000318:	4639      	mov	r1, r7
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	b2a4      	uxth	r4, r4
 800031e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000322:	fb0e 2210 	mls	r2, lr, r0, r2
 8000326:	fb00 f505 	mul.w	r5, r0, r5
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	42a5      	cmp	r5, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x88>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x86>
 800033c:	42a5      	cmp	r5, r4
 800033e:	f200 8119 	bhi.w	8000574 <__udivmoddi4+0x2b8>
 8000342:	4610      	mov	r0, r2
 8000344:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000348:	1b64      	subs	r4, r4, r5
 800034a:	2100      	movs	r1, #0
 800034c:	b11e      	cbz	r6, 8000356 <__udivmoddi4+0x9a>
 800034e:	40dc      	lsrs	r4, r3
 8000350:	2300      	movs	r3, #0
 8000352:	e9c6 4300 	strd	r4, r3, [r6]
 8000356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d908      	bls.n	8000370 <__udivmoddi4+0xb4>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80fc 	beq.w	800055c <__udivmoddi4+0x2a0>
 8000364:	2100      	movs	r1, #0
 8000366:	e9c6 0500 	strd	r0, r5, [r6]
 800036a:	4608      	mov	r0, r1
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f183 	clz	r1, r3
 8000374:	2900      	cmp	r1, #0
 8000376:	d14c      	bne.n	8000412 <__udivmoddi4+0x156>
 8000378:	42ab      	cmp	r3, r5
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2a6>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2a6>
 8000384:	4608      	mov	r0, r1
 8000386:	2e00      	cmp	r6, #0
 8000388:	d0e5      	beq.n	8000356 <__udivmoddi4+0x9a>
 800038a:	e9c6 4700 	strd	r4, r7, [r6]
 800038e:	e7e2      	b.n	8000356 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xd8>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809f 	bne.w	80004dc <__udivmoddi4+0x220>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a4:	fa1f f78c 	uxth.w	r7, ip
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f5fe 	udiv	r5, r2, lr
 80003ae:	fb0e 2015 	mls	r0, lr, r5, r2
 80003b2:	0c22      	lsrs	r2, r4, #16
 80003b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b8:	fb07 f005 	mul.w	r0, r7, r5
 80003bc:	4290      	cmp	r0, r2
 80003be:	d90f      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003c0:	eb1c 0202 	adds.w	r2, ip, r2
 80003c4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003c8:	bf2c      	ite	cs
 80003ca:	f04f 0901 	movcs.w	r9, #1
 80003ce:	f04f 0900 	movcc.w	r9, #0
 80003d2:	4290      	cmp	r0, r2
 80003d4:	d903      	bls.n	80003de <__udivmoddi4+0x122>
 80003d6:	f1b9 0f00 	cmp.w	r9, #0
 80003da:	f000 80ce 	beq.w	800057a <__udivmoddi4+0x2be>
 80003de:	4645      	mov	r5, r8
 80003e0:	1a12      	subs	r2, r2, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e8:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ec:	fb00 f707 	mul.w	r7, r0, r7
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	42a7      	cmp	r7, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x14e>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000400:	d202      	bcs.n	8000408 <__udivmoddi4+0x14c>
 8000402:	42a7      	cmp	r7, r4
 8000404:	f200 80b3 	bhi.w	800056e <__udivmoddi4+0x2b2>
 8000408:	4610      	mov	r0, r2
 800040a:	1be4      	subs	r4, r4, r7
 800040c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000410:	e79c      	b.n	800034c <__udivmoddi4+0x90>
 8000412:	f1c1 0420 	rsb	r4, r1, #32
 8000416:	408b      	lsls	r3, r1
 8000418:	fa05 fc01 	lsl.w	ip, r5, r1
 800041c:	fa22 f704 	lsr.w	r7, r2, r4
 8000420:	40e5      	lsrs	r5, r4
 8000422:	408a      	lsls	r2, r1
 8000424:	431f      	orrs	r7, r3
 8000426:	fa20 f304 	lsr.w	r3, r0, r4
 800042a:	4088      	lsls	r0, r1
 800042c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000430:	ea43 030c 	orr.w	r3, r3, ip
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800043c:	fbb5 fef8 	udiv	lr, r5, r8
 8000440:	fb08 551e 	mls	r5, r8, lr, r5
 8000444:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000448:	fb0e f90c 	mul.w	r9, lr, ip
 800044c:	45a9      	cmp	r9, r5
 800044e:	d90e      	bls.n	800046e <__udivmoddi4+0x1b2>
 8000450:	197d      	adds	r5, r7, r5
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	45a9      	cmp	r9, r5
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b0>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ca>
 800046c:	46d6      	mov	lr, sl
 800046e:	eba5 0509 	sub.w	r5, r5, r9
 8000472:	fa1f f983 	uxth.w	r9, r3
 8000476:	fbb5 f3f8 	udiv	r3, r5, r8
 800047a:	fb08 5513 	mls	r5, r8, r3, r5
 800047e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000482:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000486:	45ac      	cmp	ip, r5
 8000488:	d906      	bls.n	8000498 <__udivmoddi4+0x1dc>
 800048a:	197d      	adds	r5, r7, r5
 800048c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x1da>
 8000492:	45ac      	cmp	ip, r5
 8000494:	d87e      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 8000496:	4643      	mov	r3, r8
 8000498:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800049c:	eba5 050c 	sub.w	r5, r5, ip
 80004a0:	fba3 9802 	umull	r9, r8, r3, r2
 80004a4:	4545      	cmp	r5, r8
 80004a6:	46ce      	mov	lr, r9
 80004a8:	46c4      	mov	ip, r8
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x1f6>
 80004ac:	d106      	bne.n	80004bc <__udivmoddi4+0x200>
 80004ae:	4548      	cmp	r0, r9
 80004b0:	d204      	bcs.n	80004bc <__udivmoddi4+0x200>
 80004b2:	3b01      	subs	r3, #1
 80004b4:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b8:	eb68 0c07 	sbc.w	ip, r8, r7
 80004bc:	2e00      	cmp	r6, #0
 80004be:	d06f      	beq.n	80005a0 <__udivmoddi4+0x2e4>
 80004c0:	ebb0 020e 	subs.w	r2, r0, lr
 80004c4:	eb65 050c 	sbc.w	r5, r5, ip
 80004c8:	40ca      	lsrs	r2, r1
 80004ca:	fa05 f404 	lsl.w	r4, r5, r4
 80004ce:	40cd      	lsrs	r5, r1
 80004d0:	4618      	mov	r0, r3
 80004d2:	4314      	orrs	r4, r2
 80004d4:	2100      	movs	r1, #0
 80004d6:	e9c6 4500 	strd	r4, r5, [r6]
 80004da:	e73c      	b.n	8000356 <__udivmoddi4+0x9a>
 80004dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e0:	f1c3 0220 	rsb	r2, r3, #32
 80004e4:	4099      	lsls	r1, r3
 80004e6:	409c      	lsls	r4, r3
 80004e8:	40d5      	lsrs	r5, r2
 80004ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ee:	fa20 f202 	lsr.w	r2, r0, r2
 80004f2:	fa1f f78c 	uxth.w	r7, ip
 80004f6:	fbb5 f0fe 	udiv	r0, r5, lr
 80004fa:	430a      	orrs	r2, r1
 80004fc:	fb0e 5510 	mls	r5, lr, r0, r5
 8000500:	0c11      	lsrs	r1, r2, #16
 8000502:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000506:	fb00 f507 	mul.w	r5, r0, r7
 800050a:	428d      	cmp	r5, r1
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x270>
 800050e:	eb1c 0101 	adds.w	r1, ip, r1
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	428d      	cmp	r5, r1
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x26e>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d2>
 800052a:	4640      	mov	r0, r8
 800052c:	1b49      	subs	r1, r1, r5
 800052e:	b292      	uxth	r2, r2
 8000530:	fbb1 f5fe 	udiv	r5, r1, lr
 8000534:	fb0e 1115 	mls	r1, lr, r5, r1
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	fb05 f107 	mul.w	r1, r5, r7
 8000540:	4291      	cmp	r1, r2
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x298>
 8000544:	eb1c 0202 	adds.w	r2, ip, r2
 8000548:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x296>
 800054e:	4291      	cmp	r1, r2
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2de>
 8000552:	4645      	mov	r5, r8
 8000554:	1a52      	subs	r2, r2, r1
 8000556:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800055a:	e726      	b.n	80003aa <__udivmoddi4+0xee>
 800055c:	4631      	mov	r1, r6
 800055e:	4630      	mov	r0, r6
 8000560:	e6f9      	b.n	8000356 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb65 0203 	sbc.w	r2, r5, r3
 8000568:	2001      	movs	r0, #1
 800056a:	4617      	mov	r7, r2
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xca>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14e>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e4      	b.n	8000344 <__udivmoddi4+0x88>
 800057a:	3d02      	subs	r5, #2
 800057c:	4462      	add	r2, ip
 800057e:	e72f      	b.n	80003e0 <__udivmoddi4+0x124>
 8000580:	3902      	subs	r1, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c9      	b.n	800031a <__udivmoddi4+0x5e>
 8000586:	f1ae 0e02 	sub.w	lr, lr, #2
 800058a:	443d      	add	r5, r7
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b2>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x270>
 8000594:	3b02      	subs	r3, #2
 8000596:	443d      	add	r5, r7
 8000598:	e77e      	b.n	8000498 <__udivmoddi4+0x1dc>
 800059a:	3d02      	subs	r5, #2
 800059c:	4462      	add	r2, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x298>
 80005a0:	4618      	mov	r0, r3
 80005a2:	4631      	mov	r1, r6
 80005a4:	e6d7      	b.n	8000356 <__udivmoddi4+0x9a>
 80005a6:	bf00      	nop

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 faef 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f84b 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ba:	f000 f8f5 	bl	80007a8 <MX_GPIO_Init>
  MX_MEMORYMAP_Init();
 80005be:	f000 f89f 	bl	8000700 <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 80005c2:	f000 f8a5 	bl	8000710 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart3, receivedMessage, 2, HAL_MAX_DELAY);
 80005c6:	1d39      	adds	r1, r7, #4
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005cc:	2202      	movs	r2, #2
 80005ce:	4818      	ldr	r0, [pc, #96]	; (8000630 <main+0x84>)
 80005d0:	f006 fdc6 	bl	8007160 <HAL_UART_Receive>

	  //HAL_UART_Transmit(&huart3, (uint8_t *)receivedMessage, 2, 100);

	  GPIO_PinState state = GPIO_PIN_SET;
 80005d4:	2301      	movs	r3, #1
 80005d6:	71fb      	strb	r3, [r7, #7]

	  if (receivedMessage[1] == "0")
 80005d8:	797b      	ldrb	r3, [r7, #5]
 80005da:	461a      	mov	r2, r3
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <main+0x88>)
 80005de:	429a      	cmp	r2, r3
 80005e0:	d101      	bne.n	80005e6 <main+0x3a>
		  state = GPIO_PIN_RESET;
 80005e2:	2300      	movs	r3, #0
 80005e4:	71fb      	strb	r3, [r7, #7]

	  if (receivedMessage[0] == "R")
 80005e6:	793b      	ldrb	r3, [r7, #4]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0x8c>)
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d106      	bne.n	80005fe <main+0x52>
		  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, state);
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	461a      	mov	r2, r3
 80005f4:	2110      	movs	r1, #16
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <main+0x90>)
 80005f8:	f000 fd7e 	bl	80010f8 <HAL_GPIO_WritePin>
 80005fc:	e7e3      	b.n	80005c6 <main+0x1a>
	  else if (receivedMessage[0] == "Y")
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	461a      	mov	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x94>)
 8000604:	429a      	cmp	r2, r3
 8000606:	d106      	bne.n	8000616 <main+0x6a>
		  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	461a      	mov	r2, r3
 800060c:	2110      	movs	r1, #16
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <main+0x98>)
 8000610:	f000 fd72 	bl	80010f8 <HAL_GPIO_WritePin>
 8000614:	e7d7      	b.n	80005c6 <main+0x1a>
	  else if (receivedMessage[0] == "G")
 8000616:	793b      	ldrb	r3, [r7, #4]
 8000618:	461a      	mov	r2, r3
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <main+0x9c>)
 800061c:	429a      	cmp	r2, r3
 800061e:	d1d2      	bne.n	80005c6 <main+0x1a>
		  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, state);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	461a      	mov	r2, r3
 8000624:	2101      	movs	r1, #1
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <main+0xa0>)
 8000628:	f000 fd66 	bl	80010f8 <HAL_GPIO_WritePin>
  {
 800062c:	e7cb      	b.n	80005c6 <main+0x1a>
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028
 8000634:	08007d94 	.word	0x08007d94
 8000638:	08007d98 	.word	0x08007d98
 800063c:	42021800 	.word	0x42021800
 8000640:	08007d9c 	.word	0x08007d9c
 8000644:	42021400 	.word	0x42021400
 8000648:	08007da0 	.word	0x08007da0
 800064c:	42020400 	.word	0x42020400

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b09c      	sub	sp, #112	; 0x70
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2250      	movs	r2, #80	; 0x50
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f007 fb60 	bl	8007d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000676:	4b21      	ldr	r3, [pc, #132]	; (80006fc <SystemClock_Config+0xac>)
 8000678:	691b      	ldr	r3, [r3, #16]
 800067a:	4a20      	ldr	r2, [pc, #128]	; (80006fc <SystemClock_Config+0xac>)
 800067c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000680:	6113      	str	r3, [r2, #16]
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <SystemClock_Config+0xac>)
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068e:	bf00      	nop
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <SystemClock_Config+0xac>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	f003 0308 	and.w	r3, r3, #8
 8000698:	2b08      	cmp	r3, #8
 800069a:	d1f9      	bne.n	8000690 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 80006a4:	2308      	movs	r3, #8
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2340      	movs	r3, #64	; 0x40
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f107 0320 	add.w	r3, r7, #32
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fd37 	bl	8001128 <HAL_RCC_OscConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006c0:	f000 f8fe 	bl	80008c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c4:	231f      	movs	r3, #31
 80006c6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2101      	movs	r1, #1
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f958 	bl	8001998 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ee:	f000 f8e7 	bl	80008c0 <Error_Handler>
  }
}
 80006f2:	bf00      	nop
 80006f4:	3770      	adds	r7, #112	; 0x70
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	44020800 	.word	0x44020800

08000700 <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_USART3_UART_Init+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 8000754:	2200      	movs	r2, #0
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800075a:	f006 fcb1 	bl	80070c0 <HAL_UART_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000764:	f000 f8ac 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000768:	2100      	movs	r1, #0
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800076c:	f007 fa10 	bl	8007b90 <HAL_UARTEx_SetTxFifoThreshold>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000776:	f000 f8a3 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077a:	2100      	movs	r1, #0
 800077c:	4808      	ldr	r0, [pc, #32]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800077e:	f007 fa45 	bl	8007c0c <HAL_UARTEx_SetRxFifoThreshold>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000788:	f000 f89a 	bl	80008c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_USART3_UART_Init+0x90>)
 800078e:	f007 f9c6 	bl	8007b1e <HAL_UARTEx_DisableFifoMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000798:	f000 f892 	bl	80008c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40004800 	.word	0x40004800

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007be:	4b3c      	ldr	r3, [pc, #240]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007c4:	4a3a      	ldr	r2, [pc, #232]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007c6:	f043 0320 	orr.w	r3, r3, #32
 80007ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ce:	4b38      	ldr	r3, [pc, #224]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007d4:	f003 0320 	and.w	r3, r3, #32
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b34      	ldr	r3, [pc, #208]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007e2:	4a33      	ldr	r2, [pc, #204]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80007ec:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <MX_GPIO_Init+0x108>)
 80007fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000800:	4a2b      	ldr	r2, [pc, #172]	; (80008b0 <MX_GPIO_Init+0x108>)
 8000802:	f043 0308 	orr.w	r3, r3, #8
 8000806:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <MX_GPIO_Init+0x108>)
 800080c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000810:	f003 0308 	and.w	r3, r3, #8
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000818:	4b25      	ldr	r3, [pc, #148]	; (80008b0 <MX_GPIO_Init+0x108>)
 800081a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800081e:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <MX_GPIO_Init+0x108>)
 8000820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000824:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_GPIO_Init+0x108>)
 800082a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800082e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2110      	movs	r1, #16
 800083a:	481e      	ldr	r0, [pc, #120]	; (80008b4 <MX_GPIO_Init+0x10c>)
 800083c:	f000 fc5c 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2101      	movs	r1, #1
 8000844:	481c      	ldr	r0, [pc, #112]	; (80008b8 <MX_GPIO_Init+0x110>)
 8000846:	f000 fc57 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2110      	movs	r1, #16
 800084e:	481b      	ldr	r0, [pc, #108]	; (80008bc <MX_GPIO_Init+0x114>)
 8000850:	f000 fc52 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000854:	2310      	movs	r3, #16
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_GPIO_Init+0x10c>)
 800086c:	f000 faf2 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000870:	2301      	movs	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4619      	mov	r1, r3
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MX_GPIO_Init+0x110>)
 8000888:	f000 fae4 	bl	8000e54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800088c:	2310      	movs	r3, #16
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_GPIO_Init+0x114>)
 80008a4:	f000 fad6 	bl	8000e54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	44020c00 	.word	0x44020c00
 80008b4:	42021400 	.word	0x42021400
 80008b8:	42020400 	.word	0x42020400
 80008bc:	42021800 	.word	0x42021800

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
}
 80008c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler+0x8>

080008ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b0cc      	sub	sp, #304	; 0x130
 80008dc:	af00      	add	r7, sp, #0
 80008de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008e6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80008fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000900:	4618      	mov	r0, r3
 8000902:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000906:	461a      	mov	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f007 fa0b 	bl	8007d24 <memset>
  if(huart->Instance==USART3)
 800090e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a33      	ldr	r2, [pc, #204]	; (80009e8 <HAL_UART_MspInit+0x110>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d15d      	bne.n	80009dc <HAL_UART_MspInit+0x104>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000924:	f5a3 7190 	sub.w	r1, r3, #288	; 0x120
 8000928:	f04f 0204 	mov.w	r2, #4
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000938:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800093c:	2200      	movs	r2, #0
 800093e:	665a      	str	r2, [r3, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4618      	mov	r0, r3
 8000946:	f001 fb69 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8000950:	f7ff ffb6 	bl	80008c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000954:	4b25      	ldr	r3, [pc, #148]	; (80009ec <HAL_UART_MspInit+0x114>)
 8000956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800095a:	4a24      	ldr	r2, [pc, #144]	; (80009ec <HAL_UART_MspInit+0x114>)
 800095c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000960:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <HAL_UART_MspInit+0x114>)
 8000966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800096a:	f403 2280 	and.w	r2, r3, #262144	; 0x40000
 800096e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000972:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800097c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000980:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_MspInit+0x114>)
 8000984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <HAL_UART_MspInit+0x114>)
 800098a:	f043 0308 	orr.w	r3, r3, #8
 800098e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000992:	4b16      	ldr	r3, [pc, #88]	; (80009ec <HAL_UART_MspInit+0x114>)
 8000994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000998:	f003 0208 	and.w	r2, r3, #8
 800099c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80009ae:	681b      	ldr	r3, [r3, #0]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ca:	2307      	movs	r3, #7
 80009cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <HAL_UART_MspInit+0x118>)
 80009d8:	f000 fa3c 	bl	8000e54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009dc:	bf00      	nop
 80009de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40004800 	.word	0x40004800
 80009ec:	44020c00 	.word	0x44020c00
 80009f0:	42020c00 	.word	0x42020c00

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f904 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a4e:	4b35      	ldr	r3, [pc, #212]	; (8000b24 <SystemInit+0xdc>)
 8000a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a54:	4a33      	ldr	r2, [pc, #204]	; (8000b24 <SystemInit+0xdc>)
 8000a56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <SystemInit+0xe0>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000a64:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <SystemInit+0xe0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000a6a:	4b2f      	ldr	r3, [pc, #188]	; (8000b28 <SystemInit+0xe0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <SystemInit+0xe0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	492c      	ldr	r1, [pc, #176]	; (8000b28 <SystemInit+0xe0>)
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <SystemInit+0xe4>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <SystemInit+0xe0>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8000a82:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <SystemInit+0xe0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	; 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemInit+0xe0>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <SystemInit+0xe0>)
 8000a90:	4a27      	ldr	r2, [pc, #156]	; (8000b30 <SystemInit+0xe8>)
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemInit+0xe0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8000a9a:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <SystemInit+0xe0>)
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <SystemInit+0xe8>)
 8000a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <SystemInit+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	641a      	str	r2, [r3, #64]	; 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <SystemInit+0xe0>)
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <SystemInit+0xe8>)
 8000aaa:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8000aac:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <SystemInit+0xe0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000ab2:	4b1d      	ldr	r3, [pc, #116]	; (8000b28 <SystemInit+0xe0>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	; (8000b28 <SystemInit+0xe0>)
 8000ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000abe:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <SystemInit+0xe0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <SystemInit+0xdc>)
 8000ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aca:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8000acc:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <SystemInit+0xec>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8000ad4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f1b3 4f60 	cmp.w	r3, #3758096384	; 0xe0000000
 8000adc:	d003      	beq.n	8000ae6 <SystemInit+0x9e>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000ae4:	d117      	bne.n	8000b16 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <SystemInit+0xec>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8000af2:	4b10      	ldr	r3, [pc, #64]	; (8000b34 <SystemInit+0xec>)
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <SystemInit+0xf0>)
 8000af6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <SystemInit+0xec>)
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <SystemInit+0xf4>)
 8000afc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <SystemInit+0xec>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <SystemInit+0xec>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <SystemInit+0xec>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <SystemInit+0xec>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	61d3      	str	r3, [r2, #28]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00
 8000b28:	44020c00 	.word	0x44020c00
 8000b2c:	eae2eae3 	.word	0xeae2eae3
 8000b30:	01010280 	.word	0x01010280
 8000b34:	40022000 	.word	0x40022000
 8000b38:	08192a3b 	.word	0x08192a3b
 8000b3c:	4c5d6e7f 	.word	0x4c5d6e7f

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b44:	f7ff ff80 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	; (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	; (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b6e:	f007 f8e1 	bl	8007d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fd1b 	bl	80005ac <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   r0, =_estack
 8000b78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b84:	08007df4 	.word	0x08007df4
  ldr r2, =_sbss
 8000b88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b8c:	200000c0 	.word	0x200000c0

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f929 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b9e:	f001 f8b3 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <HAL_Init+0x40>)
 8000ba6:	6a1b      	ldr	r3, [r3, #32]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	490a      	ldr	r1, [pc, #40]	; (8000bd8 <HAL_Init+0x44>)
 8000bae:	5ccb      	ldrb	r3, [r1, r3]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	4a09      	ldr	r2, [pc, #36]	; (8000bdc <HAL_Init+0x48>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb8:	200f      	movs	r0, #15
 8000bba:	f000 f811 	bl	8000be0 <HAL_InitTick>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	e002      	b.n	8000bce <HAL_Init+0x3a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe7f 	bl	80008ca <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	44020c00 	.word	0x44020c00
 8000bd8:	08007da4 	.word	0x08007da4
 8000bdc:	20000000 	.word	0x20000000

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_InitTick+0x60>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e021      	b.n	8000c38 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_InitTick+0x64>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_InitTick+0x60>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f915 	bl	8000e3a <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c28:	f000 f8ed 	bl	8000e06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <HAL_InitTick+0x68>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000bc 	.word	0x200000bc

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	; (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000bc 	.word	0x200000bc

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db0a      	blt.n	8000d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	490c      	ldr	r1, [pc, #48]	; (8000d3c <__NVIC_SetPriority+0x4c>)
 8000d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d0e:	0112      	lsls	r2, r2, #4
 8000d10:	b2d2      	uxtb	r2, r2
 8000d12:	440b      	add	r3, r1
 8000d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d18:	e00a      	b.n	8000d30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4908      	ldr	r1, [pc, #32]	; (8000d40 <__NVIC_SetPriority+0x50>)
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	f003 030f 	and.w	r3, r3, #15
 8000d26:	3b04      	subs	r3, #4
 8000d28:	0112      	lsls	r2, r2, #4
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	440b      	add	r3, r1
 8000d2e:	761a      	strb	r2, [r3, #24]
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f1c3 0307 	rsb	r3, r3, #7
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	bf28      	it	cs
 8000d62:	2304      	movcs	r3, #4
 8000d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	2b06      	cmp	r3, #6
 8000d6c:	d902      	bls.n	8000d74 <NVIC_EncodePriority+0x30>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3b03      	subs	r3, #3
 8000d72:	e000      	b.n	8000d76 <NVIC_EncodePriority+0x32>
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	401a      	ands	r2, r3
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	fa01 f303 	lsl.w	r3, r1, r3
 8000d96:	43d9      	mvns	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	4313      	orrs	r3, r2
         );
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3724      	adds	r7, #36	; 0x24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dbc:	d301      	bcc.n	8000dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00f      	b.n	8000de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc2:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <SysTick_Config+0x40>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dca:	210f      	movs	r1, #15
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd0:	f7ff ff8e 	bl	8000cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <SysTick_Config+0x40>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <SysTick_Config+0x40>)
 8000ddc:	2207      	movs	r2, #7
 8000dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df8:	6878      	ldr	r0, [r7, #4]
 8000dfa:	f7ff ff47 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b086      	sub	sp, #24
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
 8000e12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e14:	f7ff ff5e 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	68b9      	ldr	r1, [r7, #8]
 8000e1e:	6978      	ldr	r0, [r7, #20]
 8000e20:	f7ff ff90 	bl	8000d44 <NVIC_EncodePriority>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2a:	4611      	mov	r1, r2
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff5f 	bl	8000cf0 <__NVIC_SetPriority>
}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffb2 	bl	8000dac <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b087      	sub	sp, #28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e62:	e136      	b.n	80010d2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f000 8128 	beq.w	80010cc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d003      	beq.n	8000e8c <HAL_GPIO_Init+0x38>
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b12      	cmp	r3, #18
 8000e8a:	d125      	bne.n	8000ed8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e98:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	f003 0307 	and.w	r3, r3, #7
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	220f      	movs	r2, #15
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	697a      	ldr	r2, [r7, #20]
 8000eac:	4013      	ands	r3, r2
 8000eae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	f003 020f 	and.w	r2, r3, #15
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	08da      	lsrs	r2, r3, #3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3208      	adds	r2, #8
 8000ed2:	6979      	ldr	r1, [r7, #20]
 8000ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4013      	ands	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0203 	and.w	r2, r3, #3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	697a      	ldr	r2, [r7, #20]
 8000f0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d00b      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	2b11      	cmp	r3, #17
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b12      	cmp	r3, #18
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	697a      	ldr	r2, [r7, #20]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	f003 0201 	and.w	r2, r3, #1
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d017      	beq.n	8000fc6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	4013      	ands	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d07c      	beq.n	80010cc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000fd2:	4a47      	ldr	r2, [pc, #284]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3318      	adds	r3, #24
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	0a9a      	lsrs	r2, r3, #10
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <HAL_GPIO_Init+0x2a0>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	f002 0203 	and.w	r2, r2, #3
 8001004:	00d2      	lsls	r2, r2, #3
 8001006:	4093      	lsls	r3, r2
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800100e:	4938      	ldr	r1, [pc, #224]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	089b      	lsrs	r3, r3, #2
 8001014:	3318      	adds	r3, #24
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800101c:	4b34      	ldr	r3, [pc, #208]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43db      	mvns	r3, r3
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001038:	697a      	ldr	r2, [r7, #20]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001040:	4a2b      	ldr	r2, [pc, #172]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43db      	mvns	r3, r3
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	4013      	ands	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800106a:	4a21      	ldr	r2, [pc, #132]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001076:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	43db      	mvns	r3, r3
 800107c:	697a      	ldr	r2, [r7, #20]
 800107e:	4013      	ands	r3, r2
 8001080:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4313      	orrs	r3, r2
 8001094:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001096:	4a16      	ldr	r2, [pc, #88]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 80010a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	697a      	ldr	r2, [r7, #20]
 80010ac:	4013      	ands	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <HAL_GPIO_Init+0x29c>)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	3301      	adds	r3, #1
 80010d0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f47f aec1 	bne.w	8000e64 <HAL_GPIO_Init+0x10>
  }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	44022000 	.word	0x44022000
 80010f4:	002f7f7f 	.word	0x002f7f7f

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001114:	e002      	b.n	800111c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	f000 bc28 	b.w	800198c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800113c:	4b94      	ldr	r3, [pc, #592]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f003 0318 	and.w	r3, r3, #24
 8001144:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8001146:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0310 	and.w	r3, r3, #16
 8001158:	2b00      	cmp	r3, #0
 800115a:	d05b      	beq.n	8001214 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b08      	cmp	r3, #8
 8001160:	d005      	beq.n	800116e <HAL_RCC_OscConfig+0x46>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	2b18      	cmp	r3, #24
 8001166:	d114      	bne.n	8001192 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d111      	bne.n	8001192 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	f000 bc08 	b.w	800198c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800117c:	4b84      	ldr	r3, [pc, #528]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	041b      	lsls	r3, r3, #16
 800118a:	4981      	ldr	r1, [pc, #516]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800118c:	4313      	orrs	r3, r2
 800118e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001190:	e040      	b.n	8001214 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d023      	beq.n	80011e2 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fd65 	bl	8000c74 <HAL_GetTick>
 80011aa:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80011ae:	f7ff fd61 	bl	8000c74 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e3e5      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80011c0:	4b73      	ldr	r3, [pc, #460]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80011cc:	4b70      	ldr	r3, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	041b      	lsls	r3, r3, #16
 80011da:	496d      	ldr	r1, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	618b      	str	r3, [r1, #24]
 80011e0:	e018      	b.n	8001214 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80011e2:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6a      	ldr	r2, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80011e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ee:	f7ff fd41 	bl	8000c74 <HAL_GetTick>
 80011f2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80011f6:	f7ff fd3d 	bl	8000c74 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b02      	cmp	r3, #2
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e3c1      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001208:	4b61      	ldr	r3, [pc, #388]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1f0      	bne.n	80011f6 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a0 	beq.w	8001362 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	2b10      	cmp	r3, #16
 8001226:	d005      	beq.n	8001234 <HAL_RCC_OscConfig+0x10c>
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	2b18      	cmp	r3, #24
 800122c:	d109      	bne.n	8001242 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	f040 8092 	bne.w	8001362 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e3a4      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124a:	d106      	bne.n	800125a <HAL_RCC_OscConfig+0x132>
 800124c:	4b50      	ldr	r3, [pc, #320]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	e058      	b.n	800130c <HAL_RCC_OscConfig+0x1e4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x160>
 8001262:	4b4b      	ldr	r3, [pc, #300]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a4a      	ldr	r2, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	4b48      	ldr	r3, [pc, #288]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a47      	ldr	r2, [pc, #284]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001274:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a44      	ldr	r2, [pc, #272]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e041      	b.n	800130c <HAL_RCC_OscConfig+0x1e4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x190>
 8001292:	4b3f      	ldr	r3, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a3e      	ldr	r2, [pc, #248]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a3b      	ldr	r2, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a38      	ldr	r2, [pc, #224]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e029      	b.n	800130c <HAL_RCC_OscConfig+0x1e4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1c0>
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a2c      	ldr	r2, [pc, #176]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e011      	b.n	800130c <HAL_RCC_OscConfig+0x1e4>
 80012e8:	4b29      	ldr	r3, [pc, #164]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a28      	ldr	r2, [pc, #160]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a25      	ldr	r2, [pc, #148]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 80012fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001306:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fcae 	bl	8000c74 <HAL_GetTick>
 8001318:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800131c:	f7ff fcaa 	bl	8000c74 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e32e      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x1f4>
 800133a:	e012      	b.n	8001362 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff fc9a 	bl	8000c74 <HAL_GetTick>
 8001340:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001344:	f7ff fc96 	bl	8000c74 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e31a      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_RCC_OscConfig+0x268>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 809a 	beq.w	80014a4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <HAL_RCC_OscConfig+0x25a>
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	2b18      	cmp	r3, #24
 800137a:	d149      	bne.n	8001410 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d146      	bne.n	8001410 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d104      	bne.n	8001394 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e2fe      	b.n	800198c <HAL_RCC_OscConfig+0x864>
 800138e:	bf00      	nop
 8001390:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d11c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800139a:	4b9a      	ldr	r3, [pc, #616]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0218 	and.w	r2, r3, #24
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d014      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80013aa:	4b96      	ldr	r3, [pc, #600]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0218 	bic.w	r2, r3, #24
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	4993      	ldr	r1, [pc, #588]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80013bc:	f000 fdd0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013c0:	4b91      	ldr	r3, [pc, #580]	; (8001608 <HAL_RCC_OscConfig+0x4e0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fc0b 	bl	8000be0 <HAL_InitTick>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e2db      	b.n	800198c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc4e 	bl	8000c74 <HAL_GetTick>
 80013d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc4a 	bl	8000c74 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e2ce      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ee:	4b85      	ldr	r3, [pc, #532]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f0      	beq.n	80013dc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80013fa:	4b82      	ldr	r3, [pc, #520]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	041b      	lsls	r3, r3, #16
 8001408:	497e      	ldr	r1, [pc, #504]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800140a:	4313      	orrs	r3, r2
 800140c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800140e:	e049      	b.n	80014a4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02c      	beq.n	8001472 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 0218 	bic.w	r2, r3, #24
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	4977      	ldr	r1, [pc, #476]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800142a:	4b76      	ldr	r3, [pc, #472]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a75      	ldr	r2, [pc, #468]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fc1d 	bl	8000c74 <HAL_GetTick>
 800143a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800143e:	f7ff fc19 	bl	8000c74 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e29d      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	4b6c      	ldr	r3, [pc, #432]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800145c:	4b69      	ldr	r3, [pc, #420]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	4966      	ldr	r1, [pc, #408]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800146c:	4313      	orrs	r3, r2
 800146e:	610b      	str	r3, [r1, #16]
 8001470:	e018      	b.n	80014a4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001472:	4b64      	ldr	r3, [pc, #400]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a63      	ldr	r2, [pc, #396]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147e:	f7ff fbf9 	bl	8000c74 <HAL_GetTick>
 8001482:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001486:	f7ff fbf5 	bl	8000c74 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e279      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001498:	4b5a      	ldr	r3, [pc, #360]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f0      	bne.n	8001486 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03c      	beq.n	800152a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d01c      	beq.n	80014f2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b8:	4b52      	ldr	r3, [pc, #328]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014be:	4a51      	ldr	r2, [pc, #324]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c8:	f7ff fbd4 	bl	8000c74 <HAL_GetTick>
 80014cc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbd0 	bl	8000c74 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e254      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80014e2:	4b48      	ldr	r3, [pc, #288]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0ef      	beq.n	80014d0 <HAL_RCC_OscConfig+0x3a8>
 80014f0:	e01b      	b.n	800152a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f2:	4b44      	ldr	r3, [pc, #272]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014f8:	4a42      	ldr	r2, [pc, #264]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80014fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80014fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001502:	f7ff fbb7 	bl	8000c74 <HAL_GetTick>
 8001506:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800150a:	f7ff fbb3 	bl	8000c74 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e237      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800151c:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800151e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ef      	bne.n	800150a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 80d2 	beq.w	80016dc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_RCC_OscConfig+0x4e4>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d118      	bne.n	8001576 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001544:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_RCC_OscConfig+0x4e4>)
 8001546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001548:	4a30      	ldr	r2, [pc, #192]	; (800160c <HAL_RCC_OscConfig+0x4e4>)
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6253      	str	r3, [r2, #36]	; 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001550:	f7ff fb90 	bl	8000c74 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001558:	f7ff fb8c 	bl	8000c74 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e210      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800156a:	4b28      	ldr	r3, [pc, #160]	; (800160c <HAL_RCC_OscConfig+0x4e4>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d108      	bne.n	8001590 <HAL_RCC_OscConfig+0x468>
 800157e:	4b21      	ldr	r3, [pc, #132]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001580:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001584:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800158e:	e074      	b.n	800167a <HAL_RCC_OscConfig+0x552>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d118      	bne.n	80015ca <HAL_RCC_OscConfig+0x4a2>
 8001598:	4b1a      	ldr	r3, [pc, #104]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 800159a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800159e:	4a19      	ldr	r2, [pc, #100]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015a8:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015b4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015be:	4a11      	ldr	r2, [pc, #68]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015c0:	f023 0304 	bic.w	r3, r3, #4
 80015c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015c8:	e057      	b.n	800167a <HAL_RCC_OscConfig+0x552>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b05      	cmp	r3, #5
 80015d0:	d11e      	bne.n	8001610 <HAL_RCC_OscConfig+0x4e8>
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d8:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015e8:	4a06      	ldr	r2, [pc, #24]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80015ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f8:	4a02      	ldr	r2, [pc, #8]	; (8001604 <HAL_RCC_OscConfig+0x4dc>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001602:	e03a      	b.n	800167a <HAL_RCC_OscConfig+0x552>
 8001604:	44020c00 	.word	0x44020c00
 8001608:	20000004 	.word	0x20000004
 800160c:	44020800 	.word	0x44020800
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b85      	cmp	r3, #133	; 0x85
 8001616:	d118      	bne.n	800164a <HAL_RCC_OscConfig+0x522>
 8001618:	4ba2      	ldr	r3, [pc, #648]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800161a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800161e:	4aa1      	ldr	r2, [pc, #644]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001628:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800162a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800162e:	4a9d      	ldr	r2, [pc, #628]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001634:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001638:	4b9a      	ldr	r3, [pc, #616]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800163a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800163e:	4a99      	ldr	r2, [pc, #612]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001648:	e017      	b.n	800167a <HAL_RCC_OscConfig+0x552>
 800164a:	4b96      	ldr	r3, [pc, #600]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800164c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001650:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800165a:	4b92      	ldr	r3, [pc, #584]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800165c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001660:	4a90      	ldr	r2, [pc, #576]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001662:	f023 0304 	bic.w	r3, r3, #4
 8001666:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800166a:	4b8e      	ldr	r3, [pc, #568]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	4a8c      	ldr	r2, [pc, #560]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001676:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001682:	f7ff faf7 	bl	8000c74 <HAL_GetTick>
 8001686:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff faf3 	bl	8000c74 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e175      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a0:	4b80      	ldr	r3, [pc, #512]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80016a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ed      	beq.n	800168a <HAL_RCC_OscConfig+0x562>
 80016ae:	e015      	b.n	80016dc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fae0 	bl	8000c74 <HAL_GetTick>
 80016b4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fadc 	bl	8000c74 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e15e      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80016d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1ed      	bne.n	80016b8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f0:	4b6c      	ldr	r3, [pc, #432]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6b      	ldr	r2, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80016f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff faba 	bl	8000c74 <HAL_GetTick>
 8001700:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001704:	f7ff fab6 	bl	8000c74 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e13a      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001716:	4b63      	ldr	r3, [pc, #396]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x5dc>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001724:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800172a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800172e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff faa0 	bl	8000c74 <HAL_GetTick>
 8001734:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001738:	f7ff fa9c 	bl	8000c74 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e120      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8115 	beq.w	800198a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	2b18      	cmp	r3, #24
 8001764:	f000 80af 	beq.w	80018c6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	2b02      	cmp	r3, #2
 800176e:	f040 8086 	bne.w	800187e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a4b      	ldr	r2, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001778:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800177c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fa79 	bl	8000c74 <HAL_GetTick>
 8001782:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001786:	f7ff fa75 	bl	8000c74 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0f9      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f0      	bne.n	8001786 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80017a4:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80017a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80017ac:	f023 0303 	bic.w	r3, r3, #3
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017b8:	0212      	lsls	r2, r2, #8
 80017ba:	430a      	orrs	r2, r1
 80017bc:	4939      	ldr	r1, [pc, #228]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	628b      	str	r3, [r1, #40]	; 0x28
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d0:	3b01      	subs	r3, #1
 80017d2:	025b      	lsls	r3, r3, #9
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	431a      	orrs	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017dc:	3b01      	subs	r3, #1
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	3b01      	subs	r3, #1
 80017ec:	061b      	lsls	r3, r3, #24
 80017ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80017f2:	492c      	ldr	r1, [pc, #176]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	634b      	str	r3, [r1, #52]	; 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80017fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fc:	4a29      	ldr	r2, [pc, #164]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 80017fe:	f023 0310 	bic.w	r3, r3, #16
 8001802:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001808:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	4a24      	ldr	r2, [pc, #144]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f023 020c 	bic.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	491f      	ldr	r1, [pc, #124]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	628b      	str	r3, [r1, #40]	; 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	f023 0220 	bic.w	r2, r3, #32
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001838:	491a      	ldr	r1, [pc, #104]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	628b      	str	r3, [r1, #40]	; 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7ff fa0d 	bl	8000c74 <HAL_GetTick>
 800185a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800185e:	f7ff fa09 	bl	8000c74 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e08d      	b.n	800198c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d0f0      	beq.n	800185e <HAL_RCC_OscConfig+0x736>
 800187c:	e085      	b.n	800198a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_RCC_OscConfig+0x77c>)
 8001884:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff f9f3 	bl	8000c74 <HAL_GetTick>
 800188e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001892:	f7ff f9ef 	bl	8000c74 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d903      	bls.n	80018a8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e073      	b.n	800198c <HAL_RCC_OscConfig+0x864>
 80018a4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80018b4:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	4a36      	ldr	r2, [pc, #216]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 80018ba:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80018be:	f023 0303 	bic.w	r3, r3, #3
 80018c2:	6293      	str	r3, [r2, #40]	; 0x28
 80018c4:	e061      	b.n	800198a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80018c6:	4b33      	ldr	r3, [pc, #204]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 80018c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ca:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d031      	beq.n	800193e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0203 	and.w	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d12a      	bne.n	800193e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d122      	bne.n	800193e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d11a      	bne.n	800193e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0a5b      	lsrs	r3, r3, #9
 800190c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001914:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d111      	bne.n	800193e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	0c1b      	lsrs	r3, r3, #16
 800191e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d108      	bne.n	800193e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	0e1b      	lsrs	r3, r3, #24
 8001930:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001938:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d001      	beq.n	8001942 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e024      	b.n	800198c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001950:	429a      	cmp	r2, r3
 8001952:	d01a      	beq.n	800198a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 800195a:	f023 0310 	bic.w	r3, r3, #16
 800195e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f988 	bl	8000c74 <HAL_GetTick>
 8001964:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001966:	bf00      	nop
 8001968:	f7ff f984 	bl	8000c74 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	4293      	cmp	r3, r2
 8001972:	d0f9      	beq.n	8001968 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001978:	4a06      	ldr	r2, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_RCC_OscConfig+0x86c>)
 8001984:	f043 0310 	orr.w	r3, r3, #16
 8001988:	6293      	str	r3, [r2, #40]	; 0x28
      }

    }
  }
  return HAL_OK;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	44020c00 	.word	0x44020c00

08001998 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e19e      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <HAL_RCC_ClockConfig+0x224>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_RCC_ClockConfig+0x224>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 020f 	bic.w	r2, r3, #15
 80019c2:	497e      	ldr	r1, [pc, #504]	; (8001bbc <HAL_RCC_ClockConfig+0x224>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b7c      	ldr	r3, [pc, #496]	; (8001bbc <HAL_RCC_ClockConfig+0x224>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e186      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d012      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695a      	ldr	r2, [r3, #20]
 80019ec:	4b74      	ldr	r3, [pc, #464]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d909      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80019fa:	4b71      	ldr	r3, [pc, #452]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	496d      	ldr	r1, [pc, #436]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d012      	beq.n	8001a40 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	4b68      	ldr	r3, [pc, #416]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d909      	bls.n	8001a40 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4961      	ldr	r1, [pc, #388]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d908      	bls.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001a5c:	4b58      	ldr	r3, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4955      	ldr	r1, [pc, #340]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d010      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d908      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	f023 020f 	bic.w	r2, r3, #15
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	494a      	ldr	r1, [pc, #296]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 8093 	beq.w	8001bd0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001ab2:	4b43      	ldr	r3, [pc, #268]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d121      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e113      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d107      	bne.n	8001ada <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e107      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d107      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0fb      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0f3      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8001b02:	4b2f      	ldr	r3, [pc, #188]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f023 0203 	bic.w	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	492c      	ldr	r1, [pc, #176]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b14:	f7ff f8ae 	bl	8000c74 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7ff f8a6 	bl	8000c74 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0d7      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 0318 	and.w	r3, r3, #24
 8001b42:	2b18      	cmp	r3, #24
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x18c>
 8001b46:	e043      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d112      	bne.n	8001b76 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f88f 	bl	8000c74 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0c0      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f003 0318 	and.w	r3, r3, #24
 8001b70:	2b10      	cmp	r3, #16
 8001b72:	d1ee      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>
 8001b74:	e02c      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d122      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7ff f878 	bl	8000c74 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0a9      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_ClockConfig+0x228>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f003 0318 	and.w	r3, r3, #24
 8001b9e:	2b08      	cmp	r3, #8
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x1e8>
 8001ba2:	e015      	b.n	8001bd0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff f866 	bl	8000c74 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d906      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e097      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f003 0318 	and.w	r3, r3, #24
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e9      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0302 	and.w	r3, r3, #2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d010      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d208      	bcs.n	8001bfe <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001bec:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001bee:	6a1b      	ldr	r3, [r3, #32]
 8001bf0:	f023 020f 	bic.w	r2, r3, #15
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	493e      	ldr	r1, [pc, #248]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_ClockConfig+0x360>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 030f 	and.w	r3, r3, #15
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d210      	bcs.n	8001c2e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0c:	4b3a      	ldr	r3, [pc, #232]	; (8001cf8 <HAL_RCC_ClockConfig+0x360>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 020f 	bic.w	r2, r3, #15
 8001c14:	4938      	ldr	r1, [pc, #224]	; (8001cf8 <HAL_RCC_ClockConfig+0x360>)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1c:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <HAL_RCC_ClockConfig+0x360>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d001      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e05d      	b.n	8001cea <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d208      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001c4a:	4b2a      	ldr	r3, [pc, #168]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4927      	ldr	r1, [pc, #156]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c6e:	6a1b      	ldr	r3, [r3, #32]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d209      	bcs.n	8001c8e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	491a      	ldr	r1, [pc, #104]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d209      	bcs.n	8001cc0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	490e      	ldr	r1, [pc, #56]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cc0:	f000 f822 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	490b      	ldr	r1, [pc, #44]	; (8001cfc <HAL_RCC_ClockConfig+0x364>)
 8001cd0:	5ccb      	ldrb	r3, [r1, r3]
 8001cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x368>)
 8001cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <HAL_RCC_ClockConfig+0x36c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe ff7e 	bl	8000be0 <HAL_InitTick>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	44020c00 	.word	0x44020c00
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	08007da4 	.word	0x08007da4
 8001d00:	20000000 	.word	0x20000000
 8001d04:	20000004 	.word	0x20000004

08001d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001d0e:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 0318 	and.w	r3, r3, #24
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001d1a:	4b8a      	ldr	r3, [pc, #552]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x23c>)
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e107      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d20:	4b87      	ldr	r3, [pc, #540]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	f003 0318 	and.w	r3, r3, #24
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d112      	bne.n	8001d52 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001d2c:	4b84      	ldr	r3, [pc, #528]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d009      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001d38:	4b81      	ldr	r3, [pc, #516]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	08db      	lsrs	r3, r3, #3
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	4a81      	ldr	r2, [pc, #516]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d44:	fa22 f303 	lsr.w	r3, r2, r3
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e0f1      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8001d4c:	4b7e      	ldr	r3, [pc, #504]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x240>)
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	e0ee      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d52:	4b7b      	ldr	r3, [pc, #492]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0318 	and.w	r3, r3, #24
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d102      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x244>)
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e0e5      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d64:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	f003 0318 	and.w	r3, r3, #24
 8001d6c:	2b18      	cmp	r3, #24
 8001d6e:	f040 80dd 	bne.w	8001f2c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001d72:	4b73      	ldr	r3, [pc, #460]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001d7c:	4b70      	ldr	r3, [pc, #448]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d86:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001d88:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d94:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dac:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 80b7 	beq.w	8001f26 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d056      	beq.n	8001e72 <HAL_RCC_GetSysClockFreq+0x16a>
 8001dc4:	e077      	b.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001dc6:	4b5e      	ldr	r3, [pc, #376]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d02d      	beq.n	8001e2e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x240>)
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	ee07 3a90 	vmov	s15, r3
 8001df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dfc:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e10:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001f50 <HAL_RCC_GetSysClockFreq+0x248>
 8001e14:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e20:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e28:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8001e2c:	e065      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e38:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001f54 <HAL_RCC_GetSysClockFreq+0x24c>
 8001e3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e50:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e54:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001f50 <HAL_RCC_GetSysClockFreq+0x248>
 8001e58:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e64:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e6c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001e70:	e043      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	ee07 3a90 	vmov	s15, r3
 8001e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e7c:	eddf 6a36 	vldr	s13, [pc, #216]	; 8001f58 <HAL_RCC_GetSysClockFreq+0x250>
 8001e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e94:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e98:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001f50 <HAL_RCC_GetSysClockFreq+0x248>
 8001e9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ea0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ea4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ea8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8001eb4:	e021      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	ee07 3a90 	vmov	s15, r3
 8001ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ec0:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001f5c <HAL_RCC_GetSysClockFreq+0x254>
 8001ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ed8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001edc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001f50 <HAL_RCC_GetSysClockFreq+0x248>
 8001ee0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ee4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8001ef8:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x238>)
 8001efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efe:	0a5b      	lsrs	r3, r3, #9
 8001f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f04:	3301      	adds	r3, #1
 8001f06:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f12:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 3a90 	vmov	r3, s15
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	e004      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	e001      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x240>)
 8001f2e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8001f30:	69fb      	ldr	r3, [r7, #28]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	44020c00 	.word	0x44020c00
 8001f44:	003d0900 	.word	0x003d0900
 8001f48:	03d09000 	.word	0x03d09000
 8001f4c:	017d7840 	.word	0x017d7840
 8001f50:	46000000 	.word	0x46000000
 8001f54:	4c742400 	.word	0x4c742400
 8001f58:	4bbebc20 	.word	0x4bbebc20
 8001f5c:	4a742400 	.word	0x4a742400

08001f60 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f64:	f7ff fed0 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x2c>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001f6e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f72:	4907      	ldr	r1, [pc, #28]	; (8001f90 <HAL_RCC_GetHCLKFreq+0x30>)
 8001f74:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001f76:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f80:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <HAL_RCC_GetHCLKFreq+0x34>)
 8001f84:	681b      	ldr	r3, [r3, #0]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	44020c00 	.word	0x44020c00
 8001f90:	08007da4 	.word	0x08007da4
 8001f94:	20000000 	.word	0x20000000

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8001f9c:	f7ff ffe0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	091b      	lsrs	r3, r3, #4
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4904      	ldr	r1, [pc, #16]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	44020c00 	.word	0x44020c00
 8001fc0:	08007db4 	.word	0x08007db4

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8001fc8:	f7ff ffca 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd0:	6a1b      	ldr	r3, [r3, #32]
 8001fd2:	0a1b      	lsrs	r3, r3, #8
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	4904      	ldr	r1, [pc, #16]	; (8001fec <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	44020c00 	.word	0x44020c00
 8001fec:	08007db4 	.word	0x08007db4

08001ff0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8001ff4:	f7ff ffb4 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetPCLK3Freq+0x24>)
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	0b1b      	lsrs	r3, r3, #12
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCC_GetPCLK3Freq+0x28>)
 8002006:	5ccb      	ldrb	r3, [r1, r3]
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	44020c00 	.word	0x44020c00
 8002018:	08007db4 	.word	0x08007db4

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b0d8      	sub	sp, #352	; 0x160
 8002022:	af00      	add	r7, sp, #0
 8002024:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002028:	2300      	movs	r3, #0
 800202a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202e:	2300      	movs	r3, #0
 8002030:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002034:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f002 7480 	and.w	r4, r2, #16777216	; 0x1000000
 8002040:	2500      	movs	r5, #0
 8002042:	ea54 0305 	orrs.w	r3, r4, r5
 8002046:	d00b      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8002048:	4bcd      	ldr	r3, [pc, #820]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800204a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204e:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
 8002052:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	4ac9      	ldr	r2, [pc, #804]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800205a:	430b      	orrs	r3, r1
 800205c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002060:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f002 0801 	and.w	r8, r2, #1
 800206c:	f04f 0900 	mov.w	r9, #0
 8002070:	ea58 0309 	orrs.w	r3, r8, r9
 8002074:	d042      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8002076:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2b05      	cmp	r3, #5
 800207e:	d823      	bhi.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8002080:	a201      	add	r2, pc, #4	; (adr r2, 8002088 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8002082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002086:	bf00      	nop
 8002088:	080020d1 	.word	0x080020d1
 800208c:	080020a1 	.word	0x080020a1
 8002090:	080020b5 	.word	0x080020b5
 8002094:	080020d1 	.word	0x080020d1
 8002098:	080020d1 	.word	0x080020d1
 800209c:	080020d1 	.word	0x080020d1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80020a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020a4:	3308      	adds	r3, #8
 80020a6:	4618      	mov	r0, r3
 80020a8:	f004 feda 	bl	8006e60 <RCCEx_PLL2_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80020b2:	e00e      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80020b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020b8:	3330      	adds	r3, #48	; 0x30
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 ff68 	bl	8006f90 <RCCEx_PLL3_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80020c6:	e004      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80020ce:	e000      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80020d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020d2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80020da:	4ba9      	ldr	r3, [pc, #676]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80020dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020e0:	f023 0107 	bic.w	r1, r3, #7
 80020e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	4aa5      	ldr	r2, [pc, #660]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80020ec:	430b      	orrs	r3, r1
 80020ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020f2:	e003      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80020f8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f002 0a02 	and.w	sl, r2, #2
 8002108:	f04f 0b00 	mov.w	fp, #0
 800210c:	ea5a 030b 	orrs.w	r3, sl, fp
 8002110:	f000 8088 	beq.w	8002224 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8002114:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	2b28      	cmp	r3, #40	; 0x28
 800211c:	d868      	bhi.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	080021f9 	.word	0x080021f9
 8002128:	080021f1 	.word	0x080021f1
 800212c:	080021f1 	.word	0x080021f1
 8002130:	080021f1 	.word	0x080021f1
 8002134:	080021f1 	.word	0x080021f1
 8002138:	080021f1 	.word	0x080021f1
 800213c:	080021f1 	.word	0x080021f1
 8002140:	080021f1 	.word	0x080021f1
 8002144:	080021c9 	.word	0x080021c9
 8002148:	080021f1 	.word	0x080021f1
 800214c:	080021f1 	.word	0x080021f1
 8002150:	080021f1 	.word	0x080021f1
 8002154:	080021f1 	.word	0x080021f1
 8002158:	080021f1 	.word	0x080021f1
 800215c:	080021f1 	.word	0x080021f1
 8002160:	080021f1 	.word	0x080021f1
 8002164:	080021dd 	.word	0x080021dd
 8002168:	080021f1 	.word	0x080021f1
 800216c:	080021f1 	.word	0x080021f1
 8002170:	080021f1 	.word	0x080021f1
 8002174:	080021f1 	.word	0x080021f1
 8002178:	080021f1 	.word	0x080021f1
 800217c:	080021f1 	.word	0x080021f1
 8002180:	080021f1 	.word	0x080021f1
 8002184:	080021f9 	.word	0x080021f9
 8002188:	080021f1 	.word	0x080021f1
 800218c:	080021f1 	.word	0x080021f1
 8002190:	080021f1 	.word	0x080021f1
 8002194:	080021f1 	.word	0x080021f1
 8002198:	080021f1 	.word	0x080021f1
 800219c:	080021f1 	.word	0x080021f1
 80021a0:	080021f1 	.word	0x080021f1
 80021a4:	080021f9 	.word	0x080021f9
 80021a8:	080021f1 	.word	0x080021f1
 80021ac:	080021f1 	.word	0x080021f1
 80021b0:	080021f1 	.word	0x080021f1
 80021b4:	080021f1 	.word	0x080021f1
 80021b8:	080021f1 	.word	0x080021f1
 80021bc:	080021f1 	.word	0x080021f1
 80021c0:	080021f1 	.word	0x080021f1
 80021c4:	080021f9 	.word	0x080021f9
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80021c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021cc:	3308      	adds	r3, #8
 80021ce:	4618      	mov	r0, r3
 80021d0:	f004 fe46 	bl	8006e60 <RCCEx_PLL2_Config>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80021da:	e00e      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80021dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80021e0:	3330      	adds	r3, #48	; 0x30
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fed4 	bl	8006f90 <RCCEx_PLL3_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80021ee:	e004      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80021f6:	e000      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80021f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021fa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002202:	4b5f      	ldr	r3, [pc, #380]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002208:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800220c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	4a5b      	ldr	r2, [pc, #364]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002214:	430b      	orrs	r3, r1
 8002216:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800221a:	e003      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002220:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002224:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f002 0304 	and.w	r3, r2, #4
 8002230:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800223a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	; 0x140
 800223e:	460b      	mov	r3, r1
 8002240:	4313      	orrs	r3, r2
 8002242:	d04e      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8002244:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800224e:	d02c      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8002250:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002254:	d825      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800225a:	d028      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 800225c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002260:	d81f      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002262:	2bc0      	cmp	r3, #192	; 0xc0
 8002264:	d025      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8002266:	2bc0      	cmp	r3, #192	; 0xc0
 8002268:	d81b      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800226a:	2b80      	cmp	r3, #128	; 0x80
 800226c:	d00f      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x272>
 800226e:	2b80      	cmp	r3, #128	; 0x80
 8002270:	d817      	bhi.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01f      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d113      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800227a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800227e:	3308      	adds	r3, #8
 8002280:	4618      	mov	r0, r3
 8002282:	f004 fded 	bl	8006e60 <RCCEx_PLL2_Config>
 8002286:	4603      	mov	r3, r0
 8002288:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800228c:	e014      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800228e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002292:	3330      	adds	r3, #48	; 0x30
 8002294:	4618      	mov	r0, r3
 8002296:	f004 fe7b 	bl	8006f90 <RCCEx_PLL3_Config>
 800229a:	4603      	mov	r3, r0
 800229c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80022a0:	e00a      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80022a8:	e006      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80022aa:	bf00      	nop
 80022ac:	e004      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80022ae:	bf00      	nop
 80022b0:	e002      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80022b2:	bf00      	nop
 80022b4:	e000      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80022b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022b8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10c      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80022c0:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022c6:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80022ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d0:	4a2b      	ldr	r2, [pc, #172]	; (8002380 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80022d2:	430b      	orrs	r3, r1
 80022d4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022d8:	e003      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022da:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80022de:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f002 0308 	and.w	r3, r2, #8
 80022ee:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80022f2:	2300      	movs	r3, #0
 80022f4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80022f8:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	; 0x138
 80022fc:	460b      	mov	r3, r1
 80022fe:	4313      	orrs	r3, r2
 8002300:	d056      	beq.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8002302:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002308:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800230c:	d031      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800230e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002312:	d82a      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002318:	d02d      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800231a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800231e:	d824      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002320:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002324:	d029      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002326:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800232a:	d81e      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d011      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002336:	d818      	bhi.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d113      	bne.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002342:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002346:	3308      	adds	r3, #8
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fd89 	bl	8006e60 <RCCEx_PLL2_Config>
 800234e:	4603      	mov	r3, r0
 8002350:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002354:	e017      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002356:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800235a:	3330      	adds	r3, #48	; 0x30
 800235c:	4618      	mov	r0, r3
 800235e:	f004 fe17 	bl	8006f90 <RCCEx_PLL3_Config>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8002368:	e00d      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002370:	e009      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002372:	bf00      	nop
 8002374:	e007      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8002376:	bf00      	nop
 8002378:	e005      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800237a:	bf00      	nop
 800237c:	e003      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800237e:	bf00      	nop
 8002380:	44020c00 	.word	0x44020c00
        break;
 8002384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002386:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800238e:	4bbb      	ldr	r3, [pc, #748]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002390:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002394:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8002398:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800239c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800239e:	4ab7      	ldr	r2, [pc, #732]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80023a0:	430b      	orrs	r3, r1
 80023a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023a6:	e003      	b.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80023ac:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f002 0310 	and.w	r3, r2, #16
 80023bc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80023c6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	; 0x130
 80023ca:	460b      	mov	r3, r1
 80023cc:	4313      	orrs	r3, r2
 80023ce:	d053      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80023d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80023d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80023da:	d031      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80023dc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80023e0:	d82a      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80023e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023e6:	d02d      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80023e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ec:	d824      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80023ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023f2:	d029      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80023f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023f8:	d81e      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d011      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002404:	d818      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800240a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240e:	d113      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002410:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002414:	3308      	adds	r3, #8
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fd22 	bl	8006e60 <RCCEx_PLL2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002422:	e014      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002424:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002428:	3330      	adds	r3, #48	; 0x30
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fdb0 	bl	8006f90 <RCCEx_PLL3_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8002436:	e00a      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800243e:	e006      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002440:	bf00      	nop
 8002442:	e004      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002444:	bf00      	nop
 8002446:	e002      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8002448:	bf00      	nop
 800244a:	e000      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800244c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800244e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002458:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800245c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002460:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002466:	4a85      	ldr	r2, [pc, #532]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002468:	430b      	orrs	r3, r1
 800246a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800246e:	e003      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002474:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002478:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f002 0320 	and.w	r3, r2, #32
 8002484:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800248e:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	; 0x128
 8002492:	460b      	mov	r3, r1
 8002494:	4313      	orrs	r3, r2
 8002496:	d053      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8002498:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80024a2:	d031      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80024a4:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80024a8:	d82a      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80024aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024ae:	d02d      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80024b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024b4:	d824      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80024b6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80024ba:	d029      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80024bc:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80024c0:	d81e      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c6:	d011      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d818      	bhi.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d020      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80024d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024d6:	d113      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80024d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024dc:	3308      	adds	r3, #8
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 fcbe 	bl	8006e60 <RCCEx_PLL2_Config>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80024ea:	e014      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80024ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80024f0:	3330      	adds	r3, #48	; 0x30
 80024f2:	4618      	mov	r0, r3
 80024f4:	f004 fd4c 	bl	8006f90 <RCCEx_PLL3_Config>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80024fe:	e00a      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002506:	e006      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002508:	bf00      	nop
 800250a:	e004      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800250c:	bf00      	nop
 800250e:	e002      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8002514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002516:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10c      	bne.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800251e:	4b57      	ldr	r3, [pc, #348]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002524:	f423 3160 	bic.w	r1, r3, #229376	; 0x38000
 8002528:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a53      	ldr	r2, [pc, #332]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8002530:	430b      	orrs	r3, r1
 8002532:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002536:	e003      	b.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002538:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800253c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002540:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800254c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002556:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	; 0x120
 800255a:	460b      	mov	r3, r1
 800255c:	4313      	orrs	r3, r2
 800255e:	d053      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8002560:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002566:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800256a:	d031      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800256c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002570:	d82a      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002576:	d02d      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8002578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800257c:	d824      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800257e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002582:	d029      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002584:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002588:	d81e      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800258a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800258e:	d011      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8002590:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002594:	d818      	bhi.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d020      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800259a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800259e:	d113      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80025a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025a4:	3308      	adds	r3, #8
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 fc5a 	bl	8006e60 <RCCEx_PLL2_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80025b2:	e014      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80025b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025b8:	3330      	adds	r3, #48	; 0x30
 80025ba:	4618      	mov	r0, r3
 80025bc:	f004 fce8 	bl	8006f90 <RCCEx_PLL3_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80025c6:	e00a      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80025ce:	e006      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80025d0:	bf00      	nop
 80025d2:	e004      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80025d4:	bf00      	nop
 80025d6:	e002      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80025d8:	bf00      	nop
 80025da:	e000      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80025dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025de:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80025e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025ec:	f423 11e0 	bic.w	r1, r3, #1835008	; 0x1c0000
 80025f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80025f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f6:	4a21      	ldr	r2, [pc, #132]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80025f8:	430b      	orrs	r3, r1
 80025fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025fe:	e003      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002600:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002604:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002608:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002614:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800261e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	; 0x118
 8002622:	460b      	mov	r3, r1
 8002624:	4313      	orrs	r3, r2
 8002626:	d055      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8002628:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800262c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800262e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002632:	d033      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x680>
 8002634:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002638:	d82c      	bhi.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800263a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800263e:	d02f      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8002640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002644:	d826      	bhi.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002646:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800264a:	d02b      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800264c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002650:	d820      	bhi.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8002652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002656:	d013      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8002658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265c:	d81a      	bhi.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800265e:	2b00      	cmp	r3, #0
 8002660:	d022      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8002662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002666:	d115      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002668:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800266c:	3308      	adds	r3, #8
 800266e:	4618      	mov	r0, r3
 8002670:	f004 fbf6 	bl	8006e60 <RCCEx_PLL2_Config>
 8002674:	4603      	mov	r3, r0
 8002676:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800267a:	e016      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800267c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002680:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002684:	3330      	adds	r3, #48	; 0x30
 8002686:	4618      	mov	r0, r3
 8002688:	f004 fc82 	bl	8006f90 <RCCEx_PLL3_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8002692:	e00a      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800269a:	e006      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800269c:	bf00      	nop
 800269e:	e004      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80026a0:	bf00      	nop
 80026a2:	e002      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80026a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10c      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80026b2:	4bbb      	ldr	r3, [pc, #748]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80026b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80026b8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80026bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c2:	4ab7      	ldr	r2, [pc, #732]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80026c4:	430b      	orrs	r3, r1
 80026c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80026ca:	e003      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026cc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80026d0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80026d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80026e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80026ea:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80026ee:	460b      	mov	r3, r1
 80026f0:	4313      	orrs	r3, r2
 80026f2:	d053      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80026f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80026f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80026fe:	d031      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8002700:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002704:	d82a      	bhi.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002706:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800270a:	d02d      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800270c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002710:	d824      	bhi.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8002712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002716:	d029      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8002718:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800271c:	d81e      	bhi.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800271e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002722:	d011      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8002724:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002728:	d818      	bhi.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d020      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800272e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002732:	d113      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002734:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002738:	3308      	adds	r3, #8
 800273a:	4618      	mov	r0, r3
 800273c:	f004 fb90 	bl	8006e60 <RCCEx_PLL2_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8002746:	e014      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002748:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800274c:	3330      	adds	r3, #48	; 0x30
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fc1e 	bl	8006f90 <RCCEx_PLL3_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800275a:	e00a      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002762:	e006      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002764:	bf00      	nop
 8002766:	e004      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002768:	bf00      	nop
 800276a:	e002      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800276c:	bf00      	nop
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8002770:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002772:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800277c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002780:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002784:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278a:	4a85      	ldr	r2, [pc, #532]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800278c:	430b      	orrs	r3, r1
 800278e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002792:	e003      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002794:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002798:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800279c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80027a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80027b2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80027b6:	460b      	mov	r3, r1
 80027b8:	4313      	orrs	r3, r2
 80027ba:	d055      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80027bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80027c8:	d031      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80027ca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80027ce:	d82a      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80027d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d4:	d02d      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80027d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027da:	d824      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80027dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80027e0:	d029      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80027e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80027e6:	d81e      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80027e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ec:	d011      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80027ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f2:	d818      	bhi.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d020      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80027f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027fc:	d113      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80027fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002802:	3308      	adds	r3, #8
 8002804:	4618      	mov	r0, r3
 8002806:	f004 fb2b 	bl	8006e60 <RCCEx_PLL2_Config>
 800280a:	4603      	mov	r3, r0
 800280c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002810:	e014      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002816:	3330      	adds	r3, #48	; 0x30
 8002818:	4618      	mov	r0, r3
 800281a:	f004 fbb9 	bl	8006f90 <RCCEx_PLL3_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8002824:	e00a      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800282c:	e006      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800282e:	bf00      	nop
 8002830:	e004      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002832:	bf00      	nop
 8002834:	e002      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8002836:	bf00      	nop
 8002838:	e000      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800283a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800283c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10d      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002846:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800284a:	f023 5160 	bic.w	r1, r3, #939524096	; 0x38000000
 800284e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002856:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002858:	430b      	orrs	r3, r1
 800285a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002864:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002868:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002874:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800287e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002882:	460b      	mov	r3, r1
 8002884:	4313      	orrs	r3, r2
 8002886:	d044      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8002888:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800288c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002890:	2b05      	cmp	r3, #5
 8002892:	d823      	bhi.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8002894:	a201      	add	r2, pc, #4	; (adr r2, 800289c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028e5 	.word	0x080028e5
 80028a0:	080028b5 	.word	0x080028b5
 80028a4:	080028c9 	.word	0x080028c9
 80028a8:	080028e5 	.word	0x080028e5
 80028ac:	080028e5 	.word	0x080028e5
 80028b0:	080028e5 	.word	0x080028e5
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80028b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028b8:	3308      	adds	r3, #8
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 fad0 	bl	8006e60 <RCCEx_PLL2_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80028c6:	e00e      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80028c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028cc:	3330      	adds	r3, #48	; 0x30
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fb5e 	bl	8006f90 <RCCEx_PLL3_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80028da:	e004      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80028e2:	e000      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80028e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10d      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80028f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80028f4:	f023 0107 	bic.w	r1, r3, #7
 80028f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80028fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002900:	4a27      	ldr	r2, [pc, #156]	; (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8002902:	430b      	orrs	r3, r1
 8002904:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002908:	e003      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800290a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800290e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8002912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800291e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002928:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800292c:	460b      	mov	r3, r1
 800292e:	4313      	orrs	r3, r2
 8002930:	d04f      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8002932:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	2b50      	cmp	r3, #80	; 0x50
 800293c:	d029      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800293e:	2b50      	cmp	r3, #80	; 0x50
 8002940:	d823      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d027      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8002946:	2b40      	cmp	r3, #64	; 0x40
 8002948:	d81f      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	d025      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800294e:	2b30      	cmp	r3, #48	; 0x30
 8002950:	d81b      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8002952:	2b20      	cmp	r3, #32
 8002954:	d00f      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8002956:	2b20      	cmp	r3, #32
 8002958:	d817      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800295a:	2b00      	cmp	r3, #0
 800295c:	d022      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800295e:	2b10      	cmp	r3, #16
 8002960:	d113      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002962:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002966:	3308      	adds	r3, #8
 8002968:	4618      	mov	r0, r3
 800296a:	f004 fa79 	bl	8006e60 <RCCEx_PLL2_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002974:	e017      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002976:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800297a:	3330      	adds	r3, #48	; 0x30
 800297c:	4618      	mov	r0, r3
 800297e:	f004 fb07 	bl	8006f90 <RCCEx_PLL3_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8002988:	e00d      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002990:	e009      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002992:	bf00      	nop
 8002994:	e007      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8002996:	bf00      	nop
 8002998:	e005      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800299a:	bf00      	nop
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800299e:	bf00      	nop
 80029a0:	44020c00 	.word	0x44020c00
        break;
 80029a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029a6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10d      	bne.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80029ae:	4baf      	ldr	r3, [pc, #700]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80029b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80029b4:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80029b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	4aaa      	ldr	r2, [pc, #680]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80029c2:	430b      	orrs	r3, r1
 80029c4:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029ca:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80029ce:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80029de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80029e8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4313      	orrs	r3, r2
 80029f0:	d055      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80029f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80029f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80029fe:	d031      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8002a00:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002a04:	d82a      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002a06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a0a:	d02d      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8002a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a10:	d824      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002a12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a16:	d029      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8002a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a1c:	d81e      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002a1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a22:	d011      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8002a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a28:	d818      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d020      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8002a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a32:	d113      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002a34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a38:	3308      	adds	r3, #8
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fa10 	bl	8006e60 <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002a46:	e014      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f004 fa9e 	bl	8006f90 <RCCEx_PLL3_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002a62:	e006      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002a64:	bf00      	nop
 8002a66:	e004      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002a68:	bf00      	nop
 8002a6a:	e002      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002a6c:	bf00      	nop
 8002a6e:	e000      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8002a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a72:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002a7a:	4b7c      	ldr	r3, [pc, #496]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002a84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	4a77      	ldr	r2, [pc, #476]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a94:	e003      	b.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a96:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002a9a:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002ab4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4313      	orrs	r3, r2
 8002abc:	d03d      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8002abe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002aca:	d01b      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8002acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ad0:	d814      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ad6:	d017      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8002ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002adc:	d80e      	bhi.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d014      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8002ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae6:	d109      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ae8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002aec:	3330      	adds	r3, #48	; 0x30
 8002aee:	4618      	mov	r0, r3
 8002af0:	f004 fa4e 	bl	8006f90 <RCCEx_PLL3_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b02:	e004      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002b04:	bf00      	nop
 8002b06:	e002      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8002b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b0e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10d      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002b16:	4b55      	ldr	r3, [pc, #340]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002b1c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	4a50      	ldr	r2, [pc, #320]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002b2a:	430b      	orrs	r3, r1
 8002b2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002b30:	e003      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002b36:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002b46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002b50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4313      	orrs	r3, r2
 8002b58:	d03d      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8002b5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b62:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b66:	d01b      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8002b68:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b6c:	d814      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002b6e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b72:	d017      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8002b74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b78:	d80e      	bhi.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d014      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8002b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b82:	d109      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002b88:	3330      	adds	r3, #48	; 0x30
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fa00 	bl	8006f90 <RCCEx_PLL3_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8002b96:	e008      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002b9e:	e004      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002ba0:	bf00      	nop
 8002ba2:	e002      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8002ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002baa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002bb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002bb8:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002bbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc4:	4a29      	ldr	r2, [pc, #164]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bce:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002bd2:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002bec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	d040      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8002bf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002bfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c02:	d01b      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8002c04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c08:	d814      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002c0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c0e:	d017      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8002c10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c14:	d80e      	bhi.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d014      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8002c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c1e:	d109      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c24:	3330      	adds	r3, #48	; 0x30
 8002c26:	4618      	mov	r0, r3
 8002c28:	f004 f9b2 	bl	8006f90 <RCCEx_PLL3_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8002c32:	e008      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8002c44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c46:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d110      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002c50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002c54:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c60:	4a02      	ldr	r2, [pc, #8]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8002c62:	430b      	orrs	r3, r1
 8002c64:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002c68:	e006      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8002c6a:	bf00      	nop
 8002c6c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002c74:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c78:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	2100      	movs	r1, #0
 8002c82:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8002c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002c8e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	d03d      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8002c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ca0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ca4:	d01b      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8002ca6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002caa:	d814      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb0:	d017      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8002cb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002cb6:	d80e      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d014      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cc6:	3330      	adds	r3, #48	; 0x30
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f004 f961 	bl	8006f90 <RCCEx_PLL3_Config>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8002ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d10d      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002cf0:	4bbe      	ldr	r3, [pc, #760]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002cf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002cf6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8002cfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d02:	4aba      	ldr	r2, [pc, #744]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d04:	430b      	orrs	r3, r1
 8002d06:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d0a:	e003      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8002d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4313      	orrs	r3, r2
 8002d32:	d035      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8002d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d40:	d015      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8002d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d46:	d80e      	bhi.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8002d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d50:	d109      	bne.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002d52:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d56:	3330      	adds	r3, #48	; 0x30
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 f919 	bl	8006f90 <RCCEx_PLL3_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8002d64:	e006      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002d6c:	e002      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002d6e:	bf00      	nop
 8002d70:	e000      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8002d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d74:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8002d7c:	4b9b      	ldr	r3, [pc, #620]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d82:	f023 7140 	bic.w	r1, r3, #50331648	; 0x3000000
 8002d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002d8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d8e:	4a97      	ldr	r2, [pc, #604]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002d90:	430b      	orrs	r3, r1
 8002d92:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d96:	e003      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002d9c:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	2100      	movs	r1, #0
 8002daa:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002db6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	d00e      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8002dc0:	4b8a      	ldr	r3, [pc, #552]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	4a89      	ldr	r2, [pc, #548]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002dc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dca:	61d3      	str	r3, [r2, #28]
 8002dcc:	4b87      	ldr	r3, [pc, #540]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002dce:	69d9      	ldr	r1, [r3, #28]
 8002dd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002dd4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002dd8:	4a84      	ldr	r2, [pc, #528]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dde:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002dea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002df4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	d055      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002dfe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e0a:	d031      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8002e0c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002e10:	d82a      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e16:	d02d      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1c:	d824      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e22:	d029      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e28:	d81e      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2e:	d011      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d818      	bhi.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d020      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3e:	d113      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e44:	3308      	adds	r3, #8
 8002e46:	4618      	mov	r0, r3
 8002e48:	f004 f80a 	bl	8006e60 <RCCEx_PLL2_Config>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002e52:	e014      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e58:	3330      	adds	r3, #48	; 0x30
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f004 f898 	bl	8006f90 <RCCEx_PLL3_Config>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8002e66:	e00a      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002e6e:	e006      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002e70:	bf00      	nop
 8002e72:	e004      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002e74:	bf00      	nop
 8002e76:	e002      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002e78:	bf00      	nop
 8002e7a:	e000      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8002e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10d      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002e86:	4b59      	ldr	r3, [pc, #356]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002e88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e8c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002e90:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002e94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e98:	4a54      	ldr	r2, [pc, #336]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002e9a:	430b      	orrs	r3, r1
 8002e9c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002ea6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002eaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ec0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	d055      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ed2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002ed6:	d031      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8002ed8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002edc:	d82a      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee2:	d02d      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8002ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ee8:	d824      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002eee:	d029      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8002ef0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ef4:	d81e      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efa:	d011      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8002efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f00:	d818      	bhi.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d020      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0a:	d113      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f10:	3308      	adds	r3, #8
 8002f12:	4618      	mov	r0, r3
 8002f14:	f003 ffa4 	bl	8006e60 <RCCEx_PLL2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002f1e:	e014      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f20:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f24:	3330      	adds	r3, #48	; 0x30
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 f832 	bl	8006f90 <RCCEx_PLL3_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8002f32:	e00a      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8002f3a:	e006      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002f3c:	bf00      	nop
 8002f3e:	e004      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002f40:	bf00      	nop
 8002f42:	e002      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8002f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002f52:	4b26      	ldr	r3, [pc, #152]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8002f72:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8002f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	2100      	movs	r1, #0
 8002f80:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d057      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8002f96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002f9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa2:	d033      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8002fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa8:	d82c      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fae:	d02f      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8002fb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb4:	d826      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fba:	d02b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8002fbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002fc0:	d820      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8002fc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fcc:	d81a      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d022      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd6:	d115      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002fdc:	3308      	adds	r3, #8
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 ff3e 	bl	8006e60 <RCCEx_PLL2_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8002fea:	e016      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8002fec:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002ff4:	3330      	adds	r3, #48	; 0x30
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f003 ffca 	bl	8006f90 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8003002:	e00a      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800300a:	e006      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800300c:	bf00      	nop
 800300e:	e004      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003010:	bf00      	nop
 8003012:	e002      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8003018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8003022:	4bbb      	ldr	r3, [pc, #748]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003024:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003028:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800302c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003034:	4ab6      	ldr	r2, [pc, #728]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003036:	430b      	orrs	r3, r1
 8003038:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800303c:	e003      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003042:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003046:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	2100      	movs	r1, #0
 8003050:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800305c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003060:	460b      	mov	r3, r1
 8003062:	4313      	orrs	r3, r2
 8003064:	d055      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8003066:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800306a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800306e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003072:	d031      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003074:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003078:	d82a      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800307a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800307e:	d02d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d824      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800308a:	d029      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 800308c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003090:	d81e      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8003092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003096:	d011      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8003098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800309c:	d818      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80030a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a6:	d113      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80030a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030ac:	3308      	adds	r3, #8
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 fed6 	bl	8006e60 <RCCEx_PLL2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80030ba:	e014      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030c0:	3330      	adds	r3, #48	; 0x30
 80030c2:	4618      	mov	r0, r3
 80030c4:	f003 ff64 	bl	8006f90 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80030ce:	e00a      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80030d6:	e006      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80030d8:	bf00      	nop
 80030da:	e004      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80030dc:	bf00      	nop
 80030de:	e002      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80030e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030e6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80030f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80030f4:	f423 01e0 	bic.w	r1, r3, #7340032	; 0x700000
 80030f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80030fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003100:	4a83      	ldr	r2, [pc, #524]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003102:	430b      	orrs	r3, r1
 8003104:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003108:	e003      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800310e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003112:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311a:	2100      	movs	r1, #0
 800311c:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8003120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003128:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800312c:	460b      	mov	r3, r1
 800312e:	4313      	orrs	r3, r2
 8003130:	d055      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8003132:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003136:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800313a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800313e:	d031      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8003140:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003144:	d82a      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314a:	d02d      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003150:	d824      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8003152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003156:	d029      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8003158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800315c:	d81e      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800315e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003162:	d011      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8003164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003168:	d818      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800316a:	2b00      	cmp	r3, #0
 800316c:	d020      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800316e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003172:	d113      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003174:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003178:	3308      	adds	r3, #8
 800317a:	4618      	mov	r0, r3
 800317c:	f003 fe70 	bl	8006e60 <RCCEx_PLL2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8003186:	e014      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003188:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	4618      	mov	r0, r3
 8003190:	f003 fefe 	bl	8006f90 <RCCEx_PLL3_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 800319a:	e00a      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80031a2:	e006      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80031a4:	bf00      	nop
 80031a6:	e004      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80031b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10d      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80031ba:	4b55      	ldr	r3, [pc, #340]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80031bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031c0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80031c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80031ce:	430b      	orrs	r3, r1
 80031d0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80031da:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80031de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	2100      	movs	r1, #0
 80031e8:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 80031ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80031f8:	460b      	mov	r3, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	d055      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80031fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003202:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003206:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800320a:	d031      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800320c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003210:	d82a      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d02d      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d824      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800321e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003222:	d029      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8003224:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003228:	d81e      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800322a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800322e:	d011      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8003230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003234:	d818      	bhi.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8003236:	2b00      	cmp	r3, #0
 8003238:	d020      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800323a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800323e:	d113      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003240:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003244:	3308      	adds	r3, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f003 fe0a 	bl	8006e60 <RCCEx_PLL2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003252:	e014      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003254:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003258:	3330      	adds	r3, #48	; 0x30
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fe98 	bl	8006f90 <RCCEx_PLL3_Config>
 8003260:	4603      	mov	r3, r0
 8003262:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8003266:	e00a      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800326e:	e006      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003270:	bf00      	nop
 8003272:	e004      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003274:	bf00      	nop
 8003276:	e002      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8003278:	bf00      	nop
 800327a:	e000      	b.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800327c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800327e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8003286:	4b22      	ldr	r3, [pc, #136]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003288:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800328c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003290:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003294:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003298:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800329a:	430b      	orrs	r3, r1
 800329c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80032a0:	e003      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80032a6:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80032b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80032c4:	460b      	mov	r3, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	d055      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80032ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80032ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80032d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032d6:	d035      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80032d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032dc:	d82e      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80032de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e2:	d031      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80032e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032e8:	d828      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80032ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032ee:	d01b      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80032f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f4:	d822      	bhi.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80032fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032fe:	d009      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8003300:	e01c      	b.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003302:	4b03      	ldr	r3, [pc, #12]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	4a02      	ldr	r2, [pc, #8]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8003308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800330c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800330e:	e01c      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8003310:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003314:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003318:	3308      	adds	r3, #8
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fda0 	bl	8006e60 <RCCEx_PLL2_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003326:	e010      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003328:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800332c:	3330      	adds	r3, #48	; 0x30
 800332e:	4618      	mov	r0, r3
 8003330:	f003 fe2e 	bl	8006f90 <RCCEx_PLL3_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800333a:	e006      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003342:	e002      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003344:	bf00      	nop
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8003348:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10d      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8003352:	4bc3      	ldr	r3, [pc, #780]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003358:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800335c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003364:	4abe      	ldr	r2, [pc, #760]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003366:	430b      	orrs	r3, r1
 8003368:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800336c:	e003      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003372:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003376:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003386:	2300      	movs	r3, #0
 8003388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800338c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003390:	460b      	mov	r3, r1
 8003392:	4313      	orrs	r3, r2
 8003394:	d051      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8003396:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800339a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800339e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a2:	d033      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80033a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033a8:	d82c      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80033aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033ae:	d02d      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80033b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80033b4:	d826      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d019      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80033bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033c0:	d820      	bhi.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d003      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80033c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033ca:	d007      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80033cc:	e01a      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ce:	4ba4      	ldr	r3, [pc, #656]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80033d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d2:	4aa3      	ldr	r2, [pc, #652]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80033da:	e018      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033e0:	3308      	adds	r3, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f003 fd3c 	bl	8006e60 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80033ee:	e00e      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80033f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80033f4:	3330      	adds	r3, #48	; 0x30
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fdca 	bl	8006f90 <RCCEx_PLL3_Config>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003402:	e004      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800340a:	e000      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800340c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800340e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10d      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8003416:	4b92      	ldr	r3, [pc, #584]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800341c:	f423 1160 	bic.w	r1, r3, #3670016	; 0x380000
 8003420:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003424:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003428:	4a8d      	ldr	r2, [pc, #564]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800342a:	430b      	orrs	r3, r1
 800342c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003436:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800343a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003446:	67bb      	str	r3, [r7, #120]	; 0x78
 8003448:	2300      	movs	r3, #0
 800344a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800344c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003450:	460b      	mov	r3, r1
 8003452:	4313      	orrs	r3, r2
 8003454:	d032      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8003456:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800345a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800345e:	2b05      	cmp	r3, #5
 8003460:	d80f      	bhi.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8003462:	2b03      	cmp	r3, #3
 8003464:	d211      	bcs.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8003466:	2b01      	cmp	r3, #1
 8003468:	d911      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800346a:	2b02      	cmp	r3, #2
 800346c:	d109      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800346e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003472:	3308      	adds	r3, #8
 8003474:	4618      	mov	r0, r3
 8003476:	f003 fcf3 	bl	8006e60 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003480:	e006      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003488:	e002      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800348e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003490:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10d      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003498:	4b71      	ldr	r3, [pc, #452]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800349a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349e:	f023 0107 	bic.w	r1, r3, #7
 80034a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80034aa:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034b2:	e003      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034b8:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80034bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	2100      	movs	r1, #0
 80034c6:	6739      	str	r1, [r7, #112]	; 0x70
 80034c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034cc:	677b      	str	r3, [r7, #116]	; 0x74
 80034ce:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80034d2:	460b      	mov	r3, r1
 80034d4:	4313      	orrs	r3, r2
 80034d6:	d024      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80034d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d005      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d005      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80034ee:	e002      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80034f0:	bf00      	nop
 80034f2:	e000      	b.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80034f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10d      	bne.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80034fe:	4b58      	ldr	r3, [pc, #352]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003504:	f023 0108 	bic.w	r1, r3, #8
 8003508:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800350c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003510:	4a53      	ldr	r2, [pc, #332]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003512:	430b      	orrs	r3, r1
 8003514:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003518:	e003      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800351e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003522:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800352e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003530:	2300      	movs	r3, #0
 8003532:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003534:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	f000 80b9 	beq.w	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003544:	4a47      	ldr	r2, [pc, #284]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6253      	str	r3, [r2, #36]	; 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800354c:	f7fd fb92 	bl	8000c74 <HAL_GetTick>
 8003550:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003554:	e00b      	b.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fd fb8d 	bl	8000c74 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d903      	bls.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 800356c:	e005      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d0ed      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800357a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800357e:	2b00      	cmp	r3, #0
 8003580:	f040 8093 	bne.w	80036aa <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003584:	4b36      	ldr	r3, [pc, #216]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800358a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800358e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8003592:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d023      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 800359a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800359e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 80035a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01b      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035be:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035ce:	4a24      	ldr	r2, [pc, #144]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d8:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80035da:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ee:	f7fd fb41 	bl	8000c74 <HAL_GetTick>
 80035f2:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	e00d      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fd fb3c 	bl	8000c74 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003602:	1ad2      	subs	r2, r2, r3
 8003604:	f241 3388 	movw	r3, #5000	; 0x1388
 8003608:	429a      	cmp	r2, r3
 800360a:	d903      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
            break;
 8003612:	e006      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003614:	4b12      	ldr	r3, [pc, #72]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0ea      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8003622:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003626:	2b00      	cmp	r3, #0
 8003628:	d13a      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800362a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800362e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800363a:	d115      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800363c:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003644:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003648:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003652:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003656:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8003658:	430b      	orrs	r3, r1
 800365a:	61d3      	str	r3, [r2, #28]
 800365c:	e00a      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800365e:	bf00      	nop
 8003660:	44020c00 	.word	0x44020c00
 8003664:	44020800 	.word	0x44020800
 8003668:	4b9f      	ldr	r3, [pc, #636]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	4a9e      	ldr	r2, [pc, #632]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800366e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003672:	61d3      	str	r3, [r2, #28]
 8003674:	4b9c      	ldr	r3, [pc, #624]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800367a:	4a9b      	ldr	r2, [pc, #620]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003684:	4b98      	ldr	r3, [pc, #608]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003686:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800368a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800368e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	4a94      	ldr	r2, [pc, #592]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003698:	430b      	orrs	r3, r1
 800369a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800369e:	e008      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a0:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036a4:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80036ae:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80036be:	663b      	str	r3, [r7, #96]	; 0x60
 80036c0:	2300      	movs	r3, #0
 80036c2:	667b      	str	r3, [r7, #100]	; 0x64
 80036c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d035      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80036ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80036d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036d6:	2b30      	cmp	r3, #48	; 0x30
 80036d8:	d014      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80036da:	2b30      	cmp	r3, #48	; 0x30
 80036dc:	d80e      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d012      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80036e2:	2b20      	cmp	r3, #32
 80036e4:	d80a      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d106      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ee:	4b7e      	ldr	r3, [pc, #504]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	4a7d      	ldr	r2, [pc, #500]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80036f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f8:	6293      	str	r3, [r2, #40]	; 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80036fa:	e008      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003702:	e004      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003704:	bf00      	nop
 8003706:	e002      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8003708:	bf00      	nop
 800370a:	e000      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800370c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8003716:	4b74      	ldr	r3, [pc, #464]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003718:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800371c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003720:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003724:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003728:	4a6f      	ldr	r2, [pc, #444]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800372a:	430b      	orrs	r3, r1
 800372c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003736:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800373a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003746:	65bb      	str	r3, [r7, #88]	; 0x58
 8003748:	2300      	movs	r3, #0
 800374a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d033      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8003756:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800375a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d007      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8003766:	e010      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b5f      	ldr	r3, [pc, #380]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800376a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376c:	4a5e      	ldr	r2, [pc, #376]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003772:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003774:	e00d      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003776:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800377a:	3308      	adds	r3, #8
 800377c:	4618      	mov	r0, r3
 800377e:	f003 fb6f 	bl	8006e60 <RCCEx_PLL2_Config>
 8003782:	4603      	mov	r3, r0
 8003784:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8003788:	e003      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10d      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800379c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80037a0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80037a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037a8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80037ac:	4a4e      	ldr	r2, [pc, #312]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80037ae:	430b      	orrs	r3, r1
 80037b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80037ba:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80037be:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80037ca:	653b      	str	r3, [r7, #80]	; 0x50
 80037cc:	2300      	movs	r3, #0
 80037ce:	657b      	str	r3, [r7, #84]	; 0x54
 80037d0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d033      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80037da:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037de:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d007      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80037ea:	e010      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037ec:	4b3e      	ldr	r3, [pc, #248]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	4a3d      	ldr	r2, [pc, #244]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80037f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80037f8:	e00d      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80037fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80037fe:	3308      	adds	r3, #8
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fb2d 	bl	8006e60 <RCCEx_PLL2_Config>
 8003806:	4603      	mov	r3, r0
 8003808:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800380c:	e003      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003816:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10d      	bne.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003820:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003824:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003828:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800382c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003830:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003832:	430b      	orrs	r3, r1
 8003834:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800383a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 800383e:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003842:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800384a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003854:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003858:	460b      	mov	r3, r1
 800385a:	4313      	orrs	r3, r2
 800385c:	d04a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800385e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003866:	2b04      	cmp	r3, #4
 8003868:	d827      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800386a:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003870:	08003885 	.word	0x08003885
 8003874:	08003893 	.word	0x08003893
 8003878:	080038a7 	.word	0x080038a7
 800387c:	080038c3 	.word	0x080038c3
 8003880:	080038c3 	.word	0x080038c3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003884:	4b18      	ldr	r3, [pc, #96]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800388a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388e:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8003890:	e018      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003892:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003896:	3308      	adds	r3, #8
 8003898:	4618      	mov	r0, r3
 800389a:	f003 fae1 	bl	8006e60 <RCCEx_PLL2_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038a4:	e00e      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80038a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038aa:	3330      	adds	r3, #48	; 0x30
 80038ac:	4618      	mov	r0, r3
 80038ae:	f003 fb6f 	bl	8006f90 <RCCEx_PLL3_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80038b8:	e004      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80038c0:	e000      	b.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80038c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038c4:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d2:	f023 0107 	bic.w	r1, r3, #7
 80038d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038de:	4a02      	ldr	r2, [pc, #8]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80038e8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ec:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80038f0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80038f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80038f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003900:	643b      	str	r3, [r7, #64]	; 0x40
 8003902:	2300      	movs	r3, #0
 8003904:	647b      	str	r3, [r7, #68]	; 0x44
 8003906:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800390a:	460b      	mov	r3, r1
 800390c:	4313      	orrs	r3, r2
 800390e:	f000 8081 	beq.w	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8003912:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003916:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800391a:	2b20      	cmp	r3, #32
 800391c:	d85f      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	080039a9 	.word	0x080039a9
 8003928:	080039df 	.word	0x080039df
 800392c:	080039df 	.word	0x080039df
 8003930:	080039df 	.word	0x080039df
 8003934:	080039df 	.word	0x080039df
 8003938:	080039df 	.word	0x080039df
 800393c:	080039df 	.word	0x080039df
 8003940:	080039df 	.word	0x080039df
 8003944:	080039b7 	.word	0x080039b7
 8003948:	080039df 	.word	0x080039df
 800394c:	080039df 	.word	0x080039df
 8003950:	080039df 	.word	0x080039df
 8003954:	080039df 	.word	0x080039df
 8003958:	080039df 	.word	0x080039df
 800395c:	080039df 	.word	0x080039df
 8003960:	080039df 	.word	0x080039df
 8003964:	080039cb 	.word	0x080039cb
 8003968:	080039df 	.word	0x080039df
 800396c:	080039df 	.word	0x080039df
 8003970:	080039df 	.word	0x080039df
 8003974:	080039df 	.word	0x080039df
 8003978:	080039df 	.word	0x080039df
 800397c:	080039df 	.word	0x080039df
 8003980:	080039df 	.word	0x080039df
 8003984:	080039e7 	.word	0x080039e7
 8003988:	080039df 	.word	0x080039df
 800398c:	080039df 	.word	0x080039df
 8003990:	080039df 	.word	0x080039df
 8003994:	080039df 	.word	0x080039df
 8003998:	080039df 	.word	0x080039df
 800399c:	080039df 	.word	0x080039df
 80039a0:	080039df 	.word	0x080039df
 80039a4:	080039e7 	.word	0x080039e7
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a8:	4bab      	ldr	r3, [pc, #684]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	4aaa      	ldr	r2, [pc, #680]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039b2:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80039b4:	e018      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80039b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ba:	3308      	adds	r3, #8
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fa4f 	bl	8006e60 <RCCEx_PLL2_Config>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80039c8:	e00e      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80039ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039ce:	3330      	adds	r3, #48	; 0x30
 80039d0:	4618      	mov	r0, r3
 80039d2:	f003 fadd 	bl	8006f90 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80039dc:	e004      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80039f0:	4b99      	ldr	r3, [pc, #612]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80039fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80039fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a02:	4a95      	ldr	r2, [pc, #596]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a04:	430b      	orrs	r3, r1
 8003a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a0a:	e003      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003a10:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a22:	2300      	movs	r3, #0
 8003a24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d04e      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8003a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3c:	d02e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8003a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a42:	d827      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003a44:	2bc0      	cmp	r3, #192	; 0xc0
 8003a46:	d02b      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8003a48:	2bc0      	cmp	r3, #192	; 0xc0
 8003a4a:	d823      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003a4c:	2b80      	cmp	r3, #128	; 0x80
 8003a4e:	d017      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8003a50:	2b80      	cmp	r3, #128	; 0x80
 8003a52:	d81f      	bhi.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8003a58:	2b40      	cmp	r3, #64	; 0x40
 8003a5a:	d007      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8003a5c:	e01a      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5e:	4b7e      	ldr	r3, [pc, #504]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	4a7d      	ldr	r2, [pc, #500]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a68:	6293      	str	r3, [r2, #40]	; 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a6a:	e01a      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003a6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a70:	3308      	adds	r3, #8
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 f9f4 	bl	8006e60 <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e010      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003a80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003a84:	3330      	adds	r3, #48	; 0x30
 8003a86:	4618      	mov	r0, r3
 8003a88:	f003 fa82 	bl	8006f90 <RCCEx_PLL3_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8003a92:	e006      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003a9a:	e002      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003a9c:	bf00      	nop
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10d      	bne.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003aaa:	4b6b      	ldr	r3, [pc, #428]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003ab4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003abc:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ac4:	e003      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003aca:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003ace:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003ada:	633b      	str	r3, [r7, #48]	; 0x30
 8003adc:	2300      	movs	r3, #0
 8003ade:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d055      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8003aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003aee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003af2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003af6:	d031      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8003af8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003afc:	d82a      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b02:	d02d      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8003b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b08:	d824      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003b0a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b0e:	d029      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8003b10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b14:	d81e      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d011      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b20:	d818      	bhi.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8003b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2a:	d113      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003b2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b30:	3308      	adds	r3, #8
 8003b32:	4618      	mov	r0, r3
 8003b34:	f003 f994 	bl	8006e60 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e014      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b44:	3330      	adds	r3, #48	; 0x30
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fa22 	bl	8006f90 <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8003b52:	e00a      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003b5a:	e006      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003b5c:	bf00      	nop
 8003b5e:	e004      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8003b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8003b72:	4b39      	ldr	r3, [pc, #228]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b78:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b80:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003b92:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8003b96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003bac:	460b      	mov	r3, r1
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	d058      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8003bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003bba:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003bbe:	d031      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8003bc0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003bc4:	d82a      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003bc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bca:	d02d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8003bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bd0:	d824      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003bd2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bd6:	d029      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8003bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bdc:	d81e      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be2:	d011      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8003be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be8:	d818      	bhi.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d020      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8003bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bf2:	d113      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f003 f930 	bl	8006e60 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003c06:	e014      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c0c:	3330      	adds	r3, #48	; 0x30
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f003 f9be 	bl	8006f90 <RCCEx_PLL3_Config>
 8003c14:	4603      	mov	r3, r0
 8003c16:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003c22:	e006      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8003c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c32:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d110      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8003c3a:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c40:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c44:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c4c:	4902      	ldr	r1, [pc, #8]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8003c56:	bf00      	nop
 8003c58:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003c60:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	6239      	str	r1, [r7, #32]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
 8003c76:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d055      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8003c80:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c88:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003c8c:	d031      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8003c8e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8003c92:	d82a      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003c94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c98:	d02d      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8003c9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c9e:	d824      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003ca0:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003ca4:	d029      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8003ca6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8003caa:	d81e      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d011      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d818      	bhi.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8003cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc0:	d113      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003cc2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 f8c9 	bl	8006e60 <RCCEx_PLL2_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cd4:	e014      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003cda:	3330      	adds	r3, #48	; 0x30
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 f957 	bl	8006f90 <RCCEx_PLL3_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003cf0:	e006      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003cf2:	bf00      	nop
 8003cf4:	e004      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8003cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d00:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10d      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8003d08:	4b88      	ldr	r3, [pc, #544]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d0e:	f423 3260 	bic.w	r2, r3, #229376	; 0x38000
 8003d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003d1a:	4984      	ldr	r1, [pc, #528]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003d22:	e003      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d24:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d28:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	2100      	movs	r1, #0
 8003d36:	61b9      	str	r1, [r7, #24]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003d42:	460b      	mov	r3, r1
 8003d44:	4313      	orrs	r3, r2
 8003d46:	d03d      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8003d48:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d4c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d81c      	bhi.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d97 	.word	0x08003d97
 8003d60:	08003d6d 	.word	0x08003d6d
 8003d64:	08003d7b 	.word	0x08003d7b
 8003d68:	08003d97 	.word	0x08003d97
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6c:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	4a6e      	ldr	r2, [pc, #440]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003d72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d76:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003d78:	e00e      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003d7e:	3308      	adds	r3, #8
 8003d80:	4618      	mov	r0, r3
 8003d82:	f003 f86d 	bl	8006e60 <RCCEx_PLL2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8003d8c:	e004      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003d94:	e000      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8003d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d98:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003da0:	4b62      	ldr	r3, [pc, #392]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003da2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003da6:	f023 0203 	bic.w	r2, r3, #3
 8003daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003db2:	495e      	ldr	r1, [pc, #376]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003dba:	e003      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003dc0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	6139      	str	r1, [r7, #16]
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	d03a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8003de0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003de4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dec:	d00e      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8003dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df2:	d815      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d017      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8003df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dfc:	d110      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfe:	4b4b      	ldr	r3, [pc, #300]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	4a4a      	ldr	r2, [pc, #296]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e0a:	e00e      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e10:	3308      	adds	r3, #8
 8003e12:	4618      	mov	r0, r3
 8003e14:	f003 f824 	bl	8006e60 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003e1e:	e004      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003e26:	e000      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8003e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2a:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8003e32:	4b3e      	ldr	r3, [pc, #248]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e44:	4939      	ldr	r1, [pc, #228]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8003e4c:	e003      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003e52:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e56:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5e:	2100      	movs	r1, #0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	f003 0310 	and.w	r3, r3, #16
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d038      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8003e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003e7a:	2b30      	cmp	r3, #48	; 0x30
 8003e7c:	d01b      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8003e7e:	2b30      	cmp	r3, #48	; 0x30
 8003e80:	d815      	bhi.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d002      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8003e86:	2b20      	cmp	r3, #32
 8003e88:	d007      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8003e8a:	e010      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	4a26      	ldr	r2, [pc, #152]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e96:	6293      	str	r3, [r2, #40]	; 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e98:	e00e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003e9e:	3330      	adds	r3, #48	; 0x30
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 f875 	bl	8006f90 <RCCEx_PLL3_Config>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b
        break;
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8003eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb8:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8003ec0:	4b1a      	ldr	r3, [pc, #104]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ec6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ece:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ed2:	4916      	ldr	r1, [pc, #88]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003eda:	e003      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 315b 	ldrb.w	r3, [r7, #347]	; 0x15b
 8003ee0:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	2100      	movs	r1, #0
 8003eee:	6039      	str	r1, [r7, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003efa:	460b      	mov	r3, r1
 8003efc:	4313      	orrs	r3, r2
 8003efe:	d00c      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003f00:	4b0a      	ldr	r3, [pc, #40]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003f06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8003f0e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003f12:	4906      	ldr	r1, [pc, #24]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8

  }
#endif /* CEC */

  return status;
 8003f1a:	f897 315a 	ldrb.w	r3, [r7, #346]	; 0x15a
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8003f24:	46bd      	mov	sp, r7
 8003f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f2a:	bf00      	nop
 8003f2c:	44020c00 	.word	0x44020c00

08003f30 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b08b      	sub	sp, #44	; 0x2c
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003f38:	4bad      	ldr	r3, [pc, #692]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003f42:	4bab      	ldr	r3, [pc, #684]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8003f4c:	4ba8      	ldr	r3, [pc, #672]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f56:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8003f58:	4ba5      	ldr	r3, [pc, #660]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003f62:	4ba3      	ldr	r3, [pc, #652]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8126 	beq.w	80041d2 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d053      	beq.n	8004034 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d86f      	bhi.n	8004072 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d003      	beq.n	8003fa0 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d02b      	beq.n	8003ff6 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 8003f9e:	e068      	b.n	8004072 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003fa0:	4b93      	ldr	r3, [pc, #588]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	08db      	lsrs	r3, r3, #3
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	4a92      	ldr	r2, [pc, #584]	; (80041f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8003fac:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	ee07 3a90 	vmov	s15, r3
 8003fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	ee07 3a90 	vmov	s15, r3
 8003fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd4:	ed97 6a04 	vldr	s12, [r7, #16]
 8003fd8:	eddf 5a87 	vldr	s11, [pc, #540]	; 80041f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8003fdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 8003ff4:	e068      	b.n	80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004000:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80041fc <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004012:	ed97 6a04 	vldr	s12, [r7, #16]
 8004016:	eddf 5a78 	vldr	s11, [pc, #480]	; 80041f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800401a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800401e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004032:	e049      	b.n	80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800403e:	eddf 6a70 	vldr	s13, [pc, #448]	; 8004200 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8004042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	ee07 3a90 	vmov	s15, r3
 800404c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004050:	ed97 6a04 	vldr	s12, [r7, #16]
 8004054:	eddf 5a68 	vldr	s11, [pc, #416]	; 80041f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8004058:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800405c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004060:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004064:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004070:	e02a      	b.n	80040c8 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004072:	4b5f      	ldr	r3, [pc, #380]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	08db      	lsrs	r3, r3, #3
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	4a5d      	ldr	r2, [pc, #372]	; (80041f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800407e:	fa22 f303 	lsr.w	r3, r2, r3
 8004082:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	ee07 3a90 	vmov	s15, r3
 8004094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80040aa:	eddf 5a53 	vldr	s11, [pc, #332]	; 80041f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80040ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80040c6:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80040c8:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040d4:	d121      	bne.n	800411a <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80040d6:	4b46      	ldr	r3, [pc, #280]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d017      	beq.n	8004112 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80040e2:	4b43      	ldr	r3, [pc, #268]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	0a5b      	lsrs	r3, r3, #9
 80040e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80040f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80040fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004108:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e002      	b.n	8004120 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004120:	4b33      	ldr	r3, [pc, #204]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412c:	d121      	bne.n	8004172 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800412e:	4b30      	ldr	r3, [pc, #192]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d017      	beq.n	800416a <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800413a:	4b2d      	ldr	r3, [pc, #180]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800414c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004150:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004154:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800415c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004160:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e006      	b.n	8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	605a      	str	r2, [r3, #4]
 8004170:	e002      	b.n	8004178 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004178:	4b1d      	ldr	r3, [pc, #116]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004184:	d121      	bne.n	80041ca <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004186:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d017      	beq.n	80041c2 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004192:	4b17      	ldr	r3, [pc, #92]	; (80041f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004196:	0e1b      	lsrs	r3, r3, #24
 8004198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800419c:	ee07 3a90 	vmov	s15, r3
 80041a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80041a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041a8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80041ac:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80041b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b8:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80041c0:	e010      	b.n	80041e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	609a      	str	r2, [r3, #8]
}
 80041c8:	e00c      	b.n	80041e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	e008      	b.n	80041e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	609a      	str	r2, [r3, #8]
}
 80041e4:	bf00      	nop
 80041e6:	372c      	adds	r7, #44	; 0x2c
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	44020c00 	.word	0x44020c00
 80041f4:	03d09000 	.word	0x03d09000
 80041f8:	46000000 	.word	0x46000000
 80041fc:	4a742400 	.word	0x4a742400
 8004200:	4bbebc20 	.word	0x4bbebc20

08004204 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004204:	b480      	push	{r7}
 8004206:	b08b      	sub	sp, #44	; 0x2c
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800420c:	4bad      	ldr	r3, [pc, #692]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800420e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004216:	4bab      	ldr	r3, [pc, #684]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004220:	4ba8      	ldr	r3, [pc, #672]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	0a1b      	lsrs	r3, r3, #8
 8004226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800422a:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800422c:	4ba5      	ldr	r3, [pc, #660]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004236:	4ba3      	ldr	r3, [pc, #652]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	ee07 3a90 	vmov	s15, r3
 800424a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800424e:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8126 	beq.w	80044a6 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d053      	beq.n	8004308 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b03      	cmp	r3, #3
 8004264:	d86f      	bhi.n	8004346 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d02b      	beq.n	80042ca <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004272:	e068      	b.n	8004346 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004274:	4b93      	ldr	r3, [pc, #588]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	4a92      	ldr	r2, [pc, #584]	; (80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
 8004284:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	ee07 3a90 	vmov	s15, r3
 800428c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	ee07 3a90 	vmov	s15, r3
 8004296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042a8:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ac:	eddf 5a87 	vldr	s11, [pc, #540]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80042b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 80042c8:	e068      	b.n	800439c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80044d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80042d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	ee07 3a90 	vmov	s15, r3
 80042e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e6:	ed97 6a04 	vldr	s12, [r7, #16]
 80042ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80042ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004302:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004306:	e049      	b.n	800439c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	ee07 3a90 	vmov	s15, r3
 800430e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004312:	eddf 6a70 	vldr	s13, [pc, #448]	; 80044d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	ed97 6a04 	vldr	s12, [r7, #16]
 8004328:	eddf 5a68 	vldr	s11, [pc, #416]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800432c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004340:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004344:	e02a      	b.n	800439c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004346:	4b5f      	ldr	r3, [pc, #380]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	08db      	lsrs	r3, r3, #3
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	4a5d      	ldr	r2, [pc, #372]	; (80044c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004352:	fa22 f303 	lsr.w	r3, r2, r3
 8004356:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437a:	ed97 6a04 	vldr	s12, [r7, #16]
 800437e:	eddf 5a53 	vldr	s11, [pc, #332]	; 80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800439a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800439c:	4b49      	ldr	r3, [pc, #292]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a8:	d121      	bne.n	80043ee <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80043aa:	4b46      	ldr	r3, [pc, #280]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d017      	beq.n	80043e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80043b6:	4b43      	ldr	r3, [pc, #268]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ba:	0a5b      	lsrs	r3, r3, #9
 80043bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c0:	ee07 3a90 	vmov	s15, r3
 80043c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80043c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043cc:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80043d0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80043d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043dc:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e006      	b.n	80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e002      	b.n	80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80043f4:	4b33      	ldr	r3, [pc, #204]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004400:	d121      	bne.n	8004446 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004402:	4b30      	ldr	r3, [pc, #192]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d017      	beq.n	800443e <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800440e:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	0c1b      	lsrs	r3, r3, #16
 8004414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004418:	ee07 3a90 	vmov	s15, r3
 800441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004424:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004428:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800442c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004430:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004434:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e006      	b.n	800444c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	e002      	b.n	800444c <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800444c:	4b1d      	ldr	r3, [pc, #116]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004458:	d121      	bne.n	800449e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d017      	beq.n	8004496 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	0e1b      	lsrs	r3, r3, #24
 800446c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004470:	ee07 3a90 	vmov	s15, r3
 8004474:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004478:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800447c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004480:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004494:	e010      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
}
 800449c:	e00c      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	609a      	str	r2, [r3, #8]
}
 80044a4:	e008      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	372c      	adds	r7, #44	; 0x2c
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	44020c00 	.word	0x44020c00
 80044c8:	03d09000 	.word	0x03d09000
 80044cc:	46000000 	.word	0x46000000
 80044d0:	4a742400 	.word	0x4a742400
 80044d4:	4bbebc20 	.word	0x4bbebc20

080044d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80044d8:	b480      	push	{r7}
 80044da:	b08b      	sub	sp, #44	; 0x2c
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80044e0:	4bad      	ldr	r3, [pc, #692]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80044ea:	4bab      	ldr	r3, [pc, #684]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80044f4:	4ba8      	ldr	r3, [pc, #672]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	0a1b      	lsrs	r3, r3, #8
 80044fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fe:	61bb      	str	r3, [r7, #24]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8004500:	4ba5      	ldr	r3, [pc, #660]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800450a:	4ba3      	ldr	r3, [pc, #652]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	fb02 f303 	mul.w	r3, r2, r3
 800451a:	ee07 3a90 	vmov	s15, r3
 800451e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004522:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8126 	beq.w	800477a <HAL_RCCEx_GetPLL3ClockFreq+0x2a2>
  {
    switch (pll3source)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b03      	cmp	r3, #3
 8004532:	d053      	beq.n	80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x104>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d86f      	bhi.n	800461a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_GetPLL3ClockFreq+0x70>
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d02b      	beq.n	800459e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8004546:	e068      	b.n	800461a <HAL_RCCEx_GetPLL3ClockFreq+0x142>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004548:	4b93      	ldr	r3, [pc, #588]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	08db      	lsrs	r3, r3, #3
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	4a92      	ldr	r2, [pc, #584]	; (800479c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
 8004558:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800457c:	ed97 6a04 	vldr	s12, [r7, #16]
 8004580:	eddf 5a87 	vldr	s11, [pc, #540]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004584:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004588:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800458c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004590:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004598:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800459c:	e068      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80047a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80045ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	ee07 3a90 	vmov	s15, r3
 80045b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ba:	ed97 6a04 	vldr	s12, [r7, #16]
 80045be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80045c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 80045da:	e049      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	ee07 3a90 	vmov	s15, r3
 80045e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045e6:	eddf 6a70 	vldr	s13, [pc, #448]	; 80047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80045ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f8:	ed97 6a04 	vldr	s12, [r7, #16]
 80045fc:	eddf 5a68 	vldr	s11, [pc, #416]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800460c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004614:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                           (float_t)1);
        break;
 8004618:	e02a      	b.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800461a:	4b5f      	ldr	r3, [pc, #380]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	4a5d      	ldr	r2, [pc, #372]	; (800479c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	ee07 3a90 	vmov	s15, r3
 800463c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a04 	vldr	s12, [r7, #16]
 8004652:	eddf 5a53 	vldr	s11, [pc, #332]	; 80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
                                                          (float_t)1);
        break;
 800466e:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004670:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467c:	d121      	bne.n	80046c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800467e:	4b46      	ldr	r3, [pc, #280]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <HAL_RCCEx_GetPLL3ClockFreq+0x1e2>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800468a:	4b43      	ldr	r3, [pc, #268]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800468c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468e:	0a5b      	lsrs	r3, r3, #9
 8004690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800469c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80046a4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80046a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b0:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e002      	b.n	80046c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046c8:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046d4:	d121      	bne.n	800471a <HAL_RCCEx_GetPLL3ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d017      	beq.n	8004712 <HAL_RCCEx_GetPLL3ClockFreq+0x23a>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80046e2:	4b2d      	ldr	r3, [pc, #180]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	0c1b      	lsrs	r3, r3, #16
 80046e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80046f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046f8:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80046fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004708:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]
 8004710:	e006      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	e002      	b.n	8004720 <HAL_RCCEx_GetPLL3ClockFreq+0x248>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004720:	4b1d      	ldr	r3, [pc, #116]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472c:	d121      	bne.n	8004772 <HAL_RCCEx_GetPLL3ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800472e:	4b1a      	ldr	r3, [pc, #104]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d017      	beq.n	800476a <HAL_RCCEx_GetPLL3ClockFreq+0x292>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800473a:	4b17      	ldr	r3, [pc, #92]	; (8004798 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	0e1b      	lsrs	r3, r3, #24
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800474c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004750:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8004754:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8004758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004760:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8004768:	e010      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	609a      	str	r2, [r3, #8]
}
 8004770:	e00c      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	e008      	b.n	800478c <HAL_RCCEx_GetPLL3ClockFreq+0x2b4>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	372c      	adds	r7, #44	; 0x2c
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	44020c00 	.word	0x44020c00
 800479c:	03d09000 	.word	0x03d09000
 80047a0:	46000000 	.word	0x46000000
 80047a4:	4a742400 	.word	0x4a742400
 80047a8:	4bbebc20 	.word	0x4bbebc20

080047ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80047ac:	b590      	push	{r4, r7, lr}
 80047ae:	b08f      	sub	sp, #60	; 0x3c
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80047b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047ba:	f100 447e 	add.w	r4, r0, #4261412864	; 0xfe000000
 80047be:	4321      	orrs	r1, r4
 80047c0:	d150      	bne.n	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80047c2:	4b26      	ldr	r3, [pc, #152]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80047ce:	4b23      	ldr	r3, [pc, #140]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d108      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80047dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e2:	d104      	bne.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80047e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
 80047ea:	f002 bb2a 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80047ee:	4b1b      	ldr	r3, [pc, #108]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047fc:	d108      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004804:	d104      	bne.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004806:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	f002 bb19 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004810:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800481c:	d119      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004824:	d115      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800482e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004832:	d30a      	bcc.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004834:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	4a08      	ldr	r2, [pc, #32]	; (8004860 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004846:	f002 bafc 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800484e:	f002 baf8 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	637b      	str	r3, [r7, #52]	; 0x34
 8004856:	f002 baf4 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800485a:	bf00      	nop
 800485c:	44020c00 	.word	0x44020c00
 8004860:	017d7840 	.word	0x017d7840
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004864:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004868:	f5a1 6480 	sub.w	r4, r1, #1024	; 0x400
 800486c:	ea50 0104 	orrs.w	r1, r0, r4
 8004870:	f001 8275 	beq.w	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8004874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004878:	2801      	cmp	r0, #1
 800487a:	f571 6180 	sbcs.w	r1, r1, #1024	; 0x400
 800487e:	f082 82dd 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004886:	f5a1 7400 	sub.w	r4, r1, #512	; 0x200
 800488a:	ea50 0104 	orrs.w	r1, r0, r4
 800488e:	f001 816c 	beq.w	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8004892:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004896:	2801      	cmp	r0, #1
 8004898:	f571 7100 	sbcs.w	r1, r1, #512	; 0x200
 800489c:	f082 82ce 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048a4:	f5a1 7480 	sub.w	r4, r1, #256	; 0x100
 80048a8:	ea50 0104 	orrs.w	r1, r0, r4
 80048ac:	f001 8602 	beq.w	80064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80048b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b4:	2801      	cmp	r0, #1
 80048b6:	f571 7180 	sbcs.w	r1, r1, #256	; 0x100
 80048ba:	f082 82bf 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048c2:	f1a1 0480 	sub.w	r4, r1, #128	; 0x80
 80048c6:	ea50 0104 	orrs.w	r1, r0, r4
 80048ca:	f001 854c 	beq.w	8006366 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80048ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048d2:	2801      	cmp	r0, #1
 80048d4:	f171 0180 	sbcs.w	r1, r1, #128	; 0x80
 80048d8:	f082 82b0 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048e0:	f1a1 0440 	sub.w	r4, r1, #64	; 0x40
 80048e4:	ea50 0104 	orrs.w	r1, r0, r4
 80048e8:	f001 849e 	beq.w	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80048ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048f0:	2801      	cmp	r0, #1
 80048f2:	f171 0140 	sbcs.w	r1, r1, #64	; 0x40
 80048f6:	f082 82a1 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80048fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048fe:	f1a1 0420 	sub.w	r4, r1, #32
 8004902:	ea50 0104 	orrs.w	r1, r0, r4
 8004906:	f001 83e8 	beq.w	80060da <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800490a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800490e:	2801      	cmp	r0, #1
 8004910:	f171 0120 	sbcs.w	r1, r1, #32
 8004914:	f082 8292 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004918:	e9d7 0100 	ldrd	r0, r1, [r7]
 800491c:	f1a1 0410 	sub.w	r4, r1, #16
 8004920:	ea50 0104 	orrs.w	r1, r0, r4
 8004924:	f002 8256 	beq.w	8006dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8004928:	e9d7 0100 	ldrd	r0, r1, [r7]
 800492c:	2801      	cmp	r0, #1
 800492e:	f171 0110 	sbcs.w	r1, r1, #16
 8004932:	f082 8283 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004936:	e9d7 0100 	ldrd	r0, r1, [r7]
 800493a:	f1a1 0408 	sub.w	r4, r1, #8
 800493e:	ea50 0104 	orrs.w	r1, r0, r4
 8004942:	f002 81cc 	beq.w	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8004946:	e9d7 0100 	ldrd	r0, r1, [r7]
 800494a:	2801      	cmp	r0, #1
 800494c:	f171 0108 	sbcs.w	r1, r1, #8
 8004950:	f082 8274 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004954:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004958:	1f0c      	subs	r4, r1, #4
 800495a:	ea50 0104 	orrs.w	r1, r0, r4
 800495e:	f001 8648 	beq.w	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8004962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004966:	2801      	cmp	r0, #1
 8004968:	f171 0104 	sbcs.w	r1, r1, #4
 800496c:	f082 8266 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004974:	1e8c      	subs	r4, r1, #2
 8004976:	ea50 0104 	orrs.w	r1, r0, r4
 800497a:	f002 8143 	beq.w	8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 800497e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004982:	2801      	cmp	r0, #1
 8004984:	f171 0102 	sbcs.w	r1, r1, #2
 8004988:	f082 8258 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800498c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004990:	1e4c      	subs	r4, r1, #1
 8004992:	ea50 0104 	orrs.w	r1, r0, r4
 8004996:	f002 80ce 	beq.w	8006b36 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800499a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800499e:	2801      	cmp	r0, #1
 80049a0:	f171 0101 	sbcs.w	r1, r1, #1
 80049a4:	f082 824a 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ac:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 80049b0:	4321      	orrs	r1, r4
 80049b2:	f002 8059 	beq.w	8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80049b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ba:	4cd9      	ldr	r4, [pc, #868]	; (8004d20 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80049bc:	42a0      	cmp	r0, r4
 80049be:	f171 0100 	sbcs.w	r1, r1, #0
 80049c2:	f082 823b 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049ca:	f100 4440 	add.w	r4, r0, #3221225472	; 0xc0000000
 80049ce:	4321      	orrs	r1, r4
 80049d0:	f001 87d9 	beq.w	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80049d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049d8:	4cd2      	ldr	r4, [pc, #840]	; (8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80049da:	42a0      	cmp	r0, r4
 80049dc:	f171 0100 	sbcs.w	r1, r1, #0
 80049e0:	f082 822c 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80049e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049e8:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 80049ec:	4321      	orrs	r1, r4
 80049ee:	f001 8751 	beq.w	8006894 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80049f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049f6:	4ccc      	ldr	r4, [pc, #816]	; (8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80049f8:	42a0      	cmp	r0, r4
 80049fa:	f171 0100 	sbcs.w	r1, r1, #0
 80049fe:	f082 821d 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a06:	f100 4470 	add.w	r4, r0, #4026531840	; 0xf0000000
 8004a0a:	4321      	orrs	r1, r4
 8004a0c:	f001 869a 	beq.w	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8004a10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a14:	4cc5      	ldr	r4, [pc, #788]	; (8004d2c <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8004a16:	42a0      	cmp	r0, r4
 8004a18:	f171 0100 	sbcs.w	r1, r1, #0
 8004a1c:	f082 820e 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a24:	f100 4478 	add.w	r4, r0, #4160749568	; 0xf8000000
 8004a28:	4321      	orrs	r1, r4
 8004a2a:	f001 8612 	beq.w	8006652 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8004a2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a32:	4cbf      	ldr	r4, [pc, #764]	; (8004d30 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8004a34:	42a0      	cmp	r0, r4
 8004a36:	f171 0100 	sbcs.w	r1, r1, #0
 8004a3a:	f082 81ff 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a42:	f100 447c 	add.w	r4, r0, #4227858432	; 0xfc000000
 8004a46:	4321      	orrs	r1, r4
 8004a48:	f002 817e 	beq.w	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8004a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a50:	4cb8      	ldr	r4, [pc, #736]	; (8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8004a52:	42a0      	cmp	r0, r4
 8004a54:	f171 0100 	sbcs.w	r1, r1, #0
 8004a58:	f082 81f0 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a60:	f5a0 0400 	sub.w	r4, r0, #8388608	; 0x800000
 8004a64:	4321      	orrs	r1, r4
 8004a66:	f000 829e 	beq.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8004a6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a6e:	4cb2      	ldr	r4, [pc, #712]	; (8004d38 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	f171 0100 	sbcs.w	r1, r1, #0
 8004a76:	f082 81e1 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a7e:	f5a0 0480 	sub.w	r4, r0, #4194304	; 0x400000
 8004a82:	4321      	orrs	r1, r4
 8004a84:	f000 826d 	beq.w	8004f62 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8004a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a8c:	4cab      	ldr	r4, [pc, #684]	; (8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8004a8e:	42a0      	cmp	r0, r4
 8004a90:	f171 0100 	sbcs.w	r1, r1, #0
 8004a94:	f082 81d2 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004a98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a9c:	f5a0 1400 	sub.w	r4, r0, #2097152	; 0x200000
 8004aa0:	4321      	orrs	r1, r4
 8004aa2:	f001 800d 	beq.w	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8004aa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aaa:	4ca5      	ldr	r4, [pc, #660]	; (8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8004aac:	42a0      	cmp	r0, r4
 8004aae:	f171 0100 	sbcs.w	r1, r1, #0
 8004ab2:	f082 81c3 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ab6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004aba:	f5a0 1480 	sub.w	r4, r0, #1048576	; 0x100000
 8004abe:	4321      	orrs	r1, r4
 8004ac0:	f000 81d0 	beq.w	8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8004ac4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ac8:	4c9e      	ldr	r4, [pc, #632]	; (8004d44 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004aca:	42a0      	cmp	r0, r4
 8004acc:	f171 0100 	sbcs.w	r1, r1, #0
 8004ad0:	f082 81b4 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ad8:	f5a0 2400 	sub.w	r4, r0, #524288	; 0x80000
 8004adc:	4321      	orrs	r1, r4
 8004ade:	f000 8142 	beq.w	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8004ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ae6:	4c98      	ldr	r4, [pc, #608]	; (8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ae8:	42a0      	cmp	r0, r4
 8004aea:	f171 0100 	sbcs.w	r1, r1, #0
 8004aee:	f082 81a5 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004af6:	f5a0 2480 	sub.w	r4, r0, #262144	; 0x40000
 8004afa:	4321      	orrs	r1, r4
 8004afc:	f001 824e 	beq.w	8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8004b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b04:	4c91      	ldr	r4, [pc, #580]	; (8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004b06:	42a0      	cmp	r0, r4
 8004b08:	f171 0100 	sbcs.w	r1, r1, #0
 8004b0c:	f082 8196 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b14:	f5a0 3400 	sub.w	r4, r0, #131072	; 0x20000
 8004b18:	4321      	orrs	r1, r4
 8004b1a:	f001 8197 	beq.w	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8004b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b22:	4c8b      	ldr	r4, [pc, #556]	; (8004d50 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	f171 0100 	sbcs.w	r1, r1, #0
 8004b2a:	f082 8187 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b32:	f5a0 3480 	sub.w	r4, r0, #65536	; 0x10000
 8004b36:	4321      	orrs	r1, r4
 8004b38:	f001 8154 	beq.w	8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8004b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b40:	f1b0 1f01 	cmp.w	r0, #65537	; 0x10001
 8004b44:	f171 0100 	sbcs.w	r1, r1, #0
 8004b48:	f082 8178 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b50:	f5a0 4400 	sub.w	r4, r0, #32768	; 0x8000
 8004b54:	4321      	orrs	r1, r4
 8004b56:	f001 80b7 	beq.w	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8004b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b5e:	f248 0401 	movw	r4, #32769	; 0x8001
 8004b62:	42a0      	cmp	r0, r4
 8004b64:	f171 0100 	sbcs.w	r1, r1, #0
 8004b68:	f082 8168 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b70:	f5a0 4480 	sub.w	r4, r0, #16384	; 0x4000
 8004b74:	4321      	orrs	r1, r4
 8004b76:	f001 8064 	beq.w	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8004b7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b7e:	f244 0401 	movw	r4, #16385	; 0x4001
 8004b82:	42a0      	cmp	r0, r4
 8004b84:	f171 0100 	sbcs.w	r1, r1, #0
 8004b88:	f082 8158 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004b8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b90:	f5a0 5400 	sub.w	r4, r0, #8192	; 0x2000
 8004b94:	4321      	orrs	r1, r4
 8004b96:	f001 8011 	beq.w	8005bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8004b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9e:	f242 0401 	movw	r4, #8193	; 0x2001
 8004ba2:	42a0      	cmp	r0, r4
 8004ba4:	f171 0100 	sbcs.w	r1, r1, #0
 8004ba8:	f082 8148 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bb0:	f5a0 5480 	sub.w	r4, r0, #4096	; 0x1000
 8004bb4:	4321      	orrs	r1, r4
 8004bb6:	f000 871e 	beq.w	80059f6 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8004bba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bbe:	f241 0401 	movw	r4, #4097	; 0x1001
 8004bc2:	42a0      	cmp	r0, r4
 8004bc4:	f171 0100 	sbcs.w	r1, r1, #0
 8004bc8:	f082 8138 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bd0:	f5a0 6400 	sub.w	r4, r0, #2048	; 0x800
 8004bd4:	4321      	orrs	r1, r4
 8004bd6:	f000 86a8 	beq.w	800592a <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8004bda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bde:	f640 0401 	movw	r4, #2049	; 0x801
 8004be2:	42a0      	cmp	r0, r4
 8004be4:	f171 0100 	sbcs.w	r1, r1, #0
 8004be8:	f082 8128 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004bec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf0:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8004bf4:	4321      	orrs	r1, r4
 8004bf6:	f000 8632 	beq.w	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8004bfa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bfe:	f240 4401 	movw	r4, #1025	; 0x401
 8004c02:	42a0      	cmp	r0, r4
 8004c04:	f171 0100 	sbcs.w	r1, r1, #0
 8004c08:	f082 8118 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c10:	f5a0 7400 	sub.w	r4, r0, #512	; 0x200
 8004c14:	4321      	orrs	r1, r4
 8004c16:	f000 85b0 	beq.w	800577a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8004c1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c1e:	f240 2401 	movw	r4, #513	; 0x201
 8004c22:	42a0      	cmp	r0, r4
 8004c24:	f171 0100 	sbcs.w	r1, r1, #0
 8004c28:	f082 8108 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c30:	f5a0 7480 	sub.w	r4, r0, #256	; 0x100
 8004c34:	4321      	orrs	r1, r4
 8004c36:	f000 8535 	beq.w	80056a4 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8004c3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c3e:	f240 1401 	movw	r4, #257	; 0x101
 8004c42:	42a0      	cmp	r0, r4
 8004c44:	f171 0100 	sbcs.w	r1, r1, #0
 8004c48:	f082 80f8 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c50:	f1a0 0480 	sub.w	r4, r0, #128	; 0x80
 8004c54:	4321      	orrs	r1, r4
 8004c56:	f000 84ba 	beq.w	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8004c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c5e:	2881      	cmp	r0, #129	; 0x81
 8004c60:	f171 0100 	sbcs.w	r1, r1, #0
 8004c64:	f082 80ea 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c6c:	2821      	cmp	r0, #33	; 0x21
 8004c6e:	f171 0100 	sbcs.w	r1, r1, #0
 8004c72:	d26f      	bcs.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004c74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c78:	4301      	orrs	r1, r0
 8004c7a:	f002 80df 	beq.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c82:	1e42      	subs	r2, r0, #1
 8004c84:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
 8004c88:	2a20      	cmp	r2, #32
 8004c8a:	f173 0100 	sbcs.w	r1, r3, #0
 8004c8e:	f082 80d5 	bcs.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c92:	2a1f      	cmp	r2, #31
 8004c94:	f202 80d2 	bhi.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8004c98:	a101      	add	r1, pc, #4	; (adr r1, 8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8004c9a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08005001 	.word	0x08005001
 8004ca4:	080050cd 	.word	0x080050cd
 8004ca8:	08006e3d 	.word	0x08006e3d
 8004cac:	0800518d 	.word	0x0800518d
 8004cb0:	08006e3d 	.word	0x08006e3d
 8004cb4:	08006e3d 	.word	0x08006e3d
 8004cb8:	08006e3d 	.word	0x08006e3d
 8004cbc:	0800525d 	.word	0x0800525d
 8004cc0:	08006e3d 	.word	0x08006e3d
 8004cc4:	08006e3d 	.word	0x08006e3d
 8004cc8:	08006e3d 	.word	0x08006e3d
 8004ccc:	08006e3d 	.word	0x08006e3d
 8004cd0:	08006e3d 	.word	0x08006e3d
 8004cd4:	08006e3d 	.word	0x08006e3d
 8004cd8:	08006e3d 	.word	0x08006e3d
 8004cdc:	0800533f 	.word	0x0800533f
 8004ce0:	08006e3d 	.word	0x08006e3d
 8004ce4:	08006e3d 	.word	0x08006e3d
 8004ce8:	08006e3d 	.word	0x08006e3d
 8004cec:	08006e3d 	.word	0x08006e3d
 8004cf0:	08006e3d 	.word	0x08006e3d
 8004cf4:	08006e3d 	.word	0x08006e3d
 8004cf8:	08006e3d 	.word	0x08006e3d
 8004cfc:	08006e3d 	.word	0x08006e3d
 8004d00:	08006e3d 	.word	0x08006e3d
 8004d04:	08006e3d 	.word	0x08006e3d
 8004d08:	08006e3d 	.word	0x08006e3d
 8004d0c:	08006e3d 	.word	0x08006e3d
 8004d10:	08006e3d 	.word	0x08006e3d
 8004d14:	08006e3d 	.word	0x08006e3d
 8004d18:	08006e3d 	.word	0x08006e3d
 8004d1c:	08005415 	.word	0x08005415
 8004d20:	80000001 	.word	0x80000001
 8004d24:	40000001 	.word	0x40000001
 8004d28:	20000001 	.word	0x20000001
 8004d2c:	10000001 	.word	0x10000001
 8004d30:	08000001 	.word	0x08000001
 8004d34:	04000001 	.word	0x04000001
 8004d38:	00800001 	.word	0x00800001
 8004d3c:	00400001 	.word	0x00400001
 8004d40:	00200001 	.word	0x00200001
 8004d44:	00100001 	.word	0x00100001
 8004d48:	00080001 	.word	0x00080001
 8004d4c:	00040001 	.word	0x00040001
 8004d50:	00020001 	.word	0x00020001
 8004d54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d58:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	f000 83c4 	beq.w	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8004d62:	f002 b86b 	b.w	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004d66:	4ba1      	ldr	r3, [pc, #644]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004d68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d6c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004d70:	633b      	str	r3, [r7, #48]	; 0x30
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d78:	d036      	beq.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d80:	d86b      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d88:	d02b      	beq.n	8004de2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d90:	d863      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d98:	d01b      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8004d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d85b      	bhi.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dae:	d008      	beq.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004db0:	e053      	b.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004db2:	f107 0320 	add.w	r3, r7, #32
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff f8ba 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004dc0:	e04e      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dc2:	f107 0314 	add.w	r3, r7, #20
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fa1c 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004dd0:	e046      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fb7e 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004de0:	e03e      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004de2:	4b83      	ldr	r3, [pc, #524]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004de6:	e03b      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004de8:	4b80      	ldr	r3, [pc, #512]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dee:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004df4:	4b7d      	ldr	r3, [pc, #500]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d10c      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e06:	4b79      	ldr	r3, [pc, #484]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	08db      	lsrs	r3, r3, #3
 8004e0c:	f003 0303 	and.w	r3, r3, #3
 8004e10:	4a78      	ldr	r2, [pc, #480]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004e12:	fa22 f303 	lsr.w	r3, r2, r3
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
 8004e18:	e01e      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e1a:	4b74      	ldr	r3, [pc, #464]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e26:	d106      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d102      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004e30:	4b71      	ldr	r3, [pc, #452]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004e32:	637b      	str	r3, [r7, #52]	; 0x34
 8004e34:	e010      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e36:	4b6d      	ldr	r3, [pc, #436]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4a:	d102      	bne.n	8004e52 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004e4c:	4b6b      	ldr	r3, [pc, #428]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e50:	e002      	b.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004e56:	e003      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8004e58:	e002      	b.n	8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004e5e:	bf00      	nop
          }
        }
        break;
 8004e60:	f001 bfef 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004e64:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004e66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e6a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8004e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e76:	d036      	beq.n	8004ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e7e:	d86b      	bhi.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e86:	d02b      	beq.n	8004ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e8e:	d863      	bhi.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e96:	d01b      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e9e:	d85b      	bhi.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8004ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8004eae:	e053      	b.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eb0:	f107 0320 	add.w	r3, r7, #32
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f83b 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ebe:	e04e      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff f99d 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ece:	e046      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ed0:	f107 0308 	add.w	r3, r7, #8
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff faff 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ede:	e03e      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8004ee0:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004ee4:	e03b      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ee6:	4b41      	ldr	r3, [pc, #260]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eec:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ef2:	4b3e      	ldr	r3, [pc, #248]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8004efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f04:	4b39      	ldr	r3, [pc, #228]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	08db      	lsrs	r3, r3, #3
 8004f0a:	f003 0303 	and.w	r3, r3, #3
 8004f0e:	4a39      	ldr	r2, [pc, #228]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	637b      	str	r3, [r7, #52]	; 0x34
 8004f16:	e01e      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f18:	4b34      	ldr	r3, [pc, #208]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f24:	d106      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f2c:	d102      	bne.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8004f2e:	4b32      	ldr	r3, [pc, #200]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8004f30:	637b      	str	r3, [r7, #52]	; 0x34
 8004f32:	e010      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f34:	4b2d      	ldr	r3, [pc, #180]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f40:	d106      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8004f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f48:	d102      	bne.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8004f4a:	4b2c      	ldr	r3, [pc, #176]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8004f4e:	e002      	b.n	8004f56 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8004f54:	e003      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8004f56:	e002      	b.n	8004f5e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8004f5c:	bf00      	nop
          }
        }
        break;
 8004f5e:	f001 bf70 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8004f62:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004f64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d108      	bne.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f74:	f107 0320 	add.w	r3, r7, #32
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7fe ffd9 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f80:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004f82:	f001 bf5e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	d108      	bne.n	8004f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f8c:	f107 0314 	add.w	r3, r7, #20
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff f937 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f9a:	f001 bf52 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fa2:	f001 bf4e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8004fa6:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004fa8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8004fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d108      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fb8:	f107 0320 	add.w	r3, r7, #32
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fe ffb7 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004fc6:	f001 bf3c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d108      	bne.n	8004fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fd0:	f107 0314 	add.w	r3, r7, #20
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f915 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fde:	f001 bf30 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004fe6:	f001 bf2c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8004fea:	bf00      	nop
 8004fec:	44020c00 	.word	0x44020c00
 8004ff0:	00bb8000 	.word	0x00bb8000
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	017d7840 	.word	0x017d7840
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005000:	4b9d      	ldr	r3, [pc, #628]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005012:	f7fc ffd7 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8005016:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005018:	f001 bf13 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800501c:	4b96      	ldr	r3, [pc, #600]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005024:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005028:	d10a      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	2b01      	cmp	r3, #1
 800502e:	d107      	bne.n	8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005030:	f107 0314 	add.w	r3, r7, #20
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff f8e5 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	637b      	str	r3, [r7, #52]	; 0x34
 800503e:	e043      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8005040:	4b8d      	ldr	r3, [pc, #564]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005048:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800504c:	d10a      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800504e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005054:	f107 0308 	add.w	r3, r7, #8
 8005058:	4618      	mov	r0, r3
 800505a:	f7ff fa3d 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	637b      	str	r3, [r7, #52]	; 0x34
 8005062:	e031      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005064:	4b84      	ldr	r3, [pc, #528]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b02      	cmp	r3, #2
 800506e:	d10c      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2b03      	cmp	r3, #3
 8005074:	d109      	bne.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005076:	4b80      	ldr	r3, [pc, #512]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	08db      	lsrs	r3, r3, #3
 800507c:	f003 0303 	and.w	r3, r3, #3
 8005080:	4a7e      	ldr	r2, [pc, #504]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005082:	fa22 f303 	lsr.w	r3, r2, r3
 8005086:	637b      	str	r3, [r7, #52]	; 0x34
 8005088:	e01e      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 800508a:	4b7b      	ldr	r3, [pc, #492]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005096:	d105      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2b04      	cmp	r3, #4
 800509c:	d102      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 800509e:	4b78      	ldr	r3, [pc, #480]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80050a0:	637b      	str	r3, [r7, #52]	; 0x34
 80050a2:	e011      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80050a4:	4b74      	ldr	r3, [pc, #464]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d106      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	d103      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80050b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050bc:	637b      	str	r3, [r7, #52]	; 0x34
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80050c4:	f001 bebd 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80050c8:	f001 bebb 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80050cc:	4b6a      	ldr	r3, [pc, #424]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80050d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80050d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d104      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80050de:	f7fc ff5b 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80050e2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80050e4:	f001 bead 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80050e8:	4b63      	ldr	r3, [pc, #396]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050f4:	d10a      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d107      	bne.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f87f 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	637b      	str	r3, [r7, #52]	; 0x34
 800510a:	e03d      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2b10      	cmp	r3, #16
 8005110:	d108      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005112:	f107 0308 	add.w	r3, r7, #8
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff f9de 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005120:	f001 be8f 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005124:	4b54      	ldr	r3, [pc, #336]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10c      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	2b18      	cmp	r3, #24
 8005134:	d109      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005136:	4b50      	ldr	r3, [pc, #320]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	4a4e      	ldr	r2, [pc, #312]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
 8005148:	e01e      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800514a:	4b4b      	ldr	r3, [pc, #300]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005152:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	2b20      	cmp	r3, #32
 800515c:	d102      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800515e:	4b48      	ldr	r3, [pc, #288]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
 8005162:	e011      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005164:	4b44      	ldr	r3, [pc, #272]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d106      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b28      	cmp	r3, #40	; 0x28
 8005176:	d103      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8005178:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005184:	f001 be5d 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005188:	f001 be5b 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800518c:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800518e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005192:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005196:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800519e:	f7fc fefb 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80051a2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80051a4:	f001 be4d 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80051a8:	4b33      	ldr	r3, [pc, #204]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b4:	d10a      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d107      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051bc:	f107 0314 	add.w	r3, r7, #20
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff f81f 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	637b      	str	r3, [r7, #52]	; 0x34
 80051ca:	e045      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80051cc:	4b2a      	ldr	r3, [pc, #168]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d8:	d10a      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	2b80      	cmp	r3, #128	; 0x80
 80051de:	d107      	bne.n	80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051e0:	f107 0308 	add.w	r3, r7, #8
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff f977 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	e033      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d10c      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	2bc0      	cmp	r3, #192	; 0xc0
 8005200:	d109      	bne.n	8005216 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005202:	4b1d      	ldr	r3, [pc, #116]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	08db      	lsrs	r3, r3, #3
 8005208:	f003 0303 	and.w	r3, r3, #3
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800520e:	fa22 f303 	lsr.w	r3, r2, r3
 8005212:	637b      	str	r3, [r7, #52]	; 0x34
 8005214:	e020      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8005216:	4b18      	ldr	r3, [pc, #96]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005222:	d106      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d102      	bne.n	8005232 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800522e:	637b      	str	r3, [r7, #52]	; 0x34
 8005230:	e012      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005234:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b02      	cmp	r3, #2
 800523e:	d107      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005246:	d103      	bne.n	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8005248:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800524c:	637b      	str	r3, [r7, #52]	; 0x34
 800524e:	e003      	b.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005254:	f001 bdf5 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005258:	f001 bdf3 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800525e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005262:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8005266:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10a      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800526e:	f7fc fe93 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005272:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005274:	f001 bde5 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005278:	44020c00 	.word	0x44020c00
 800527c:	03d09000 	.word	0x03d09000
 8005280:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8005284:	4ba0      	ldr	r3, [pc, #640]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800528c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005290:	d10b      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d107      	bne.n	80052aa <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe ffb0 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	637b      	str	r3, [r7, #52]	; 0x34
 80052a8:	e047      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80052aa:	4b97      	ldr	r3, [pc, #604]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b6:	d10b      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80052b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052be:	d107      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052c0:	f107 0308 	add.w	r3, r7, #8
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff f907 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	e034      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80052d0:	4b8d      	ldr	r3, [pc, #564]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d10d      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052de:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052e2:	d109      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80052e4:	4b88      	ldr	r3, [pc, #544]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	08db      	lsrs	r3, r3, #3
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	4a87      	ldr	r2, [pc, #540]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
 80052f4:	637b      	str	r3, [r7, #52]	; 0x34
 80052f6:	e020      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80052f8:	4b83      	ldr	r3, [pc, #524]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005304:	d106      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530c:	d102      	bne.n	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800530e:	4b80      	ldr	r3, [pc, #512]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
 8005312:	e012      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005314:	4b7c      	ldr	r3, [pc, #496]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d107      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8005328:	d103      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 800532a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800532e:	637b      	str	r3, [r7, #52]	; 0x34
 8005330:	e003      	b.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005336:	f001 bd84 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800533a:	f001 bd82 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800533e:	4b72      	ldr	r3, [pc, #456]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005340:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005344:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005348:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	2b00      	cmp	r3, #0
 800534e:	d104      	bne.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005350:	f7fc fe22 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005354:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8005356:	f001 bd74 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 800535a:	4b6b      	ldr	r3, [pc, #428]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005366:	d10b      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	d107      	bne.n	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005370:	f107 0314 	add.w	r3, r7, #20
 8005374:	4618      	mov	r0, r3
 8005376:	f7fe ff45 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	637b      	str	r3, [r7, #52]	; 0x34
 800537e:	e047      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8005380:	4b61      	ldr	r3, [pc, #388]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005388:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800538c:	d10b      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005394:	d107      	bne.n	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005396:	f107 0308 	add.w	r3, r7, #8
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f89c 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	637b      	str	r3, [r7, #52]	; 0x34
 80053a4:	e034      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80053a6:	4b58      	ldr	r3, [pc, #352]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d10d      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80053b8:	d109      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	08db      	lsrs	r3, r3, #3
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	4a51      	ldr	r2, [pc, #324]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
 80053cc:	e020      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80053ce:	4b4e      	ldr	r3, [pc, #312]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053da:	d106      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053e2:	d102      	bne.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80053e4:	4b4a      	ldr	r3, [pc, #296]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
 80053e8:	e012      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80053ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d107      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80053f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80053fe:	d103      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8005400:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
 8005406:	e003      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800540c:	f001 bd19 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005410:	f001 bd17 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8005414:	4b3c      	ldr	r3, [pc, #240]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005416:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800541a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 800541e:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005426:	f7fc fdb7 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 800542a:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 800542c:	f001 bd09 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8005430:	4b35      	ldr	r3, [pc, #212]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800543c:	d10b      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005444:	d107      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005446:	f107 0314 	add.w	r3, r7, #20
 800544a:	4618      	mov	r0, r3
 800544c:	f7fe feda 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
 8005454:	e047      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8005456:	4b2c      	ldr	r3, [pc, #176]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800545e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005462:	d10b      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546a:	d107      	bne.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff f831 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
 800547a:	e034      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	d10d      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800548e:	d109      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005490:	4b1d      	ldr	r3, [pc, #116]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	08db      	lsrs	r3, r3, #3
 8005496:	f003 0303 	and.w	r3, r3, #3
 800549a:	4a1c      	ldr	r2, [pc, #112]	; (800550c <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	e020      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80054a4:	4b18      	ldr	r3, [pc, #96]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d106      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054b8:	d102      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
 80054be:	e012      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80054c0:	4b11      	ldr	r3, [pc, #68]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d107      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80054d4:	d103      	bne.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80054d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054da:	637b      	str	r3, [r7, #52]	; 0x34
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80054de:	2300      	movs	r3, #0
 80054e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80054e2:	f001 bcae 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80054e6:	f001 bcac 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80054ea:	4b07      	ldr	r3, [pc, #28]	; (8005508 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80054ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80054f0:	f403 13e0 	and.w	r3, r3, #1835008	; 0x1c0000
 80054f4:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10b      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80054fc:	f7fc fd4c 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005500:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8005502:	f001 bc9e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005506:	bf00      	nop
 8005508:	44020c00 	.word	0x44020c00
 800550c:	03d09000 	.word	0x03d09000
 8005510:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8005514:	4ba0      	ldr	r3, [pc, #640]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005520:	d10b      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005528:	d107      	bne.n	800553a <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552a:	f107 0314 	add.w	r3, r7, #20
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fe68 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	637b      	str	r3, [r7, #52]	; 0x34
 8005538:	e047      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800553a:	4b97      	ldr	r3, [pc, #604]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005546:	d10b      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8005548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005550:	f107 0308 	add.w	r3, r7, #8
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe ffbf 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	637b      	str	r3, [r7, #52]	; 0x34
 800555e:	e034      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8005560:	4b8d      	ldr	r3, [pc, #564]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	2b02      	cmp	r3, #2
 800556a:	d10d      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005572:	d109      	bne.n	8005588 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005574:	4b88      	ldr	r3, [pc, #544]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	4a87      	ldr	r2, [pc, #540]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	637b      	str	r3, [r7, #52]	; 0x34
 8005586:	e020      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8005588:	4b83      	ldr	r3, [pc, #524]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005594:	d106      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800559c:	d102      	bne.n	80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800559e:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80055a0:	637b      	str	r3, [r7, #52]	; 0x34
 80055a2:	e012      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80055a4:	4b7c      	ldr	r3, [pc, #496]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d107      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80055b8:	d103      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80055ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055be:	637b      	str	r3, [r7, #52]	; 0x34
 80055c0:	e003      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80055c2:	2300      	movs	r3, #0
 80055c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80055c6:	f001 bc3c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80055ca:	f001 bc3a 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80055ce:	4b72      	ldr	r3, [pc, #456]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80055d4:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80055d8:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80055e0:	f7fc fcda 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80055e4:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80055e6:	f001 bc2c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80055ea:	4b6b      	ldr	r3, [pc, #428]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055f6:	d10b      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fe:	d107      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005600:	f107 0314 	add.w	r3, r7, #20
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fdfd 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	637b      	str	r3, [r7, #52]	; 0x34
 800560e:	e047      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8005610:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800561c:	d10b      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005624:	d107      	bne.n	8005636 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe ff54 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	637b      	str	r3, [r7, #52]	; 0x34
 8005634:	e034      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8005636:	4b58      	ldr	r3, [pc, #352]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b02      	cmp	r3, #2
 8005640:	d10d      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005648:	d109      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800564a:	4b53      	ldr	r3, [pc, #332]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	08db      	lsrs	r3, r3, #3
 8005650:	f003 0303 	and.w	r3, r3, #3
 8005654:	4a51      	ldr	r2, [pc, #324]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
 800565c:	e020      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800565e:	4b4e      	ldr	r3, [pc, #312]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566a:	d106      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005672:	d102      	bne.n	800567a <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8005676:	637b      	str	r3, [r7, #52]	; 0x34
 8005678:	e012      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800567a:	4b47      	ldr	r3, [pc, #284]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800567c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b02      	cmp	r3, #2
 8005686:	d107      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8005688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800568e:	d103      	bne.n	8005698 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8005690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
 8005696:	e003      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800569c:	f001 bbd1 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80056a0:	f001 bbcf 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80056a4:	4b3c      	ldr	r3, [pc, #240]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80056ae:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d104      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80056b6:	f7fc fc6f 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80056ba:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80056bc:	f001 bbc1 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80056c0:	4b35      	ldr	r3, [pc, #212]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056cc:	d10b      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056d4:	d107      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056d6:	f107 0314 	add.w	r3, r7, #20
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe fd92 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
 80056e4:	e047      	b.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80056e6:	4b2c      	ldr	r3, [pc, #176]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f2:	d10b      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056fa:	d107      	bne.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056fc:	f107 0308 	add.w	r3, r7, #8
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fee9 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	e034      	b.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800570c:	4b22      	ldr	r3, [pc, #136]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b02      	cmp	r3, #2
 8005716:	d10d      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800571e:	d109      	bne.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005720:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	4a1c      	ldr	r2, [pc, #112]	; (800579c <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	e020      	b.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8005734:	4b18      	ldr	r3, [pc, #96]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800573c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005740:	d106      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005748:	d102      	bne.n	8005750 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800574a:	4b15      	ldr	r3, [pc, #84]	; (80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800574c:	637b      	str	r3, [r7, #52]	; 0x34
 800574e:	e012      	b.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8005752:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b02      	cmp	r3, #2
 800575c:	d107      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005764:	d103      	bne.n	800576e <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8005766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800576a:	637b      	str	r3, [r7, #52]	; 0x34
 800576c:	e003      	b.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005772:	f001 bb66 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005776:	f001 bb64 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800577c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005780:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
 8005784:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10b      	bne.n	80057a4 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fc fc04 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005790:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8005792:	f001 bb56 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005796:	bf00      	nop
 8005798:	44020c00 	.word	0x44020c00
 800579c:	03d09000 	.word	0x03d09000
 80057a0:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80057a4:	4ba1      	ldr	r3, [pc, #644]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b0:	d10b      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b8:	d107      	bne.n	80057ca <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fd20 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	637b      	str	r3, [r7, #52]	; 0x34
 80057c8:	e047      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80057ca:	4b98      	ldr	r3, [pc, #608]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d6:	d10b      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057de:	d107      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe fe77 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
 80057ee:	e034      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80057f0:	4b8e      	ldr	r3, [pc, #568]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d10d      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005802:	d109      	bne.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005804:	4b89      	ldr	r3, [pc, #548]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	08db      	lsrs	r3, r3, #3
 800580a:	f003 0303 	and.w	r3, r3, #3
 800580e:	4a88      	ldr	r2, [pc, #544]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
 8005814:	637b      	str	r3, [r7, #52]	; 0x34
 8005816:	e020      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8005818:	4b84      	ldr	r3, [pc, #528]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005824:	d106      	bne.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582c:	d102      	bne.n	8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800582e:	4b81      	ldr	r3, [pc, #516]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8005830:	637b      	str	r3, [r7, #52]	; 0x34
 8005832:	e012      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8005834:	4b7d      	ldr	r3, [pc, #500]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800583a:	f003 0302 	and.w	r3, r3, #2
 800583e:	2b02      	cmp	r3, #2
 8005840:	d107      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8005842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005844:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8005848:	d103      	bne.n	8005852 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
 8005850:	e003      	b.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005856:	f001 baf4 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800585a:	f001 baf2 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800585e:	4b73      	ldr	r3, [pc, #460]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005860:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800586a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005870:	f7fc fb92 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005874:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 8005876:	f001 bae4 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800587a:	4b6c      	ldr	r3, [pc, #432]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005886:	d10a      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fcb6 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	637b      	str	r3, [r7, #52]	; 0x34
 800589c:	e043      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800589e:	4b63      	ldr	r3, [pc, #396]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058aa:	d10a      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80058ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d107      	bne.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fe0e 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
 80058c0:	e031      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80058c2:	4b5a      	ldr	r3, [pc, #360]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d10c      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d109      	bne.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058d4:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	08db      	lsrs	r3, r3, #3
 80058da:	f003 0303 	and.w	r3, r3, #3
 80058de:	4a54      	ldr	r2, [pc, #336]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
 80058e4:	637b      	str	r3, [r7, #52]	; 0x34
 80058e6:	e01e      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058f4:	d105      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d102      	bne.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80058fc:	4b4d      	ldr	r3, [pc, #308]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80058fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005900:	e011      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005904:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d106      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8005910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005912:	2b05      	cmp	r3, #5
 8005914:	d103      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
 800591c:	e003      	b.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005922:	f001 ba8e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005926:	f001 ba8c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800592a:	4b40      	ldr	r3, [pc, #256]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800592c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005930:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005934:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800593c:	f7fc fb2c 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005940:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8005942:	f001 ba7e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8005946:	4b39      	ldr	r3, [pc, #228]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2b10      	cmp	r3, #16
 8005958:	d107      	bne.n	800596a <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fc50 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	637b      	str	r3, [r7, #52]	; 0x34
 8005968:	e043      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800596a:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005972:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005976:	d10a      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8005978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597a:	2b20      	cmp	r3, #32
 800597c:	d107      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800597e:	f107 0308 	add.w	r3, r7, #8
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fda8 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
 800598c:	e031      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800598e:	4b27      	ldr	r3, [pc, #156]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b02      	cmp	r3, #2
 8005998:	d10c      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b30      	cmp	r3, #48	; 0x30
 800599e:	d109      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80059a0:	4b22      	ldr	r3, [pc, #136]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	08db      	lsrs	r3, r3, #3
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	4a21      	ldr	r2, [pc, #132]	; (8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80059ac:	fa22 f303 	lsr.w	r3, r2, r3
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
 80059b2:	e01e      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80059b4:	4b1d      	ldr	r3, [pc, #116]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c0:	d105      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2b40      	cmp	r3, #64	; 0x40
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80059c8:	4b1a      	ldr	r3, [pc, #104]	; (8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	e011      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80059ce:	4b17      	ldr	r3, [pc, #92]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d106      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	2b50      	cmp	r3, #80	; 0x50
 80059e0:	d103      	bne.n	80059ea <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80059e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e6:	637b      	str	r3, [r7, #52]	; 0x34
 80059e8:	e003      	b.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80059ee:	f001 ba28 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80059f2:	f001 ba26 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005a08:	f7fc faf2 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8005a0c:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005a0e:	f001 ba18 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a18:	d10e      	bne.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a1a:	f107 0314 	add.w	r3, r7, #20
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe fbf0 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a28:	f001 ba0b 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005a2c:	44020c00 	.word	0x44020c00
 8005a30:	03d09000 	.word	0x03d09000
 8005a34:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a3e:	d108      	bne.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe fd47 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005a4e:	f001 b9f8 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005a52:	4ba4      	ldr	r3, [pc, #656]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d10d      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a64:	d109      	bne.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a66:	4b9f      	ldr	r3, [pc, #636]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	08db      	lsrs	r3, r3, #3
 8005a6c:	f003 0303 	and.w	r3, r3, #3
 8005a70:	4a9d      	ldr	r2, [pc, #628]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005a72:	fa22 f303 	lsr.w	r3, r2, r3
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
 8005a78:	e020      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005a7a:	4b9a      	ldr	r3, [pc, #616]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a86:	d106      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8e:	d102      	bne.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8005a90:	4b96      	ldr	r3, [pc, #600]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34
 8005a94:	e012      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005a96:	4b93      	ldr	r3, [pc, #588]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005aaa:	d103      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8005aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab2:	e003      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ab8:	f001 b9c3 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005abc:	f001 b9c1 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005ac0:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ac6:	f003 0307 	and.w	r3, r3, #7
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8005ad2:	f7fc fa45 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8005ad6:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8005ad8:	f001 b9b3 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d104      	bne.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fc f911 	bl	8001d08 <HAL_RCC_GetSysClockFreq>
 8005ae6:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8005ae8:	f001 b9ab 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d108      	bne.n	8005b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005af2:	f107 0314 	add.w	r3, r7, #20
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe fb84 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b00:	f001 b99f 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005b04:	4b77      	ldr	r3, [pc, #476]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b10:	d105      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d102      	bne.n	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8005b18:	4b75      	ldr	r3, [pc, #468]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1c:	e023      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8005b1e:	4b71      	ldr	r3, [pc, #452]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005b30:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	08db      	lsrs	r3, r3, #3
 8005b36:	f003 0303 	and.w	r3, r3, #3
 8005b3a:	4a6b      	ldr	r2, [pc, #428]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e010      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005b44:	4b67      	ldr	r3, [pc, #412]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b50:	d105      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b05      	cmp	r3, #5
 8005b56:	d102      	bne.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8005b58:	4b64      	ldr	r3, [pc, #400]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5c:	e003      	b.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b62:	f001 b96e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005b66:	f001 b96c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005b6a:	4b5e      	ldr	r3, [pc, #376]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d106      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d103      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8005b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b90:	e012      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8005b92:	4b54      	ldr	r3, [pc, #336]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ba0:	d106      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d103      	bne.n	8005bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8005ba8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005bac:	637b      	str	r3, [r7, #52]	; 0x34
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8005bb4:	f001 b945 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005bb8:	f001 b943 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005bbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005bce:	f7fc f9e3 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005bd2:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005bd4:	f001 b935 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bde:	d108      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005be0:	f107 0308 	add.w	r3, r7, #8
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fe fc77 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bee:	f001 b928 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005bf2:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0302 	and.w	r3, r3, #2
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d10d      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c04:	d109      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	4a35      	ldr	r2, [pc, #212]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005c12:	fa22 f303 	lsr.w	r3, r2, r3
 8005c16:	637b      	str	r3, [r7, #52]	; 0x34
 8005c18:	e011      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005c1a:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c26:	d106      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8005c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8005c30:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005c32:	637b      	str	r3, [r7, #52]	; 0x34
 8005c34:	e003      	b.n	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c3a:	f001 b902 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005c3e:	f001 b900 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005c48:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d104      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7fc f9a0 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005c58:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8005c5a:	f001 b8f2 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c64:	d108      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c66:	f107 0308 	add.w	r3, r7, #8
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fc34 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005c74:	f001 b8e5 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d10d      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c8a:	d109      	bne.n	8005ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	08db      	lsrs	r3, r3, #3
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8005c98:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9e:	e011      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cac:	d106      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005cb4:	d102      	bne.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	; (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cba:	e003      	b.n	8005cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005cc0:	f001 b8bf 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005cc4:	f001 b8bd 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8005cca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cd2:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10c      	bne.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005cda:	f7fc f989 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8005cde:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8005ce0:	f001 b8af 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005ce4:	44020c00 	.word	0x44020c00
 8005ce8:	03d09000 	.word	0x03d09000
 8005cec:	003d0900 	.word	0x003d0900
 8005cf0:	017d7840 	.word	0x017d7840
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cfa:	d108      	bne.n	8005d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cfc:	f107 0308 	add.w	r3, r7, #8
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fbe9 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d0a:	f001 b89a 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8005d0e:	4b9f      	ldr	r3, [pc, #636]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d10d      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d20:	d109      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005d22:	4b9a      	ldr	r3, [pc, #616]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	08db      	lsrs	r3, r3, #3
 8005d28:	f003 0303 	and.w	r3, r3, #3
 8005d2c:	4a98      	ldr	r2, [pc, #608]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	e011      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8005d36:	4b95      	ldr	r3, [pc, #596]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d42:	d106      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005d4a:	d102      	bne.n	8005d52 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8005d4c:	4b91      	ldr	r3, [pc, #580]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d50:	e003      	b.n	8005d5a <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d56:	f001 b874 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005d5a:	f001 b872 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005d5e:	4b8b      	ldr	r3, [pc, #556]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d60:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d64:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d104      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005d70:	f7fc f93e 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8005d74:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8005d76:	f001 b864 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d80:	d108      	bne.n	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 0308 	add.w	r3, r7, #8
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fba6 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d90:	f001 b857 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8005d94:	4b7d      	ldr	r3, [pc, #500]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d10d      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005da6:	d109      	bne.n	8005dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005da8:	4b78      	ldr	r3, [pc, #480]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	08db      	lsrs	r3, r3, #3
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	4a77      	ldr	r2, [pc, #476]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
 8005dba:	e011      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8005dbc:	4b73      	ldr	r3, [pc, #460]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc8:	d106      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005dd0:	d102      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8005dd2:	4b70      	ldr	r3, [pc, #448]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005dd6:	e003      	b.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005ddc:	f001 b831 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005de0:	f001 b82f 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8005de4:	4b69      	ldr	r3, [pc, #420]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005de6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005dea:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d104      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005df6:	f7fc f8cf 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8005dfa:	6378      	str	r0, [r7, #52]	; 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005dfc:	f001 b821 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e06:	d108      	bne.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e08:	f107 0308 	add.w	r3, r7, #8
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fb63 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e16:	f001 b814 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005e1a:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d10e      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8005e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e2c:	d10a      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005e2e:	4b57      	ldr	r3, [pc, #348]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	4a55      	ldr	r2, [pc, #340]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e40:	f000 bfff 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e48:	f000 bffb 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005e4c:	4b4f      	ldr	r3, [pc, #316]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005e4e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005e52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
 8005e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e5e:	d056      	beq.n	8005f0e <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8005e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e62:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005e66:	f200 808b 	bhi.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e70:	d03e      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8005e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e78:	f200 8082 	bhi.w	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e82:	d027      	beq.n	8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8a:	d879      	bhi.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e92:	d017      	beq.n	8005ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8005e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9a:	d871      	bhi.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d004      	beq.n	8005eac <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea8:	d004      	beq.n	8005eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8005eaa:	e069      	b.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8005eac:	f7fc f8a0 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8005eb0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8005eb2:	e068      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005eb4:	f107 0314 	add.w	r3, r7, #20
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fe f9a3 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ec2:	e060      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ec4:	f107 0308 	add.w	r3, r7, #8
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe fb05 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005ed2:	e058      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d103      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8005ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee6:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005ee8:	e04d      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005eea:	2300      	movs	r3, #0
 8005eec:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005eee:	e04a      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005ef0:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005efe:	d103      	bne.n	8005f08 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8005f00:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8005f06:	e03e      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f0c:	e03b      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005f0e:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f14:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	08db      	lsrs	r3, r3, #3
 8005f32:	f003 0303 	and.w	r3, r3, #3
 8005f36:	4a16      	ldr	r2, [pc, #88]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8005f38:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f3e:	e01e      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d106      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8005f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f54:	d102      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005f56:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5a:	e010      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f68:	d106      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8005f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f70:	d102      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005f72:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8005f74:	637b      	str	r3, [r7, #52]	; 0x34
 8005f76:	e002      	b.n	8005f7e <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8005f7c:	e003      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8005f7e:	e002      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8005f84:	bf00      	nop
          }
        }
        break;
 8005f86:	f000 bf5c 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8005f8a:	bf00      	nop
 8005f8c:	44020c00 	.word	0x44020c00
 8005f90:	03d09000 	.word	0x03d09000
 8005f94:	003d0900 	.word	0x003d0900
 8005f98:	017d7840 	.word	0x017d7840

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005f9c:	4b9e      	ldr	r3, [pc, #632]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8005f9e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005fa2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005fa6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005faa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005fae:	d056      	beq.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005fb6:	f200 808b 	bhi.w	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc0:	d03e      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc8:	f200 8082 	bhi.w	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fd2:	d027      	beq.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fda:	d879      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d017      	beq.n	8006014 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fea:	d871      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8005fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ff8:	d004      	beq.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8005ffa:	e069      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005ffc:	f7fb ffcc 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 8006000:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006002:	e068      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006004:	f107 0314 	add.w	r3, r7, #20
 8006008:	4618      	mov	r0, r3
 800600a:	f7fe f8fb 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006012:	e060      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006014:	f107 0308 	add.w	r3, r7, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fa5d 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006022:	e058      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006024:	4b7c      	ldr	r3, [pc, #496]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006026:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b02      	cmp	r3, #2
 8006030:	d103      	bne.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8006032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006038:	e04d      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800603e:	e04a      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006040:	4b75      	ldr	r3, [pc, #468]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800604a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800604e:	d103      	bne.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8006050:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006056:	e03e      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8006058:	2300      	movs	r3, #0
 800605a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800605c:	e03b      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800605e:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006064:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006068:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800606a:	4b6b      	ldr	r3, [pc, #428]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b02      	cmp	r3, #2
 8006074:	d10c      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8006076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800607c:	4b66      	ldr	r3, [pc, #408]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	08db      	lsrs	r3, r3, #3
 8006082:	f003 0303 	and.w	r3, r3, #3
 8006086:	4a65      	ldr	r2, [pc, #404]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8006088:	fa22 f303 	lsr.w	r3, r2, r3
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
 800608e:	e01e      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800609c:	d106      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800609e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d102      	bne.n	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80060a6:	4b5e      	ldr	r3, [pc, #376]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
 80060aa:	e010      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80060ac:	4b5a      	ldr	r3, [pc, #360]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060b8:	d106      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80060ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c0:	d102      	bne.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80060c2:	4b58      	ldr	r3, [pc, #352]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	e002      	b.n	80060ce <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80060cc:	e003      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80060ce:	e002      	b.n	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80060d4:	bf00      	nop
          }
        }
        break;
 80060d6:	f000 beb4 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80060da:	4b4f      	ldr	r3, [pc, #316]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80060dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80060e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060ec:	d056      	beq.n	800619c <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060f4:	f200 808b 	bhi.w	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80060fe:	d03e      	beq.n	800617e <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006106:	f200 8082 	bhi.w	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006110:	d027      	beq.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006118:	d879      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006120:	d017      	beq.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006128:	d871      	bhi.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800612a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612c:	2b00      	cmp	r3, #0
 800612e:	d004      	beq.n	800613a <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006136:	d004      	beq.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8006138:	e069      	b.n	800620e <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800613a:	f7fb ff59 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 800613e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006140:	e068      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006142:	f107 0314 	add.w	r3, r7, #20
 8006146:	4618      	mov	r0, r3
 8006148:	f7fe f85c 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006150:	e060      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe f9be 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006160:	e058      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006162:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d103      	bne.n	8006178 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8006170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006174:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006176:	e04d      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800617c:	e04a      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8006180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800618c:	d103      	bne.n	8006196 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800618e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006192:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006194:	e03e      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800619a:	e03b      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800619c:	4b1e      	ldr	r3, [pc, #120]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800619e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061a2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80061a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d10c      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80061ba:	4b17      	ldr	r3, [pc, #92]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	08db      	lsrs	r3, r3, #3
 80061c0:	f003 0303 	and.w	r3, r3, #3
 80061c4:	4a15      	ldr	r2, [pc, #84]	; (800621c <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80061c6:	fa22 f303 	lsr.w	r3, r2, r3
 80061ca:	637b      	str	r3, [r7, #52]	; 0x34
 80061cc:	e01e      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061da:	d106      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e2:	d102      	bne.n	80061ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
 80061e8:	e010      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80061ea:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061f6:	d106      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061fe:	d102      	bne.n	8006206 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
 8006204:	e002      	b.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006206:	2300      	movs	r3, #0
 8006208:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800620a:	e003      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800620c:	e002      	b.n	8006214 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800620e:	2300      	movs	r3, #0
 8006210:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006212:	bf00      	nop
          }
        }
        break;
 8006214:	f000 be15 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006218:	44020c00 	.word	0x44020c00
 800621c:	03d09000 	.word	0x03d09000
 8006220:	003d0900 	.word	0x003d0900
 8006224:	017d7840 	.word	0x017d7840
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8006228:	4b9e      	ldr	r3, [pc, #632]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800622a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800622e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
 8006232:	633b      	str	r3, [r7, #48]	; 0x30
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800623a:	d056      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8006242:	f200 808b 	bhi.w	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800624c:	d03e      	beq.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006254:	f200 8082 	bhi.w	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800625e:	d027      	beq.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006266:	d879      	bhi.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800626e:	d017      	beq.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006276:	d871      	bhi.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8006278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006284:	d004      	beq.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8006286:	e069      	b.n	800635c <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006288:	f7fb feb2 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 800628c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800628e:	e068      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	4618      	mov	r0, r3
 8006296:	f7fd ffb5 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800629e:	e060      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a0:	f107 0308 	add.w	r3, r7, #8
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fe f917 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062ae:	e058      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80062b0:	4b7c      	ldr	r3, [pc, #496]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d103      	bne.n	80062c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80062c4:	e04d      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80062c6:	2300      	movs	r3, #0
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062ca:	e04a      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80062cc:	4b75      	ldr	r3, [pc, #468]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062da:	d103      	bne.n	80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 80062dc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80062e0:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80062e2:	e03e      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80062e4:	2300      	movs	r3, #0
 80062e6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80062e8:	e03b      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80062ea:	4b6e      	ldr	r3, [pc, #440]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062f0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80062f4:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062f6:	4b6b      	ldr	r3, [pc, #428]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d10c      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006308:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	08db      	lsrs	r3, r3, #3
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
 8006318:	637b      	str	r3, [r7, #52]	; 0x34
 800631a:	e01e      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800631c:	4b61      	ldr	r3, [pc, #388]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006328:	d106      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800632a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006330:	d102      	bne.n	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006332:	4b5e      	ldr	r3, [pc, #376]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006334:	637b      	str	r3, [r7, #52]	; 0x34
 8006336:	e010      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006338:	4b5a      	ldr	r3, [pc, #360]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006344:	d106      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800634c:	d102      	bne.n	8006354 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800634e:	4b58      	ldr	r3, [pc, #352]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8006350:	637b      	str	r3, [r7, #52]	; 0x34
 8006352:	e002      	b.n	800635a <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006354:	2300      	movs	r3, #0
 8006356:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006358:	e003      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800635a:	e002      	b.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006360:	bf00      	nop
          }
        }
        break;
 8006362:	f000 bd6e 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8006366:	4b4f      	ldr	r3, [pc, #316]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006368:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800636c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006370:	633b      	str	r3, [r7, #48]	; 0x30
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006378:	d056      	beq.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006380:	f200 808b 	bhi.w	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800638a:	d03e      	beq.n	800640a <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006392:	f200 8082 	bhi.w	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8006396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006398:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800639c:	d027      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063a4:	d879      	bhi.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063ac:	d017      	beq.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b4:	d871      	bhi.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d004      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063c2:	d004      	beq.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80063c4:	e069      	b.n	800649a <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80063c6:	f7fb fe13 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 80063ca:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 80063cc:	e068      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fd ff16 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063dc:	e060      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe f878 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80063ec:	e058      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80063ee:	4b2d      	ldr	r3, [pc, #180]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80063f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d103      	bne.n	8006404 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 80063fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006402:	e04d      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006408:	e04a      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800640a:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800640c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006414:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006418:	d103      	bne.n	8006422 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800641a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006420:	e03e      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8006422:	2300      	movs	r3, #0
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006426:	e03b      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800642a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800642e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006432:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006434:	4b1b      	ldr	r3, [pc, #108]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d10c      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8006440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006446:	4b17      	ldr	r3, [pc, #92]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	08db      	lsrs	r3, r3, #3
 800644c:	f003 0303 	and.w	r3, r3, #3
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8006452:	fa22 f303 	lsr.w	r3, r2, r3
 8006456:	637b      	str	r3, [r7, #52]	; 0x34
 8006458:	e01e      	b.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800645a:	4b12      	ldr	r3, [pc, #72]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006466:	d106      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d102      	bne.n	8006476 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006470:	4b0e      	ldr	r3, [pc, #56]	; (80064ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
 8006474:	e010      	b.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006482:	d106      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800648a:	d102      	bne.n	8006492 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800648c:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800648e:	637b      	str	r3, [r7, #52]	; 0x34
 8006490:	e002      	b.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006496:	e003      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800649a:	2300      	movs	r3, #0
 800649c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800649e:	bf00      	nop
          }
        }
        break;
 80064a0:	f000 bccf 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80064a4:	44020c00 	.word	0x44020c00
 80064a8:	03d09000 	.word	0x03d09000
 80064ac:	003d0900 	.word	0x003d0900
 80064b0:	017d7840 	.word	0x017d7840
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80064b4:	4b9e      	ldr	r3, [pc, #632]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80064b6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80064ba:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80064be:	633b      	str	r3, [r7, #48]	; 0x30
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c6:	d056      	beq.n	8006576 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ce:	f200 808b 	bhi.w	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d03e      	beq.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e0:	f200 8082 	bhi.w	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064ea:	d027      	beq.n	800653c <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 80064ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064f2:	d879      	bhi.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80064f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064fa:	d017      	beq.n	800652c <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d871      	bhi.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006510:	d004      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8006512:	e069      	b.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8006514:	f7fb fd6c 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8006518:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 800651a:	e068      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651c:	f107 0314 	add.w	r3, r7, #20
 8006520:	4618      	mov	r0, r3
 8006522:	f7fd fe6f 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800652a:	e060      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652c:	f107 0308 	add.w	r3, r7, #8
 8006530:	4618      	mov	r0, r3
 8006532:	f7fd ffd1 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800653a:	e058      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800653c:	4b7c      	ldr	r3, [pc, #496]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800653e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d103      	bne.n	8006552 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800654a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800654e:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8006550:	e04d      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006556:	e04a      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8006558:	4b75      	ldr	r3, [pc, #468]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800655a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800655e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006566:	d103      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8006568:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800656e:	e03e      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006574:	e03b      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006576:	4b6e      	ldr	r3, [pc, #440]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800657c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006582:	4b6b      	ldr	r3, [pc, #428]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b02      	cmp	r3, #2
 800658c:	d10c      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006594:	4b66      	ldr	r3, [pc, #408]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	08db      	lsrs	r3, r3, #3
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	4a65      	ldr	r2, [pc, #404]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80065a0:	fa22 f303 	lsr.w	r3, r2, r3
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
 80065a6:	e01e      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80065a8:	4b61      	ldr	r3, [pc, #388]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b4:	d106      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065bc:	d102      	bne.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80065be:	4b5e      	ldr	r3, [pc, #376]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
 80065c2:	e010      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065c4:	4b5a      	ldr	r3, [pc, #360]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d8:	d102      	bne.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80065da:	4b58      	ldr	r3, [pc, #352]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
 80065de:	e002      	b.n	80065e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 80065e4:	e003      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80065e6:	e002      	b.n	80065ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80065e8:	2300      	movs	r3, #0
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80065ec:	bf00      	nop
          }
        }
        break;
 80065ee:	f000 bc28 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80065f2:	4b4f      	ldr	r3, [pc, #316]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80065f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fc:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80065fe:	4b4c      	ldr	r3, [pc, #304]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800660a:	d106      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	2b00      	cmp	r3, #0
 8006610:	d103      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8006612:	4b4a      	ldr	r3, [pc, #296]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8006614:	637b      	str	r3, [r7, #52]	; 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8006616:	f000 bc14 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006620:	d108      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006622:	f107 0320 	add.w	r3, r7, #32
 8006626:	4618      	mov	r0, r3
 8006628:	f7fd fc82 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006630:	f000 bc07 	b.w	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800663a:	d107      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800663c:	f107 0314 	add.w	r3, r7, #20
 8006640:	4618      	mov	r0, r3
 8006642:	f7fd fddf 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800664a:	e3fa      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006650:	e3f7      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006652:	4b37      	ldr	r3, [pc, #220]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	633b      	str	r3, [r7, #48]	; 0x30
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	2b04      	cmp	r3, #4
 8006662:	d861      	bhi.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006681 	.word	0x08006681
 8006670:	08006691 	.word	0x08006691
 8006674:	080066a1 	.word	0x080066a1
 8006678:	080066b1 	.word	0x080066b1
 800667c:	080066b7 	.word	0x080066b7
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006680:	f107 0320 	add.w	r3, r7, #32
 8006684:	4618      	mov	r0, r3
 8006686:	f7fd fc53 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800668e:	e04e      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006690:	f107 0314 	add.w	r3, r7, #20
 8006694:	4618      	mov	r0, r3
 8006696:	f7fd fdb5 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800669e:	e046      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066a0:	f107 0308 	add.w	r3, r7, #8
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fd ff17 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066ae:	e03e      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80066b0:	4b23      	ldr	r3, [pc, #140]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066b4:	e03b      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80066b6:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80066b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066bc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80066c0:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066c2:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80066ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	08db      	lsrs	r3, r3, #3
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	4a15      	ldr	r2, [pc, #84]	; (8006734 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80066e0:	fa22 f303 	lsr.w	r3, r2, r3
 80066e4:	637b      	str	r3, [r7, #52]	; 0x34
 80066e6:	e01e      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066f4:	d106      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066fc:	d102      	bne.n	8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80066fe:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
 8006702:	e010      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006704:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006710:	d106      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006718:	d102      	bne.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
 800671e:	e002      	b.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006724:	e003      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8006726:	e002      	b.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800672c:	bf00      	nop
          }
        }
        break;
 800672e:	e388      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006730:	44020c00 	.word	0x44020c00
 8006734:	03d09000 	.word	0x03d09000
 8006738:	003d0900 	.word	0x003d0900
 800673c:	017d7840 	.word	0x017d7840
 8006740:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006744:	4ba9      	ldr	r3, [pc, #676]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800674a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
 8006750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006752:	2b20      	cmp	r3, #32
 8006754:	f200 809a 	bhi.w	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8006758:	a201      	add	r2, pc, #4	; (adr r2, 8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	080067e5 	.word	0x080067e5
 8006764:	0800688d 	.word	0x0800688d
 8006768:	0800688d 	.word	0x0800688d
 800676c:	0800688d 	.word	0x0800688d
 8006770:	0800688d 	.word	0x0800688d
 8006774:	0800688d 	.word	0x0800688d
 8006778:	0800688d 	.word	0x0800688d
 800677c:	0800688d 	.word	0x0800688d
 8006780:	080067f5 	.word	0x080067f5
 8006784:	0800688d 	.word	0x0800688d
 8006788:	0800688d 	.word	0x0800688d
 800678c:	0800688d 	.word	0x0800688d
 8006790:	0800688d 	.word	0x0800688d
 8006794:	0800688d 	.word	0x0800688d
 8006798:	0800688d 	.word	0x0800688d
 800679c:	0800688d 	.word	0x0800688d
 80067a0:	08006805 	.word	0x08006805
 80067a4:	0800688d 	.word	0x0800688d
 80067a8:	0800688d 	.word	0x0800688d
 80067ac:	0800688d 	.word	0x0800688d
 80067b0:	0800688d 	.word	0x0800688d
 80067b4:	0800688d 	.word	0x0800688d
 80067b8:	0800688d 	.word	0x0800688d
 80067bc:	0800688d 	.word	0x0800688d
 80067c0:	08006815 	.word	0x08006815
 80067c4:	0800688d 	.word	0x0800688d
 80067c8:	0800688d 	.word	0x0800688d
 80067cc:	0800688d 	.word	0x0800688d
 80067d0:	0800688d 	.word	0x0800688d
 80067d4:	0800688d 	.word	0x0800688d
 80067d8:	0800688d 	.word	0x0800688d
 80067dc:	0800688d 	.word	0x0800688d
 80067e0:	0800681b 	.word	0x0800681b
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067e4:	f107 0320 	add.w	r3, r7, #32
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fd fba1 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067f2:	e04e      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067f4:	f107 0314 	add.w	r3, r7, #20
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fd fd03 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006802:	e046      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006804:	f107 0308 	add.w	r3, r7, #8
 8006808:	4618      	mov	r0, r3
 800680a:	f7fd fe65 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006812:	e03e      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006814:	4b76      	ldr	r3, [pc, #472]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006818:	e03b      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800681a:	4b74      	ldr	r3, [pc, #464]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800681c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006820:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006824:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006826:	4b71      	ldr	r3, [pc, #452]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d10c      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d109      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006838:	4b6c      	ldr	r3, [pc, #432]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	08db      	lsrs	r3, r3, #3
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	4a6c      	ldr	r2, [pc, #432]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8006844:	fa22 f303 	lsr.w	r3, r2, r3
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
 800684a:	e01e      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800684c:	4b67      	ldr	r3, [pc, #412]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006858:	d106      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	d102      	bne.n	8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006862:	4b65      	ldr	r3, [pc, #404]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	e010      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006868:	4b60      	ldr	r3, [pc, #384]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006874:	d106      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800687c:	d102      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800687e:	4b5f      	ldr	r3, [pc, #380]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
 8006882:	e002      	b.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006888:	e003      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800688a:	e002      	b.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800688c:	2300      	movs	r3, #0
 800688e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006890:	bf00      	nop
          }
        }
        break;
 8006892:	e2d6      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006894:	4b55      	ldr	r3, [pc, #340]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800689a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a6:	d031      	beq.n	800690c <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80068a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d866      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b2:	2bc0      	cmp	r3, #192	; 0xc0
 80068b4:	d027      	beq.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	2bc0      	cmp	r3, #192	; 0xc0
 80068ba:	d860      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d019      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2b80      	cmp	r3, #128	; 0x80
 80068c6:	d85a      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80068c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80068ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d008      	beq.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80068d4:	e053      	b.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068d6:	f107 0320 	add.w	r3, r7, #32
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fd fb28 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80068e4:	e04e      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e6:	f107 0314 	add.w	r3, r7, #20
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fd fc8a 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80068f4:	e046      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fd fdec 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006904:	e03e      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8006906:	4b3a      	ldr	r3, [pc, #232]	; (80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800690a:	e03b      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800690c:	4b37      	ldr	r3, [pc, #220]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800690e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006912:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006918:	4b34      	ldr	r3, [pc, #208]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b02      	cmp	r3, #2
 8006922:	d10c      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8006924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800692a:	4b30      	ldr	r3, [pc, #192]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	08db      	lsrs	r3, r3, #3
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8006936:	fa22 f303 	lsr.w	r3, r2, r3
 800693a:	637b      	str	r3, [r7, #52]	; 0x34
 800693c:	e01e      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800693e:	4b2b      	ldr	r3, [pc, #172]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006946:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694a:	d106      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800694c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006952:	d102      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006954:	4b28      	ldr	r3, [pc, #160]	; (80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
 8006958:	e010      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006962:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006966:	d106      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800696e:	d102      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006970:	4b22      	ldr	r3, [pc, #136]	; (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
 8006974:	e002      	b.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8006976:	2300      	movs	r3, #0
 8006978:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 800697a:	e003      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800697c:	e002      	b.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006982:	bf00      	nop
          }
        }
        break;
 8006984:	e25d      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8006986:	4b19      	ldr	r3, [pc, #100]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8006988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800698c:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8006990:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8006992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d103      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006998:	f7fb fb14 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 800699c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800699e:	e250      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80069a0:	4b12      	ldr	r3, [pc, #72]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069ac:	d10b      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069b4:	d107      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b6:	f107 0314 	add.w	r3, r7, #20
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fd fc22 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
 80069c4:	e04f      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d2:	d115      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069da:	d111      	bne.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069dc:	f107 0308 	add.w	r3, r7, #8
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fd fd79 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ea:	e03c      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80069ec:	44020c00 	.word	0x44020c00
 80069f0:	00bb8000 	.word	0x00bb8000
 80069f4:	03d09000 	.word	0x03d09000
 80069f8:	003d0900 	.word	0x003d0900
 80069fc:	017d7840 	.word	0x017d7840
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8006a00:	4b94      	ldr	r3, [pc, #592]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d10d      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a12:	d109      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a14:	4b8f      	ldr	r3, [pc, #572]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	08db      	lsrs	r3, r3, #3
 8006a1a:	f003 0303 	and.w	r3, r3, #3
 8006a1e:	4a8e      	ldr	r2, [pc, #568]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006a20:	fa22 f303 	lsr.w	r3, r2, r3
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
 8006a26:	e01e      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8006a28:	4b8a      	ldr	r3, [pc, #552]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d106      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3c:	d102      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8006a3e:	4b87      	ldr	r3, [pc, #540]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	e010      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8006a44:	4b83      	ldr	r3, [pc, #524]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a50:	d106      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8006a58:	d102      	bne.n	8006a60 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8006a5a:	4b81      	ldr	r3, [pc, #516]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	e002      	b.n	8006a66 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a64:	e1ed      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006a66:	e1ec      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8006a68:	4b7a      	ldr	r3, [pc, #488]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006a7a:	f7fb fab9 	bl	8001ff0 <HAL_RCC_GetPCLK3Freq>
 8006a7e:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006a80:	e1df      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8006a82:	4b74      	ldr	r3, [pc, #464]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a8e:	d10b      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a96:	d107      	bne.n	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fd fbb1 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa6:	e045      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8006aa8:	4b6a      	ldr	r3, [pc, #424]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d10b      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abc:	d107      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006abe:	f107 0308 	add.w	r3, r7, #8
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fd fd08 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
 8006acc:	e032      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8006ace:	4b61      	ldr	r3, [pc, #388]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d10d      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ae0:	d109      	bne.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ae2:	4b5c      	ldr	r3, [pc, #368]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	08db      	lsrs	r3, r3, #3
 8006ae8:	f003 0303 	and.w	r3, r3, #3
 8006aec:	4a5a      	ldr	r2, [pc, #360]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006aee:	fa22 f303 	lsr.w	r3, r2, r3
 8006af2:	637b      	str	r3, [r7, #52]	; 0x34
 8006af4:	e01e      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8006af6:	4b57      	ldr	r3, [pc, #348]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b02:	d106      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b0a:	d102      	bne.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8006b0c:	4b53      	ldr	r3, [pc, #332]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b10:	e010      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8006b12:	4b50      	ldr	r3, [pc, #320]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b1e:	d106      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006b26:	d102      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8006b28:	4b4d      	ldr	r3, [pc, #308]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	e002      	b.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b32:	e186      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006b34:	e185      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006b36:	4b47      	ldr	r3, [pc, #284]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b3c:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8006b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b48:	f7fb fa3c 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
 8006b4c:	6378      	str	r0, [r7, #52]	; 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8006b4e:	e178      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8006b50:	4b40      	ldr	r3, [pc, #256]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5c:	d10b      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b66:	f107 0314 	add.w	r3, r7, #20
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7fd fb4a 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
 8006b74:	e045      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8006b76:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b82:	d10b      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b8c:	f107 0308 	add.w	r3, r7, #8
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fd fca1 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9a:	e032      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8006b9c:	4b2d      	ldr	r3, [pc, #180]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 0302 	and.w	r3, r3, #2
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d10d      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006bae:	d109      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bb0:	4b28      	ldr	r3, [pc, #160]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	08db      	lsrs	r3, r3, #3
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	4a27      	ldr	r2, [pc, #156]	; (8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc2:	e01e      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8006bc4:	4b23      	ldr	r3, [pc, #140]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bd0:	d106      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bd8:	d102      	bne.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8006bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006bde:	e010      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8006be0:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bec:	d106      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8006bf4:	d102      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8006bf6:	4b1a      	ldr	r3, [pc, #104]	; (8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bfa:	e002      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c00:	e11f      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006c02:	e11e      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006c04:	4b13      	ldr	r3, [pc, #76]	; (8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8006c06:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c0a:	f003 0303 	and.w	r3, r3, #3
 8006c0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d85f      	bhi.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8006c16:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8006c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c35 	.word	0x08006c35
 8006c24:	08006c45 	.word	0x08006c45
 8006c28:	08006c65 	.word	0x08006c65

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8006c2c:	f7fb f998 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8006c30:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8006c32:	e053      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c34:	f107 0320 	add.w	r3, r7, #32
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fd f979 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c42:	e04b      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c44:	f107 0314 	add.w	r3, r7, #20
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fadb 	bl	8004204 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006c52:	e043      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006c54:	44020c00 	.word	0x44020c00
 8006c58:	03d09000 	.word	0x03d09000
 8006c5c:	003d0900 	.word	0x003d0900
 8006c60:	017d7840 	.word	0x017d7840
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c64:	4b79      	ldr	r3, [pc, #484]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c6a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006c6e:	62fb      	str	r3, [r7, #44]	; 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c70:	4b76      	ldr	r3, [pc, #472]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d10c      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c82:	4b72      	ldr	r3, [pc, #456]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	08db      	lsrs	r3, r3, #3
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	4a70      	ldr	r2, [pc, #448]	; (8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8006c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
 8006c94:	e01e      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c96:	4b6d      	ldr	r3, [pc, #436]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d102      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8006cac:	4b69      	ldr	r3, [pc, #420]	; (8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb0:	e010      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cb2:	4b66      	ldr	r3, [pc, #408]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cbe:	d106      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc6:	d102      	bne.n	8006cce <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8006cc8:	4b63      	ldr	r3, [pc, #396]	; (8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8006cca:	637b      	str	r3, [r7, #52]	; 0x34
 8006ccc:	e002      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	637b      	str	r3, [r7, #52]	; 0x34
            }

            break;
 8006cd2:	e003      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8006cd4:	e002      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cda:	bf00      	nop
          }
        }
        break;
 8006cdc:	e0b1      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8006cde:	4b5b      	ldr	r3, [pc, #364]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ce4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ce8:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8006cea:	4b58      	ldr	r3, [pc, #352]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d106      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8006cfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
 8006d04:	e01f      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8006d06:	4b51      	ldr	r3, [pc, #324]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d14:	d106      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	2b40      	cmp	r3, #64	; 0x40
 8006d1a:	d103      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8006d1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
 8006d22:	e010      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8006d24:	4b49      	ldr	r3, [pc, #292]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d30:	d106      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	2b80      	cmp	r3, #128	; 0x80
 8006d36:	d103      	bne.n	8006d40 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8006d38:	f248 0312 	movw	r3, #32786	; 0x8012
 8006d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3e:	e002      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006d44:	e07d      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006d46:	e07c      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006d48:	4b40      	ldr	r3, [pc, #256]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d52:	633b      	str	r3, [r7, #48]	; 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006d54:	4b3d      	ldr	r3, [pc, #244]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d60:	d105      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8006d68:	4b3c      	ldr	r3, [pc, #240]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d6c:	e031      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8006d6e:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7a:	d10a      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2b10      	cmp	r3, #16
 8006d80:	d107      	bne.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d82:	f107 0320 	add.w	r3, r7, #32
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fd f8d2 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d90:	e01f      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8006d92:	4b2e      	ldr	r3, [pc, #184]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d106      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	d103      	bne.n	8006dae <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
 8006dac:	e011      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8006dae:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006dbc:	d106      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	2b30      	cmp	r3, #48	; 0x30
 8006dc2:	d103      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8006dc4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dca:	e002      	b.n	8006dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        break;
 8006dd0:	e037      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006dd2:	e036      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006dd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006dda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dde:	633b      	str	r3, [r7, #48]	; 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	2b10      	cmp	r3, #16
 8006de4:	d107      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006de6:	f107 0320 	add.w	r3, r7, #32
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd f8a0 	bl	8003f30 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006df4:	e025      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8006df6:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e02:	d10a      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	2b20      	cmp	r3, #32
 8006e08:	d107      	bne.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e0a:	f107 0308 	add.w	r3, r7, #8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fd fb62 	bl	80044d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
 8006e18:	e00f      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	; (8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e26:	d105      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2b30      	cmp	r3, #48	; 0x30
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8006e2e:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	e002      	b.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
        }

        break;
 8006e38:	e003      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8006e3a:	e002      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e40:	bf00      	nop
    }
  }

  return (frequency);
 8006e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	373c      	adds	r7, #60	; 0x3c
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd90      	pop	{r4, r7, pc}
 8006e4c:	44020c00 	.word	0x44020c00
 8006e50:	03d09000 	.word	0x03d09000
 8006e54:	003d0900 	.word	0x003d0900
 8006e58:	017d7840 	.word	0x017d7840
 8006e5c:	02dc6c00 	.word	0x02dc6c00

08006e60 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8006e68:	4b48      	ldr	r3, [pc, #288]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a47      	ldr	r2, [pc, #284]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e72:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e74:	f7f9 fefe 	bl	8000c74 <HAL_GetTick>
 8006e78:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e7a:	e008      	b.n	8006e8e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e7c:	f7f9 fefa 	bl	8000c74 <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d901      	bls.n	8006e8e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e07a      	b.n	8006f84 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e8e:	4b3f      	ldr	r3, [pc, #252]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1f0      	bne.n	8006e7c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006e9a:	4b3c      	ldr	r3, [pc, #240]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	6811      	ldr	r1, [r2, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6852      	ldr	r2, [r2, #4]
 8006eae:	0212      	lsls	r2, r2, #8
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	4936      	ldr	r1, [pc, #216]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	025b      	lsls	r3, r3, #9
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	041b      	lsls	r3, r3, #16
 8006ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006eda:	431a      	orrs	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ee8:	4928      	ldr	r1, [pc, #160]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006eee:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	f023 020c 	bic.w	r2, r3, #12
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	699b      	ldr	r3, [r3, #24]
 8006efa:	4924      	ldr	r1, [pc, #144]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8006f00:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	f023 0220 	bic.w	r2, r3, #32
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	491f      	ldr	r1, [pc, #124]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006f12:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	491c      	ldr	r1, [pc, #112]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8006f20:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f26:	f023 0310 	bic.w	r3, r3, #16
 8006f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6a12      	ldr	r2, [r2, #32]
 8006f3c:	00d2      	lsls	r2, r2, #3
 8006f3e:	4913      	ldr	r1, [pc, #76]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006f44:	4b11      	ldr	r3, [pc, #68]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a10      	ldr	r2, [pc, #64]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f4a:	f043 0310 	orr.w	r3, r3, #16
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006f50:	4b0e      	ldr	r3, [pc, #56]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a0d      	ldr	r2, [pc, #52]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006f5c:	f7f9 fe8a 	bl	8000c74 <HAL_GetTick>
 8006f60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f62:	e008      	b.n	8006f76 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f64:	f7f9 fe86 	bl	8000c74 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e006      	b.n	8006f84 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f76:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <RCCEx_PLL2_Config+0x12c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8006f82:	2300      	movs	r3, #0

}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	44020c00 	.word	0x44020c00

08006f90 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8006f98:	4b48      	ldr	r3, [pc, #288]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a47      	ldr	r2, [pc, #284]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8006f9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006fa4:	f7f9 fe66 	bl	8000c74 <HAL_GetTick>
 8006fa8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006faa:	e008      	b.n	8006fbe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fac:	f7f9 fe62 	bl	8000c74 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d901      	bls.n	8006fbe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e07a      	b.n	80070b4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fbe:	4b3f      	ldr	r3, [pc, #252]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d1f0      	bne.n	8006fac <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006fca:	4b3c      	ldr	r3, [pc, #240]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fd2:	f023 0303 	bic.w	r3, r3, #3
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	6811      	ldr	r1, [r2, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6852      	ldr	r2, [r2, #4]
 8006fde:	0212      	lsls	r2, r2, #8
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	4936      	ldr	r1, [pc, #216]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	630b      	str	r3, [r1, #48]	; 0x30
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	025b      	lsls	r3, r3, #9
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
 8007006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	3b01      	subs	r3, #1
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007018:	4928      	ldr	r1, [pc, #160]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800701e:	4b27      	ldr	r3, [pc, #156]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007022:	f023 020c 	bic.w	r2, r3, #12
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	4924      	ldr	r1, [pc, #144]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8007030:	4b22      	ldr	r3, [pc, #136]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007034:	f023 0220 	bic.w	r2, r3, #32
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	491f      	ldr	r1, [pc, #124]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800703e:	4313      	orrs	r3, r2
 8007040:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007042:	4b1e      	ldr	r3, [pc, #120]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704a:	491c      	ldr	r1, [pc, #112]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800704c:	4313      	orrs	r3, r2
 800704e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8007050:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	4a19      	ldr	r2, [pc, #100]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007056:	f023 0310 	bic.w	r3, r3, #16
 800705a:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800705e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007060:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007064:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6a12      	ldr	r2, [r2, #32]
 800706c:	00d2      	lsls	r2, r2, #3
 800706e:	4913      	ldr	r1, [pc, #76]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007070:	4313      	orrs	r3, r2
 8007072:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8007074:	4b11      	ldr	r3, [pc, #68]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	4a10      	ldr	r2, [pc, #64]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 800707a:	f043 0310 	orr.w	r3, r3, #16
 800707e:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8007080:	4b0e      	ldr	r3, [pc, #56]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a0d      	ldr	r2, [pc, #52]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 8007086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800708a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800708c:	f7f9 fdf2 	bl	8000c74 <HAL_GetTick>
 8007090:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007092:	e008      	b.n	80070a6 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007094:	f7f9 fdee 	bl	8000c74 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e006      	b.n	80070b4 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <RCCEx_PLL3_Config+0x12c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	44020c00 	.word	0x44020c00

080070c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e042      	b.n	8007158 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d106      	bne.n	80070ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f7f9 fbf7 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2224      	movs	r2, #36	; 0x24
 80070ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 faee 	bl	80076ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f8fd 	bl	8007310 <UART_SetConfig>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e01b      	b.n	8007158 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800712e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800713e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb6d 	bl	8007830 <UART_CheckIdleState>
 8007156:	4603      	mov	r3, r0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08a      	sub	sp, #40	; 0x28
 8007164:	af02      	add	r7, sp, #8
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007176:	2b20      	cmp	r3, #32
 8007178:	f040 80c4 	bne.w	8007304 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <HAL_UART_Receive+0x28>
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0bc      	b.n	8007306 <HAL_UART_Receive+0x1a6>
    }

    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d107      	bne.n	80071aa <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a8:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2222      	movs	r2, #34	; 0x22
 80071b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071c0:	f7f9 fd58 	bl	8000c74 <HAL_GetTick>
 80071c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	88fa      	ldrh	r2, [r7, #6]
 80071ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	88fa      	ldrh	r2, [r7, #6]
 80071d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071de:	d10e      	bne.n	80071fe <HAL_UART_Receive+0x9e>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <HAL_UART_Receive+0x94>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071f2:	e02d      	b.n	8007250 <HAL_UART_Receive+0xf0>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	22ff      	movs	r2, #255	; 0xff
 80071f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071fc:	e028      	b.n	8007250 <HAL_UART_Receive+0xf0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10d      	bne.n	8007222 <HAL_UART_Receive+0xc2>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d104      	bne.n	8007218 <HAL_UART_Receive+0xb8>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	22ff      	movs	r2, #255	; 0xff
 8007212:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007216:	e01b      	b.n	8007250 <HAL_UART_Receive+0xf0>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	227f      	movs	r2, #127	; 0x7f
 800721c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007220:	e016      	b.n	8007250 <HAL_UART_Receive+0xf0>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800722a:	d10d      	bne.n	8007248 <HAL_UART_Receive+0xe8>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d104      	bne.n	800723e <HAL_UART_Receive+0xde>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	227f      	movs	r2, #127	; 0x7f
 8007238:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800723c:	e008      	b.n	8007250 <HAL_UART_Receive+0xf0>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	223f      	movs	r2, #63	; 0x3f
 8007242:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007246:	e003      	b.n	8007250 <HAL_UART_Receive+0xf0>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007256:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007260:	d108      	bne.n	8007274 <HAL_UART_Receive+0x114>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	61bb      	str	r3, [r7, #24]
 8007272:	e003      	b.n	800727c <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007278:	2300      	movs	r3, #0
 800727a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800727c:	e036      	b.n	80072ec <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	2120      	movs	r1, #32
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fb7b 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d005      	beq.n	80072a0 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2220      	movs	r2, #32
 8007298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e032      	b.n	8007306 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10c      	bne.n	80072c0 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	8a7b      	ldrh	r3, [r7, #18]
 80072b0:	4013      	ands	r3, r2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	3302      	adds	r3, #2
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e00c      	b.n	80072da <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	8a7b      	ldrh	r3, [r7, #18]
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	4013      	ands	r3, r2
 80072ce:	b2da      	uxtb	r2, r3
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1c2      	bne.n	800727e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
	...

08007310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007314:	b094      	sub	sp, #80	; 0x50
 8007316:	af00      	add	r7, sp, #0
 8007318:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4b78      	ldr	r3, [pc, #480]	; (8007508 <UART_SetConfig+0x1f8>)
 8007326:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	431a      	orrs	r2, r3
 8007332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	431a      	orrs	r2, r3
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	4313      	orrs	r3, r2
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4971      	ldr	r1, [pc, #452]	; (800750c <UART_SetConfig+0x1fc>)
 8007348:	4019      	ands	r1, r3
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007350:	430b      	orrs	r3, r1
 8007352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	68d9      	ldr	r1, [r3, #12]
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	ea40 0301 	orr.w	r3, r0, r1
 800736a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	4b64      	ldr	r3, [pc, #400]	; (8007508 <UART_SetConfig+0x1f8>)
 8007378:	429a      	cmp	r2, r3
 800737a:	d009      	beq.n	8007390 <UART_SetConfig+0x80>
 800737c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	4b63      	ldr	r3, [pc, #396]	; (8007510 <UART_SetConfig+0x200>)
 8007382:	429a      	cmp	r2, r3
 8007384:	d004      	beq.n	8007390 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007388:	6a1a      	ldr	r2, [r3, #32]
 800738a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738c:	4313      	orrs	r3, r2
 800738e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800739a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073a4:	430b      	orrs	r3, r1
 80073a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80073a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	f023 000f 	bic.w	r0, r3, #15
 80073b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	ea40 0301 	orr.w	r3, r0, r1
 80073be:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	4b53      	ldr	r3, [pc, #332]	; (8007514 <UART_SetConfig+0x204>)
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d102      	bne.n	80073d0 <UART_SetConfig+0xc0>
 80073ca:	2301      	movs	r3, #1
 80073cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ce:	e066      	b.n	800749e <UART_SetConfig+0x18e>
 80073d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	4b50      	ldr	r3, [pc, #320]	; (8007518 <UART_SetConfig+0x208>)
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d102      	bne.n	80073e0 <UART_SetConfig+0xd0>
 80073da:	2302      	movs	r3, #2
 80073dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073de:	e05e      	b.n	800749e <UART_SetConfig+0x18e>
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	4b4d      	ldr	r3, [pc, #308]	; (800751c <UART_SetConfig+0x20c>)
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d102      	bne.n	80073f0 <UART_SetConfig+0xe0>
 80073ea:	2304      	movs	r3, #4
 80073ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80073ee:	e056      	b.n	800749e <UART_SetConfig+0x18e>
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	4b4a      	ldr	r3, [pc, #296]	; (8007520 <UART_SetConfig+0x210>)
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d102      	bne.n	8007400 <UART_SetConfig+0xf0>
 80073fa:	2308      	movs	r3, #8
 80073fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073fe:	e04e      	b.n	800749e <UART_SetConfig+0x18e>
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	4b47      	ldr	r3, [pc, #284]	; (8007524 <UART_SetConfig+0x214>)
 8007406:	429a      	cmp	r2, r3
 8007408:	d102      	bne.n	8007410 <UART_SetConfig+0x100>
 800740a:	2310      	movs	r3, #16
 800740c:	64bb      	str	r3, [r7, #72]	; 0x48
 800740e:	e046      	b.n	800749e <UART_SetConfig+0x18e>
 8007410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	4b44      	ldr	r3, [pc, #272]	; (8007528 <UART_SetConfig+0x218>)
 8007416:	429a      	cmp	r2, r3
 8007418:	d102      	bne.n	8007420 <UART_SetConfig+0x110>
 800741a:	2320      	movs	r3, #32
 800741c:	64bb      	str	r3, [r7, #72]	; 0x48
 800741e:	e03e      	b.n	800749e <UART_SetConfig+0x18e>
 8007420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	4b41      	ldr	r3, [pc, #260]	; (800752c <UART_SetConfig+0x21c>)
 8007426:	429a      	cmp	r2, r3
 8007428:	d102      	bne.n	8007430 <UART_SetConfig+0x120>
 800742a:	2340      	movs	r3, #64	; 0x40
 800742c:	64bb      	str	r3, [r7, #72]	; 0x48
 800742e:	e036      	b.n	800749e <UART_SetConfig+0x18e>
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	4b3e      	ldr	r3, [pc, #248]	; (8007530 <UART_SetConfig+0x220>)
 8007436:	429a      	cmp	r2, r3
 8007438:	d102      	bne.n	8007440 <UART_SetConfig+0x130>
 800743a:	2380      	movs	r3, #128	; 0x80
 800743c:	64bb      	str	r3, [r7, #72]	; 0x48
 800743e:	e02e      	b.n	800749e <UART_SetConfig+0x18e>
 8007440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b3b      	ldr	r3, [pc, #236]	; (8007534 <UART_SetConfig+0x224>)
 8007446:	429a      	cmp	r2, r3
 8007448:	d103      	bne.n	8007452 <UART_SetConfig+0x142>
 800744a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800744e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007450:	e025      	b.n	800749e <UART_SetConfig+0x18e>
 8007452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4b38      	ldr	r3, [pc, #224]	; (8007538 <UART_SetConfig+0x228>)
 8007458:	429a      	cmp	r2, r3
 800745a:	d103      	bne.n	8007464 <UART_SetConfig+0x154>
 800745c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007460:	64bb      	str	r3, [r7, #72]	; 0x48
 8007462:	e01c      	b.n	800749e <UART_SetConfig+0x18e>
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b34      	ldr	r3, [pc, #208]	; (800753c <UART_SetConfig+0x22c>)
 800746a:	429a      	cmp	r2, r3
 800746c:	d103      	bne.n	8007476 <UART_SetConfig+0x166>
 800746e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007472:	64bb      	str	r3, [r7, #72]	; 0x48
 8007474:	e013      	b.n	800749e <UART_SetConfig+0x18e>
 8007476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b31      	ldr	r3, [pc, #196]	; (8007540 <UART_SetConfig+0x230>)
 800747c:	429a      	cmp	r2, r3
 800747e:	d103      	bne.n	8007488 <UART_SetConfig+0x178>
 8007480:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007484:	64bb      	str	r3, [r7, #72]	; 0x48
 8007486:	e00a      	b.n	800749e <UART_SetConfig+0x18e>
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <UART_SetConfig+0x1f8>)
 800748e:	429a      	cmp	r2, r3
 8007490:	d103      	bne.n	800749a <UART_SetConfig+0x18a>
 8007492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007496:	64bb      	str	r3, [r7, #72]	; 0x48
 8007498:	e001      	b.n	800749e <UART_SetConfig+0x18e>
 800749a:	2300      	movs	r3, #0
 800749c:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800749e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	4b19      	ldr	r3, [pc, #100]	; (8007508 <UART_SetConfig+0x1f8>)
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d005      	beq.n	80074b4 <UART_SetConfig+0x1a4>
 80074a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	4b18      	ldr	r3, [pc, #96]	; (8007510 <UART_SetConfig+0x200>)
 80074ae:	429a      	cmp	r2, r3
 80074b0:	f040 8094 	bne.w	80075dc <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80074b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b6:	2200      	movs	r2, #0
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	627a      	str	r2, [r7, #36]	; 0x24
 80074bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80074c0:	f7fd f974 	bl	80047ac <HAL_RCCEx_GetPeriphCLKFreq>
 80074c4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80074c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	f000 80f7 	beq.w	80076bc <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <UART_SetConfig+0x234>)
 80074d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d8:	461a      	mov	r2, r3
 80074da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074e0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	4613      	mov	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	4413      	add	r3, r2
 80074ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d305      	bcc.n	80074fe <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80074f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80074f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d924      	bls.n	8007548 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007504:	e069      	b.n	80075da <UART_SetConfig+0x2ca>
 8007506:	bf00      	nop
 8007508:	44002400 	.word	0x44002400
 800750c:	cfff69f3 	.word	0xcfff69f3
 8007510:	54002400 	.word	0x54002400
 8007514:	40013800 	.word	0x40013800
 8007518:	40004400 	.word	0x40004400
 800751c:	40004800 	.word	0x40004800
 8007520:	40004c00 	.word	0x40004c00
 8007524:	40005000 	.word	0x40005000
 8007528:	40006400 	.word	0x40006400
 800752c:	40007800 	.word	0x40007800
 8007530:	40007c00 	.word	0x40007c00
 8007534:	40008000 	.word	0x40008000
 8007538:	40006800 	.word	0x40006800
 800753c:	40006c00 	.word	0x40006c00
 8007540:	40008400 	.word	0x40008400
 8007544:	08007dbc 	.word	0x08007dbc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800754a:	2200      	movs	r2, #0
 800754c:	61bb      	str	r3, [r7, #24]
 800754e:	61fa      	str	r2, [r7, #28]
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007554:	4a64      	ldr	r2, [pc, #400]	; (80076e8 <UART_SetConfig+0x3d8>)
 8007556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800755a:	b29b      	uxth	r3, r3
 800755c:	2200      	movs	r2, #0
 800755e:	613b      	str	r3, [r7, #16]
 8007560:	617a      	str	r2, [r7, #20]
 8007562:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800756a:	f7f8 fe8f 	bl	800028c <__aeabi_uldivmod>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4610      	mov	r0, r2
 8007574:	4619      	mov	r1, r3
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	020b      	lsls	r3, r1, #8
 8007580:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007584:	0202      	lsls	r2, r0, #8
 8007586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007588:	6849      	ldr	r1, [r1, #4]
 800758a:	0849      	lsrs	r1, r1, #1
 800758c:	2000      	movs	r0, #0
 800758e:	460c      	mov	r4, r1
 8007590:	4605      	mov	r5, r0
 8007592:	eb12 0804 	adds.w	r8, r2, r4
 8007596:	eb43 0905 	adc.w	r9, r3, r5
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	60bb      	str	r3, [r7, #8]
 80075a2:	60fa      	str	r2, [r7, #12]
 80075a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f8 fe6e 	bl	800028c <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4613      	mov	r3, r2
 80075b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075be:	d308      	bcc.n	80075d2 <UART_SetConfig+0x2c2>
 80075c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c6:	d204      	bcs.n	80075d2 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80075ce:	60da      	str	r2, [r3, #12]
 80075d0:	e003      	b.n	80075da <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80075d8:	e070      	b.n	80076bc <UART_SetConfig+0x3ac>
 80075da:	e06f      	b.n	80076bc <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d13c      	bne.n	8007660 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80075e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e8:	2200      	movs	r2, #0
 80075ea:	603b      	str	r3, [r7, #0]
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f2:	f7fd f8db 	bl	80047ac <HAL_RCCEx_GetPeriphCLKFreq>
 80075f6:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d05e      	beq.n	80076bc <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	4a39      	ldr	r2, [pc, #228]	; (80076e8 <UART_SetConfig+0x3d8>)
 8007604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007608:	461a      	mov	r2, r3
 800760a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800760c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007610:	005a      	lsls	r2, r3, #1
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	441a      	add	r2, r3
 800761a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007622:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007626:	2b0f      	cmp	r3, #15
 8007628:	d916      	bls.n	8007658 <UART_SetConfig+0x348>
 800762a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007630:	d212      	bcs.n	8007658 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	b29b      	uxth	r3, r3
 8007636:	f023 030f 	bic.w	r3, r3, #15
 800763a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800763c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	b29b      	uxth	r3, r3
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	b29a      	uxth	r2, r3
 8007648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800764a:	4313      	orrs	r3, r2
 800764c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800764e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	e031      	b.n	80076bc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800765e:	e02d      	b.n	80076bc <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007662:	2200      	movs	r2, #0
 8007664:	469a      	mov	sl, r3
 8007666:	4693      	mov	fp, r2
 8007668:	4650      	mov	r0, sl
 800766a:	4659      	mov	r1, fp
 800766c:	f7fd f89e 	bl	80047ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007670:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d021      	beq.n	80076bc <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <UART_SetConfig+0x3d8>)
 800767e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007682:	461a      	mov	r2, r3
 8007684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007686:	fbb3 f2f2 	udiv	r2, r3, r2
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	441a      	add	r2, r3
 8007692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	fbb2 f3f3 	udiv	r3, r2, r3
 800769a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800769c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769e:	2b0f      	cmp	r3, #15
 80076a0:	d909      	bls.n	80076b6 <UART_SetConfig+0x3a6>
 80076a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d205      	bcs.n	80076b6 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e002      	b.n	80076bc <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	2201      	movs	r2, #1
 80076c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	2200      	movs	r2, #0
 80076d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80076d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d4:	2200      	movs	r2, #0
 80076d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80076d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3750      	adds	r7, #80	; 0x50
 80076e0:	46bd      	mov	sp, r7
 80076e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e6:	bf00      	nop
 80076e8:	08007dbc 	.word	0x08007dbc

080076ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01a      	beq.n	8007802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ea:	d10a      	bne.n	8007802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b098      	sub	sp, #96	; 0x60
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007840:	f7f9 fa18 	bl	8000c74 <HAL_GetTick>
 8007844:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b08      	cmp	r3, #8
 8007852:	d12f      	bne.n	80078b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007854:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800785c:	2200      	movs	r2, #0
 800785e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f88e 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d022      	beq.n	80078b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007882:	653b      	str	r3, [r7, #80]	; 0x50
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	647b      	str	r3, [r7, #68]	; 0x44
 800788e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007892:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800789a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e063      	b.n	800797c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d149      	bne.n	8007956 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ca:	2200      	movs	r2, #0
 80078cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f857 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d03c      	beq.n	8007956 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fa:	633b      	str	r3, [r7, #48]	; 0x30
 80078fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e6      	bne.n	80078dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	60fb      	str	r3, [r7, #12]
   return(result);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800792e:	61fa      	str	r2, [r7, #28]
 8007930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	617b      	str	r3, [r7, #20]
   return(result);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e5      	bne.n	800790e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e012      	b.n	800797c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3758      	adds	r7, #88	; 0x58
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4613      	mov	r3, r2
 8007992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007994:	e049      	b.n	8007a2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800799c:	d045      	beq.n	8007a2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7f9 f969 	bl	8000c74 <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e048      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d031      	beq.n	8007a2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69db      	ldr	r3, [r3, #28]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b08      	cmp	r3, #8
 80079d2:	d110      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2208      	movs	r2, #8
 80079da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f838 	bl	8007a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2208      	movs	r2, #8
 80079e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e029      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a04:	d111      	bne.n	8007a2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f81e 	bl	8007a52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e00f      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69da      	ldr	r2, [r3, #28]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	68ba      	ldr	r2, [r7, #8]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	bf0c      	ite	eq
 8007a3a:	2301      	moveq	r3, #1
 8007a3c:	2300      	movne	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	461a      	mov	r2, r3
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d0a6      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b095      	sub	sp, #84	; 0x54
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	461a      	mov	r2, r3
 8007a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a78:	643b      	str	r3, [r7, #64]	; 0x40
 8007a7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a80:	e841 2300 	strex	r3, r2, [r1]
 8007a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1e6      	bne.n	8007a5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	3308      	adds	r3, #8
 8007a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	e853 3f00 	ldrex	r3, [r3]
 8007a9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e3      	bne.n	8007a8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d118      	bne.n	8007afe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	e853 3f00 	ldrex	r3, [r3]
 8007ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	f023 0310 	bic.w	r3, r3, #16
 8007ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aee:	6979      	ldr	r1, [r7, #20]
 8007af0:	69ba      	ldr	r2, [r7, #24]
 8007af2:	e841 2300 	strex	r3, r2, [r1]
 8007af6:	613b      	str	r3, [r7, #16]
   return(result);
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1e6      	bne.n	8007acc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007b12:	bf00      	nop
 8007b14:	3754      	adds	r7, #84	; 0x54
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d101      	bne.n	8007b34 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b30:	2302      	movs	r3, #2
 8007b32:	e027      	b.n	8007b84 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	; 0x24
 8007b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0201 	bic.w	r2, r2, #1
 8007b5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2220      	movs	r2, #32
 8007b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e02d      	b.n	8007c04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2224      	movs	r2, #36	; 0x24
 8007bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f022 0201 	bic.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f84f 	bl	8007c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2220      	movs	r2, #32
 8007bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e02d      	b.n	8007c80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2224      	movs	r2, #36	; 0x24
 8007c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	683a      	ldr	r2, [r7, #0]
 8007c5c:	430a      	orrs	r2, r1
 8007c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f811 	bl	8007c88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2220      	movs	r2, #32
 8007c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d108      	bne.n	8007caa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007ca8:	e031      	b.n	8007d0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007caa:	2308      	movs	r3, #8
 8007cac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cae:	2308      	movs	r3, #8
 8007cb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	0e5b      	lsrs	r3, r3, #25
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f003 0307 	and.w	r3, r3, #7
 8007cc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	0f5b      	lsrs	r3, r3, #29
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	7b3a      	ldrb	r2, [r7, #12]
 8007cd6:	4911      	ldr	r1, [pc, #68]	; (8007d1c <UARTEx_SetNbDataToProcess+0x94>)
 8007cd8:	5c8a      	ldrb	r2, [r1, r2]
 8007cda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cde:	7b3a      	ldrb	r2, [r7, #12]
 8007ce0:	490f      	ldr	r1, [pc, #60]	; (8007d20 <UARTEx_SetNbDataToProcess+0x98>)
 8007ce2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ce4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	7b7a      	ldrb	r2, [r7, #13]
 8007cf4:	4909      	ldr	r1, [pc, #36]	; (8007d1c <UARTEx_SetNbDataToProcess+0x94>)
 8007cf6:	5c8a      	ldrb	r2, [r1, r2]
 8007cf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007cfc:	7b7a      	ldrb	r2, [r7, #13]
 8007cfe:	4908      	ldr	r1, [pc, #32]	; (8007d20 <UARTEx_SetNbDataToProcess+0x98>)
 8007d00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d02:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	08007dd4 	.word	0x08007dd4
 8007d20:	08007ddc 	.word	0x08007ddc

08007d24 <memset>:
 8007d24:	4402      	add	r2, r0
 8007d26:	4603      	mov	r3, r0
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d100      	bne.n	8007d2e <memset+0xa>
 8007d2c:	4770      	bx	lr
 8007d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d32:	e7f9      	b.n	8007d28 <memset+0x4>

08007d34 <__libc_init_array>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	4d0d      	ldr	r5, [pc, #52]	; (8007d6c <__libc_init_array+0x38>)
 8007d38:	2600      	movs	r6, #0
 8007d3a:	4c0d      	ldr	r4, [pc, #52]	; (8007d70 <__libc_init_array+0x3c>)
 8007d3c:	1b64      	subs	r4, r4, r5
 8007d3e:	10a4      	asrs	r4, r4, #2
 8007d40:	42a6      	cmp	r6, r4
 8007d42:	d109      	bne.n	8007d58 <__libc_init_array+0x24>
 8007d44:	4d0b      	ldr	r5, [pc, #44]	; (8007d74 <__libc_init_array+0x40>)
 8007d46:	2600      	movs	r6, #0
 8007d48:	4c0b      	ldr	r4, [pc, #44]	; (8007d78 <__libc_init_array+0x44>)
 8007d4a:	f000 f817 	bl	8007d7c <_init>
 8007d4e:	1b64      	subs	r4, r4, r5
 8007d50:	10a4      	asrs	r4, r4, #2
 8007d52:	42a6      	cmp	r6, r4
 8007d54:	d105      	bne.n	8007d62 <__libc_init_array+0x2e>
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5c:	3601      	adds	r6, #1
 8007d5e:	4798      	blx	r3
 8007d60:	e7ee      	b.n	8007d40 <__libc_init_array+0xc>
 8007d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d66:	3601      	adds	r6, #1
 8007d68:	4798      	blx	r3
 8007d6a:	e7f2      	b.n	8007d52 <__libc_init_array+0x1e>
 8007d6c:	08007dec 	.word	0x08007dec
 8007d70:	08007dec 	.word	0x08007dec
 8007d74:	08007dec 	.word	0x08007dec
 8007d78:	08007df0 	.word	0x08007df0

08007d7c <_init>:
 8007d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d7e:	bf00      	nop
 8007d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d82:	bc08      	pop	{r3}
 8007d84:	469e      	mov	lr, r3
 8007d86:	4770      	bx	lr

08007d88 <_fini>:
 8007d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8a:	bf00      	nop
 8007d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8e:	bc08      	pop	{r3}
 8007d90:	469e      	mov	lr, r3
 8007d92:	4770      	bx	lr
